     1                                  ;
     2                                  ;   test386.asm
     3                                  ;   Copyright (C) 2012-2015 Jeff Parsons <Jeff@pcjs.org>
     4                                  ;   Copyright (C) 2017-2019 Marco Bortolin <barotto@gmail.com>
     5                                  ;
     6                                  ;   This file is a derivative work of PCjs
     7                                  ;   http://pcjs.org/tests/pcx86/80386/test386.asm
     8                                  ;
     9                                  ;   test386.asm is free software: you can redistribute it and/or modify it under
    10                                  ;   the terms of the GNU General Public License as published by the Free
    11                                  ;   Software Foundation, either version 3 of the License, or (at your option)
    12                                  ;   any later version.
    13                                  ;
    14                                  ;   test386.asm is distributed in the hope that it will be useful, but WITHOUT ANY
    15                                  ;   WARRANTY without even the implied warranty of MERCHANTABILITY or FITNESS
    16                                  ;   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    17                                  ;   details.
    18                                  ;
    19                                  ;   You should have received a copy of the GNU General Public License along with
    20                                  ;   test386.asm.  If not see <http://www.gnu.org/licenses/gpl.html>.
    21                                  ;
    22                                  ;   This program was originally developed for IBMulator
    23                                  ;   http://barotto.github.io/IBMulator
    24                                  ;
    25                                  ;   Overview
    26                                  ;   --------
    27                                  ;   This file is designed to run as a test ROM, loaded in place of the BIOS.
    28                                  ;   Its pourpose is to test the CPU, reporting its status to the POST port and
    29                                  ;   to the printer/serial port.
    30                                  ;   A 80386 or later CPU is required. This ROM is designed to test an emulator
    31                                  ;   CPU and was never tested on a real hardware.
    32                                  ;
    33                                  ;   It must be installed at physical address 0xf0000 and aliased at physical
    34                                  ;   address 0xffff0000.  The jump at resetVector should align with the CPU reset
    35                                  ;   address 0xfffffff0, which will transfer control to f000:0045.  From that
    36                                  ;   point on, all memory accesses should remain within the first 1MB.
    37                                  ;
    38                                  
    39                                  ;
    40                                  ; WARNING
    41                                  ;
    42                                  ;   A word of caution before you start developing.
    43                                  ;   NASM (2.11.08) generates [ebp + ebp] for [ebp*2] (i.e. no base register),
    44                                  ;   which are not the same thing: [ebp+ebp] references the SS segment, [ebp*2]
    45                                  ;   references the DS segment.
    46                                  ;   NASM developers think [ebp*2] and [ebp+ebp] are the same, but that is true
    47                                  ;   only assuming a flat memory model. Until the time NASM authors realize their
    48                                  ;   mistake (any assumption of a flat memory model should be optional), you can
    49                                  ;   disable this behaviour by writing: [nosplit ebp*2].
    50                                  ;
    51                                  ;	NASM Assembly            Translated               Assembled
    52                                  ;	mov eax,[ebp*2]          mov eax,[ebp+ebp*1+0x0]  8B442D00
    53                                  ;	mov eax,[nosplit ebp*2]  mov eax,[ebp*2+0x0]      8B046D00000000
    54                                  ;
    55                                  
    56                                  %define COPYRIGHT 'test386.asm (C) 2012-2015 Jeff Parsons, (C) 2017-2019 Marco Bortolin '
    57                                  %define RELEASE   '??/??/19'
    58                                  
    59                                  	cpu 386
    60                                  	section .text
    61                                  
    62                                  	%include "configuration.asm"
     1                              <1> ; ==============================================================================
     2                              <1> ;   CONFIGURATION
     3                              <1> ;
     4                              <1> ;   If your system needs a specific LPT or COM initialization procedure put it
     5                              <1> ;   inside the print_init.asm file.
     6                              <1> ;
     7                              <1> ; ==============================================================================
     8                              <1> 
     9                              <1> ; The diagnostic port used to emit the current test procedure number.
    10                              <1> ; Possible values: the 16-bit value of the diagnostic port of your system.
    11                              <1> POST_PORT equ 0x190
    12                              <1> 
    13                              <1> ; The parallel port to use to print ASCII computational results.
    14                              <1> ; Possible values: 0=disabled, 1=LPT1 (3BCh), 2=LPT2 (378h), 3=LPT3 (278h)
    15                              <1> LPT_PORT equ 1
    16                              <1> 
    17                              <1> ; The serial port to use to print ASCII computational results.
    18                              <1> ; Possible values: 0=disabled, 1=COM1 (3F8h-3FDh), 2=COM2 (2F8h-2FDh)
    19                              <1> COM_PORT equ 0
    20                              <1> 
    21                              <1> ; Additional port for direct ASCII output.
    22                              <1> ; Possible values: any 16-bit value, 0=disabled.
    23                              <1> OUT_PORT equ 0
    24                              <1> 
    25                              <1> ; Enable POST E0 test for undefined behaviours and bugs. You also need to
    26                              <1> ; specify the CPU model your emulator implements (see CPU_FAMILY).
    27                              <1> ; Possible values: 1=enable POST E0, 0=skip the tests
    28                              <1> TEST_UNDEF equ 0
    29                              <1> 
    30                              <1> ; The CPU family option is used only when POST E0 is enabled.
    31                              <1> ; Possible values: 3=80386
    32                              <1> CPU_FAMILY equ 3
    33                              <1> 
    34                              <1> ; The Bochs x86 PC emulator behaves differently than real hardware in the ARPL
    35                              <1> ; operation and fails on that specific test. Enable this Equ if you want to use
    36                              <1> ; Bochs.
    37                              <1> ; Possible values: 1=enable Bochs, 0=disable Bochs
    38                              <1> BOCHS equ 0
    39                              <1> 
    40                              <1> ; The IBM PS/1 needs special commands to initialize LPT and COM ports.
    41                              <1> ; Possible values: 1=enable PS/1 initialization, 0=your machine is not a PS/1
    42                              <1> IBM_PS1 equ 0
    43                              <1> 
    44                              <1> ; Enable some additional text output on the output ports (useful for test386.asm
    45                              <1> ; debugging).
    46                              <1> DEBUG equ 0
    47                              <1> 
    48                              <1> 
    49                              <1> ; == END OF CONFIGURATION ======================================================
    63                                  	%include "x86_e.asm"
     1                              <1> PS_CF       equ 0x0001
     2                              <1> PS_PF       equ 0x0004
     3                              <1> PS_AF       equ 0x0010
     4                              <1> PS_ZF       equ 0x0040
     5                              <1> PS_SF       equ 0x0080
     6                              <1> PS_TF       equ 0x0100
     7                              <1> PS_IF       equ 0x0200
     8                              <1> PS_DF       equ 0x0400
     9                              <1> PS_OF       equ 0x0800
    10                              <1> PS_ARITH    equ (PS_CF | PS_PF | PS_AF | PS_ZF | PS_SF | PS_OF)
    11                              <1> PS_LOGIC    equ (PS_CF | PS_PF | PS_ZF | PS_SF | PS_OF)
    12                              <1> PS_MULTIPLY equ (PS_CF | PS_OF) ; only CF and OF are "defined" following MUL or IMUL
    13                              <1> PS_DIVIDE   equ 0 ; none of the Processor Status flags are "defined" following DIV or IDIV
    14                              <1> PS_SHIFTS_1 equ (PS_CF | PS_SF | PS_ZF | PS_PF | PS_OF)
    15                              <1> PS_SHIFTS_R equ (PS_CF | PS_SF | PS_ZF | PS_PF)
    16                              <1> 
    17                              <1> CR0_MSW_PE  equ 0x0001
    18                              <1> CR0_PG      equ 0x80000000	; set if paging enabled
    19                              <1> 
    20                              <1> ACC_TYPE_GATE386_INT  equ 0x0E00
    21                              <1> ACC_TYPE_GATE386_CALL equ 0x0C00
    22                              <1> ACC_TYPE_SEG         equ 0x1000
    23                              <1> ACC_PRESENT          equ 0x8000
    24                              <1> ACC_TYPE_CODE_R      equ 0x1a00
    25                              <1> ACC_TYPE_CONFORMING  equ 0x0400
    26                              <1> ACC_TYPE_DATA_R      equ 0x1000
    27                              <1> ACC_TYPE_DATA_W      equ 0x1200
    28                              <1> ACC_TYPE_LDT         equ 0x0200
    29                              <1> ACC_TYPE_TSS         equ 0x0900
    30                              <1> 
    31                              <1> ACC_DPL_0 equ 0x0000
    32                              <1> ACC_DPL_1 equ 0x2000
    33                              <1> ACC_DPL_2 equ 0x4000
    34                              <1> ACC_DPL_3 equ 0x6000
    35                              <1> 
    36                              <1> EXT_NONE  equ 0x0000
    37                              <1> EXT_16BIT equ EXT_NONE
    38                              <1> EXT_32BIT equ 0x0040 ; size bit
    39                              <1> EXT_PAGE  equ 0x0080 ; granularity bit
    40                              <1> 
    41                              <1> PTE_FRAME     equ 0xfffff000
    42                              <1> PTE_DIRTY     equ 0x00000040 ; page has been modified
    43                              <1> PTE_ACCESSED  equ 0x00000020 ; page has been accessed
    44                              <1> PTE_USER      equ 0x00000004 ; set for user level (CPL 3), clear for supervisor level (CPL 0-2)
    45                              <1> PTE_WRITE     equ 0x00000002 ; set for read/write, clear for read-only (affects CPL 3 only)
    46                              <1> PTE_PRESENT   equ 0x00000001 ; set for present page, clear for not-present page
    47                              <1> 
    48                              <1> PTE_PRESENT_BIT   equ 0000001b
    49                              <1> PTE_WRITE_BIT     equ 0000010b
    50                              <1> PTE_USER_BIT      equ 0000100b
    51                              <1> PTE_ACCESSED_BIT  equ 0100000b
    52                              <1> PTE_DIRTY_BIT     equ 1000000b
    53                              <1> 
    54                              <1> EX_DE equ 0
    55                              <1> EX_DB equ 1
    56                              <1> EX_BP equ 3
    57                              <1> EX_OF equ 4
    58                              <1> EX_BR equ 5
    59                              <1> EX_UD equ 6
    60                              <1> EX_NM equ 7
    61                              <1> EX_DF equ 8
    62                              <1> EX_MP equ 9
    63                              <1> EX_TS equ 10
    64                              <1> EX_NP equ 11
    65                              <1> EX_SS equ 12
    66                              <1> EX_GP equ 13
    67                              <1> EX_PF equ 14
    68                              <1> EX_MF equ 15
    69                              <1> 
    64                                  	%include "macros_m.asm"
     1                              <1> ;
     2                              <1> ;   Output a byte to the POST port, destroys al and dx
     3                              <1> ;
     4                              <1> %macro POST 1
     5                              <1> 	mov al, 0x%1
     6                              <1> 	mov dx, POST_PORT
     7                              <1> 	out dx, al
     8                              <1> %endmacro
     9                              <1> 
    10                              <1> ;
    11                              <1> ; Initializes an interrupt gate in system memory.
    12                              <1> ; This is the body of procedures used in 16 and 32-bit code segments.
    13                              <1> ;
    14                              <1> ;    7                             0 7                             0
    15                              <1> ;   ╔═══════════════════════════════╤═══════════════════════════════╗
    16                              <1> ; +7║                          OFFSET 31-16                         ║+6
    17                              <1> ;   ╟───┬───────┬───┬───────────────┬───────────────────────────────╢
    18                              <1> ; +5║ P │  DPL  │ 0 │ 1   1   1   0 │            UNUSED             ║+4
    19                              <1> ;   ╟───┴───┴───┴───┴───┴───┴───┴───┴───────────────────────────────╢
    20                              <1> ; +3║                           SELECTOR                            ║+2
    21                              <1> ;   ╟───────────────────────────────┴───────────────────────────────╢
    22                              <1> ; +1║                          OFFSET 15-0                          ║ 0
    23                              <1> ;   ╚═══════════════════════════════╧═══════════════════════════════╝
    24                              <1> ;    15                                                            0
    25                              <1> ;
    26                              <1> ; DS:EBX pointer to IDT
    27                              <1> ; EAX vector
    28                              <1> ; ESI selector
    29                              <1> ; EDI offset
    30                              <1> ; DX DPL (use ACC_DPL_* equs)
    31                              <1> ;
    32                              <1> %macro initIntGate 0
    33                              <1> 	shl    eax, 3
    34                              <1> 	add    ebx, eax
    35                              <1> 	mov    word [ebx], di ; OFFSET 15-0
    36                              <1> 	mov    word [ebx+2], si ; SELECTOR
    37                              <1> 	or     dx, ACC_TYPE_GATE386_INT | ACC_PRESENT
    38                              <1> 	mov    word [ebx+4], dx
    39                              <1> 	shr    edi, 16
    40                              <1> 	mov    word [ebx+6], di ; OFFSET 31-16
    41                              <1> %endmacro
    42                              <1> 
    43                              <1> ;
    44                              <1> ; Set a descriptor in system memory.
    45                              <1> ; This is the body of procedures used in 16 and 32-bit code segments.
    46                              <1> ;
    47                              <1> ;    7                             0 7                             0
    48                              <1> ;   ╔═══════════════════════════════╤═══╤═══╤═══╤═══╤═══════════════╗
    49                              <1> ; +7║            BASE 31-24         │ G │B/D│ 0 │AVL│  LIMIT 19-16  ║+6
    50                              <1> ;   ╟───┬───────┬───┬───────────┬───┼───┴───┴───┴───┴───┴───┴───┴───╢
    51                              <1> ; +5║ P │  DPL  │ S │    TYPE    (A)│          BASE 23-16           ║+4
    52                              <1> ;   ╟───┴───┴───┴───┴───┴───┴───┴───┴───────────────────────────────╢
    53                              <1> ; +3║                           BASE 15-0                           ║+2
    54                              <1> ;   ╟───────────────────────────────┴───────────────────────────────╢
    55                              <1> ; +1║                           LIMIT 15-0                          ║ 0
    56                              <1> ;   ╚═══════════════════════════════╧═══════════════════════════════╝
    57                              <1> ;    15                                                            0
    58                              <1> ;
    59                              <1> ; DS:EBX pointer to the descriptor table
    60                              <1> ; EAX segment selector
    61                              <1> ; ESI base
    62                              <1> ; EDI limit
    63                              <1> ; DL ext nibble (upper 4 bits)
    64                              <1> ; DH acc byte (P|DPL|S|TYPE|A)
    65                              <1> ;
    66                              <1> %macro initDescriptor 0
    67                              <1> 	and    eax, 0xFFF8
    68                              <1> 	add    ebx, eax
    69                              <1> 	mov    word [ebx], di   ; LIMIT 15-0
    70                              <1> 	mov    word [ebx+2], si ; BASE 15-0
    71                              <1> 	shr    esi, 16
    72                              <1> 	mov    ax, si           ; AX := BASE 31-16
    73                              <1> 	mov    byte [ebx+4], al ; BASE 23-16
    74                              <1> 	mov    byte [ebx+5], dh ; acc byte
    75                              <1> 	shr    edi, 16
    76                              <1> 	mov    cx, di
    77                              <1> 	and    cl, 0x0f
    78                              <1> 	mov    byte [ebx+6], cl ; LIMIT 19-16
    79                              <1> 	and    dl, 0xf0
    80                              <1> 	or     byte [ebx+6], dl ; ext nibble
    81                              <1> 	mov    byte [ebx+7], ah ; BASE 31-24
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> 
    85                              <1> %macro advTestBase 0
    86                              <1> 	%assign TEST_BASE1 TEST_BASE1+0x1000
    87                              <1> 	%assign TEST_BASE2 TEST_BASE2+0x1000
    88                              <1> %endmacro
    65                                  
    66                                  	bits 16
    67                                  
    68                                  ;
    69                                  ; memory map:
    70                                  ;  00000-003FF real mode IDT
    71                                  ;  00400-004FF protected mode IDT
    72                                  ;  00500-0077F protected mode GDT
    73                                  ;  00800-00FFF protected mode LDT
    74                                  ;  01000-01FFF page directory
    75                                  ;  02000-02FFF page table 0
    76                                  ;  03000-03FFF page table 1
    77                                  ;  04000-04FFF TSS
    78                                  ;  10000-1FFFF stack
    79                                  ;  20000-9FFFF tests
    80                                  ;
    81                                  
    82                                  TEST_BASE  equ 0x20000
    83                                  %assign TEST_BASE1 TEST_BASE+0x00000
    84                                  %assign TEST_BASE2 TEST_BASE+0x40000
    85                                  
    86                                  ;
    87                                  ;   Real mode segments
    88                                  ;
    89                                  C_SEG_REAL   equ 0xf000
    90                                  S_SEG_REAL   equ 0x1000
    91                                  IDT_SEG_REAL equ 0x0040
    92                                  GDT_SEG_REAL equ 0x0050
    93                                  GDT_SEG_LIMIT equ 0x2FF
    94                                  %assign D1_SEG_REAL TEST_BASE1 >> 4
    95                                  %assign D2_SEG_REAL TEST_BASE2 >> 4
    96                                  
    97                                  ESP_REAL    equ 0xffff
    98                                  
    99                                  
   100                                  header:
   101 00000000 746573743338362E61-     	db COPYRIGHT
   101 00000009 736D20284329203230-
   101 00000012 31322D32303135204A-
   101 0000001B 65666620506172736F-
   101 00000024 6E732C202843292032-
   101 0000002D 3031372D3230313920-
   101 00000036 4D6172636F20426F72-
   101 0000003F 746F6C696E20       
   102                                  
   103                                  cpuTest:
   104 00000045 FA                      	cli
   105                                  
   106                                  
   107                                  ; ==============================================================================
   108                                  ;	Real mode tests
   109                                  ; ==============================================================================
   110                                  
   111                                  %include "real_m.asm"
     1                              <1> ;
     2                              <1> ; Advances the base address of data segments used by tests, D1_SEG_REAL and
     3                              <1> ; D2_SEG_REAL.
     4                              <1> ;
     5                              <1> ; Loads DS with D1_SEG_REAL and ES with D2_SEG_REAL.
     6                              <1> ;
     7                              <1> %macro advTestSegReal 0
     8                              <1> 	advTestBase
     9                              <1> 	%assign D1_SEG_REAL TEST_BASE1 >> 4
    10                              <1> 	%assign D2_SEG_REAL TEST_BASE2 >> 4
    11                              <1> 	mov    dx, D1_SEG_REAL
    12                              <1> 	mov    ds, dx
    13                              <1> 	mov    dx, D2_SEG_REAL
    14                              <1> 	mov    es, dx
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> 
    18                              <1> ;
    19                              <1> ; Initialises the real mode IDT with C_SEG_REAL:error
    20                              <1> ;
    21                              <1> %macro initRealModeIDT 0
    22                              <1> 	xor    eax, eax
    23                              <1> 	mov    ds, ax
    24                              <1> 	mov    cx, 17
    25                              <1> %%loop:
    26                              <1> 	mov    [eax*4], word error
    27                              <1> 	mov    [2+eax*4], word C_SEG_REAL
    28                              <1> 	inc    ax
    29                              <1> 	loop   %%loop
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> 
    33                              <1> ;
    34                              <1> ; Exception handling testing in real mode
    35                              <1> ;
    36                              <1> 
    37                              <1> ; Initialises an exc handler
    38                              <1> ; %1: vector
    39                              <1> ; %2: handler IP
    40                              <1> ; Trashes AX,DS
    41                              <1> %macro realModeExcInit 2
    42                              <1> 	mov    ax, 0
    43                              <1> 	mov    ds, ax
    44                              <1> 	mov    [%1*4], word %2
    45                              <1> 	mov    [%1*4+2], word C_SEG_REAL
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> ; Checks exc result and restores the default handler
    49                              <1> ; %1: vector
    50                              <1> ; %2: expected pushed value of IP
    51                              <1> ; Trashes AX,DS
    52                              <1> %macro realModeExcCheck 2
    53                              <1> 	cmp    sp, ESP_REAL-6
    54                              <1> 	jne    error
    55                              <1> 	cmp    [ss:ESP_REAL-4], word C_SEG_REAL
    56                              <1> 	cmp    [ss:ESP_REAL-6], word %2
    57                              <1> 	jne    error
    58                              <1> 	mov    ax, 0
    59                              <1> 	mov    ds, ax
    60                              <1> 	mov    [%1*4], word error
    61                              <1> 	mov    [%1*4+2], word C_SEG_REAL
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> 
    65                              <1> ; Tests a fault
    66                              <1> ; %1: vector
    67                              <1> ; %2: instruction to execute that causes a fault
    68                              <1> %macro realModeFaultTest 2+
    69                              <1> 	realModeExcInit %1, %%continue
    70                              <1> 	mov    ax, S_SEG_REAL
    71                              <1> 	mov    ss, ax
    72                              <1> 	mov    sp, ESP_REAL
    73                              <1> %%test:
    74                              <1> 	%2
    75                              <1> 	jmp    error
    76                              <1> %%continue:
    77                              <1> 	realModeExcCheck %1, %%test
    78                              <1> %endmacro
   112                                  
   113                                  	POST 0
   113 00000046 B000                <1>  mov al, 0x%1
   113 00000048 BA9001              <1>  mov dx, POST_PORT
   113 0000004B EE                  <1>  out dx, al
   114                                  
   115                                  	initRealModeIDT
   115 0000004C 6631C0              <1>  xor eax, eax
   115 0000004F 8ED8                <1>  mov ds, ax
   115 00000051 B91100              <1>  mov cx, 17
   115                              <1> %%loop:
   115 00000054 67C7048500000000-   <1>  mov [eax*4], word error
   115 0000005C [8FD5]              <1>
   115 0000005E 67C704850200000000- <1>  mov [2+eax*4], word C_SEG_REAL
   115 00000067 F0                  <1>
   115 00000068 40                  <1>  inc ax
   115 00000069 E2E9                <1>  loop %%loop
   116 0000006B B80010                  	mov ax, S_SEG_REAL
   117 0000006E 8ED0                    	mov ss, ax
   118 00000070 BCFFFF                  	mov sp, ESP_REAL
   119 00000073 BA0020                  	mov dx, D1_SEG_REAL
   120 00000076 8EDA                    	mov ds, dx
   121 00000078 BA0060                  	mov dx, D2_SEG_REAL
   122 0000007B 8EC2                    	mov es, dx
   123                                  
   124                                  	POST 1
   124 0000007D B001                <1>  mov al, 0x%1
   124 0000007F BA9001              <1>  mov dx, POST_PORT
   124 00000082 EE                  <1>  out dx, al
   125                                  ;
   126                                  ;   Conditional jumps
   127                                  ;
   128                                  %include "tests/jcc_m.asm"
     1                              <1> ;
     2                              <1> ; Tests conditional relative jumps.
     3                              <1> ; Uses: AX, ECX, Flags
     4                              <1> ;
     5                              <1> ; Opcodes tested, with positive and negative offsets:
     6                              <1> ;
     7                              <1> ; rel8  rel16/32 mnemonic condition
     8                              <1> ; 70    0F80     JO       OF=1
     9                              <1> ; 71    0F81     JNO      OF=0
    10                              <1> ; 72    0F82     JC       CF=1
    11                              <1> ; 73    0F83     JNC      CF=0
    12                              <1> ; 74    0F84     JZ       ZF=1
    13                              <1> ; 75    0F85     JNZ      ZF=0
    14                              <1> ; 76    0F86     JBE      CF=1 || ZF=1
    15                              <1> ; 77    0F87     JA       CF=0 && ZF=0
    16                              <1> ; 78    0F88     JS       SF=1
    17                              <1> ; 79    0F89     JNS      SF=0
    18                              <1> ; 7A    0F8A     JP       PF=1
    19                              <1> ; 7B    0F8B     JNP      PF=0
    20                              <1> ; 7C    0F8C     JL       SF!=OF
    21                              <1> ; 7D    0F8D     JNL      SF=OF
    22                              <1> ; 7E    0F8E     JLE      ZF=1 || SF!=OF
    23                              <1> ; 7F    0F8F     JNLE     ZF=0 && SF=OF
    24                              <1> ; E3             JCXZ     CX=0
    25                              <1> ; E3             JECXZ    ECX=0
    26                              <1> ;
    27                              <1> %macro testJcc 1
    28                              <1> 	mov    ah, PS_CF
    29                              <1> 	sahf         ; don't use the stack (pushf/popf)
    30                              <1> 	jnc   %%err1 ; 73 / 0F83   JNC  CF=0
    31                              <1> 	jc    %%jcok ; 72 / 0F82   JC   CF=1
    32                              <1> 	hlt
    33                              <1> %%jz:
    34                              <1> 	mov    ah, PS_ZF
    35                              <1> 	sahf
    36                              <1> 	jnz   %%err1 ; 75 / 0F85   JNZ  ZF=0
    37                              <1> 	jz    %%jzok ; 74 / 0F84   JZ   ZF=1
    38                              <1> 	hlt
    39                              <1> %%jp:
    40                              <1> 	mov    ah, PS_PF
    41                              <1> 	sahf
    42                              <1> 	jnp   %%err1 ; 7B / 0F8B   JNP  PF=0
    43                              <1> 	jp    %%jpok ; 7A / 0F8A   JP   PF=1
    44                              <1> 	hlt
    45                              <1> %%js:
    46                              <1> 	mov    ah, PS_SF
    47                              <1> 	sahf
    48                              <1> 	jns   %%err1 ; 79 / 0F89   JNS  SF=0
    49                              <1> 	js    %%jsok ; 78 / 0F88   JS   SF=1
    50                              <1> 	hlt
    51                              <1> %%jna:
    52                              <1> 	mov    ah, PS_ZF|PS_CF
    53                              <1> 	sahf
    54                              <1> 	ja    %%err1  ; 77 / 0F87   JA   CF=0 && ZF=0
    55                              <1> 	jna   %%jnaok ; 76 / 0F86   JBE  CF=1 || ZF=1
    56                              <1> %%next1:
    57                              <1> 	jmp %%jnc
    58                              <1> 
    59                              <1> %if %1==16
    60                              <1> 	times  128 hlt
    61                              <1> %endif
    62                              <1> 
    63                              <1> %%err1:
    64                              <1> 	hlt
    65                              <1> 
    66                              <1> ; test negative offsets
    67                              <1> %%jcok:   jc   %%jz
    68                              <1> %%jzok:   jz   %%jp
    69                              <1> %%jpok:   jp   %%js
    70                              <1> %%jsok:   js   %%jna
    71                              <1> %%jnaok:  jna  %%next1
    72                              <1> 
    73                              <1> 
    74                              <1> %%jnc:
    75                              <1> 	mov    ah, PS_SF|PS_ZF|PS_AF|PS_PF
    76                              <1> 	sahf
    77                              <1> 	mov    ax, 0
    78                              <1> 	sahf
    79                              <1> 	jnc   %%jncok ; 73 / 0F83   JNC  CF=0
    80                              <1> 	hlt
    81                              <1> %%jnz:
    82                              <1> 	mov    ah, PS_SF|PS_AF|PS_PF|PS_CF
    83                              <1> 	sahf
    84                              <1> 	jnz   %%jnzok ; 75 / 0F85   JNZ  ZF=0
    85                              <1> 	hlt
    86                              <1> %%jnp:
    87                              <1> 	mov    ah, PS_SF|PS_ZF|PS_AF|PS_CF
    88                              <1> 	sahf
    89                              <1> 	jnp   %%jnpok ; 7B / 0F8B   JNP  PF=0
    90                              <1> 	hlt
    91                              <1> %%jns:
    92                              <1> 	mov    ah, PS_ZF|PS_AF|PS_PF|PS_CF
    93                              <1> 	sahf
    94                              <1> 	jns   %%jnsok ; 79 /  0F89  JNS  SF=0
    95                              <1> 	hlt
    96                              <1> %%ja:
    97                              <1> 	mov    ah, PS_SF|PS_AF|PS_PF
    98                              <1> 	sahf
    99                              <1> 	ja    %%jaok  ; 77 / 0F87   JA   CF=0 && ZF=0
   100                              <1> 	hlt
   101                              <1> %%next2:
   102                              <1> 	jmp   %%jo
   103                              <1> 
   104                              <1> %if %1==16
   105                              <1> 	times  128 hlt
   106                              <1> %endif
   107                              <1> 
   108                              <1> ; test negative offsets
   109                              <1> %%jncok:  jnc  %%jnz
   110                              <1> %%jnzok:  jnz  %%jnp
   111                              <1> %%jnpok:  jnp  %%jns
   112                              <1> %%jnsok:  jns  %%ja
   113                              <1> %%jaok:   ja   %%next2
   114                              <1> 
   115                              <1> %%jo:
   116                              <1> 	mov    ah, 0
   117                              <1> 	sahf
   118                              <1> 	mov   al, 1000000b
   119                              <1> 	shl   al, 1    ; OF = high-order bit of AL <> (CF), ZF=0,SF=1,OF=1
   120                              <1> 	jno   %%err2
   121                              <1> 	jo    %%jook
   122                              <1> 	hlt
   123                              <1> %%jnl:
   124                              <1> 	jl    %%err2   ; 7C / 0F8C   JL   SF!=OF
   125                              <1> 	jnl   %%jnlok  ; 7D / 0F8D   JNL  SF=OF
   126                              <1> 	hlt
   127                              <1> %%jnle:
   128                              <1> 	jle   %%err2   ; 7E / 0F8E   JLE  ZF=1 || SF!=OF
   129                              <1> 	jnle  %%jnleok ; 7F / 0F8F   JNLE ZF=0 && SF=OF
   130                              <1> 	hlt
   131                              <1> %%jl:
   132                              <1> 	mov ah, PS_ZF
   133                              <1> 	sahf           ; ZF=1,SF=0,OF=1
   134                              <1> 	jl    %%jlok   ; 7C / 0F8C   JL   SF!=OF
   135                              <1> 	hlt
   136                              <1> %%jle:
   137                              <1> 	jle   %%jleok  ; 7E / 0F8E   JLE  ZF=1 || SF!=OF
   138                              <1> 	hlt
   139                              <1> %%jcxz:
   140                              <1> %if %1==8
   141                              <1> 	mov ecx, 1
   142                              <1> 	jcxz %%err2      ; E3   JCXZ  CX=0
   143                              <1> 	mov ecx, 0x10000
   144                              <1> 	jcxz %%jcxzok
   145                              <1> %%jecxz:
   146                              <1> 	jecxz %%err2
   147                              <1> 	mov ecx, 0
   148                              <1> 	jecxz %%jecxzok ; E3   JECXZ   ECX=0
   149                              <1> %%jecxze:
   150                              <1> %endif
   151                              <1> 	jmp %%exit
   152                              <1> 
   153                              <1> %if %1==16
   154                              <1> 	times  128 hlt
   155                              <1> %endif
   156                              <1> 
   157                              <1> %%err2:
   158                              <1> 	hlt
   159                              <1> 
   160                              <1> ; test negative offsets
   161                              <1> %%jook:   jo   %%jnl
   162                              <1> %%jnlok:  jnl  %%jnle
   163                              <1> %%jnleok: jnle %%jl
   164                              <1> %%jlok:   jl   %%jle
   165                              <1> %%jleok:  jle  %%jcxz
   166                              <1> %if %1==8
   167                              <1> %%jcxzok:  jcxz  %%jecxz
   168                              <1> %%jecxzok: jecxz %%jecxze
   169                              <1> %endif
   170                              <1> 
   171                              <1> %%exit:
   172                              <1> %endmacro
   173                              <1> 
   129                                  	testJcc 8
   129 00000083 B401                <1>  mov ah, PS_CF
   129 00000085 9E                  <1>  sahf
   129 00000086 7324                <1>  jnc %%err1
   129 00000088 7223                <1>  jc %%jcok
   129 0000008A F4                  <1>  hlt
   129                              <1> %%jz:
   129 0000008B B440                <1>  mov ah, PS_ZF
   129 0000008D 9E                  <1>  sahf
   129 0000008E 751C                <1>  jnz %%err1
   129 00000090 741D                <1>  jz %%jzok
   129 00000092 F4                  <1>  hlt
   129                              <1> %%jp:
   129 00000093 B404                <1>  mov ah, PS_PF
   129 00000095 9E                  <1>  sahf
   129 00000096 7B14                <1>  jnp %%err1
   129 00000098 7A17                <1>  jp %%jpok
   129 0000009A F4                  <1>  hlt
   129                              <1> %%js:
   129 0000009B B480                <1>  mov ah, PS_SF
   129 0000009D 9E                  <1>  sahf
   129 0000009E 790C                <1>  jns %%err1
   129 000000A0 7811                <1>  js %%jsok
   129 000000A2 F4                  <1>  hlt
   129                              <1> %%jna:
   129 000000A3 B441                <1>  mov ah, PS_ZF|PS_CF
   129 000000A5 9E                  <1>  sahf
   129 000000A6 7704                <1>  ja %%err1
   129 000000A8 760B                <1>  jna %%jnaok
   129                              <1> %%next1:
   129 000000AA EB0B                <1>  jmp %%jnc
   129                              <1> 
   129                              <1> %if %1==16
   129                              <1>  times 128 hlt
   129                              <1> %endif
   129                              <1> 
   129                              <1> %%err1:
   129 000000AC F4                  <1>  hlt
   129                              <1> 
   129                              <1> 
   129 000000AD 72DC                <1> %%jcok: jc %%jz
   129 000000AF 74E2                <1> %%jzok: jz %%jp
   129 000000B1 7AE8                <1> %%jpok: jp %%js
   129 000000B3 78EE                <1> %%jsok: js %%jna
   129 000000B5 76F3                <1> %%jnaok: jna %%next1
   129                              <1> 
   129                              <1> 
   129                              <1> %%jnc:
   129 000000B7 B4D4                <1>  mov ah, PS_SF|PS_ZF|PS_AF|PS_PF
   129 000000B9 9E                  <1>  sahf
   129 000000BA B80000              <1>  mov ax, 0
   129 000000BD 9E                  <1>  sahf
   129 000000BE 731B                <1>  jnc %%jncok
   129 000000C0 F4                  <1>  hlt
   129                              <1> %%jnz:
   129 000000C1 B495                <1>  mov ah, PS_SF|PS_AF|PS_PF|PS_CF
   129 000000C3 9E                  <1>  sahf
   129 000000C4 7517                <1>  jnz %%jnzok
   129 000000C6 F4                  <1>  hlt
   129                              <1> %%jnp:
   129 000000C7 B4D1                <1>  mov ah, PS_SF|PS_ZF|PS_AF|PS_CF
   129 000000C9 9E                  <1>  sahf
   129 000000CA 7B13                <1>  jnp %%jnpok
   129 000000CC F4                  <1>  hlt
   129                              <1> %%jns:
   129 000000CD B455                <1>  mov ah, PS_ZF|PS_AF|PS_PF|PS_CF
   129 000000CF 9E                  <1>  sahf
   129 000000D0 790F                <1>  jns %%jnsok
   129 000000D2 F4                  <1>  hlt
   129                              <1> %%ja:
   129 000000D3 B494                <1>  mov ah, PS_SF|PS_AF|PS_PF
   129 000000D5 9E                  <1>  sahf
   129 000000D6 770B                <1>  ja %%jaok
   129 000000D8 F4                  <1>  hlt
   129                              <1> %%next2:
   129 000000D9 EB0A                <1>  jmp %%jo
   129                              <1> 
   129                              <1> %if %1==16
   129                              <1>  times 128 hlt
   129                              <1> %endif
   129                              <1> 
   129                              <1> 
   129 000000DB 73E4                <1> %%jncok: jnc %%jnz
   129 000000DD 75E8                <1> %%jnzok: jnz %%jnp
   129 000000DF 7BEC                <1> %%jnpok: jnp %%jns
   129 000000E1 79F0                <1> %%jnsok: jns %%ja
   129 000000E3 77F4                <1> %%jaok: ja %%next2
   129                              <1> 
   129                              <1> %%jo:
   129 000000E5 B400                <1>  mov ah, 0
   129 000000E7 9E                  <1>  sahf
   129 000000E8 B040                <1>  mov al, 1000000b
   129 000000EA D0E0                <1>  shl al, 1
   129 000000EC 7134                <1>  jno %%err2
   129 000000EE 7033                <1>  jo %%jook
   129 000000F0 F4                  <1>  hlt
   129                              <1> %%jnl:
   129 000000F1 7C2F                <1>  jl %%err2
   129 000000F3 7D30                <1>  jnl %%jnlok
   129 000000F5 F4                  <1>  hlt
   129                              <1> %%jnle:
   129 000000F6 7E2A                <1>  jle %%err2
   129 000000F8 7F2D                <1>  jnle %%jnleok
   129 000000FA F4                  <1>  hlt
   129                              <1> %%jl:
   129 000000FB B440                <1>  mov ah, PS_ZF
   129 000000FD 9E                  <1>  sahf
   129 000000FE 7C29                <1>  jl %%jlok
   129 00000100 F4                  <1>  hlt
   129                              <1> %%jle:
   129 00000101 7E28                <1>  jle %%jleok
   129 00000103 F4                  <1>  hlt
   129                              <1> %%jcxz:
   129                              <1> %if %1==8
   129 00000104 66B901000000        <1>  mov ecx, 1
   129 0000010A E316                <1>  jcxz %%err2
   129 0000010C 66B900000100        <1>  mov ecx, 0x10000
   129 00000112 E319                <1>  jcxz %%jcxzok
   129                              <1> %%jecxz:
   129 00000114 67E30B              <1>  jecxz %%err2
   129 00000117 66B900000000        <1>  mov ecx, 0
   129 0000011D 67E30F              <1>  jecxz %%jecxzok
   129                              <1> %%jecxze:
   129                              <1> %endif
   129 00000120 EB10                <1>  jmp %%exit
   129                              <1> 
   129                              <1> %if %1==16
   129                              <1>  times 128 hlt
   129                              <1> %endif
   129                              <1> 
   129                              <1> %%err2:
   129 00000122 F4                  <1>  hlt
   129                              <1> 
   129                              <1> 
   129 00000123 70CC                <1> %%jook: jo %%jnl
   129 00000125 7DCF                <1> %%jnlok: jnl %%jnle
   129 00000127 7FD2                <1> %%jnleok: jnle %%jl
   129 00000129 7CD6                <1> %%jlok: jl %%jle
   129 0000012B 7ED7                <1> %%jleok: jle %%jcxz
   129                              <1> %if %1==8
   129 0000012D E3E5                <1> %%jcxzok: jcxz %%jecxz
   129 0000012F 67E3EE              <1> %%jecxzok: jecxz %%jecxze
   129                              <1> %endif
   129                              <1> 
   129                              <1> %%exit:
   130                                  	testJcc 16
   130 00000132 B401                <1>  mov ah, PS_CF
   130 00000134 9E                  <1>  sahf
   130 00000135 0F83B700            <1>  jnc %%err1
   130 00000139 0F82B400            <1>  jc %%jcok
   130 0000013D F4                  <1>  hlt
   130                              <1> %%jz:
   130 0000013E B440                <1>  mov ah, PS_ZF
   130 00000140 9E                  <1>  sahf
   130 00000141 0F85AB00            <1>  jnz %%err1
   130 00000145 0F84AC00            <1>  jz %%jzok
   130 00000149 F4                  <1>  hlt
   130                              <1> %%jp:
   130 0000014A B404                <1>  mov ah, PS_PF
   130 0000014C 9E                  <1>  sahf
   130 0000014D 0F8B9F00            <1>  jnp %%err1
   130 00000151 0F8AA400            <1>  jp %%jpok
   130 00000155 F4                  <1>  hlt
   130                              <1> %%js:
   130 00000156 B480                <1>  mov ah, PS_SF
   130 00000158 9E                  <1>  sahf
   130 00000159 0F899300            <1>  jns %%err1
   130 0000015D 0F889C00            <1>  js %%jsok
   130 00000161 F4                  <1>  hlt
   130                              <1> %%jna:
   130 00000162 B441                <1>  mov ah, PS_ZF|PS_CF
   130 00000164 9E                  <1>  sahf
   130 00000165 0F878700            <1>  ja %%err1
   130 00000169 0F869400            <1>  jna %%jnaok
   130                              <1> %%next1:
   130 0000016D E99500              <1>  jmp %%jnc
   130                              <1> 
   130                              <1> %if %1==16
   130 00000170 F4<rept>            <1>  times 128 hlt
   130                              <1> %endif
   130                              <1> 
   130                              <1> %%err1:
   130 000001F0 F4                  <1>  hlt
   130                              <1> 
   130                              <1> 
   130 000001F1 0F8249FF            <1> %%jcok: jc %%jz
   130 000001F5 0F8451FF            <1> %%jzok: jz %%jp
   130 000001F9 0F8A59FF            <1> %%jpok: jp %%js
   130 000001FD 0F8861FF            <1> %%jsok: js %%jna
   130 00000201 0F8668FF            <1> %%jnaok: jna %%next1
   130                              <1> 
   130                              <1> 
   130                              <1> %%jnc:
   130 00000205 B4D4                <1>  mov ah, PS_SF|PS_ZF|PS_AF|PS_PF
   130 00000207 9E                  <1>  sahf
   130 00000208 B80000              <1>  mov ax, 0
   130 0000020B 9E                  <1>  sahf
   130 0000020C 0F83A400            <1>  jnc %%jncok
   130 00000210 F4                  <1>  hlt
   130                              <1> %%jnz:
   130 00000211 B495                <1>  mov ah, PS_SF|PS_AF|PS_PF|PS_CF
   130 00000213 9E                  <1>  sahf
   130 00000214 0F85A000            <1>  jnz %%jnzok
   130 00000218 F4                  <1>  hlt
   130                              <1> %%jnp:
   130 00000219 B4D1                <1>  mov ah, PS_SF|PS_ZF|PS_AF|PS_CF
   130 0000021B 9E                  <1>  sahf
   130 0000021C 0F8B9C00            <1>  jnp %%jnpok
   130 00000220 F4                  <1>  hlt
   130                              <1> %%jns:
   130 00000221 B455                <1>  mov ah, PS_ZF|PS_AF|PS_PF|PS_CF
   130 00000223 9E                  <1>  sahf
   130 00000224 0F899800            <1>  jns %%jnsok
   130 00000228 F4                  <1>  hlt
   130                              <1> %%ja:
   130 00000229 B494                <1>  mov ah, PS_SF|PS_AF|PS_PF
   130 0000022B 9E                  <1>  sahf
   130 0000022C 0F879400            <1>  ja %%jaok
   130 00000230 F4                  <1>  hlt
   130                              <1> %%next2:
   130 00000231 E99400              <1>  jmp %%jo
   130                              <1> 
   130                              <1> %if %1==16
   130 00000234 F4<rept>            <1>  times 128 hlt
   130                              <1> %endif
   130                              <1> 
   130                              <1> 
   130 000002B4 0F8359FF            <1> %%jncok: jnc %%jnz
   130 000002B8 0F855DFF            <1> %%jnzok: jnz %%jnp
   130 000002BC 0F8B61FF            <1> %%jnpok: jnp %%jns
   130 000002C0 0F8965FF            <1> %%jnsok: jns %%ja
   130 000002C4 0F8769FF            <1> %%jaok: ja %%next2
   130                              <1> 
   130                              <1> %%jo:
   130 000002C8 B400                <1>  mov ah, 0
   130 000002CA 9E                  <1>  sahf
   130 000002CB B040                <1>  mov al, 1000000b
   130 000002CD D0E0                <1>  shl al, 1
   130 000002CF 0F81A700            <1>  jno %%err2
   130 000002D3 0F80A400            <1>  jo %%jook
   130 000002D7 F4                  <1>  hlt
   130                              <1> %%jnl:
   130 000002D8 0F8C9E00            <1>  jl %%err2
   130 000002DC 0F8D9F00            <1>  jnl %%jnlok
   130 000002E0 F4                  <1>  hlt
   130                              <1> %%jnle:
   130 000002E1 0F8E9500            <1>  jle %%err2
   130 000002E5 0F8F9A00            <1>  jnle %%jnleok
   130 000002E9 F4                  <1>  hlt
   130                              <1> %%jl:
   130 000002EA B440                <1>  mov ah, PS_ZF
   130 000002EC 9E                  <1>  sahf
   130 000002ED 0F8C9600            <1>  jl %%jlok
   130 000002F1 F4                  <1>  hlt
   130                              <1> %%jle:
   130 000002F2 0F8E9500            <1>  jle %%jleok
   130 000002F6 F4                  <1>  hlt
   130                              <1> %%jcxz:
   130                              <1> %if %1==8
   130                              <1>  mov ecx, 1
   130                              <1>  jcxz %%err2
   130                              <1>  mov ecx, 0x10000
   130                              <1>  jcxz %%jcxzok
   130                              <1> %%jecxz:
   130                              <1>  jecxz %%err2
   130                              <1>  mov ecx, 0
   130                              <1>  jecxz %%jecxzok
   130                              <1> %%jecxze:
   130                              <1> %endif
   130 000002F7 E99500              <1>  jmp %%exit
   130                              <1> 
   130                              <1> %if %1==16
   130 000002FA F4<rept>            <1>  times 128 hlt
   130                              <1> %endif
   130                              <1> 
   130                              <1> %%err2:
   130 0000037A F4                  <1>  hlt
   130                              <1> 
   130                              <1> 
   130 0000037B 0F8059FF            <1> %%jook: jo %%jnl
   130 0000037F 0F8D5EFF            <1> %%jnlok: jnl %%jnle
   130 00000383 0F8F63FF            <1> %%jnleok: jnle %%jl
   130 00000387 0F8C67FF            <1> %%jlok: jl %%jle
   130 0000038B 0F8E68FF            <1> %%jleok: jle %%jcxz
   130                              <1> %if %1==8
   130                              <1> %%jcxzok: jcxz %%jecxz
   130                              <1> %%jecxzok: jecxz %%jecxze
   130                              <1> %endif
   130                              <1> 
   130                              <1> %%exit:
   131                                  
   132                                  ;
   133                                  ;   Loops
   134                                  ;
   135                                  %include "tests/loop_m.asm"
     1                              <1> ;
     2                              <1> ;   Test of loop, loopz, loopnz
     3                              <1> ;   Use: EAX, ECX, Flags
     4                              <1> ;
     5                              <1> 
     6                              <1> %macro testLoop 0
     7                              <1> 
     8                              <1> 	mov ecx, 0x20000
     9                              <1> 	mov eax, 0
    10                              <1> %%loop16:
    11                              <1> 	inc eax
    12                              <1> 	a16 loop %%loop16
    13                              <1> 	cmp eax, 0x10000
    14                              <1> 	jne error
    15                              <1> 	cmp ecx, 0x20000
    16                              <1> 	jne error
    17                              <1> 
    18                              <1> 	mov ecx, 0x20000
    19                              <1> 	mov eax, 0
    20                              <1> %%loop32:
    21                              <1> 	inc eax
    22                              <1> 	a32 loop %%loop32
    23                              <1> 	cmp eax, 0x20000
    24                              <1> 	jne error
    25                              <1> 	cmp ecx, 0
    26                              <1> 	jne error
    27                              <1> 
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> %macro testLoopZ 0
    31                              <1> 
    32                              <1> 	mov cx, 0xFFFF
    33                              <1> 	mov ax, 0
    34                              <1> %%loop16a:
    35                              <1> 	inc ax
    36                              <1> 	cmp ah, 0
    37                              <1> 	a16 loopz %%loop16a
    38                              <1> 	cmp ax, 0x0100
    39                              <1> 	jne error
    40                              <1> 	cmp cx, 0xFEFF
    41                              <1> 	jne error
    42                              <1> 
    43                              <1> 	mov cx, 0x00FF
    44                              <1> 	mov ax, 0
    45                              <1> %%loop16b:
    46                              <1> 	inc ax
    47                              <1> 	cmp ah, 0
    48                              <1> 	a16 loopz %%loop16b
    49                              <1> 	cmp ax, 0x00FF
    50                              <1> 	jne error
    51                              <1> 	cmp cx, 0
    52                              <1> 	jne error
    53                              <1> 
    54                              <1> 	mov ecx, 0x20000
    55                              <1> 	mov eax, 0
    56                              <1> %%loop32:
    57                              <1> 	inc eax
    58                              <1> 	test eax, 0x10000
    59                              <1> 	a32 loopz %%loop32
    60                              <1> 	cmp eax, 0x10000
    61                              <1> 	jne error
    62                              <1> 	cmp ecx, 0x10000
    63                              <1> 	jne error
    64                              <1> 
    65                              <1> %endmacro
    66                              <1> 
    67                              <1> %macro testLoopNZ 0
    68                              <1> 
    69                              <1> 	mov cx, 0xFFFF
    70                              <1> 	mov ax, 0
    71                              <1> %%loop16a:
    72                              <1> 	inc ax
    73                              <1> 	test al, 0xFF
    74                              <1> 	a16 loopnz %%loop16a
    75                              <1> 	cmp ax, 0x0100
    76                              <1> 	jne error
    77                              <1> 	cmp cx, 0xFEFF
    78                              <1> 	jne error
    79                              <1> 
    80                              <1> 	mov cx, 0x00FF
    81                              <1> 	mov ax, 0
    82                              <1> %%loop16b:
    83                              <1> 	inc ax
    84                              <1> 	test al, 0xFF
    85                              <1> 	a16 loopnz %%loop16b
    86                              <1> 	cmp ax, 0x00FF
    87                              <1> 	jne error
    88                              <1> 	cmp cx, 0
    89                              <1> 	jne error
    90                              <1> 
    91                              <1> 	mov ecx, 0x10000
    92                              <1> 	mov eax, 0
    93                              <1> %%loop32:
    94                              <1> 	inc eax
    95                              <1> 	test eax, 0x0FFFF
    96                              <1> 	a32 loopnz %%loop32
    97                              <1> 	cmp eax, 0x10000
    98                              <1> 	jne error
    99                              <1> 	cmp ecx, 0
   100                              <1> 	jne error
   101                              <1> 
   102                              <1> %endmacro
   136                                  	testLoop
   136                              <1> 
   136 0000038F 66B900000200        <1>  mov ecx, 0x20000
   136 00000395 66B800000000        <1>  mov eax, 0
   136                              <1> %%loop16:
   136 0000039B 6640                <1>  inc eax
   136 0000039D E2FC                <1>  a16 loop %%loop16
   136 0000039F 663D00000100        <1>  cmp eax, 0x10000
   136 000003A5 0F85E6D1            <1>  jne error
   136          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   136 000003A9 6681F900000200      <1>  cmp ecx, 0x20000
   136 000003B0 0F85DBD1            <1>  jne error
   136          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   136                              <1> 
   136 000003B4 66B900000200        <1>  mov ecx, 0x20000
   136 000003BA 66B800000000        <1>  mov eax, 0
   136                              <1> %%loop32:
   136 000003C0 6640                <1>  inc eax
   136 000003C2 67E2FB              <1>  a32 loop %%loop32
   136 000003C5 663D00000200        <1>  cmp eax, 0x20000
   136 000003CB 0F85C0D1            <1>  jne error
   136          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   136 000003CF 6683F900            <1>  cmp ecx, 0
   136 000003D3 0F85B8D1            <1>  jne error
   136          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   136                              <1> 
   137                                  	testLoopZ
   137                              <1> 
   137 000003D7 B9FFFF              <1>  mov cx, 0xFFFF
   137 000003DA B80000              <1>  mov ax, 0
   137                              <1> %%loop16a:
   137 000003DD 40                  <1>  inc ax
   137 000003DE 80FC00              <1>  cmp ah, 0
   137 000003E1 E1FA                <1>  a16 loopz %%loop16a
   137 000003E3 3D0001              <1>  cmp ax, 0x0100
   137 000003E6 0F85A5D1            <1>  jne error
   137          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   137 000003EA 81F9FFFE            <1>  cmp cx, 0xFEFF
   137 000003EE 0F859DD1            <1>  jne error
   137          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   137                              <1> 
   137 000003F2 B9FF00              <1>  mov cx, 0x00FF
   137 000003F5 B80000              <1>  mov ax, 0
   137                              <1> %%loop16b:
   137 000003F8 40                  <1>  inc ax
   137 000003F9 80FC00              <1>  cmp ah, 0
   137 000003FC E1FA                <1>  a16 loopz %%loop16b
   137 000003FE 3DFF00              <1>  cmp ax, 0x00FF
   137 00000401 0F858AD1            <1>  jne error
   137          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   137 00000405 83F900              <1>  cmp cx, 0
   137 00000408 0F8583D1            <1>  jne error
   137          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   137                              <1> 
   137 0000040C 66B900000200        <1>  mov ecx, 0x20000
   137 00000412 66B800000000        <1>  mov eax, 0
   137                              <1> %%loop32:
   137 00000418 6640                <1>  inc eax
   137 0000041A 66A900000100        <1>  test eax, 0x10000
   137 00000420 67E1F5              <1>  a32 loopz %%loop32
   137 00000423 663D00000100        <1>  cmp eax, 0x10000
   137 00000429 0F8562D1            <1>  jne error
   137          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   137 0000042D 6681F900000100      <1>  cmp ecx, 0x10000
   137 00000434 0F8557D1            <1>  jne error
   137          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   137                              <1> 
   138                                  	testLoopNZ
   138                              <1> 
   138 00000438 B9FFFF              <1>  mov cx, 0xFFFF
   138 0000043B B80000              <1>  mov ax, 0
   138                              <1> %%loop16a:
   138 0000043E 40                  <1>  inc ax
   138 0000043F A8FF                <1>  test al, 0xFF
   138 00000441 E0FB                <1>  a16 loopnz %%loop16a
   138 00000443 3D0001              <1>  cmp ax, 0x0100
   138 00000446 0F8545D1            <1>  jne error
   138          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   138 0000044A 81F9FFFE            <1>  cmp cx, 0xFEFF
   138 0000044E 0F853DD1            <1>  jne error
   138          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   138                              <1> 
   138 00000452 B9FF00              <1>  mov cx, 0x00FF
   138 00000455 B80000              <1>  mov ax, 0
   138                              <1> %%loop16b:
   138 00000458 40                  <1>  inc ax
   138 00000459 A8FF                <1>  test al, 0xFF
   138 0000045B E0FB                <1>  a16 loopnz %%loop16b
   138 0000045D 3DFF00              <1>  cmp ax, 0x00FF
   138 00000460 0F852BD1            <1>  jne error
   138          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   138 00000464 83F900              <1>  cmp cx, 0
   138 00000467 0F8524D1            <1>  jne error
   138          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   138                              <1> 
   138 0000046B 66B900000100        <1>  mov ecx, 0x10000
   138 00000471 66B800000000        <1>  mov eax, 0
   138                              <1> %%loop32:
   138 00000477 6640                <1>  inc eax
   138 00000479 66A9FFFF0000        <1>  test eax, 0x0FFFF
   138 0000047F 67E0F5              <1>  a32 loopnz %%loop32
   138 00000482 663D00000100        <1>  cmp eax, 0x10000
   138 00000488 0F8503D1            <1>  jne error
   138          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   138 0000048C 6683F900            <1>  cmp ecx, 0
   138 00000490 0F85FBD0            <1>  jne error
   138          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   138                              <1> 
   139                                  
   140                                  ;
   141                                  ;   Quick tests of unsigned 32-bit multiplication and division
   142                                  ;   Thorough arithmetical and logical tests are done later
   143                                  ;
   144                                  	POST 2
   144 00000494 B002                <1>  mov al, 0x%1
   144 00000496 BA9001              <1>  mov dx, POST_PORT
   144 00000499 EE                  <1>  out dx, al
   145 0000049A 66B801000080            	mov    eax, 0x80000001
   146 000004A0 66F7E8                  	imul   eax
   147 000004A3 66B811223344            	mov    eax, 0x44332211
   148 000004A9 6689C3                  	mov    ebx, eax
   149 000004AC 66B955667788            	mov    ecx, 0x88776655
   150 000004B2 66F7E1                  	mul    ecx
   151 000004B5 66F7F1                  	div    ecx
   152 000004B8 6639D8                  	cmp    eax, ebx
   153 000004BB 0F85D0D0                	jne    error
   153          ******************       warning: word data exceeds bounds [-w+number-overflow]
   154                                  
   155                                  ;
   156                                  ;   Test of moving segment registers
   157                                  ;
   158                                  %include "tests/mov_m.asm"
     1                              <1> ;
     2                              <1> ;   Tests MOV from segment registers in real mode
     3                              <1> ;
     4                              <1> ;   %1 the segment register to test
     5                              <1> ;
     6                              <1> %macro testMovSegR_real 1
     7                              <1> 	%if %1 = cs
     8                              <1> 	mov    dx, C_SEG_REAL
     9                              <1> 	%else
    10                              <1> 	mov    dx, D1_SEG_REAL
    11                              <1> 	%endif
    12                              <1> 
    13                              <1> 	; MOV reg to Sreg
    14                              <1> 	%if %1 = cs
    15                              <1> 	realModeFaultTest EX_UD, mov %1,dx ; test for #UD
    16                              <1> 	%else
    17                              <1> 	mov    %1, dx
    18                              <1> 	%endif
    19                              <1> 
    20                              <1> 	; MOV Sreg to 16 bit reg
    21                              <1> 	xor    ax, ax
    22                              <1> 	mov    ax, %1
    23                              <1> 	cmp    ax, dx
    24                              <1> 	jne    error
    25                              <1> 
    26                              <1> 	; MOV Sreg to 32 bit reg
    27                              <1> 	mov    eax, -1
    28                              <1> 	mov    eax, %1
    29                              <1> 	; bits 31:16 are undefined for Pentium and earlier processors.
    30                              <1> 	; TODO: verify on real hw and check TEST_UNDEF
    31                              <1> 	cmp    ax, dx
    32                              <1> 	jne    error
    33                              <1> 
    34                              <1> 	; MOV Sreg to word mem
    35                              <1> 	mov    [0], word 0xbeef
    36                              <1> 	mov    [0], %1
    37                              <1> 	cmp    [0], dx
    38                              <1> 	jne    error
    39                              <1> 
    40                              <1> 	; MOV word mem to Sreg
    41                              <1> 	%if %1 = cs
    42                              <1> 	realModeFaultTest EX_UD, mov %1,[0] ; test for #UD
    43                              <1> 	%else
    44                              <1> 	mov    cx, ds ; save current DS in CX
    45                              <1> 	xor    ax, ax
    46                              <1> 	mov    %1, ax
    47                              <1> 	%if %1 = ds
    48                              <1> 	mov    es, cx
    49                              <1> 	mov    %1, [es:0]
    50                              <1> 	%else
    51                              <1> 	mov    %1, [0]
    52                              <1> 	%endif
    53                              <1> 	mov    ax, %1
    54                              <1> 	cmp    ax, dx
    55                              <1> 	jne    error
    56                              <1> 	%endif
    57                              <1> 
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> 
    61                              <1> %macro testMovSegR_prot 1
    62                              <1> 	mov    edx, -1
    63                              <1> 	%if %1 = cs
    64                              <1> 	mov    dx, C_SEG_PROT32
    65                              <1> 	%else
    66                              <1> 	mov    dx, D1_SEG_PROT
    67                              <1> 	%endif
    68                              <1> 
    69                              <1> 	; MOV reg to Sreg
    70                              <1> 	%if %1 = cs
    71                              <1> 	loadProtModeStack
    72                              <1> 	protModeFaultTest EX_UD, 0, mov %1,dx ; #UD: attempt is made to load the CS register.
    73                              <1> 	%else
    74                              <1> 	mov    %1, dx
    75                              <1> 	%endif
    76                              <1> 
    77                              <1> 	; MOV Sreg to 16 bit reg
    78                              <1> 	xor    ax, ax
    79                              <1> 	mov    ax, %1
    80                              <1> 	cmp    ax, dx
    81                              <1> 	jne    error
    82                              <1> 
    83                              <1> 	; MOV Sreg to 32 bit reg
    84                              <1> 	mov    eax, -1
    85                              <1> 	mov    eax, %1
    86                              <1> 	; bits 31:16 are undefined for Pentium and earlier processors.
    87                              <1> 	; TODO: verify on real hw and check TEST_UNDEF
    88                              <1> 	cmp    ax, dx
    89                              <1> 	jne    error
    90                              <1> 
    91                              <1> 	; MOV Sreg to word mem
    92                              <1> 	mov    [0], dword -1
    93                              <1> 	mov    [0], %1
    94                              <1> 	cmp    [0], edx
    95                              <1> 	jne    error
    96                              <1> 
    97                              <1> 	; MOV word mem to Sreg
    98                              <1> 	%if %1 = cs
    99                              <1> 	protModeFaultTest EX_UD, 0, mov %1,[0] ; test for #UD
   100                              <1> 	%else
   101                              <1> 	mov    cx, ds ; save current DS in CX
   102                              <1> 	mov    ax, DTEST_SEG_PROT
   103                              <1> 	mov    %1, ax
   104                              <1> 	%if %1 = ds
   105                              <1> 	mov    es, cx
   106                              <1> 	mov    %1, [es:0]
   107                              <1> 	%else
   108                              <1> 	mov    %1, [0]
   109                              <1> 	%endif
   110                              <1> 	mov    ax, %1
   111                              <1> 	cmp    ax, dx
   112                              <1> 	jne    error
   113                              <1> 	%endif
   114                              <1> 
   115                              <1> 	loadProtModeStack
   116                              <1> 	%if %1 = ss
   117                              <1> 	; #GP(0) If attempt is made to load SS register with NULL segment selector.
   118                              <1> 	mov ax, NULL
   119                              <1> 	protModeFaultTest EX_GP, 0, mov %1,ax
   120                              <1> 	; #GP(selector) If the SS register is being loaded and the segment selector's RPL and the segment descriptor’s DPL are not equal to the CPL.
   121                              <1> 	mov ax, DPL1_SEG_PROT|1
   122                              <1> 	protModeFaultTest EX_GP, DPL1_SEG_PROT, mov %1,ax
   123                              <1> 	; #GP(selector) If the SS register is being loaded and the segment pointed to is a non-writable data segment.
   124                              <1> 	mov ax, RO_SEG_PROT
   125                              <1> 	protModeFaultTest EX_GP, RO_SEG_PROT, mov %1,ax
   126                              <1> 	; #SS(selector) If the SS register is being loaded and the segment pointed to is marked not present.
   127                              <1> 	mov ax, NP_SEG_PROT
   128                              <1> 	protModeFaultTest EX_SS, NP_SEG_PROT, mov %1,ax
   129                              <1> 	%endif
   130                              <1> 	%if %1 != cs
   131                              <1> 	; #GP(selector) If segment selector index is outside descriptor table limits.
   132                              <1> 	mov ax, 0xFFF8
   133                              <1> 	protModeFaultTest EX_GP, 0xfff8, mov %1,ax
   134                              <1> 	%if %1 != ss
   135                              <1> 	; #NP(selector) If the DS, ES, FS, or GS register is being loaded and the segment pointed to is marked not present.
   136                              <1> 	mov ax, NP_SEG_PROT
   137                              <1> 	protModeFaultTest EX_NP, NP_SEG_PROT, mov %1,ax
   138                              <1> 	; #GP(selector) If the DS, ES, FS, or GS register is being loaded and the segment pointed to is not a data or readable code segment.
   139                              <1> 	mov ax, SYS_SEG_PROT
   140                              <1> 	protModeFaultTest EX_GP, SYS_SEG_PROT, mov %1,ax
   141                              <1> 	; #GP(selector)
   142                              <1> 	; If the DS, ES, FS, or GS register is being loaded and the segment pointed to is a data or nonconforming code segment, but both the RPL and the CPL are greater than the DPL.
   143                              <1> 	call switchToRing3 ; CPL=3
   144                              <1> 	mov ax, DTEST_SEG_PROT|3 ; RPL=3,DPL=0
   145                              <1> 	protModeFaultTest EX_GP, DTEST_SEG_PROT, mov %1,ax
   146                              <1> 	call switchToRing0
   147                              <1> 	%endif
   148                              <1> 	%endif
   149                              <1> 
   150                              <1> %endmacro
   159                                  
   160                                  	POST 3
   160 000004BF B003                <1>  mov al, 0x%1
   160 000004C1 BA9001              <1>  mov dx, POST_PORT
   160 000004C4 EE                  <1>  out dx, al
   161                                  	testMovSegR_real ss
   161                              <1>  %if %1 = cs
   161                              <1>  mov dx, C_SEG_REAL
   161                              <1>  %else
   161 000004C5 BA0020              <1>  mov dx, D1_SEG_REAL
   161                              <1>  %endif
   161                              <1> 
   161                              <1> 
   161                              <1>  %if %1 = cs
   161                              <1>  realModeFaultTest EX_UD, mov %1,dx
   161                              <1>  %else
   161 000004C8 8ED2                <1>  mov %1, dx
   161                              <1>  %endif
   161                              <1> 
   161                              <1> 
   161 000004CA 31C0                <1>  xor ax, ax
   161 000004CC 8CD0                <1>  mov ax, %1
   161 000004CE 39D0                <1>  cmp ax, dx
   161 000004D0 0F85BBD0            <1>  jne error
   161          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   161                              <1> 
   161                              <1> 
   161 000004D4 66B8FFFFFFFF        <1>  mov eax, -1
   161 000004DA 668CD0              <1>  mov eax, %1
   161                              <1> 
   161                              <1> 
   161 000004DD 39D0                <1>  cmp ax, dx
   161 000004DF 0F85ACD0            <1>  jne error
   161          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   161                              <1> 
   161                              <1> 
   161 000004E3 C7060000EFBE        <1>  mov [0], word 0xbeef
   161 000004E9 8C160000            <1>  mov [0], %1
   161 000004ED 39160000            <1>  cmp [0], dx
   161 000004F1 0F859AD0            <1>  jne error
   161          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   161                              <1> 
   161                              <1> 
   161                              <1>  %if %1 = cs
   161                              <1>  realModeFaultTest EX_UD, mov %1,[0]
   161                              <1>  %else
   161 000004F5 8CD9                <1>  mov cx, ds
   161 000004F7 31C0                <1>  xor ax, ax
   161 000004F9 8ED0                <1>  mov %1, ax
   161                              <1>  %if %1 = ds
   161                              <1>  mov es, cx
   161                              <1>  mov %1, [es:0]
   161                              <1>  %else
   161 000004FB 8E160000            <1>  mov %1, [0]
   161                              <1>  %endif
   161 000004FF 8CD0                <1>  mov ax, %1
   161 00000501 39D0                <1>  cmp ax, dx
   161 00000503 0F8588D0            <1>  jne error
   161          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   161                              <1>  %endif
   161                              <1> 
   162                                  	testMovSegR_real ds
   162                              <1>  %if %1 = cs
   162                              <1>  mov dx, C_SEG_REAL
   162                              <1>  %else
   162 00000507 BA0020              <1>  mov dx, D1_SEG_REAL
   162                              <1>  %endif
   162                              <1> 
   162                              <1> 
   162                              <1>  %if %1 = cs
   162                              <1>  realModeFaultTest EX_UD, mov %1,dx
   162                              <1>  %else
   162 0000050A 8EDA                <1>  mov %1, dx
   162                              <1>  %endif
   162                              <1> 
   162                              <1> 
   162 0000050C 31C0                <1>  xor ax, ax
   162 0000050E 8CD8                <1>  mov ax, %1
   162 00000510 39D0                <1>  cmp ax, dx
   162 00000512 0F8579D0            <1>  jne error
   162          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   162                              <1> 
   162                              <1> 
   162 00000516 66B8FFFFFFFF        <1>  mov eax, -1
   162 0000051C 668CD8              <1>  mov eax, %1
   162                              <1> 
   162                              <1> 
   162 0000051F 39D0                <1>  cmp ax, dx
   162 00000521 0F856AD0            <1>  jne error
   162          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   162                              <1> 
   162                              <1> 
   162 00000525 C7060000EFBE        <1>  mov [0], word 0xbeef
   162 0000052B 8C1E0000            <1>  mov [0], %1
   162 0000052F 39160000            <1>  cmp [0], dx
   162 00000533 0F8558D0            <1>  jne error
   162          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   162                              <1> 
   162                              <1> 
   162                              <1>  %if %1 = cs
   162                              <1>  realModeFaultTest EX_UD, mov %1,[0]
   162                              <1>  %else
   162 00000537 8CD9                <1>  mov cx, ds
   162 00000539 31C0                <1>  xor ax, ax
   162 0000053B 8ED8                <1>  mov %1, ax
   162                              <1>  %if %1 = ds
   162 0000053D 8EC1                <1>  mov es, cx
   162 0000053F 268E1E0000          <1>  mov %1, [es:0]
   162                              <1>  %else
   162                              <1>  mov %1, [0]
   162                              <1>  %endif
   162 00000544 8CD8                <1>  mov ax, %1
   162 00000546 39D0                <1>  cmp ax, dx
   162 00000548 0F8543D0            <1>  jne error
   162          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   162                              <1>  %endif
   162                              <1> 
   163                                  	testMovSegR_real es
   163                              <1>  %if %1 = cs
   163                              <1>  mov dx, C_SEG_REAL
   163                              <1>  %else
   163 0000054C BA0020              <1>  mov dx, D1_SEG_REAL
   163                              <1>  %endif
   163                              <1> 
   163                              <1> 
   163                              <1>  %if %1 = cs
   163                              <1>  realModeFaultTest EX_UD, mov %1,dx
   163                              <1>  %else
   163 0000054F 8EC2                <1>  mov %1, dx
   163                              <1>  %endif
   163                              <1> 
   163                              <1> 
   163 00000551 31C0                <1>  xor ax, ax
   163 00000553 8CC0                <1>  mov ax, %1
   163 00000555 39D0                <1>  cmp ax, dx
   163 00000557 0F8534D0            <1>  jne error
   163          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   163                              <1> 
   163                              <1> 
   163 0000055B 66B8FFFFFFFF        <1>  mov eax, -1
   163 00000561 668CC0              <1>  mov eax, %1
   163                              <1> 
   163                              <1> 
   163 00000564 39D0                <1>  cmp ax, dx
   163 00000566 0F8525D0            <1>  jne error
   163          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   163                              <1> 
   163                              <1> 
   163 0000056A C7060000EFBE        <1>  mov [0], word 0xbeef
   163 00000570 8C060000            <1>  mov [0], %1
   163 00000574 39160000            <1>  cmp [0], dx
   163 00000578 0F8513D0            <1>  jne error
   163          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   163                              <1> 
   163                              <1> 
   163                              <1>  %if %1 = cs
   163                              <1>  realModeFaultTest EX_UD, mov %1,[0]
   163                              <1>  %else
   163 0000057C 8CD9                <1>  mov cx, ds
   163 0000057E 31C0                <1>  xor ax, ax
   163 00000580 8EC0                <1>  mov %1, ax
   163                              <1>  %if %1 = ds
   163                              <1>  mov es, cx
   163                              <1>  mov %1, [es:0]
   163                              <1>  %else
   163 00000582 8E060000            <1>  mov %1, [0]
   163                              <1>  %endif
   163 00000586 8CC0                <1>  mov ax, %1
   163 00000588 39D0                <1>  cmp ax, dx
   163 0000058A 0F8501D0            <1>  jne error
   163          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   163                              <1>  %endif
   163                              <1> 
   164                                  	testMovSegR_real fs
   164                              <1>  %if %1 = cs
   164                              <1>  mov dx, C_SEG_REAL
   164                              <1>  %else
   164 0000058E BA0020              <1>  mov dx, D1_SEG_REAL
   164                              <1>  %endif
   164                              <1> 
   164                              <1> 
   164                              <1>  %if %1 = cs
   164                              <1>  realModeFaultTest EX_UD, mov %1,dx
   164                              <1>  %else
   164 00000591 8EE2                <1>  mov %1, dx
   164                              <1>  %endif
   164                              <1> 
   164                              <1> 
   164 00000593 31C0                <1>  xor ax, ax
   164 00000595 8CE0                <1>  mov ax, %1
   164 00000597 39D0                <1>  cmp ax, dx
   164 00000599 0F85F2CF            <1>  jne error
   164          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   164                              <1> 
   164                              <1> 
   164 0000059D 66B8FFFFFFFF        <1>  mov eax, -1
   164 000005A3 668CE0              <1>  mov eax, %1
   164                              <1> 
   164                              <1> 
   164 000005A6 39D0                <1>  cmp ax, dx
   164 000005A8 0F85E3CF            <1>  jne error
   164          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   164                              <1> 
   164                              <1> 
   164 000005AC C7060000EFBE        <1>  mov [0], word 0xbeef
   164 000005B2 8C260000            <1>  mov [0], %1
   164 000005B6 39160000            <1>  cmp [0], dx
   164 000005BA 0F85D1CF            <1>  jne error
   164          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   164                              <1> 
   164                              <1> 
   164                              <1>  %if %1 = cs
   164                              <1>  realModeFaultTest EX_UD, mov %1,[0]
   164                              <1>  %else
   164 000005BE 8CD9                <1>  mov cx, ds
   164 000005C0 31C0                <1>  xor ax, ax
   164 000005C2 8EE0                <1>  mov %1, ax
   164                              <1>  %if %1 = ds
   164                              <1>  mov es, cx
   164                              <1>  mov %1, [es:0]
   164                              <1>  %else
   164 000005C4 8E260000            <1>  mov %1, [0]
   164                              <1>  %endif
   164 000005C8 8CE0                <1>  mov ax, %1
   164 000005CA 39D0                <1>  cmp ax, dx
   164 000005CC 0F85BFCF            <1>  jne error
   164          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   164                              <1>  %endif
   164                              <1> 
   165                                  	testMovSegR_real gs
   165                              <1>  %if %1 = cs
   165                              <1>  mov dx, C_SEG_REAL
   165                              <1>  %else
   165 000005D0 BA0020              <1>  mov dx, D1_SEG_REAL
   165                              <1>  %endif
   165                              <1> 
   165                              <1> 
   165                              <1>  %if %1 = cs
   165                              <1>  realModeFaultTest EX_UD, mov %1,dx
   165                              <1>  %else
   165 000005D3 8EEA                <1>  mov %1, dx
   165                              <1>  %endif
   165                              <1> 
   165                              <1> 
   165 000005D5 31C0                <1>  xor ax, ax
   165 000005D7 8CE8                <1>  mov ax, %1
   165 000005D9 39D0                <1>  cmp ax, dx
   165 000005DB 0F85B0CF            <1>  jne error
   165          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   165                              <1> 
   165                              <1> 
   165 000005DF 66B8FFFFFFFF        <1>  mov eax, -1
   165 000005E5 668CE8              <1>  mov eax, %1
   165                              <1> 
   165                              <1> 
   165 000005E8 39D0                <1>  cmp ax, dx
   165 000005EA 0F85A1CF            <1>  jne error
   165          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   165                              <1> 
   165                              <1> 
   165 000005EE C7060000EFBE        <1>  mov [0], word 0xbeef
   165 000005F4 8C2E0000            <1>  mov [0], %1
   165 000005F8 39160000            <1>  cmp [0], dx
   165 000005FC 0F858FCF            <1>  jne error
   165          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   165                              <1> 
   165                              <1> 
   165                              <1>  %if %1 = cs
   165                              <1>  realModeFaultTest EX_UD, mov %1,[0]
   165                              <1>  %else
   165 00000600 8CD9                <1>  mov cx, ds
   165 00000602 31C0                <1>  xor ax, ax
   165 00000604 8EE8                <1>  mov %1, ax
   165                              <1>  %if %1 = ds
   165                              <1>  mov es, cx
   165                              <1>  mov %1, [es:0]
   165                              <1>  %else
   165 00000606 8E2E0000            <1>  mov %1, [0]
   165                              <1>  %endif
   165 0000060A 8CE8                <1>  mov ax, %1
   165 0000060C 39D0                <1>  cmp ax, dx
   165 0000060E 0F857DCF            <1>  jne error
   165          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   165                              <1>  %endif
   165                              <1> 
   166                                  	testMovSegR_real cs
   166                              <1>  %if %1 = cs
   166 00000612 BA00F0              <1>  mov dx, C_SEG_REAL
   166                              <1>  %else
   166                              <1>  mov dx, D1_SEG_REAL
   166                              <1>  %endif
   166                              <1> 
   166                              <1> 
   166                              <1>  %if %1 = cs
   166                              <1>  realModeFaultTest EX_UD, mov %1,dx
   166                              <2>  realModeExcInit %1, %%continue
   166 00000615 B80000              <3>  mov ax, 0
   166 00000618 8ED8                <3>  mov ds, ax
   166 0000061A C7061800[3306]      <3>  mov [%1*4], word %2
   166 00000620 C7061A0000F0        <3>  mov [%1*4+2], word C_SEG_REAL
   166 00000626 B80010              <2>  mov ax, S_SEG_REAL
   166 00000629 8ED0                <2>  mov ss, ax
   166 0000062B BCFFFF              <2>  mov sp, ESP_REAL
   166                              <2> %%test:
   166 0000062E 8ECA                <2>  %2
   166 00000630 E95CCF              <2>  jmp error
   166          ******************  <2>  warning: word data exceeds bounds [-w+number-overflow]
   166                              <2> %%continue:
   166                              <2>  realModeExcCheck %1, %%test
   166 00000633 83FCF9              <3>  cmp sp, ESP_REAL-6
   166 00000636 0F8555CF            <3>  jne error
   166          ******************  <3>  warning: word data exceeds bounds [-w+number-overflow]
   166 0000063A 36813EFBFF00F0      <3>  cmp [ss:ESP_REAL-4], word C_SEG_REAL
   166 00000641 36813EF9FF[2E06]    <3>  cmp [ss:ESP_REAL-6], word %2
   166 00000648 0F8543CF            <3>  jne error
   166          ******************  <3>  warning: word data exceeds bounds [-w+number-overflow]
   166 0000064C B80000              <3>  mov ax, 0
   166 0000064F 8ED8                <3>  mov ds, ax
   166 00000651 C7061800[8FD5]      <3>  mov [%1*4], word error
   166 00000657 C7061A0000F0        <3>  mov [%1*4+2], word C_SEG_REAL
   166                              <1>  %else
   166                              <1>  mov %1, dx
   166                              <1>  %endif
   166                              <1> 
   166                              <1> 
   166 0000065D 31C0                <1>  xor ax, ax
   166 0000065F 8CC8                <1>  mov ax, %1
   166 00000661 39D0                <1>  cmp ax, dx
   166 00000663 0F8528CF            <1>  jne error
   166          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   166                              <1> 
   166                              <1> 
   166 00000667 66B8FFFFFFFF        <1>  mov eax, -1
   166 0000066D 668CC8              <1>  mov eax, %1
   166                              <1> 
   166                              <1> 
   166 00000670 39D0                <1>  cmp ax, dx
   166 00000672 0F8519CF            <1>  jne error
   166          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   166                              <1> 
   166                              <1> 
   166 00000676 C7060000EFBE        <1>  mov [0], word 0xbeef
   166 0000067C 8C0E0000            <1>  mov [0], %1
   166 00000680 39160000            <1>  cmp [0], dx
   166 00000684 0F8507CF            <1>  jne error
   166          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   166                              <1> 
   166                              <1> 
   166                              <1>  %if %1 = cs
   166                              <1>  realModeFaultTest EX_UD, mov %1,[0]
   166                              <2>  realModeExcInit %1, %%continue
   166 00000688 B80000              <3>  mov ax, 0
   166 0000068B 8ED8                <3>  mov ds, ax
   166 0000068D C7061800[A806]      <3>  mov [%1*4], word %2
   166 00000693 C7061A0000F0        <3>  mov [%1*4+2], word C_SEG_REAL
   166 00000699 B80010              <2>  mov ax, S_SEG_REAL
   166 0000069C 8ED0                <2>  mov ss, ax
   166 0000069E BCFFFF              <2>  mov sp, ESP_REAL
   166                              <2> %%test:
   166 000006A1 8E0E0000            <2>  %2
   166 000006A5 E9E7CE              <2>  jmp error
   166          ******************  <2>  warning: word data exceeds bounds [-w+number-overflow]
   166                              <2> %%continue:
   166                              <2>  realModeExcCheck %1, %%test
   166 000006A8 83FCF9              <3>  cmp sp, ESP_REAL-6
   166 000006AB 0F85E0CE            <3>  jne error
   166          ******************  <3>  warning: word data exceeds bounds [-w+number-overflow]
   166 000006AF 36813EFBFF00F0      <3>  cmp [ss:ESP_REAL-4], word C_SEG_REAL
   166 000006B6 36813EF9FF[A106]    <3>  cmp [ss:ESP_REAL-6], word %2
   166 000006BD 0F85CECE            <3>  jne error
   166          ******************  <3>  warning: word data exceeds bounds [-w+number-overflow]
   166 000006C1 B80000              <3>  mov ax, 0
   166 000006C4 8ED8                <3>  mov ds, ax
   166 000006C6 C7061800[8FD5]      <3>  mov [%1*4], word error
   166 000006CC C7061A0000F0        <3>  mov [%1*4+2], word C_SEG_REAL
   166                              <1>  %else
   166                              <1>  mov cx, ds
   166                              <1>  xor ax, ax
   166                              <1>  mov %1, ax
   166                              <1>  %if %1 = ds
   166                              <1>  mov es, cx
   166                              <1>  mov %1, [es:0]
   166                              <1>  %else
   166                              <1>  mov %1, [0]
   166                              <1>  %endif
   166                              <1>  mov ax, %1
   166                              <1>  cmp ax, dx
   166                              <1>  jne error
   166                              <1>  %endif
   166                              <1> 
   167                                  
   168                                  	advTestSegReal
   168                              <1>  advTestBase
   168                              <2>  %assign TEST_BASE1 TEST_BASE1+0x1000
   168                              <2>  %assign TEST_BASE2 TEST_BASE2+0x1000
   168                              <1>  %assign D1_SEG_REAL TEST_BASE1 >> 4
   168                              <1>  %assign D2_SEG_REAL TEST_BASE2 >> 4
   168 000006D2 BA0021              <1>  mov dx, D1_SEG_REAL
   168 000006D5 8EDA                <1>  mov ds, dx
   168 000006D7 BA0061              <1>  mov dx, D2_SEG_REAL
   168 000006DA 8EC2                <1>  mov es, dx
   169                                  
   170                                  ;
   171                                  ;   Test store, move, scan, and compare string data
   172                                  ;
   173                                  %include "tests/string_m.asm"
     1                              <1> ;
     2                              <1> ;   Tests store, compare, scan, and move string operands
     3                              <1> ;   %1 data size b=byte, w=word, d=dword
     4                              <1> ;   %2 direction 0=increment, 1=decrement
     5                              <1> ;   %3 addressing a16=16-bit, a32=32-bit
     6                              <1> ;   DS test segment 1
     7                              <1> ;   ES test segment 2
     8                              <1> ;
     9                              <1> %macro testStringOps 3
    10                              <1> 
    11                              <1> 	%assign value 0x12345678
    12                              <1> 	%ifidni %1,b
    13                              <1> 		%assign val_size 1
    14                              <1> 		%define val_mask 0x000000ff
    15                              <1> 		%define sized_eax al
    16                              <1> 	%endif
    17                              <1> 	%ifidni %1,w
    18                              <1> 		%assign val_size 2
    19                              <1> 		%define val_mask 0x0000ffff
    20                              <1> 		%define sized_eax ax
    21                              <1> 	%endif
    22                              <1> 	%ifidni %1,d
    23                              <1> 		%assign val_size 4
    24                              <1> 		%define val_mask 0xffffffff
    25                              <1> 		%define sized_eax eax
    26                              <1> 	%endif
    27                              <1> 
    28                              <1> 	%if %2 == 0
    29                              <1> 		cld
    30                              <1> 		%assign off_value 0x0001ffff-(val_size-1)
    31                              <1> 		%ifidni %3,a16
    32                              <1> 			; 16-bit addressing
    33                              <1> 			%assign off_cmp 0x00010000
    34                              <1> 		%else
    35                              <1> 			; 32-bit addressing
    36                              <1> 			%assign off_cmp 0x00020000
    37                              <1> 		%endif
    38                              <1> 	%else
    39                              <1> 		std
    40                              <1> 		%assign off_value 0x00010000
    41                              <1> 		%ifidni %3,a16
    42                              <1> 			; 16-bit addressing
    43                              <1> 			%assign off_cmp 0x0001ffff-(val_size-1)
    44                              <1> 		%else
    45                              <1> 			; 32-bit addressing
    46                              <1> 			%assign off_cmp 0x0000ffff-(val_size-1)
    47                              <1> 		%endif
    48                              <1> 	%endif
    49                              <1> 
    50                              <1> 	%ifidni %3,a16
    51                              <1> 		%assign off_mask 0x0000ffff
    52                              <1> 	%else
    53                              <1> 		%assign off_mask 0xffffffff
    54                              <1> 	%endif
    55                              <1> 
    56                              <1> 	; VERIFY string operands
    57                              <1> 
    58                              <1> 	mov    edi, off_value
    59                              <1> 	mov    ebx, off_value & off_mask
    60                              <1> 	mov    sized_eax, 0
    61                              <1> 	mov    [es:ebx], sized_eax
    62                              <1> 	mov    sized_eax, value
    63                              <1> 	%3 stos%1         ; STORE EAX in ES:EDI
    64                              <1> 	cmp    [es:ebx], sized_eax
    65                              <1> 	jne    error
    66                              <1> 	cmp    edi, off_cmp
    67                              <1> 	jne    error
    68                              <1> 
    69                              <1> 	mov    esi, off_value
    70                              <1> 	mov    edi, off_value
    71                              <1> 	mov    ebx, off_value & off_mask
    72                              <1> 	mov    [ds:ebx], sized_eax
    73                              <1> 	mov    [es:ebx], sized_eax
    74                              <1> 	cmp    sized_eax, 0
    75                              <1> 	je     error
    76                              <1> 	%3 cmps%1         ; COMPARE ES:EDI with DS:ESI
    77                              <1> 	jne    error
    78                              <1> 	cmp    edi, off_cmp
    79                              <1> 	jne    error
    80                              <1> 	cmp    esi, off_cmp
    81                              <1> 	jne    error
    82                              <1> 
    83                              <1> 	mov    edi, off_value
    84                              <1> 	mov    sized_eax, value
    85                              <1> 	mov    [es:ebx], sized_eax
    86                              <1> 	cmp    sized_eax, 0
    87                              <1> 	%3 scas%1         ; SCAN/COMPARE ES:EDI with EAX
    88                              <1> 	jne    error
    89                              <1> 	cmp    edi, off_cmp
    90                              <1> 	jne    error
    91                              <1> 
    92                              <1> 	mov    esi, off_value
    93                              <1> 	mov    edi, off_value
    94                              <1> 	mov    sized_eax, value
    95                              <1> 	mov    [ds:ebx], sized_eax
    96                              <1> 	mov    sized_eax, 0
    97                              <1> 	mov    [es:ebx], sized_eax
    98                              <1> 	%3 movs%1         ; MOVE data from DS:ESI to ES:EDI
    99                              <1> 	mov    sized_eax, value
   100                              <1> 	cmp    [es:ebx], sized_eax
   101                              <1> 	jne    error
   102                              <1> 	cmp    edi, off_cmp
   103                              <1> 	jne    error
   104                              <1> 	cmp    esi, off_cmp
   105                              <1> 	jne    error
   106                              <1> 
   107                              <1> 	mov    esi, off_value
   108                              <1> 	mov    sized_eax, value
   109                              <1> 	mov    [es:ebx], sized_eax
   110                              <1> 	xor    eax, eax
   111                              <1> 	%3 lods%1         ; LOAD data from DS:ESI into EAX
   112                              <1> 	cmp    sized_eax, value & val_mask
   113                              <1> 	jne    error
   114                              <1> 	cmp    esi, off_cmp
   115                              <1> 	jne    error
   116                              <1> 
   117                              <1> %endmacro
   118                              <1> 
   119                              <1> ;
   120                              <1> ;   Tests store, compare, scan, and move string operands with repetitions
   121                              <1> ;   %1 element size b=byte, w=word, d=dword
   122                              <1> ;   %2 direction 0=increment, 1=decrement
   123                              <1> ;   %3 addressing a16=16-bit, a32=32-bit
   124                              <1> ;   DS test segment 1
   125                              <1> ;   ES test segment 2
   126                              <1> ;
   127                              <1> %macro testStringReps 3
   128                              <1> 
   129                              <1> 	%assign bytes 0x100
   130                              <1> 
   131                              <1> 	%ifidni %1,b
   132                              <1> 		%assign items bytes
   133                              <1> 	%endif
   134                              <1> 	%ifidni %1,w
   135                              <1> 		%assign items bytes/2
   136                              <1> 	%endif
   137                              <1> 	%ifidni %1,d
   138                              <1> 		%assign items bytes/4
   139                              <1> 	%endif
   140                              <1> 
   141                              <1> 	%if %2 == 0
   142                              <1> 		cld
   143                              <1> 		%assign off_value 0x0001ff00
   144                              <1> 		%ifidni %3,a16
   145                              <1> 			; 16-bit addressing
   146                              <1> 			%assign off_cmp 0x00010000
   147                              <1> 		%else
   148                              <1> 			; 32-bit addressing
   149                              <1> 			%assign off_cmp 0x00020000
   150                              <1> 		%endif
   151                              <1> 	%else
   152                              <1> 		std
   153                              <1> 		%assign off_value 0x000100ff
   154                              <1> 		%ifidni %3,a16
   155                              <1> 			; 16-bit addressing
   156                              <1> 			%assign off_cmp 0x0001ffff
   157                              <1> 		%else
   158                              <1> 			; 32-bit addressing
   159                              <1> 			%assign off_cmp 0x0000ffff
   160                              <1> 		%endif
   161                              <1> 	%endif
   162                              <1> 
   163                              <1> 	mov    eax, 0x12345678
   164                              <1> 	mov    esi, off_value
   165                              <1> 	mov    edi, off_value
   166                              <1> 
   167                              <1> 	; VERIFY REPs on memory buffers
   168                              <1> 
   169                              <1> 	; STORE buffers with pattern in EAX
   170                              <1> 	mov    eax, 0x12345678
   171                              <1> 	mov    esi, off_value
   172                              <1> 	mov    edi, off_value
   173                              <1> 	mov    ecx, items
   174                              <1> 	%3 rep stos%1          ; store ECX items at ES:EDI with the value in EAX
   175                              <1> 	cmp    ecx, 0
   176                              <1> 	jnz    error           ; ECX must be 0
   177                              <1> 	cmp    edi, off_cmp
   178                              <1> 	jnz    error
   179                              <1> 	mov    edi, off_value  ; reset EDI
   180                              <1> 	; now switch ES:EDI with DS:ESI
   181                              <1> 	mov    dx, es
   182                              <1> 	mov    cx, ds
   183                              <1> 	xchg   dx, cx
   184                              <1> 	mov    es, dx
   185                              <1> 	mov    ds, cx
   186                              <1> 	xchg   edi, esi
   187                              <1> 	; store again ES:EDI with pattern in EAX
   188                              <1> 	mov    ecx, items      ; reset ECX
   189                              <1> 	%3 rep stos%1
   190                              <1> 	mov    edi, off_value  ; reset EDI
   191                              <1> 
   192                              <1> 	; COMPARE two buffers
   193                              <1> 	mov    ecx, items      ; reset ECX
   194                              <1> 	%3 repe cmps%1         ; find nonmatching items in ES:EDI and DS:ESI
   195                              <1> 	cmp    ecx, 0
   196                              <1> 	jnz    error           ; ECX must be 0
   197                              <1> 	cmp    esi, off_cmp
   198                              <1> 	jne    error
   199                              <1> 	cmp    edi, off_cmp
   200                              <1> 	jne    error
   201                              <1> 	mov    edi, off_value  ; reset EDI
   202                              <1> 	mov    esi, off_value  ; reset ESI
   203                              <1> 
   204                              <1> 	; SCAN buffer for pattern
   205                              <1> 	mov    ecx, items      ; reset ECX
   206                              <1> 	%3 repe scas%1         ; SCAN first dword not equal to EAX
   207                              <1> 	cmp    ecx, 0
   208                              <1> 	jne    error           ; ECX must be 0
   209                              <1> 	cmp    edi, off_cmp
   210                              <1> 	jne    error
   211                              <1> 	mov    edi, off_value  ; rewind EDI
   212                              <1> 
   213                              <1> 	; MOVE and COMPARE data between buffers
   214                              <1> 	; first zero-fill ES:EDI so that we can compare the moved data later
   215                              <1> 	mov    eax, 0
   216                              <1> 	mov    ecx, items      ; reset ECX
   217                              <1> 	%3 rep stos%1          ; zero fill ES:EDI
   218                              <1> 	mov    edi, off_value  ; reset EDI
   219                              <1> 	mov    ecx, items      ; reset ECX
   220                              <1> 	%3 rep movs%1          ; MOVE data from DS:ESI to ES:EDI
   221                              <1> 	cmp    ecx, 0
   222                              <1> 	jne    error           ; ECX must be 0
   223                              <1> 	cmp    esi, off_cmp
   224                              <1> 	jne    error
   225                              <1> 	cmp    edi, off_cmp
   226                              <1> 	jne    error
   227                              <1> 	mov    ecx, items      ; reset ECX
   228                              <1> 	mov    edi, off_value  ; reset EDI
   229                              <1> 	mov    esi, off_value  ; reset ESI
   230                              <1> 	%3 repe cmps%1         ; COMPARE moved data in ES:EDI with DS:ESI
   231                              <1> 	cmp    ecx, 0
   232                              <1> 	jne    error           ; ECX must be 0
   233                              <1> 	cmp    esi, off_cmp
   234                              <1> 	jne    error
   235                              <1> 	cmp    edi, off_cmp
   236                              <1> 	jne    error
   237                              <1> %endmacro
   174                                  
   175                                  	POST 4
   175 000006DC B004                <1>  mov al, 0x%1
   175 000006DE BA9001              <1>  mov dx, POST_PORT
   175 000006E1 EE                  <1>  out dx, al
   176                                  	testStringOps b,0,a16
   176                              <1> 
   176                              <1>  %assign value 0x12345678
   176                              <1>  %ifidni %1,b
   176                              <1>  %assign val_size 1
   176                              <1>  %define val_mask 0x000000ff
   176                              <1>  %define sized_eax al
   176                              <1>  %endif
   176                              <1>  %ifidni %1,w
   176                              <1>  %assign val_size 2
   176                              <1>  %define val_mask 0x0000ffff
   176                              <1>  %define sized_eax ax
   176                              <1>  %endif
   176                              <1>  %ifidni %1,d
   176                              <1>  %assign val_size 4
   176                              <1>  %define val_mask 0xffffffff
   176                              <1>  %define sized_eax eax
   176                              <1>  %endif
   176                              <1> 
   176                              <1>  %if %2 == 0
   176 000006E2 FC                  <1>  cld
   176                              <1>  %assign off_value 0x0001ffff-(val_size-1)
   176                              <1>  %ifidni %3,a16
   176                              <1> 
   176                              <1>  %assign off_cmp 0x00010000
   176                              <1>  %else
   176                              <1> 
   176                              <1>  %assign off_cmp 0x00020000
   176                              <1>  %endif
   176                              <1>  %else
   176                              <1>  std
   176                              <1>  %assign off_value 0x00010000
   176                              <1>  %ifidni %3,a16
   176                              <1> 
   176                              <1>  %assign off_cmp 0x0001ffff-(val_size-1)
   176                              <1>  %else
   176                              <1> 
   176                              <1>  %assign off_cmp 0x0000ffff-(val_size-1)
   176                              <1>  %endif
   176                              <1>  %endif
   176                              <1> 
   176                              <1>  %ifidni %3,a16
   176                              <1>  %assign off_mask 0x0000ffff
   176                              <1>  %else
   176                              <1>  %assign off_mask 0xffffffff
   176                              <1>  %endif
   176                              <1> 
   176                              <1> 
   176                              <1> 
   176 000006E3 66BFFFFF0100        <1>  mov edi, off_value
   176 000006E9 66BBFFFF0000        <1>  mov ebx, off_value & off_mask
   176 000006EF B000                <1>  mov sized_eax, 0
   176 000006F1 26678803            <1>  mov [es:ebx], sized_eax
   176 000006F5 B078                <1>  mov sized_eax, value
   176          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   176 000006F7 AA                  <1>  %3 stos%1
   176 000006F8 26673803            <1>  cmp [es:ebx], sized_eax
   176 000006FC 0F858FCE            <1>  jne error
   176          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   176 00000700 6681FF00000100      <1>  cmp edi, off_cmp
   176 00000707 0F8584CE            <1>  jne error
   176          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   176                              <1> 
   176 0000070B 66BEFFFF0100        <1>  mov esi, off_value
   176 00000711 66BFFFFF0100        <1>  mov edi, off_value
   176 00000717 66BBFFFF0000        <1>  mov ebx, off_value & off_mask
   176 0000071D 3E678803            <1>  mov [ds:ebx], sized_eax
   176 00000721 26678803            <1>  mov [es:ebx], sized_eax
   176 00000725 3C00                <1>  cmp sized_eax, 0
   176 00000727 0F8464CE            <1>  je error
   176          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   176 0000072B A6                  <1>  %3 cmps%1
   176 0000072C 0F855FCE            <1>  jne error
   176          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   176 00000730 6681FF00000100      <1>  cmp edi, off_cmp
   176 00000737 0F8554CE            <1>  jne error
   176          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   176 0000073B 6681FE00000100      <1>  cmp esi, off_cmp
   176 00000742 0F8549CE            <1>  jne error
   176          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   176                              <1> 
   176 00000746 66BFFFFF0100        <1>  mov edi, off_value
   176 0000074C B078                <1>  mov sized_eax, value
   176          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   176 0000074E 26678803            <1>  mov [es:ebx], sized_eax
   176 00000752 3C00                <1>  cmp sized_eax, 0
   176 00000754 AE                  <1>  %3 scas%1
   176 00000755 0F8536CE            <1>  jne error
   176          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   176 00000759 6681FF00000100      <1>  cmp edi, off_cmp
   176 00000760 0F852BCE            <1>  jne error
   176          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   176                              <1> 
   176 00000764 66BEFFFF0100        <1>  mov esi, off_value
   176 0000076A 66BFFFFF0100        <1>  mov edi, off_value
   176 00000770 B078                <1>  mov sized_eax, value
   176          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   176 00000772 3E678803            <1>  mov [ds:ebx], sized_eax
   176 00000776 B000                <1>  mov sized_eax, 0
   176 00000778 26678803            <1>  mov [es:ebx], sized_eax
   176 0000077C A4                  <1>  %3 movs%1
   176 0000077D B078                <1>  mov sized_eax, value
   176          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   176 0000077F 26673803            <1>  cmp [es:ebx], sized_eax
   176 00000783 0F8508CE            <1>  jne error
   176          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   176 00000787 6681FF00000100      <1>  cmp edi, off_cmp
   176 0000078E 0F85FDCD            <1>  jne error
   176          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   176 00000792 6681FE00000100      <1>  cmp esi, off_cmp
   176 00000799 0F85F2CD            <1>  jne error
   176          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   176                              <1> 
   176 0000079D 66BEFFFF0100        <1>  mov esi, off_value
   176 000007A3 B078                <1>  mov sized_eax, value
   176          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   176 000007A5 26678803            <1>  mov [es:ebx], sized_eax
   176 000007A9 6631C0              <1>  xor eax, eax
   176 000007AC AC                  <1>  %3 lods%1
   176 000007AD 3C78                <1>  cmp sized_eax, value & val_mask
   176 000007AF 0F85DCCD            <1>  jne error
   176          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   176 000007B3 6681FE00000100      <1>  cmp esi, off_cmp
   176 000007BA 0F85D1CD            <1>  jne error
   176          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   176                              <1> 
   177                                  	testStringOps w,0,a16
   177                              <1> 
   177                              <1>  %assign value 0x12345678
   177                              <1>  %ifidni %1,b
   177                              <1>  %assign val_size 1
   177                              <1>  %define val_mask 0x000000ff
   177                              <1>  %define sized_eax al
   177                              <1>  %endif
   177                              <1>  %ifidni %1,w
   177                              <1>  %assign val_size 2
   177                              <1>  %define val_mask 0x0000ffff
   177                              <1>  %define sized_eax ax
   177                              <1>  %endif
   177                              <1>  %ifidni %1,d
   177                              <1>  %assign val_size 4
   177                              <1>  %define val_mask 0xffffffff
   177                              <1>  %define sized_eax eax
   177                              <1>  %endif
   177                              <1> 
   177                              <1>  %if %2 == 0
   177 000007BE FC                  <1>  cld
   177                              <1>  %assign off_value 0x0001ffff-(val_size-1)
   177                              <1>  %ifidni %3,a16
   177                              <1> 
   177                              <1>  %assign off_cmp 0x00010000
   177                              <1>  %else
   177                              <1> 
   177                              <1>  %assign off_cmp 0x00020000
   177                              <1>  %endif
   177                              <1>  %else
   177                              <1>  std
   177                              <1>  %assign off_value 0x00010000
   177                              <1>  %ifidni %3,a16
   177                              <1> 
   177                              <1>  %assign off_cmp 0x0001ffff-(val_size-1)
   177                              <1>  %else
   177                              <1> 
   177                              <1>  %assign off_cmp 0x0000ffff-(val_size-1)
   177                              <1>  %endif
   177                              <1>  %endif
   177                              <1> 
   177                              <1>  %ifidni %3,a16
   177                              <1>  %assign off_mask 0x0000ffff
   177                              <1>  %else
   177                              <1>  %assign off_mask 0xffffffff
   177                              <1>  %endif
   177                              <1> 
   177                              <1> 
   177                              <1> 
   177 000007BF 66BFFEFF0100        <1>  mov edi, off_value
   177 000007C5 66BBFEFF0000        <1>  mov ebx, off_value & off_mask
   177 000007CB B80000              <1>  mov sized_eax, 0
   177 000007CE 26678903            <1>  mov [es:ebx], sized_eax
   177 000007D2 B87856              <1>  mov sized_eax, value
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177 000007D5 AB                  <1>  %3 stos%1
   177 000007D6 26673903            <1>  cmp [es:ebx], sized_eax
   177 000007DA 0F85B1CD            <1>  jne error
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177 000007DE 6681FF00000100      <1>  cmp edi, off_cmp
   177 000007E5 0F85A6CD            <1>  jne error
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177                              <1> 
   177 000007E9 66BEFEFF0100        <1>  mov esi, off_value
   177 000007EF 66BFFEFF0100        <1>  mov edi, off_value
   177 000007F5 66BBFEFF0000        <1>  mov ebx, off_value & off_mask
   177 000007FB 3E678903            <1>  mov [ds:ebx], sized_eax
   177 000007FF 26678903            <1>  mov [es:ebx], sized_eax
   177 00000803 83F800              <1>  cmp sized_eax, 0
   177 00000806 0F8485CD            <1>  je error
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177 0000080A A7                  <1>  %3 cmps%1
   177 0000080B 0F8580CD            <1>  jne error
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177 0000080F 6681FF00000100      <1>  cmp edi, off_cmp
   177 00000816 0F8575CD            <1>  jne error
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177 0000081A 6681FE00000100      <1>  cmp esi, off_cmp
   177 00000821 0F856ACD            <1>  jne error
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177                              <1> 
   177 00000825 66BFFEFF0100        <1>  mov edi, off_value
   177 0000082B B87856              <1>  mov sized_eax, value
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177 0000082E 26678903            <1>  mov [es:ebx], sized_eax
   177 00000832 83F800              <1>  cmp sized_eax, 0
   177 00000835 AF                  <1>  %3 scas%1
   177 00000836 0F8555CD            <1>  jne error
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177 0000083A 6681FF00000100      <1>  cmp edi, off_cmp
   177 00000841 0F854ACD            <1>  jne error
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177                              <1> 
   177 00000845 66BEFEFF0100        <1>  mov esi, off_value
   177 0000084B 66BFFEFF0100        <1>  mov edi, off_value
   177 00000851 B87856              <1>  mov sized_eax, value
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177 00000854 3E678903            <1>  mov [ds:ebx], sized_eax
   177 00000858 B80000              <1>  mov sized_eax, 0
   177 0000085B 26678903            <1>  mov [es:ebx], sized_eax
   177 0000085F A5                  <1>  %3 movs%1
   177 00000860 B87856              <1>  mov sized_eax, value
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177 00000863 26673903            <1>  cmp [es:ebx], sized_eax
   177 00000867 0F8524CD            <1>  jne error
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177 0000086B 6681FF00000100      <1>  cmp edi, off_cmp
   177 00000872 0F8519CD            <1>  jne error
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177 00000876 6681FE00000100      <1>  cmp esi, off_cmp
   177 0000087D 0F850ECD            <1>  jne error
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177                              <1> 
   177 00000881 66BEFEFF0100        <1>  mov esi, off_value
   177 00000887 B87856              <1>  mov sized_eax, value
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177 0000088A 26678903            <1>  mov [es:ebx], sized_eax
   177 0000088E 6631C0              <1>  xor eax, eax
   177 00000891 AD                  <1>  %3 lods%1
   177 00000892 3D7856              <1>  cmp sized_eax, value & val_mask
   177 00000895 0F85F6CC            <1>  jne error
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177 00000899 6681FE00000100      <1>  cmp esi, off_cmp
   177 000008A0 0F85EBCC            <1>  jne error
   177          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   177                              <1> 
   178                                  	testStringOps d,0,a16
   178                              <1> 
   178                              <1>  %assign value 0x12345678
   178                              <1>  %ifidni %1,b
   178                              <1>  %assign val_size 1
   178                              <1>  %define val_mask 0x000000ff
   178                              <1>  %define sized_eax al
   178                              <1>  %endif
   178                              <1>  %ifidni %1,w
   178                              <1>  %assign val_size 2
   178                              <1>  %define val_mask 0x0000ffff
   178                              <1>  %define sized_eax ax
   178                              <1>  %endif
   178                              <1>  %ifidni %1,d
   178                              <1>  %assign val_size 4
   178                              <1>  %define val_mask 0xffffffff
   178                              <1>  %define sized_eax eax
   178                              <1>  %endif
   178                              <1> 
   178                              <1>  %if %2 == 0
   178 000008A4 FC                  <1>  cld
   178                              <1>  %assign off_value 0x0001ffff-(val_size-1)
   178                              <1>  %ifidni %3,a16
   178                              <1> 
   178                              <1>  %assign off_cmp 0x00010000
   178                              <1>  %else
   178                              <1> 
   178                              <1>  %assign off_cmp 0x00020000
   178                              <1>  %endif
   178                              <1>  %else
   178                              <1>  std
   178                              <1>  %assign off_value 0x00010000
   178                              <1>  %ifidni %3,a16
   178                              <1> 
   178                              <1>  %assign off_cmp 0x0001ffff-(val_size-1)
   178                              <1>  %else
   178                              <1> 
   178                              <1>  %assign off_cmp 0x0000ffff-(val_size-1)
   178                              <1>  %endif
   178                              <1>  %endif
   178                              <1> 
   178                              <1>  %ifidni %3,a16
   178                              <1>  %assign off_mask 0x0000ffff
   178                              <1>  %else
   178                              <1>  %assign off_mask 0xffffffff
   178                              <1>  %endif
   178                              <1> 
   178                              <1> 
   178                              <1> 
   178 000008A5 66BFFCFF0100        <1>  mov edi, off_value
   178 000008AB 66BBFCFF0000        <1>  mov ebx, off_value & off_mask
   178 000008B1 66B800000000        <1>  mov sized_eax, 0
   178 000008B7 2666678903          <1>  mov [es:ebx], sized_eax
   178 000008BC 66B878563412        <1>  mov sized_eax, value
   178 000008C2 66AB                <1>  %3 stos%1
   178 000008C4 2666673903          <1>  cmp [es:ebx], sized_eax
   178 000008C9 0F85C2CC            <1>  jne error
   178          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   178 000008CD 6681FF00000100      <1>  cmp edi, off_cmp
   178 000008D4 0F85B7CC            <1>  jne error
   178          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   178                              <1> 
   178 000008D8 66BEFCFF0100        <1>  mov esi, off_value
   178 000008DE 66BFFCFF0100        <1>  mov edi, off_value
   178 000008E4 66BBFCFF0000        <1>  mov ebx, off_value & off_mask
   178 000008EA 3E66678903          <1>  mov [ds:ebx], sized_eax
   178 000008EF 2666678903          <1>  mov [es:ebx], sized_eax
   178 000008F4 6683F800            <1>  cmp sized_eax, 0
   178 000008F8 0F8493CC            <1>  je error
   178          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   178 000008FC 66A7                <1>  %3 cmps%1
   178 000008FE 0F858DCC            <1>  jne error
   178          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   178 00000902 6681FF00000100      <1>  cmp edi, off_cmp
   178 00000909 0F8582CC            <1>  jne error
   178          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   178 0000090D 6681FE00000100      <1>  cmp esi, off_cmp
   178 00000914 0F8577CC            <1>  jne error
   178          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   178                              <1> 
   178 00000918 66BFFCFF0100        <1>  mov edi, off_value
   178 0000091E 66B878563412        <1>  mov sized_eax, value
   178 00000924 2666678903          <1>  mov [es:ebx], sized_eax
   178 00000929 6683F800            <1>  cmp sized_eax, 0
   178 0000092D 66AF                <1>  %3 scas%1
   178 0000092F 0F855CCC            <1>  jne error
   178          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   178 00000933 6681FF00000100      <1>  cmp edi, off_cmp
   178 0000093A 0F8551CC            <1>  jne error
   178          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   178                              <1> 
   178 0000093E 66BEFCFF0100        <1>  mov esi, off_value
   178 00000944 66BFFCFF0100        <1>  mov edi, off_value
   178 0000094A 66B878563412        <1>  mov sized_eax, value
   178 00000950 3E66678903          <1>  mov [ds:ebx], sized_eax
   178 00000955 66B800000000        <1>  mov sized_eax, 0
   178 0000095B 2666678903          <1>  mov [es:ebx], sized_eax
   178 00000960 66A5                <1>  %3 movs%1
   178 00000962 66B878563412        <1>  mov sized_eax, value
   178 00000968 2666673903          <1>  cmp [es:ebx], sized_eax
   178 0000096D 0F851ECC            <1>  jne error
   178          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   178 00000971 6681FF00000100      <1>  cmp edi, off_cmp
   178 00000978 0F8513CC            <1>  jne error
   178          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   178 0000097C 6681FE00000100      <1>  cmp esi, off_cmp
   178 00000983 0F8508CC            <1>  jne error
   178          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   178                              <1> 
   178 00000987 66BEFCFF0100        <1>  mov esi, off_value
   178 0000098D 66B878563412        <1>  mov sized_eax, value
   178 00000993 2666678903          <1>  mov [es:ebx], sized_eax
   178 00000998 6631C0              <1>  xor eax, eax
   178 0000099B 66AD                <1>  %3 lods%1
   178 0000099D 663D78563412        <1>  cmp sized_eax, value & val_mask
   178 000009A3 0F85E8CB            <1>  jne error
   178          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   178 000009A7 6681FE00000100      <1>  cmp esi, off_cmp
   178 000009AE 0F85DDCB            <1>  jne error
   178          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   178                              <1> 
   179                                  	testStringOps b,1,a16
   179                              <1> 
   179                              <1>  %assign value 0x12345678
   179                              <1>  %ifidni %1,b
   179                              <1>  %assign val_size 1
   179                              <1>  %define val_mask 0x000000ff
   179                              <1>  %define sized_eax al
   179                              <1>  %endif
   179                              <1>  %ifidni %1,w
   179                              <1>  %assign val_size 2
   179                              <1>  %define val_mask 0x0000ffff
   179                              <1>  %define sized_eax ax
   179                              <1>  %endif
   179                              <1>  %ifidni %1,d
   179                              <1>  %assign val_size 4
   179                              <1>  %define val_mask 0xffffffff
   179                              <1>  %define sized_eax eax
   179                              <1>  %endif
   179                              <1> 
   179                              <1>  %if %2 == 0
   179                              <1>  cld
   179                              <1>  %assign off_value 0x0001ffff-(val_size-1)
   179                              <1>  %ifidni %3,a16
   179                              <1> 
   179                              <1>  %assign off_cmp 0x00010000
   179                              <1>  %else
   179                              <1> 
   179                              <1>  %assign off_cmp 0x00020000
   179                              <1>  %endif
   179                              <1>  %else
   179 000009B2 FD                  <1>  std
   179                              <1>  %assign off_value 0x00010000
   179                              <1>  %ifidni %3,a16
   179                              <1> 
   179                              <1>  %assign off_cmp 0x0001ffff-(val_size-1)
   179                              <1>  %else
   179                              <1> 
   179                              <1>  %assign off_cmp 0x0000ffff-(val_size-1)
   179                              <1>  %endif
   179                              <1>  %endif
   179                              <1> 
   179                              <1>  %ifidni %3,a16
   179                              <1>  %assign off_mask 0x0000ffff
   179                              <1>  %else
   179                              <1>  %assign off_mask 0xffffffff
   179                              <1>  %endif
   179                              <1> 
   179                              <1> 
   179                              <1> 
   179 000009B3 66BF00000100        <1>  mov edi, off_value
   179 000009B9 66BB00000000        <1>  mov ebx, off_value & off_mask
   179 000009BF B000                <1>  mov sized_eax, 0
   179 000009C1 26678803            <1>  mov [es:ebx], sized_eax
   179 000009C5 B078                <1>  mov sized_eax, value
   179          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   179 000009C7 AA                  <1>  %3 stos%1
   179 000009C8 26673803            <1>  cmp [es:ebx], sized_eax
   179 000009CC 0F85BFCB            <1>  jne error
   179          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   179 000009D0 6681FFFFFF0100      <1>  cmp edi, off_cmp
   179 000009D7 0F85B4CB            <1>  jne error
   179          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   179                              <1> 
   179 000009DB 66BE00000100        <1>  mov esi, off_value
   179 000009E1 66BF00000100        <1>  mov edi, off_value
   179 000009E7 66BB00000000        <1>  mov ebx, off_value & off_mask
   179 000009ED 3E678803            <1>  mov [ds:ebx], sized_eax
   179 000009F1 26678803            <1>  mov [es:ebx], sized_eax
   179 000009F5 3C00                <1>  cmp sized_eax, 0
   179 000009F7 0F8494CB            <1>  je error
   179          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   179 000009FB A6                  <1>  %3 cmps%1
   179 000009FC 0F858FCB            <1>  jne error
   179          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   179 00000A00 6681FFFFFF0100      <1>  cmp edi, off_cmp
   179 00000A07 0F8584CB            <1>  jne error
   179          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   179 00000A0B 6681FEFFFF0100      <1>  cmp esi, off_cmp
   179 00000A12 0F8579CB            <1>  jne error
   179          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   179                              <1> 
   179 00000A16 66BF00000100        <1>  mov edi, off_value
   179 00000A1C B078                <1>  mov sized_eax, value
   179          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   179 00000A1E 26678803            <1>  mov [es:ebx], sized_eax
   179 00000A22 3C00                <1>  cmp sized_eax, 0
   179 00000A24 AE                  <1>  %3 scas%1
   179 00000A25 0F8566CB            <1>  jne error
   179          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   179 00000A29 6681FFFFFF0100      <1>  cmp edi, off_cmp
   179 00000A30 0F855BCB            <1>  jne error
   179          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   179                              <1> 
   179 00000A34 66BE00000100        <1>  mov esi, off_value
   179 00000A3A 66BF00000100        <1>  mov edi, off_value
   179 00000A40 B078                <1>  mov sized_eax, value
   179          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   179 00000A42 3E678803            <1>  mov [ds:ebx], sized_eax
   179 00000A46 B000                <1>  mov sized_eax, 0
   179 00000A48 26678803            <1>  mov [es:ebx], sized_eax
   179 00000A4C A4                  <1>  %3 movs%1
   179 00000A4D B078                <1>  mov sized_eax, value
   179          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   179 00000A4F 26673803            <1>  cmp [es:ebx], sized_eax
   179 00000A53 0F8538CB            <1>  jne error
   179          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   179 00000A57 6681FFFFFF0100      <1>  cmp edi, off_cmp
   179 00000A5E 0F852DCB            <1>  jne error
   179          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   179 00000A62 6681FEFFFF0100      <1>  cmp esi, off_cmp
   179 00000A69 0F8522CB            <1>  jne error
   179          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   179                              <1> 
   179 00000A6D 66BE00000100        <1>  mov esi, off_value
   179 00000A73 B078                <1>  mov sized_eax, value
   179          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   179 00000A75 26678803            <1>  mov [es:ebx], sized_eax
   179 00000A79 6631C0              <1>  xor eax, eax
   179 00000A7C AC                  <1>  %3 lods%1
   179 00000A7D 3C78                <1>  cmp sized_eax, value & val_mask
   179 00000A7F 0F850CCB            <1>  jne error
   179          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   179 00000A83 6681FEFFFF0100      <1>  cmp esi, off_cmp
   179 00000A8A 0F8501CB            <1>  jne error
   179          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   179                              <1> 
   180                                  	testStringOps w,1,a16
   180                              <1> 
   180                              <1>  %assign value 0x12345678
   180                              <1>  %ifidni %1,b
   180                              <1>  %assign val_size 1
   180                              <1>  %define val_mask 0x000000ff
   180                              <1>  %define sized_eax al
   180                              <1>  %endif
   180                              <1>  %ifidni %1,w
   180                              <1>  %assign val_size 2
   180                              <1>  %define val_mask 0x0000ffff
   180                              <1>  %define sized_eax ax
   180                              <1>  %endif
   180                              <1>  %ifidni %1,d
   180                              <1>  %assign val_size 4
   180                              <1>  %define val_mask 0xffffffff
   180                              <1>  %define sized_eax eax
   180                              <1>  %endif
   180                              <1> 
   180                              <1>  %if %2 == 0
   180                              <1>  cld
   180                              <1>  %assign off_value 0x0001ffff-(val_size-1)
   180                              <1>  %ifidni %3,a16
   180                              <1> 
   180                              <1>  %assign off_cmp 0x00010000
   180                              <1>  %else
   180                              <1> 
   180                              <1>  %assign off_cmp 0x00020000
   180                              <1>  %endif
   180                              <1>  %else
   180 00000A8E FD                  <1>  std
   180                              <1>  %assign off_value 0x00010000
   180                              <1>  %ifidni %3,a16
   180                              <1> 
   180                              <1>  %assign off_cmp 0x0001ffff-(val_size-1)
   180                              <1>  %else
   180                              <1> 
   180                              <1>  %assign off_cmp 0x0000ffff-(val_size-1)
   180                              <1>  %endif
   180                              <1>  %endif
   180                              <1> 
   180                              <1>  %ifidni %3,a16
   180                              <1>  %assign off_mask 0x0000ffff
   180                              <1>  %else
   180                              <1>  %assign off_mask 0xffffffff
   180                              <1>  %endif
   180                              <1> 
   180                              <1> 
   180                              <1> 
   180 00000A8F 66BF00000100        <1>  mov edi, off_value
   180 00000A95 66BB00000000        <1>  mov ebx, off_value & off_mask
   180 00000A9B B80000              <1>  mov sized_eax, 0
   180 00000A9E 26678903            <1>  mov [es:ebx], sized_eax
   180 00000AA2 B87856              <1>  mov sized_eax, value
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180 00000AA5 AB                  <1>  %3 stos%1
   180 00000AA6 26673903            <1>  cmp [es:ebx], sized_eax
   180 00000AAA 0F85E1CA            <1>  jne error
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180 00000AAE 6681FFFEFF0100      <1>  cmp edi, off_cmp
   180 00000AB5 0F85D6CA            <1>  jne error
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180                              <1> 
   180 00000AB9 66BE00000100        <1>  mov esi, off_value
   180 00000ABF 66BF00000100        <1>  mov edi, off_value
   180 00000AC5 66BB00000000        <1>  mov ebx, off_value & off_mask
   180 00000ACB 3E678903            <1>  mov [ds:ebx], sized_eax
   180 00000ACF 26678903            <1>  mov [es:ebx], sized_eax
   180 00000AD3 83F800              <1>  cmp sized_eax, 0
   180 00000AD6 0F84B5CA            <1>  je error
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180 00000ADA A7                  <1>  %3 cmps%1
   180 00000ADB 0F85B0CA            <1>  jne error
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180 00000ADF 6681FFFEFF0100      <1>  cmp edi, off_cmp
   180 00000AE6 0F85A5CA            <1>  jne error
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180 00000AEA 6681FEFEFF0100      <1>  cmp esi, off_cmp
   180 00000AF1 0F859ACA            <1>  jne error
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180                              <1> 
   180 00000AF5 66BF00000100        <1>  mov edi, off_value
   180 00000AFB B87856              <1>  mov sized_eax, value
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180 00000AFE 26678903            <1>  mov [es:ebx], sized_eax
   180 00000B02 83F800              <1>  cmp sized_eax, 0
   180 00000B05 AF                  <1>  %3 scas%1
   180 00000B06 0F8585CA            <1>  jne error
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180 00000B0A 6681FFFEFF0100      <1>  cmp edi, off_cmp
   180 00000B11 0F857ACA            <1>  jne error
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180                              <1> 
   180 00000B15 66BE00000100        <1>  mov esi, off_value
   180 00000B1B 66BF00000100        <1>  mov edi, off_value
   180 00000B21 B87856              <1>  mov sized_eax, value
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180 00000B24 3E678903            <1>  mov [ds:ebx], sized_eax
   180 00000B28 B80000              <1>  mov sized_eax, 0
   180 00000B2B 26678903            <1>  mov [es:ebx], sized_eax
   180 00000B2F A5                  <1>  %3 movs%1
   180 00000B30 B87856              <1>  mov sized_eax, value
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180 00000B33 26673903            <1>  cmp [es:ebx], sized_eax
   180 00000B37 0F8554CA            <1>  jne error
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180 00000B3B 6681FFFEFF0100      <1>  cmp edi, off_cmp
   180 00000B42 0F8549CA            <1>  jne error
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180 00000B46 6681FEFEFF0100      <1>  cmp esi, off_cmp
   180 00000B4D 0F853ECA            <1>  jne error
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180                              <1> 
   180 00000B51 66BE00000100        <1>  mov esi, off_value
   180 00000B57 B87856              <1>  mov sized_eax, value
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180 00000B5A 26678903            <1>  mov [es:ebx], sized_eax
   180 00000B5E 6631C0              <1>  xor eax, eax
   180 00000B61 AD                  <1>  %3 lods%1
   180 00000B62 3D7856              <1>  cmp sized_eax, value & val_mask
   180 00000B65 0F8526CA            <1>  jne error
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180 00000B69 6681FEFEFF0100      <1>  cmp esi, off_cmp
   180 00000B70 0F851BCA            <1>  jne error
   180          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   180                              <1> 
   181                                  	testStringOps d,1,a16
   181                              <1> 
   181                              <1>  %assign value 0x12345678
   181                              <1>  %ifidni %1,b
   181                              <1>  %assign val_size 1
   181                              <1>  %define val_mask 0x000000ff
   181                              <1>  %define sized_eax al
   181                              <1>  %endif
   181                              <1>  %ifidni %1,w
   181                              <1>  %assign val_size 2
   181                              <1>  %define val_mask 0x0000ffff
   181                              <1>  %define sized_eax ax
   181                              <1>  %endif
   181                              <1>  %ifidni %1,d
   181                              <1>  %assign val_size 4
   181                              <1>  %define val_mask 0xffffffff
   181                              <1>  %define sized_eax eax
   181                              <1>  %endif
   181                              <1> 
   181                              <1>  %if %2 == 0
   181                              <1>  cld
   181                              <1>  %assign off_value 0x0001ffff-(val_size-1)
   181                              <1>  %ifidni %3,a16
   181                              <1> 
   181                              <1>  %assign off_cmp 0x00010000
   181                              <1>  %else
   181                              <1> 
   181                              <1>  %assign off_cmp 0x00020000
   181                              <1>  %endif
   181                              <1>  %else
   181 00000B74 FD                  <1>  std
   181                              <1>  %assign off_value 0x00010000
   181                              <1>  %ifidni %3,a16
   181                              <1> 
   181                              <1>  %assign off_cmp 0x0001ffff-(val_size-1)
   181                              <1>  %else
   181                              <1> 
   181                              <1>  %assign off_cmp 0x0000ffff-(val_size-1)
   181                              <1>  %endif
   181                              <1>  %endif
   181                              <1> 
   181                              <1>  %ifidni %3,a16
   181                              <1>  %assign off_mask 0x0000ffff
   181                              <1>  %else
   181                              <1>  %assign off_mask 0xffffffff
   181                              <1>  %endif
   181                              <1> 
   181                              <1> 
   181                              <1> 
   181 00000B75 66BF00000100        <1>  mov edi, off_value
   181 00000B7B 66BB00000000        <1>  mov ebx, off_value & off_mask
   181 00000B81 66B800000000        <1>  mov sized_eax, 0
   181 00000B87 2666678903          <1>  mov [es:ebx], sized_eax
   181 00000B8C 66B878563412        <1>  mov sized_eax, value
   181 00000B92 66AB                <1>  %3 stos%1
   181 00000B94 2666673903          <1>  cmp [es:ebx], sized_eax
   181 00000B99 0F85F2C9            <1>  jne error
   181          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   181 00000B9D 6681FFFCFF0100      <1>  cmp edi, off_cmp
   181 00000BA4 0F85E7C9            <1>  jne error
   181          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   181                              <1> 
   181 00000BA8 66BE00000100        <1>  mov esi, off_value
   181 00000BAE 66BF00000100        <1>  mov edi, off_value
   181 00000BB4 66BB00000000        <1>  mov ebx, off_value & off_mask
   181 00000BBA 3E66678903          <1>  mov [ds:ebx], sized_eax
   181 00000BBF 2666678903          <1>  mov [es:ebx], sized_eax
   181 00000BC4 6683F800            <1>  cmp sized_eax, 0
   181 00000BC8 0F84C3C9            <1>  je error
   181          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   181 00000BCC 66A7                <1>  %3 cmps%1
   181 00000BCE 0F85BDC9            <1>  jne error
   181          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   181 00000BD2 6681FFFCFF0100      <1>  cmp edi, off_cmp
   181 00000BD9 0F85B2C9            <1>  jne error
   181          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   181 00000BDD 6681FEFCFF0100      <1>  cmp esi, off_cmp
   181 00000BE4 0F85A7C9            <1>  jne error
   181          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   181                              <1> 
   181 00000BE8 66BF00000100        <1>  mov edi, off_value
   181 00000BEE 66B878563412        <1>  mov sized_eax, value
   181 00000BF4 2666678903          <1>  mov [es:ebx], sized_eax
   181 00000BF9 6683F800            <1>  cmp sized_eax, 0
   181 00000BFD 66AF                <1>  %3 scas%1
   181 00000BFF 0F858CC9            <1>  jne error
   181          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   181 00000C03 6681FFFCFF0100      <1>  cmp edi, off_cmp
   181 00000C0A 0F8581C9            <1>  jne error
   181          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   181                              <1> 
   181 00000C0E 66BE00000100        <1>  mov esi, off_value
   181 00000C14 66BF00000100        <1>  mov edi, off_value
   181 00000C1A 66B878563412        <1>  mov sized_eax, value
   181 00000C20 3E66678903          <1>  mov [ds:ebx], sized_eax
   181 00000C25 66B800000000        <1>  mov sized_eax, 0
   181 00000C2B 2666678903          <1>  mov [es:ebx], sized_eax
   181 00000C30 66A5                <1>  %3 movs%1
   181 00000C32 66B878563412        <1>  mov sized_eax, value
   181 00000C38 2666673903          <1>  cmp [es:ebx], sized_eax
   181 00000C3D 0F854EC9            <1>  jne error
   181          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   181 00000C41 6681FFFCFF0100      <1>  cmp edi, off_cmp
   181 00000C48 0F8543C9            <1>  jne error
   181          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   181 00000C4C 6681FEFCFF0100      <1>  cmp esi, off_cmp
   181 00000C53 0F8538C9            <1>  jne error
   181          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   181                              <1> 
   181 00000C57 66BE00000100        <1>  mov esi, off_value
   181 00000C5D 66B878563412        <1>  mov sized_eax, value
   181 00000C63 2666678903          <1>  mov [es:ebx], sized_eax
   181 00000C68 6631C0              <1>  xor eax, eax
   181 00000C6B 66AD                <1>  %3 lods%1
   181 00000C6D 663D78563412        <1>  cmp sized_eax, value & val_mask
   181 00000C73 0F8518C9            <1>  jne error
   181          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   181 00000C77 6681FEFCFF0100      <1>  cmp esi, off_cmp
   181 00000C7E 0F850DC9            <1>  jne error
   181          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   181                              <1> 
   182                                  	testStringReps b,0,a16
   182                              <1> 
   182                              <1>  %assign bytes 0x100
   182                              <1> 
   182                              <1>  %ifidni %1,b
   182                              <1>  %assign items bytes
   182                              <1>  %endif
   182                              <1>  %ifidni %1,w
   182                              <1>  %assign items bytes/2
   182                              <1>  %endif
   182                              <1>  %ifidni %1,d
   182                              <1>  %assign items bytes/4
   182                              <1>  %endif
   182                              <1> 
   182                              <1>  %if %2 == 0
   182 00000C82 FC                  <1>  cld
   182                              <1>  %assign off_value 0x0001ff00
   182                              <1>  %ifidni %3,a16
   182                              <1> 
   182                              <1>  %assign off_cmp 0x00010000
   182                              <1>  %else
   182                              <1> 
   182                              <1>  %assign off_cmp 0x00020000
   182                              <1>  %endif
   182                              <1>  %else
   182                              <1>  std
   182                              <1>  %assign off_value 0x000100ff
   182                              <1>  %ifidni %3,a16
   182                              <1> 
   182                              <1>  %assign off_cmp 0x0001ffff
   182                              <1>  %else
   182                              <1> 
   182                              <1>  %assign off_cmp 0x0000ffff
   182                              <1>  %endif
   182                              <1>  %endif
   182                              <1> 
   182 00000C83 66B878563412        <1>  mov eax, 0x12345678
   182 00000C89 66BE00FF0100        <1>  mov esi, off_value
   182 00000C8F 66BF00FF0100        <1>  mov edi, off_value
   182                              <1> 
   182                              <1> 
   182                              <1> 
   182                              <1> 
   182 00000C95 66B878563412        <1>  mov eax, 0x12345678
   182 00000C9B 66BE00FF0100        <1>  mov esi, off_value
   182 00000CA1 66BF00FF0100        <1>  mov edi, off_value
   182 00000CA7 66B900010000        <1>  mov ecx, items
   182 00000CAD F3AA                <1>  %3 rep stos%1
   182 00000CAF 6683F900            <1>  cmp ecx, 0
   182 00000CB3 0F85D8C8            <1>  jnz error
   182          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   182 00000CB7 6681FF00000100      <1>  cmp edi, off_cmp
   182 00000CBE 0F85CDC8            <1>  jnz error
   182          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   182 00000CC2 66BF00FF0100        <1>  mov edi, off_value
   182                              <1> 
   182 00000CC8 8CC2                <1>  mov dx, es
   182 00000CCA 8CD9                <1>  mov cx, ds
   182 00000CCC 87D1                <1>  xchg dx, cx
   182 00000CCE 8EC2                <1>  mov es, dx
   182 00000CD0 8ED9                <1>  mov ds, cx
   182 00000CD2 6687FE              <1>  xchg edi, esi
   182                              <1> 
   182 00000CD5 66B900010000        <1>  mov ecx, items
   182 00000CDB F3AA                <1>  %3 rep stos%1
   182 00000CDD 66BF00FF0100        <1>  mov edi, off_value
   182                              <1> 
   182                              <1> 
   182 00000CE3 66B900010000        <1>  mov ecx, items
   182 00000CE9 F3A6                <1>  %3 repe cmps%1
   182 00000CEB 6683F900            <1>  cmp ecx, 0
   182 00000CEF 0F859CC8            <1>  jnz error
   182          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   182 00000CF3 6681FE00000100      <1>  cmp esi, off_cmp
   182 00000CFA 0F8591C8            <1>  jne error
   182          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   182 00000CFE 6681FF00000100      <1>  cmp edi, off_cmp
   182 00000D05 0F8586C8            <1>  jne error
   182          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   182 00000D09 66BF00FF0100        <1>  mov edi, off_value
   182 00000D0F 66BE00FF0100        <1>  mov esi, off_value
   182                              <1> 
   182                              <1> 
   182 00000D15 66B900010000        <1>  mov ecx, items
   182 00000D1B F3AE                <1>  %3 repe scas%1
   182 00000D1D 6683F900            <1>  cmp ecx, 0
   182 00000D21 0F856AC8            <1>  jne error
   182          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   182 00000D25 6681FF00000100      <1>  cmp edi, off_cmp
   182 00000D2C 0F855FC8            <1>  jne error
   182          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   182 00000D30 66BF00FF0100        <1>  mov edi, off_value
   182                              <1> 
   182                              <1> 
   182                              <1> 
   182 00000D36 66B800000000        <1>  mov eax, 0
   182 00000D3C 66B900010000        <1>  mov ecx, items
   182 00000D42 F3AA                <1>  %3 rep stos%1
   182 00000D44 66BF00FF0100        <1>  mov edi, off_value
   182 00000D4A 66B900010000        <1>  mov ecx, items
   182 00000D50 F3A4                <1>  %3 rep movs%1
   182 00000D52 6683F900            <1>  cmp ecx, 0
   182 00000D56 0F8535C8            <1>  jne error
   182          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   182 00000D5A 6681FE00000100      <1>  cmp esi, off_cmp
   182 00000D61 0F852AC8            <1>  jne error
   182          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   182 00000D65 6681FF00000100      <1>  cmp edi, off_cmp
   182 00000D6C 0F851FC8            <1>  jne error
   182          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   182 00000D70 66B900010000        <1>  mov ecx, items
   182 00000D76 66BF00FF0100        <1>  mov edi, off_value
   182 00000D7C 66BE00FF0100        <1>  mov esi, off_value
   182 00000D82 F3A6                <1>  %3 repe cmps%1
   182 00000D84 6683F900            <1>  cmp ecx, 0
   182 00000D88 0F8503C8            <1>  jne error
   182          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   182 00000D8C 6681FE00000100      <1>  cmp esi, off_cmp
   182 00000D93 0F85F8C7            <1>  jne error
   182          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   182 00000D97 6681FF00000100      <1>  cmp edi, off_cmp
   182 00000D9E 0F85EDC7            <1>  jne error
   182          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   183                                  	testStringReps w,0,a16
   183                              <1> 
   183                              <1>  %assign bytes 0x100
   183                              <1> 
   183                              <1>  %ifidni %1,b
   183                              <1>  %assign items bytes
   183                              <1>  %endif
   183                              <1>  %ifidni %1,w
   183                              <1>  %assign items bytes/2
   183                              <1>  %endif
   183                              <1>  %ifidni %1,d
   183                              <1>  %assign items bytes/4
   183                              <1>  %endif
   183                              <1> 
   183                              <1>  %if %2 == 0
   183 00000DA2 FC                  <1>  cld
   183                              <1>  %assign off_value 0x0001ff00
   183                              <1>  %ifidni %3,a16
   183                              <1> 
   183                              <1>  %assign off_cmp 0x00010000
   183                              <1>  %else
   183                              <1> 
   183                              <1>  %assign off_cmp 0x00020000
   183                              <1>  %endif
   183                              <1>  %else
   183                              <1>  std
   183                              <1>  %assign off_value 0x000100ff
   183                              <1>  %ifidni %3,a16
   183                              <1> 
   183                              <1>  %assign off_cmp 0x0001ffff
   183                              <1>  %else
   183                              <1> 
   183                              <1>  %assign off_cmp 0x0000ffff
   183                              <1>  %endif
   183                              <1>  %endif
   183                              <1> 
   183 00000DA3 66B878563412        <1>  mov eax, 0x12345678
   183 00000DA9 66BE00FF0100        <1>  mov esi, off_value
   183 00000DAF 66BF00FF0100        <1>  mov edi, off_value
   183                              <1> 
   183                              <1> 
   183                              <1> 
   183                              <1> 
   183 00000DB5 66B878563412        <1>  mov eax, 0x12345678
   183 00000DBB 66BE00FF0100        <1>  mov esi, off_value
   183 00000DC1 66BF00FF0100        <1>  mov edi, off_value
   183 00000DC7 66B980000000        <1>  mov ecx, items
   183 00000DCD F3AB                <1>  %3 rep stos%1
   183 00000DCF 6683F900            <1>  cmp ecx, 0
   183 00000DD3 0F85B8C7            <1>  jnz error
   183          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   183 00000DD7 6681FF00000100      <1>  cmp edi, off_cmp
   183 00000DDE 0F85ADC7            <1>  jnz error
   183          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   183 00000DE2 66BF00FF0100        <1>  mov edi, off_value
   183                              <1> 
   183 00000DE8 8CC2                <1>  mov dx, es
   183 00000DEA 8CD9                <1>  mov cx, ds
   183 00000DEC 87D1                <1>  xchg dx, cx
   183 00000DEE 8EC2                <1>  mov es, dx
   183 00000DF0 8ED9                <1>  mov ds, cx
   183 00000DF2 6687FE              <1>  xchg edi, esi
   183                              <1> 
   183 00000DF5 66B980000000        <1>  mov ecx, items
   183 00000DFB F3AB                <1>  %3 rep stos%1
   183 00000DFD 66BF00FF0100        <1>  mov edi, off_value
   183                              <1> 
   183                              <1> 
   183 00000E03 66B980000000        <1>  mov ecx, items
   183 00000E09 F3A7                <1>  %3 repe cmps%1
   183 00000E0B 6683F900            <1>  cmp ecx, 0
   183 00000E0F 0F857CC7            <1>  jnz error
   183          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   183 00000E13 6681FE00000100      <1>  cmp esi, off_cmp
   183 00000E1A 0F8571C7            <1>  jne error
   183          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   183 00000E1E 6681FF00000100      <1>  cmp edi, off_cmp
   183 00000E25 0F8566C7            <1>  jne error
   183          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   183 00000E29 66BF00FF0100        <1>  mov edi, off_value
   183 00000E2F 66BE00FF0100        <1>  mov esi, off_value
   183                              <1> 
   183                              <1> 
   183 00000E35 66B980000000        <1>  mov ecx, items
   183 00000E3B F3AF                <1>  %3 repe scas%1
   183 00000E3D 6683F900            <1>  cmp ecx, 0
   183 00000E41 0F854AC7            <1>  jne error
   183          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   183 00000E45 6681FF00000100      <1>  cmp edi, off_cmp
   183 00000E4C 0F853FC7            <1>  jne error
   183          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   183 00000E50 66BF00FF0100        <1>  mov edi, off_value
   183                              <1> 
   183                              <1> 
   183                              <1> 
   183 00000E56 66B800000000        <1>  mov eax, 0
   183 00000E5C 66B980000000        <1>  mov ecx, items
   183 00000E62 F3AB                <1>  %3 rep stos%1
   183 00000E64 66BF00FF0100        <1>  mov edi, off_value
   183 00000E6A 66B980000000        <1>  mov ecx, items
   183 00000E70 F3A5                <1>  %3 rep movs%1
   183 00000E72 6683F900            <1>  cmp ecx, 0
   183 00000E76 0F8515C7            <1>  jne error
   183          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   183 00000E7A 6681FE00000100      <1>  cmp esi, off_cmp
   183 00000E81 0F850AC7            <1>  jne error
   183          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   183 00000E85 6681FF00000100      <1>  cmp edi, off_cmp
   183 00000E8C 0F85FFC6            <1>  jne error
   183          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   183 00000E90 66B980000000        <1>  mov ecx, items
   183 00000E96 66BF00FF0100        <1>  mov edi, off_value
   183 00000E9C 66BE00FF0100        <1>  mov esi, off_value
   183 00000EA2 F3A7                <1>  %3 repe cmps%1
   183 00000EA4 6683F900            <1>  cmp ecx, 0
   183 00000EA8 0F85E3C6            <1>  jne error
   183          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   183 00000EAC 6681FE00000100      <1>  cmp esi, off_cmp
   183 00000EB3 0F85D8C6            <1>  jne error
   183          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   183 00000EB7 6681FF00000100      <1>  cmp edi, off_cmp
   183 00000EBE 0F85CDC6            <1>  jne error
   183          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   184                                  	testStringReps d,0,a16
   184                              <1> 
   184                              <1>  %assign bytes 0x100
   184                              <1> 
   184                              <1>  %ifidni %1,b
   184                              <1>  %assign items bytes
   184                              <1>  %endif
   184                              <1>  %ifidni %1,w
   184                              <1>  %assign items bytes/2
   184                              <1>  %endif
   184                              <1>  %ifidni %1,d
   184                              <1>  %assign items bytes/4
   184                              <1>  %endif
   184                              <1> 
   184                              <1>  %if %2 == 0
   184 00000EC2 FC                  <1>  cld
   184                              <1>  %assign off_value 0x0001ff00
   184                              <1>  %ifidni %3,a16
   184                              <1> 
   184                              <1>  %assign off_cmp 0x00010000
   184                              <1>  %else
   184                              <1> 
   184                              <1>  %assign off_cmp 0x00020000
   184                              <1>  %endif
   184                              <1>  %else
   184                              <1>  std
   184                              <1>  %assign off_value 0x000100ff
   184                              <1>  %ifidni %3,a16
   184                              <1> 
   184                              <1>  %assign off_cmp 0x0001ffff
   184                              <1>  %else
   184                              <1> 
   184                              <1>  %assign off_cmp 0x0000ffff
   184                              <1>  %endif
   184                              <1>  %endif
   184                              <1> 
   184 00000EC3 66B878563412        <1>  mov eax, 0x12345678
   184 00000EC9 66BE00FF0100        <1>  mov esi, off_value
   184 00000ECF 66BF00FF0100        <1>  mov edi, off_value
   184                              <1> 
   184                              <1> 
   184                              <1> 
   184                              <1> 
   184 00000ED5 66B878563412        <1>  mov eax, 0x12345678
   184 00000EDB 66BE00FF0100        <1>  mov esi, off_value
   184 00000EE1 66BF00FF0100        <1>  mov edi, off_value
   184 00000EE7 66B940000000        <1>  mov ecx, items
   184 00000EED F366AB              <1>  %3 rep stos%1
   184 00000EF0 6683F900            <1>  cmp ecx, 0
   184 00000EF4 0F8597C6            <1>  jnz error
   184          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   184 00000EF8 6681FF00000100      <1>  cmp edi, off_cmp
   184 00000EFF 0F858CC6            <1>  jnz error
   184          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   184 00000F03 66BF00FF0100        <1>  mov edi, off_value
   184                              <1> 
   184 00000F09 8CC2                <1>  mov dx, es
   184 00000F0B 8CD9                <1>  mov cx, ds
   184 00000F0D 87D1                <1>  xchg dx, cx
   184 00000F0F 8EC2                <1>  mov es, dx
   184 00000F11 8ED9                <1>  mov ds, cx
   184 00000F13 6687FE              <1>  xchg edi, esi
   184                              <1> 
   184 00000F16 66B940000000        <1>  mov ecx, items
   184 00000F1C F366AB              <1>  %3 rep stos%1
   184 00000F1F 66BF00FF0100        <1>  mov edi, off_value
   184                              <1> 
   184                              <1> 
   184 00000F25 66B940000000        <1>  mov ecx, items
   184 00000F2B F366A7              <1>  %3 repe cmps%1
   184 00000F2E 6683F900            <1>  cmp ecx, 0
   184 00000F32 0F8559C6            <1>  jnz error
   184          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   184 00000F36 6681FE00000100      <1>  cmp esi, off_cmp
   184 00000F3D 0F854EC6            <1>  jne error
   184          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   184 00000F41 6681FF00000100      <1>  cmp edi, off_cmp
   184 00000F48 0F8543C6            <1>  jne error
   184          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   184 00000F4C 66BF00FF0100        <1>  mov edi, off_value
   184 00000F52 66BE00FF0100        <1>  mov esi, off_value
   184                              <1> 
   184                              <1> 
   184 00000F58 66B940000000        <1>  mov ecx, items
   184 00000F5E F366AF              <1>  %3 repe scas%1
   184 00000F61 6683F900            <1>  cmp ecx, 0
   184 00000F65 0F8526C6            <1>  jne error
   184          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   184 00000F69 6681FF00000100      <1>  cmp edi, off_cmp
   184 00000F70 0F851BC6            <1>  jne error
   184          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   184 00000F74 66BF00FF0100        <1>  mov edi, off_value
   184                              <1> 
   184                              <1> 
   184                              <1> 
   184 00000F7A 66B800000000        <1>  mov eax, 0
   184 00000F80 66B940000000        <1>  mov ecx, items
   184 00000F86 F366AB              <1>  %3 rep stos%1
   184 00000F89 66BF00FF0100        <1>  mov edi, off_value
   184 00000F8F 66B940000000        <1>  mov ecx, items
   184 00000F95 F366A5              <1>  %3 rep movs%1
   184 00000F98 6683F900            <1>  cmp ecx, 0
   184 00000F9C 0F85EFC5            <1>  jne error
   184          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   184 00000FA0 6681FE00000100      <1>  cmp esi, off_cmp
   184 00000FA7 0F85E4C5            <1>  jne error
   184          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   184 00000FAB 6681FF00000100      <1>  cmp edi, off_cmp
   184 00000FB2 0F85D9C5            <1>  jne error
   184          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   184 00000FB6 66B940000000        <1>  mov ecx, items
   184 00000FBC 66BF00FF0100        <1>  mov edi, off_value
   184 00000FC2 66BE00FF0100        <1>  mov esi, off_value
   184 00000FC8 F366A7              <1>  %3 repe cmps%1
   184 00000FCB 6683F900            <1>  cmp ecx, 0
   184 00000FCF 0F85BCC5            <1>  jne error
   184          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   184 00000FD3 6681FE00000100      <1>  cmp esi, off_cmp
   184 00000FDA 0F85B1C5            <1>  jne error
   184          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   184 00000FDE 6681FF00000100      <1>  cmp edi, off_cmp
   184 00000FE5 0F85A6C5            <1>  jne error
   184          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   185                                  	testStringReps b,1,a16
   185                              <1> 
   185                              <1>  %assign bytes 0x100
   185                              <1> 
   185                              <1>  %ifidni %1,b
   185                              <1>  %assign items bytes
   185                              <1>  %endif
   185                              <1>  %ifidni %1,w
   185                              <1>  %assign items bytes/2
   185                              <1>  %endif
   185                              <1>  %ifidni %1,d
   185                              <1>  %assign items bytes/4
   185                              <1>  %endif
   185                              <1> 
   185                              <1>  %if %2 == 0
   185                              <1>  cld
   185                              <1>  %assign off_value 0x0001ff00
   185                              <1>  %ifidni %3,a16
   185                              <1> 
   185                              <1>  %assign off_cmp 0x00010000
   185                              <1>  %else
   185                              <1> 
   185                              <1>  %assign off_cmp 0x00020000
   185                              <1>  %endif
   185                              <1>  %else
   185 00000FE9 FD                  <1>  std
   185                              <1>  %assign off_value 0x000100ff
   185                              <1>  %ifidni %3,a16
   185                              <1> 
   185                              <1>  %assign off_cmp 0x0001ffff
   185                              <1>  %else
   185                              <1> 
   185                              <1>  %assign off_cmp 0x0000ffff
   185                              <1>  %endif
   185                              <1>  %endif
   185                              <1> 
   185 00000FEA 66B878563412        <1>  mov eax, 0x12345678
   185 00000FF0 66BEFF000100        <1>  mov esi, off_value
   185 00000FF6 66BFFF000100        <1>  mov edi, off_value
   185                              <1> 
   185                              <1> 
   185                              <1> 
   185                              <1> 
   185 00000FFC 66B878563412        <1>  mov eax, 0x12345678
   185 00001002 66BEFF000100        <1>  mov esi, off_value
   185 00001008 66BFFF000100        <1>  mov edi, off_value
   185 0000100E 66B900010000        <1>  mov ecx, items
   185 00001014 F3AA                <1>  %3 rep stos%1
   185 00001016 6683F900            <1>  cmp ecx, 0
   185 0000101A 0F8571C5            <1>  jnz error
   185          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   185 0000101E 6681FFFFFF0100      <1>  cmp edi, off_cmp
   185 00001025 0F8566C5            <1>  jnz error
   185          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   185 00001029 66BFFF000100        <1>  mov edi, off_value
   185                              <1> 
   185 0000102F 8CC2                <1>  mov dx, es
   185 00001031 8CD9                <1>  mov cx, ds
   185 00001033 87D1                <1>  xchg dx, cx
   185 00001035 8EC2                <1>  mov es, dx
   185 00001037 8ED9                <1>  mov ds, cx
   185 00001039 6687FE              <1>  xchg edi, esi
   185                              <1> 
   185 0000103C 66B900010000        <1>  mov ecx, items
   185 00001042 F3AA                <1>  %3 rep stos%1
   185 00001044 66BFFF000100        <1>  mov edi, off_value
   185                              <1> 
   185                              <1> 
   185 0000104A 66B900010000        <1>  mov ecx, items
   185 00001050 F3A6                <1>  %3 repe cmps%1
   185 00001052 6683F900            <1>  cmp ecx, 0
   185 00001056 0F8535C5            <1>  jnz error
   185          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   185 0000105A 6681FEFFFF0100      <1>  cmp esi, off_cmp
   185 00001061 0F852AC5            <1>  jne error
   185          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   185 00001065 6681FFFFFF0100      <1>  cmp edi, off_cmp
   185 0000106C 0F851FC5            <1>  jne error
   185          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   185 00001070 66BFFF000100        <1>  mov edi, off_value
   185 00001076 66BEFF000100        <1>  mov esi, off_value
   185                              <1> 
   185                              <1> 
   185 0000107C 66B900010000        <1>  mov ecx, items
   185 00001082 F3AE                <1>  %3 repe scas%1
   185 00001084 6683F900            <1>  cmp ecx, 0
   185 00001088 0F8503C5            <1>  jne error
   185          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   185 0000108C 6681FFFFFF0100      <1>  cmp edi, off_cmp
   185 00001093 0F85F8C4            <1>  jne error
   185          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   185 00001097 66BFFF000100        <1>  mov edi, off_value
   185                              <1> 
   185                              <1> 
   185                              <1> 
   185 0000109D 66B800000000        <1>  mov eax, 0
   185 000010A3 66B900010000        <1>  mov ecx, items
   185 000010A9 F3AA                <1>  %3 rep stos%1
   185 000010AB 66BFFF000100        <1>  mov edi, off_value
   185 000010B1 66B900010000        <1>  mov ecx, items
   185 000010B7 F3A4                <1>  %3 rep movs%1
   185 000010B9 6683F900            <1>  cmp ecx, 0
   185 000010BD 0F85CEC4            <1>  jne error
   185          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   185 000010C1 6681FEFFFF0100      <1>  cmp esi, off_cmp
   185 000010C8 0F85C3C4            <1>  jne error
   185          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   185 000010CC 6681FFFFFF0100      <1>  cmp edi, off_cmp
   185 000010D3 0F85B8C4            <1>  jne error
   185          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   185 000010D7 66B900010000        <1>  mov ecx, items
   185 000010DD 66BFFF000100        <1>  mov edi, off_value
   185 000010E3 66BEFF000100        <1>  mov esi, off_value
   185 000010E9 F3A6                <1>  %3 repe cmps%1
   185 000010EB 6683F900            <1>  cmp ecx, 0
   185 000010EF 0F859CC4            <1>  jne error
   185          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   185 000010F3 6681FEFFFF0100      <1>  cmp esi, off_cmp
   185 000010FA 0F8591C4            <1>  jne error
   185          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   185 000010FE 6681FFFFFF0100      <1>  cmp edi, off_cmp
   185 00001105 0F8586C4            <1>  jne error
   185          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   186                                  	testStringReps w,1,a16
   186                              <1> 
   186                              <1>  %assign bytes 0x100
   186                              <1> 
   186                              <1>  %ifidni %1,b
   186                              <1>  %assign items bytes
   186                              <1>  %endif
   186                              <1>  %ifidni %1,w
   186                              <1>  %assign items bytes/2
   186                              <1>  %endif
   186                              <1>  %ifidni %1,d
   186                              <1>  %assign items bytes/4
   186                              <1>  %endif
   186                              <1> 
   186                              <1>  %if %2 == 0
   186                              <1>  cld
   186                              <1>  %assign off_value 0x0001ff00
   186                              <1>  %ifidni %3,a16
   186                              <1> 
   186                              <1>  %assign off_cmp 0x00010000
   186                              <1>  %else
   186                              <1> 
   186                              <1>  %assign off_cmp 0x00020000
   186                              <1>  %endif
   186                              <1>  %else
   186 00001109 FD                  <1>  std
   186                              <1>  %assign off_value 0x000100ff
   186                              <1>  %ifidni %3,a16
   186                              <1> 
   186                              <1>  %assign off_cmp 0x0001ffff
   186                              <1>  %else
   186                              <1> 
   186                              <1>  %assign off_cmp 0x0000ffff
   186                              <1>  %endif
   186                              <1>  %endif
   186                              <1> 
   186 0000110A 66B878563412        <1>  mov eax, 0x12345678
   186 00001110 66BEFF000100        <1>  mov esi, off_value
   186 00001116 66BFFF000100        <1>  mov edi, off_value
   186                              <1> 
   186                              <1> 
   186                              <1> 
   186                              <1> 
   186 0000111C 66B878563412        <1>  mov eax, 0x12345678
   186 00001122 66BEFF000100        <1>  mov esi, off_value
   186 00001128 66BFFF000100        <1>  mov edi, off_value
   186 0000112E 66B980000000        <1>  mov ecx, items
   186 00001134 F3AB                <1>  %3 rep stos%1
   186 00001136 6683F900            <1>  cmp ecx, 0
   186 0000113A 0F8551C4            <1>  jnz error
   186          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   186 0000113E 6681FFFFFF0100      <1>  cmp edi, off_cmp
   186 00001145 0F8546C4            <1>  jnz error
   186          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   186 00001149 66BFFF000100        <1>  mov edi, off_value
   186                              <1> 
   186 0000114F 8CC2                <1>  mov dx, es
   186 00001151 8CD9                <1>  mov cx, ds
   186 00001153 87D1                <1>  xchg dx, cx
   186 00001155 8EC2                <1>  mov es, dx
   186 00001157 8ED9                <1>  mov ds, cx
   186 00001159 6687FE              <1>  xchg edi, esi
   186                              <1> 
   186 0000115C 66B980000000        <1>  mov ecx, items
   186 00001162 F3AB                <1>  %3 rep stos%1
   186 00001164 66BFFF000100        <1>  mov edi, off_value
   186                              <1> 
   186                              <1> 
   186 0000116A 66B980000000        <1>  mov ecx, items
   186 00001170 F3A7                <1>  %3 repe cmps%1
   186 00001172 6683F900            <1>  cmp ecx, 0
   186 00001176 0F8515C4            <1>  jnz error
   186          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   186 0000117A 6681FEFFFF0100      <1>  cmp esi, off_cmp
   186 00001181 0F850AC4            <1>  jne error
   186          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   186 00001185 6681FFFFFF0100      <1>  cmp edi, off_cmp
   186 0000118C 0F85FFC3            <1>  jne error
   186          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   186 00001190 66BFFF000100        <1>  mov edi, off_value
   186 00001196 66BEFF000100        <1>  mov esi, off_value
   186                              <1> 
   186                              <1> 
   186 0000119C 66B980000000        <1>  mov ecx, items
   186 000011A2 F3AF                <1>  %3 repe scas%1
   186 000011A4 6683F900            <1>  cmp ecx, 0
   186 000011A8 0F85E3C3            <1>  jne error
   186          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   186 000011AC 6681FFFFFF0100      <1>  cmp edi, off_cmp
   186 000011B3 0F85D8C3            <1>  jne error
   186          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   186 000011B7 66BFFF000100        <1>  mov edi, off_value
   186                              <1> 
   186                              <1> 
   186                              <1> 
   186 000011BD 66B800000000        <1>  mov eax, 0
   186 000011C3 66B980000000        <1>  mov ecx, items
   186 000011C9 F3AB                <1>  %3 rep stos%1
   186 000011CB 66BFFF000100        <1>  mov edi, off_value
   186 000011D1 66B980000000        <1>  mov ecx, items
   186 000011D7 F3A5                <1>  %3 rep movs%1
   186 000011D9 6683F900            <1>  cmp ecx, 0
   186 000011DD 0F85AEC3            <1>  jne error
   186          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   186 000011E1 6681FEFFFF0100      <1>  cmp esi, off_cmp
   186 000011E8 0F85A3C3            <1>  jne error
   186          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   186 000011EC 6681FFFFFF0100      <1>  cmp edi, off_cmp
   186 000011F3 0F8598C3            <1>  jne error
   186          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   186 000011F7 66B980000000        <1>  mov ecx, items
   186 000011FD 66BFFF000100        <1>  mov edi, off_value
   186 00001203 66BEFF000100        <1>  mov esi, off_value
   186 00001209 F3A7                <1>  %3 repe cmps%1
   186 0000120B 6683F900            <1>  cmp ecx, 0
   186 0000120F 0F857CC3            <1>  jne error
   186          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   186 00001213 6681FEFFFF0100      <1>  cmp esi, off_cmp
   186 0000121A 0F8571C3            <1>  jne error
   186          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   186 0000121E 6681FFFFFF0100      <1>  cmp edi, off_cmp
   186 00001225 0F8566C3            <1>  jne error
   186          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   187                                  	testStringReps d,1,a16
   187                              <1> 
   187                              <1>  %assign bytes 0x100
   187                              <1> 
   187                              <1>  %ifidni %1,b
   187                              <1>  %assign items bytes
   187                              <1>  %endif
   187                              <1>  %ifidni %1,w
   187                              <1>  %assign items bytes/2
   187                              <1>  %endif
   187                              <1>  %ifidni %1,d
   187                              <1>  %assign items bytes/4
   187                              <1>  %endif
   187                              <1> 
   187                              <1>  %if %2 == 0
   187                              <1>  cld
   187                              <1>  %assign off_value 0x0001ff00
   187                              <1>  %ifidni %3,a16
   187                              <1> 
   187                              <1>  %assign off_cmp 0x00010000
   187                              <1>  %else
   187                              <1> 
   187                              <1>  %assign off_cmp 0x00020000
   187                              <1>  %endif
   187                              <1>  %else
   187 00001229 FD                  <1>  std
   187                              <1>  %assign off_value 0x000100ff
   187                              <1>  %ifidni %3,a16
   187                              <1> 
   187                              <1>  %assign off_cmp 0x0001ffff
   187                              <1>  %else
   187                              <1> 
   187                              <1>  %assign off_cmp 0x0000ffff
   187                              <1>  %endif
   187                              <1>  %endif
   187                              <1> 
   187 0000122A 66B878563412        <1>  mov eax, 0x12345678
   187 00001230 66BEFF000100        <1>  mov esi, off_value
   187 00001236 66BFFF000100        <1>  mov edi, off_value
   187                              <1> 
   187                              <1> 
   187                              <1> 
   187                              <1> 
   187 0000123C 66B878563412        <1>  mov eax, 0x12345678
   187 00001242 66BEFF000100        <1>  mov esi, off_value
   187 00001248 66BFFF000100        <1>  mov edi, off_value
   187 0000124E 66B940000000        <1>  mov ecx, items
   187 00001254 F366AB              <1>  %3 rep stos%1
   187 00001257 6683F900            <1>  cmp ecx, 0
   187 0000125B 0F8530C3            <1>  jnz error
   187          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   187 0000125F 6681FFFFFF0100      <1>  cmp edi, off_cmp
   187 00001266 0F8525C3            <1>  jnz error
   187          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   187 0000126A 66BFFF000100        <1>  mov edi, off_value
   187                              <1> 
   187 00001270 8CC2                <1>  mov dx, es
   187 00001272 8CD9                <1>  mov cx, ds
   187 00001274 87D1                <1>  xchg dx, cx
   187 00001276 8EC2                <1>  mov es, dx
   187 00001278 8ED9                <1>  mov ds, cx
   187 0000127A 6687FE              <1>  xchg edi, esi
   187                              <1> 
   187 0000127D 66B940000000        <1>  mov ecx, items
   187 00001283 F366AB              <1>  %3 rep stos%1
   187 00001286 66BFFF000100        <1>  mov edi, off_value
   187                              <1> 
   187                              <1> 
   187 0000128C 66B940000000        <1>  mov ecx, items
   187 00001292 F366A7              <1>  %3 repe cmps%1
   187 00001295 6683F900            <1>  cmp ecx, 0
   187 00001299 0F85F2C2            <1>  jnz error
   187          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   187 0000129D 6681FEFFFF0100      <1>  cmp esi, off_cmp
   187 000012A4 0F85E7C2            <1>  jne error
   187          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   187 000012A8 6681FFFFFF0100      <1>  cmp edi, off_cmp
   187 000012AF 0F85DCC2            <1>  jne error
   187          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   187 000012B3 66BFFF000100        <1>  mov edi, off_value
   187 000012B9 66BEFF000100        <1>  mov esi, off_value
   187                              <1> 
   187                              <1> 
   187 000012BF 66B940000000        <1>  mov ecx, items
   187 000012C5 F366AF              <1>  %3 repe scas%1
   187 000012C8 6683F900            <1>  cmp ecx, 0
   187 000012CC 0F85BFC2            <1>  jne error
   187          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   187 000012D0 6681FFFFFF0100      <1>  cmp edi, off_cmp
   187 000012D7 0F85B4C2            <1>  jne error
   187          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   187 000012DB 66BFFF000100        <1>  mov edi, off_value
   187                              <1> 
   187                              <1> 
   187                              <1> 
   187 000012E1 66B800000000        <1>  mov eax, 0
   187 000012E7 66B940000000        <1>  mov ecx, items
   187 000012ED F366AB              <1>  %3 rep stos%1
   187 000012F0 66BFFF000100        <1>  mov edi, off_value
   187 000012F6 66B940000000        <1>  mov ecx, items
   187 000012FC F366A5              <1>  %3 rep movs%1
   187 000012FF 6683F900            <1>  cmp ecx, 0
   187 00001303 0F8588C2            <1>  jne error
   187          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   187 00001307 6681FEFFFF0100      <1>  cmp esi, off_cmp
   187 0000130E 0F857DC2            <1>  jne error
   187          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   187 00001312 6681FFFFFF0100      <1>  cmp edi, off_cmp
   187 00001319 0F8572C2            <1>  jne error
   187          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   187 0000131D 66B940000000        <1>  mov ecx, items
   187 00001323 66BFFF000100        <1>  mov edi, off_value
   187 00001329 66BEFF000100        <1>  mov esi, off_value
   187 0000132F F366A7              <1>  %3 repe cmps%1
   187 00001332 6683F900            <1>  cmp ecx, 0
   187 00001336 0F8555C2            <1>  jne error
   187          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   187 0000133A 6681FEFFFF0100      <1>  cmp esi, off_cmp
   187 00001341 0F854AC2            <1>  jne error
   187          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   187 00001345 6681FFFFFF0100      <1>  cmp edi, off_cmp
   187 0000134C 0F853FC2            <1>  jne error
   187          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   188                                  
   189                                  	advTestSegReal
   189                              <1>  advTestBase
   189                              <2>  %assign TEST_BASE1 TEST_BASE1+0x1000
   189                              <2>  %assign TEST_BASE2 TEST_BASE2+0x1000
   189                              <1>  %assign D1_SEG_REAL TEST_BASE1 >> 4
   189                              <1>  %assign D2_SEG_REAL TEST_BASE2 >> 4
   189 00001350 BA0022              <1>  mov dx, D1_SEG_REAL
   189 00001353 8EDA                <1>  mov ds, dx
   189 00001355 BA0062              <1>  mov dx, D2_SEG_REAL
   189 00001358 8EC2                <1>  mov es, dx
   190                                  
   191                                  ;
   192                                  ;   Calls
   193                                  ;
   194                                  %include "tests/call_m.asm"
     1                              <1> ;
     2                              <1> ;   Tests Call near by displacement and register indirect
     3                              <1> ;   Stack must be initilized.
     4                              <1> ;   %1: stack pointer register
     5                              <1> ;   Uses: AX, EBX, Flags
     6                              <1> ;
     7                              <1> %macro testCallNear 1
     8                              <1> 	%ifidni %1,sp
     9                              <1> 	%define spcmp ax
    10                              <1> 	%else
    11                              <1> 	%define spcmp eax
    12                              <1> 	%endif
    13                              <1> 	mov spcmp, %1
    14                              <1> 
    15                              <1> %%rel16:
    16                              <1> 	clc
    17                              <1> 	o16 call word %%nearfn16
    18                              <1> 	jnc error
    19                              <1> 	jmp %%rel32
    20                              <1> %%nearfn16:
    21                              <1> 	sub spcmp, 2
    22                              <1> 	cmp %1, spcmp
    23                              <1> 	jne error
    24                              <1> 	add spcmp, 2
    25                              <1> 	stc
    26                              <1> 	o16 ret
    27                              <1> 	jmp error
    28                              <1> 
    29                              <1> %%rel32:
    30                              <1> 	clc
    31                              <1> 	o32 call dword %%nearfn32
    32                              <1> 	jnc error
    33                              <1> 	jmp %%rm16
    34                              <1> %%nearfn32:
    35                              <1> 	sub spcmp, 4
    36                              <1> 	cmp %1, spcmp
    37                              <1> 	jne error
    38                              <1> 	add spcmp, 4
    39                              <1> 	stc
    40                              <1> 	o32 ret
    41                              <1> 	jmp error
    42                              <1> 
    43                              <1> %%rm16:
    44                              <1> 	clc
    45                              <1> 	mov bx, %%nearfn16
    46                              <1> 	o16 call bx
    47                              <1> 	jnc error
    48                              <1> %%rm32:
    49                              <1> 	clc
    50                              <1> 	mov ebx, %%nearfn32
    51                              <1> 	o32 call ebx
    52                              <1> 	jnc error
    53                              <1> %endmacro
    54                              <1> 
    55                              <1> ;
    56                              <1> ;   Tests Call far by immediate and memory pointers
    57                              <1> ;   Stack must be initilized
    58                              <1> ;   %1: code segment
    59                              <1> ;   Uses: AX, Flags, DS:SI as scratch memory
    60                              <1> ;
    61                              <1> %macro testCallFar 1
    62                              <1> 	mov ax, sp
    63                              <1> 
    64                              <1> 	clc
    65                              <1> 	o16 call word %1:%%farfn16
    66                              <1> 	jnc error
    67                              <1> 	jmp %%o32
    68                              <1> %%farfn16:
    69                              <1> 	sub ax, 4
    70                              <1> 	cmp sp, ax
    71                              <1> 	jne error
    72                              <1> 	add ax, 4
    73                              <1> 	stc
    74                              <1> 	o16 retf
    75                              <1> 	jmp error
    76                              <1> 
    77                              <1> %%o32:
    78                              <1> 	clc
    79                              <1> 	o32 call dword %1:%%farfn32
    80                              <1> 	jnc error
    81                              <1> 	jmp %%m1616
    82                              <1> %%farfn32:
    83                              <1> 	sub ax, 8
    84                              <1> 	cmp sp, ax
    85                              <1> 	jne error
    86                              <1> 	add ax, 8
    87                              <1> 	stc
    88                              <1> 	o32 retf
    89                              <1> 	jmp error
    90                              <1> 
    91                              <1> %%m1616:
    92                              <1> 	clc
    93                              <1> 	mov [si], word %%farfn16
    94                              <1> 	mov [si+2], word %1
    95                              <1> 	o16 call far [si]
    96                              <1> 	jnc error
    97                              <1> %%m1632:
    98                              <1> 	clc
    99                              <1> 	mov [si], dword %%farfn32
   100                              <1> 	mov [si+4], word %1
   101                              <1> 	o32 call far [si]
   102                              <1> 	jnc error
   103                              <1> %%exit:
   104                              <1> %endmacro
   195                                  
   196                                  	POST 5
   196 0000135A B005                <1>  mov al, 0x%1
   196 0000135C BA9001              <1>  mov dx, POST_PORT
   196 0000135F EE                  <1>  out dx, al
   197 00001360 BE0000                  	mov    si, 0
   198                                  	testCallNear sp
   198                              <1>  %ifidni %1,sp
   198                              <1>  %define spcmp ax
   198                              <1>  %else
   198                              <1>  %define spcmp eax
   198                              <1>  %endif
   198 00001363 89E0                <1>  mov spcmp, %1
   198                              <1> 
   198                              <1> %%rel16:
   198 00001365 F8                  <1>  clc
   198 00001366 E80600              <1>  o16 call word %%nearfn16
   198 00001369 0F8322C2            <1>  jnc error
   198          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   198 0000136D EB11                <1>  jmp %%rel32
   198                              <1> %%nearfn16:
   198 0000136F 83E802              <1>  sub spcmp, 2
   198 00001372 39C4                <1>  cmp %1, spcmp
   198 00001374 0F8517C2            <1>  jne error
   198          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   198 00001378 83C002              <1>  add spcmp, 2
   198 0000137B F9                  <1>  stc
   198 0000137C C3                  <1>  o16 ret
   198 0000137D E90FC2              <1>  jmp error
   198          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   198                              <1> 
   198                              <1> %%rel32:
   198 00001380 F8                  <1>  clc
   198 00001381 66E806000000        <1>  o32 call dword %%nearfn32
   198 00001387 0F8304C2            <1>  jnc error
   198          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   198 0000138B EB12                <1>  jmp %%rm16
   198                              <1> %%nearfn32:
   198 0000138D 83E804              <1>  sub spcmp, 4
   198 00001390 39C4                <1>  cmp %1, spcmp
   198 00001392 0F85F9C1            <1>  jne error
   198          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   198 00001396 83C004              <1>  add spcmp, 4
   198 00001399 F9                  <1>  stc
   198 0000139A 66C3                <1>  o32 ret
   198 0000139C E9F0C1              <1>  jmp error
   198          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   198                              <1> 
   198                              <1> %%rm16:
   198 0000139F F8                  <1>  clc
   198 000013A0 BB[6F13]            <1>  mov bx, %%nearfn16
   198 000013A3 FFD3                <1>  o16 call bx
   198 000013A5 0F83E6C1            <1>  jnc error
   198          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   198                              <1> %%rm32:
   198 000013A9 F8                  <1>  clc
   198 000013AA 66BB[8D130000]      <1>  mov ebx, %%nearfn32
   198 000013B0 66FFD3              <1>  o32 call ebx
   198 000013B3 0F83D8C1            <1>  jnc error
   198          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   199                                  	testCallFar C_SEG_REAL
   199 000013B7 89E0                <1>  mov ax, sp
   199                              <1> 
   199 000013B9 F8                  <1>  clc
   199 000013BA 9A[C513]00F0        <1>  o16 call word %1:%%farfn16
   199 000013BF 0F83CCC1            <1>  jnc error
   199          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   199 000013C3 EB11                <1>  jmp %%o32
   199                              <1> %%farfn16:
   199 000013C5 83E804              <1>  sub ax, 4
   199 000013C8 39C4                <1>  cmp sp, ax
   199 000013CA 0F85C1C1            <1>  jne error
   199          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   199 000013CE 83C004              <1>  add ax, 4
   199 000013D1 F9                  <1>  stc
   199 000013D2 CB                  <1>  o16 retf
   199 000013D3 E9B9C1              <1>  jmp error
   199          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   199                              <1> 
   199                              <1> %%o32:
   199 000013D6 F8                  <1>  clc
   199 000013D7 669A[E5130000]00F0  <1>  o32 call dword %1:%%farfn32
   199 000013DF 0F83ACC1            <1>  jnc error
   199          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   199 000013E3 EB12                <1>  jmp %%m1616
   199                              <1> %%farfn32:
   199 000013E5 83E808              <1>  sub ax, 8
   199 000013E8 39C4                <1>  cmp sp, ax
   199 000013EA 0F85A1C1            <1>  jne error
   199          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   199 000013EE 83C008              <1>  add ax, 8
   199 000013F1 F9                  <1>  stc
   199 000013F2 66CB                <1>  o32 retf
   199 000013F4 E998C1              <1>  jmp error
   199          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   199                              <1> 
   199                              <1> %%m1616:
   199 000013F7 F8                  <1>  clc
   199 000013F8 C704[C513]          <1>  mov [si], word %%farfn16
   199 000013FC C7440200F0          <1>  mov [si+2], word %1
   199 00001401 FF1C                <1>  o16 call far [si]
   199 00001403 0F8388C1            <1>  jnc error
   199          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   199                              <1> %%m1632:
   199 00001407 F8                  <1>  clc
   199 00001408 66C704[E5130000]    <1>  mov [si], dword %%farfn32
   199 0000140F C7440400F0          <1>  mov [si+4], word %1
   199 00001414 66FF1C              <1>  o32 call far [si]
   199 00001417 0F8374C1            <1>  jnc error
   199          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   199                              <1> %%exit:
   200                                  
   201                                  	advTestSegReal
   201                              <1>  advTestBase
   201                              <2>  %assign TEST_BASE1 TEST_BASE1+0x1000
   201                              <2>  %assign TEST_BASE2 TEST_BASE2+0x1000
   201                              <1>  %assign D1_SEG_REAL TEST_BASE1 >> 4
   201                              <1>  %assign D2_SEG_REAL TEST_BASE2 >> 4
   201 0000141B BA0023              <1>  mov dx, D1_SEG_REAL
   201 0000141E 8EDA                <1>  mov ds, dx
   201 00001420 BA0063              <1>  mov dx, D2_SEG_REAL
   201 00001423 8EC2                <1>  mov es, dx
   202                                  
   203                                  ;
   204                                  ;   Load full pointer
   205                                  ;
   206                                  %include "tests/load_ptr_m.asm"
     1                              <1> ;
     2                              <1> ;   Tests LSS,LDS,LES,LFS,LGS in 16 and 32 bit mode
     3                              <1> ;   %1 segment register name, one of ss,ds,es,fs,gs
     4                              <1> ;   [ed:di] memory address to use for the pointer
     5                              <1> ;   Uses: nothing
     6                              <1> ;
     7                              <1> 
     8                              <1> %macro testLoadPtr 1
     9                              <1> 	mov cx, %1
    10                              <1> 	mov dx, es
    11                              <1> 
    12                              <1> 	mov [es:di], word 0x1234
    13                              <1> 	mov [es:di + 2], word 0xabcd
    14                              <1> 	l%1 bx, [es:di]
    15                              <1> 	mov ax, %1
    16                              <1> 	cmp ax, 0xabcd
    17                              <1> 	jne error
    18                              <1> 	cmp bx, 0x1234
    19                              <1> 	jne error
    20                              <1> 
    21                              <1> 	mov es, dx
    22                              <1> 
    23                              <1> 	mov [es:di], dword 0x12345678
    24                              <1> 	mov [es:di + 4], word 0xbcde
    25                              <1> 	l%1 ebx, [es:di]
    26                              <1> 	mov ax, %1
    27                              <1> 	cmp ax, 0xbcde
    28                              <1> 	jne error
    29                              <1> 	cmp ebx, 0x12345678
    30                              <1> 	jne error
    31                              <1> 
    32                              <1> 	mov es, dx
    33                              <1> 	mov %1, cx
    34                              <1> %endmacro
   207                                  	POST 6
   207 00001425 B006                <1>  mov al, 0x%1
   207 00001427 BA9001              <1>  mov dx, POST_PORT
   207 0000142A EE                  <1>  out dx, al
   208 0000142B BF0000                  	mov    di, 0
   209                                  	testLoadPtr ss
   209 0000142E 8CD1                <1>  mov cx, %1
   209 00001430 8CC2                <1>  mov dx, es
   209                              <1> 
   209 00001432 26C7053412          <1>  mov [es:di], word 0x1234
   209 00001437 26C74502CDAB        <1>  mov [es:di + 2], word 0xabcd
   209 0000143D 260FB21D            <1>  l%1 bx, [es:di]
   209 00001441 8CD0                <1>  mov ax, %1
   209 00001443 3DCDAB              <1>  cmp ax, 0xabcd
   209 00001446 0F8545C1            <1>  jne error
   209          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   209 0000144A 81FB3412            <1>  cmp bx, 0x1234
   209 0000144E 0F853DC1            <1>  jne error
   209          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   209                              <1> 
   209 00001452 8EC2                <1>  mov es, dx
   209                              <1> 
   209 00001454 2666C70578563412    <1>  mov [es:di], dword 0x12345678
   209 0000145C 26C74504DEBC        <1>  mov [es:di + 4], word 0xbcde
   209 00001462 26660FB21D          <1>  l%1 ebx, [es:di]
   209 00001467 8CD0                <1>  mov ax, %1
   209 00001469 3DDEBC              <1>  cmp ax, 0xbcde
   209 0000146C 0F851FC1            <1>  jne error
   209          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   209 00001470 6681FB78563412      <1>  cmp ebx, 0x12345678
   209 00001477 0F8514C1            <1>  jne error
   209          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   209                              <1> 
   209 0000147B 8EC2                <1>  mov es, dx
   209 0000147D 8ED1                <1>  mov %1, cx
   210                                  	testLoadPtr ds
   210 0000147F 8CD9                <1>  mov cx, %1
   210 00001481 8CC2                <1>  mov dx, es
   210                              <1> 
   210 00001483 26C7053412          <1>  mov [es:di], word 0x1234
   210 00001488 26C74502CDAB        <1>  mov [es:di + 2], word 0xabcd
   210 0000148E 26C51D              <1>  l%1 bx, [es:di]
   210 00001491 8CD8                <1>  mov ax, %1
   210 00001493 3DCDAB              <1>  cmp ax, 0xabcd
   210 00001496 0F85F5C0            <1>  jne error
   210          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   210 0000149A 81FB3412            <1>  cmp bx, 0x1234
   210 0000149E 0F85EDC0            <1>  jne error
   210          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   210                              <1> 
   210 000014A2 8EC2                <1>  mov es, dx
   210                              <1> 
   210 000014A4 2666C70578563412    <1>  mov [es:di], dword 0x12345678
   210 000014AC 26C74504DEBC        <1>  mov [es:di + 4], word 0xbcde
   210 000014B2 2666C51D            <1>  l%1 ebx, [es:di]
   210 000014B6 8CD8                <1>  mov ax, %1
   210 000014B8 3DDEBC              <1>  cmp ax, 0xbcde
   210 000014BB 0F85D0C0            <1>  jne error
   210          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   210 000014BF 6681FB78563412      <1>  cmp ebx, 0x12345678
   210 000014C6 0F85C5C0            <1>  jne error
   210          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   210                              <1> 
   210 000014CA 8EC2                <1>  mov es, dx
   210 000014CC 8ED9                <1>  mov %1, cx
   211                                  	testLoadPtr es
   211 000014CE 8CC1                <1>  mov cx, %1
   211 000014D0 8CC2                <1>  mov dx, es
   211                              <1> 
   211 000014D2 26C7053412          <1>  mov [es:di], word 0x1234
   211 000014D7 26C74502CDAB        <1>  mov [es:di + 2], word 0xabcd
   211 000014DD 26C41D              <1>  l%1 bx, [es:di]
   211 000014E0 8CC0                <1>  mov ax, %1
   211 000014E2 3DCDAB              <1>  cmp ax, 0xabcd
   211 000014E5 0F85A6C0            <1>  jne error
   211          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   211 000014E9 81FB3412            <1>  cmp bx, 0x1234
   211 000014ED 0F859EC0            <1>  jne error
   211          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   211                              <1> 
   211 000014F1 8EC2                <1>  mov es, dx
   211                              <1> 
   211 000014F3 2666C70578563412    <1>  mov [es:di], dword 0x12345678
   211 000014FB 26C74504DEBC        <1>  mov [es:di + 4], word 0xbcde
   211 00001501 2666C41D            <1>  l%1 ebx, [es:di]
   211 00001505 8CC0                <1>  mov ax, %1
   211 00001507 3DDEBC              <1>  cmp ax, 0xbcde
   211 0000150A 0F8581C0            <1>  jne error
   211          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   211 0000150E 6681FB78563412      <1>  cmp ebx, 0x12345678
   211 00001515 0F8576C0            <1>  jne error
   211          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   211                              <1> 
   211 00001519 8EC2                <1>  mov es, dx
   211 0000151B 8EC1                <1>  mov %1, cx
   212                                  	testLoadPtr fs
   212 0000151D 8CE1                <1>  mov cx, %1
   212 0000151F 8CC2                <1>  mov dx, es
   212                              <1> 
   212 00001521 26C7053412          <1>  mov [es:di], word 0x1234
   212 00001526 26C74502CDAB        <1>  mov [es:di + 2], word 0xabcd
   212 0000152C 260FB41D            <1>  l%1 bx, [es:di]
   212 00001530 8CE0                <1>  mov ax, %1
   212 00001532 3DCDAB              <1>  cmp ax, 0xabcd
   212 00001535 0F8556C0            <1>  jne error
   212          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   212 00001539 81FB3412            <1>  cmp bx, 0x1234
   212 0000153D 0F854EC0            <1>  jne error
   212          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   212                              <1> 
   212 00001541 8EC2                <1>  mov es, dx
   212                              <1> 
   212 00001543 2666C70578563412    <1>  mov [es:di], dword 0x12345678
   212 0000154B 26C74504DEBC        <1>  mov [es:di + 4], word 0xbcde
   212 00001551 26660FB41D          <1>  l%1 ebx, [es:di]
   212 00001556 8CE0                <1>  mov ax, %1
   212 00001558 3DDEBC              <1>  cmp ax, 0xbcde
   212 0000155B 0F8530C0            <1>  jne error
   212          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   212 0000155F 6681FB78563412      <1>  cmp ebx, 0x12345678
   212 00001566 0F8525C0            <1>  jne error
   212          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   212                              <1> 
   212 0000156A 8EC2                <1>  mov es, dx
   212 0000156C 8EE1                <1>  mov %1, cx
   213                                  	testLoadPtr gs
   213 0000156E 8CE9                <1>  mov cx, %1
   213 00001570 8CC2                <1>  mov dx, es
   213                              <1> 
   213 00001572 26C7053412          <1>  mov [es:di], word 0x1234
   213 00001577 26C74502CDAB        <1>  mov [es:di + 2], word 0xabcd
   213 0000157D 260FB51D            <1>  l%1 bx, [es:di]
   213 00001581 8CE8                <1>  mov ax, %1
   213 00001583 3DCDAB              <1>  cmp ax, 0xabcd
   213 00001586 0F8505C0            <1>  jne error
   213          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   213 0000158A 81FB3412            <1>  cmp bx, 0x1234
   213 0000158E 0F85FDBF            <1>  jne error
   213          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   213                              <1> 
   213 00001592 8EC2                <1>  mov es, dx
   213                              <1> 
   213 00001594 2666C70578563412    <1>  mov [es:di], dword 0x12345678
   213 0000159C 26C74504DEBC        <1>  mov [es:di + 4], word 0xbcde
   213 000015A2 26660FB51D          <1>  l%1 ebx, [es:di]
   213 000015A7 8CE8                <1>  mov ax, %1
   213 000015A9 3DDEBC              <1>  cmp ax, 0xbcde
   213 000015AC 0F85DFBF            <1>  jne error
   213          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   213 000015B0 6681FB78563412      <1>  cmp ebx, 0x12345678
   213 000015B7 0F85D4BF            <1>  jne error
   213          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   213                              <1> 
   213 000015BB 8EC2                <1>  mov es, dx
   213 000015BD 8EE9                <1>  mov %1, cx
   214                                  
   215                                  	advTestSegReal
   215                              <1>  advTestBase
   215                              <2>  %assign TEST_BASE1 TEST_BASE1+0x1000
   215                              <2>  %assign TEST_BASE2 TEST_BASE2+0x1000
   215                              <1>  %assign D1_SEG_REAL TEST_BASE1 >> 4
   215                              <1>  %assign D2_SEG_REAL TEST_BASE2 >> 4
   215 000015BF BA0024              <1>  mov dx, D1_SEG_REAL
   215 000015C2 8EDA                <1>  mov ds, dx
   215 000015C4 BA0064              <1>  mov dx, D2_SEG_REAL
   215 000015C7 8EC2                <1>  mov es, dx
   216                                  
   217                                  
   218                                  ; ==============================================================================
   219                                  ;	Protected mode tests
   220                                  ; ==============================================================================
   221                                  
   222                                  	POST 8
   222 000015C9 B008                <1>  mov al, 0x%1
   222 000015CB BA9001              <1>  mov dx, POST_PORT
   222 000015CE EE                  <1>  out dx, al
   223 000015CF EB12                    	jmp initGDT
   224                                  
   225                                  ESP_R0_PROT equ 0x0000FFFF
   226                                  ESP_R3_PROT equ 0x00007FFF
   227                                  
   228                                  %include "protected_m.asm"
     1                              <1> ;
     2                              <1> ; Advances the base address of data segments used by tests, D1_SEG_PROT and
     3                              <1> ; D2_SEG_PROT.
     4                              <1> ;
     5                              <1> ; Loads DS with D1_SEG_PROT and ES with D2_SEG_PROT.
     6                              <1> ;
     7                              <1> %macro advTestSegProt 0
     8                              <1> 	advTestBase
     9                              <1> 	updLDTDescBase D1_SEG_PROT,TEST_BASE1
    10                              <1> 	updLDTDescBase D2_SEG_PROT,TEST_BASE2
    11                              <1> 	mov    dx, D1_SEG_PROT
    12                              <1> 	mov    ds, dx
    13                              <1> 	mov    dx, D2_SEG_PROT
    14                              <1> 	mov    es, dx
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> 
    18                              <1> ;
    19                              <1> ;   Defines an interrupt gate in ROM, given a selector (%1) and an offset (%2)
    20                              <1> ;
    21                              <1> %macro defIntGate 2
    22                              <1> 	dw    (%2 & 0xffff) ; OFFSET 15-0
    23                              <1> 	dw    %1 ; SELECTOR
    24                              <1> 	dw    ACC_TYPE_GATE386_INT | ACC_PRESENT ; acc byte
    25                              <1> 	dw    (%2 >> 16) & 0xffff ; OFFSET 31-16
    26                              <1> %endmacro
    27                              <1> 
    28                              <1> %assign GDTSelDesc 0
    29                              <1> ;
    30                              <1> ;   Defines a GDT descriptor in ROM, given a name (%1), base (%2), limit (%3),
    31                              <1> ;   acc byte (%4), and ext nibble (%5)
    32                              <1> ;
    33                              <1> %macro defGDTDescROM 1-5 0,0,0,0
    34                              <1> 	%assign %1 GDTSelDesc
    35                              <1> 	dw (%3 & 0x0000ffff) ; LIMIT 15-0
    36                              <1> 	dw (%2 & 0x0000ffff) ; BASE 15-0
    37                              <1> 	dw ((%2 & 0x00ff0000) >> 16) | %4 ; BASE 23-16 | acc byte
    38                              <1> 	dw ((%3 & 0x000f0000) >> 16) | %5 | ((%2 & 0xff000000) >> 16) ; LIMIT 19-16 | ext nibble | BASE 31-24
    39                              <1> 	%assign GDTSelDesc GDTSelDesc+8
    40                              <1> %endmacro
    41                              <1> ;
    42                              <1> ;   Defines a GDT descriptor in RAM, given a name (%1), base (%2), limit (%3),
    43                              <1> ;   acc byte (%4), and ext nibble (%5)
    44                              <1> ;
    45                              <1> %macro defGDTDesc 1-5 0,0,0,0
    46                              <1> 	%assign %1 GDTSelDesc
    47                              <1> 	lds  ebx, [cs:ptrGDTreal] ; this macro is used in real mode to set up prot mode env.
    48                              <1> 	mov  eax, %1
    49                              <1> 	mov  esi, %2
    50                              <1> 	mov  edi, %3
    51                              <1> 	mov  dx,  %4|%5
    52                              <1> 	initDescriptor
    53                              <1> 	%assign GDTSelDesc GDTSelDesc+8
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> ;
    57                              <1> ;   Defines a LDT descriptor, given a name (%1), base (%2), limit (%3), type (%4), and ext (%5)
    58                              <1> ;
    59                              <1> %assign LDTSelDesc 4
    60                              <1> %macro defLDTDesc 1-5 0,0,0,0
    61                              <1> 	%assign %1 LDTSelDesc
    62                              <1> 	lds  ebx, [cs:ptrLDTprot]  ; this macro is used in prot mode to set up prot mode env.
    63                              <1> 	mov  eax, %1
    64                              <1> 	mov  esi, %2
    65                              <1> 	mov  edi, %3
    66                              <1> 	mov  dx,  %4|%5
    67                              <1> 	initDescriptor
    68                              <1> 	%assign LDTSelDesc LDTSelDesc+8
    69                              <1> %endmacro
    70                              <1> 
    71                              <1> ;
    72                              <1> ;   Updates a LDT descriptor, given a name (%1), base (%2), limit (%3), type (%4), and ext (%5)
    73                              <1> ;
    74                              <1> %macro updLDTDesc 1-5 0,0,0,0
    75                              <1> 	pushad
    76                              <1> 	mov  ax, ds
    77                              <1> 	push ax
    78                              <1> 	lds  ebx, [cs:ptrLDTprot]
    79                              <1> 	mov  eax, %1
    80                              <1> 	mov  esi, %2
    81                              <1> 	mov  edi, %3
    82                              <1> 	mov  dx,  %4|%5
    83                              <1> 	call initDescriptorProt
    84                              <1> 	pop  ax
    85                              <1> 	mov  ds, ax
    86                              <1> 	popad
    87                              <1> %endmacro
    88                              <1> 
    89                              <1> ;
    90                              <1> ; Updates the access byte of a descriptor in the LDT
    91                              <1> ; %1 LDT selector
    92                              <1> ; %2 access byte new value (ACC_* or'd equs)
    93                              <1> ; Uses DS
    94                              <1> %macro updLDTDescAcc 2
    95                              <1> 	pushad
    96                              <1> 	pushf
    97                              <1> 	lds  ebx, [cs:ptrLDTprot]
    98                              <1> 	add  ebx, (%1) & 0xFFF8
    99                              <1> 	mov  byte [ebx+5], (%2)>>8 ; acc byte
   100                              <1> 	popf
   101                              <1> 	popad
   102                              <1> %endmacro
   103                              <1> 
   104                              <1> ;
   105                              <1> ; Updates the base of a descriptor in the LDT
   106                              <1> ; %1 LDT selector
   107                              <1> ; %2 new base
   108                              <1> ; Uses DS,EBX,flags
   109                              <1> %macro updLDTDescBase 2
   110                              <1> 	lds  ebx, [cs:ptrLDTprot]
   111                              <1> 	add  ebx, (%1) & 0xFFF8
   112                              <1> 	mov  word [ebx+2], (%2)&0xFFFF     ; BASE 15-0
   113                              <1> 	mov  byte [ebx+4], ((%2)>>16)&0xFF ; BASE 23-16
   114                              <1> 	mov  byte [ebx+7], ((%2)>>24)&0xFF ; BASE 31-24
   115                              <1> %endmacro
   116                              <1> 
   117                              <1> ;
   118                              <1> ; Updates the values of a GDT's entry with a Call Gate
   119                              <1> ; %1 GDT selector
   120                              <1> ; %2 destination selector
   121                              <1> ; %3 destination offset
   122                              <1> ; %4 word count
   123                              <1> ; %5 DPL
   124                              <1> ;
   125                              <1> %macro updCallGate 1-5 0,0,0,0
   126                              <1> 	lfs  ebx, [cs:ptrGDTprot]
   127                              <1> 	mov  eax, %1
   128                              <1> 	mov  esi, %2
   129                              <1> 	mov  edi, %3
   130                              <1> 	mov  dx,  %4|%5
   131                              <1> 	call initCallGate
   132                              <1> %endmacro
   133                              <1> 
   134                              <1> 
   135                              <1> 
   136                              <1> 
   137                              <1> ;
   138                              <1> ; Loads SS:ESP with a pointer to the prot mode stack
   139                              <1> ;
   140                              <1> %macro loadProtModeStack 0
   141                              <1> 	lss    esp, [cs:ptrSSprot]
   142                              <1> %endmacro
   143                              <1> 
   144                              <1> 
   145                              <1> ;
   146                              <1> ; Set a int gate on the IDT in protected mode
   147                              <1> ;
   148                              <1> ; %1: vector
   149                              <1> ; %2: offset
   150                              <1> ; %3: DPL, use ACC_DPL_* equs (optional)
   151                              <1> ;
   152                              <1> ; the stack must be initialized
   153                              <1> ;
   154                              <1> %macro setProtModeIntGate 2-3 -1
   155                              <1> 	pushad
   156                              <1> 	pushf
   157                              <1> 	mov  ax, ds  ; save ds
   158                              <1> 	push ax
   159                              <1> 	mov  eax, %1
   160                              <1> 	mov  edi, %2
   161                              <1> 	%if %3 != -1
   162                              <1> 	mov  dx, %3
   163                              <1> 	%else
   164                              <1> 	mov  dx, cs
   165                              <1> 	and  dx, 7
   166                              <1> 	shl  dx, 13
   167                              <1> 	%endif
   168                              <1> 	cmp  dx, ACC_DPL_0
   169                              <1> 	jne %%dpl3
   170                              <1> %%dpl0:
   171                              <1> 	mov  esi, C_SEG_PROT32
   172                              <1> 	jmp %%cont
   173                              <1> %%dpl3:
   174                              <1> 	mov  esi, CU_SEG_PROT32
   175                              <1> %%cont:
   176                              <1> 	mov  cx, cs
   177                              <1> 	test cx, 7
   178                              <1> 	jnz %%ring3
   179                              <1> %%ring0:
   180                              <1> 	lds  ebx, [cs:ptrIDTprot]
   181                              <1> 	jmp %%call
   182                              <1> %%ring3:
   183                              <1> 	lds  ebx, [cs:ptrIDTUprot]
   184                              <1> %%call:
   185                              <1> 	call initIntGateProt
   186                              <1> 	pop  ax
   187                              <1> 	mov  ds, ax  ; restore ds
   188                              <1> 	popf
   189                              <1> 	popad
   190                              <1> %endmacro
   191                              <1> 
   192                              <1> ;
   193                              <1> ; Tests a fault
   194                              <1> ;
   195                              <1> ; %1: vector
   196                              <1> ; %2: expected error code
   197                              <1> ; %3: fault causing instruction (can't be a call unless the call is the faulting instruction)
   198                              <1> ;
   199                              <1> ; the stack must be initialized
   200                              <1> ;
   201                              <1> %macro protModeFaultTest 3+
   202                              <1> 	setProtModeIntGate %1, %%continue
   203                              <1> %%test:
   204                              <1> 	%3
   205                              <1> 	jmp    error
   206                              <1> %%continue:
   207                              <1> 	protModeExcCheck %1, %2, %%test
   208                              <1> 	setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   209                              <1> %endmacro
   210                              <1> 
   211                              <1> ; %1: vector
   212                              <1> ; %2: expected error code
   213                              <1> ; %3: the provilege level the test code will run in
   214                              <1> ; %4: the expected value of pushed EIP (specify if %5 is a call, otherwise use -1)
   215                              <1> ; %5: fault causing code (can be a call to procedure)
   216                              <1> ;
   217                              <1> ; The fault handler is executed in ring 0. The caller must reset the data segments.
   218                              <1> ;
   219                              <1> %macro protModeFaultTestEx 5+
   220                              <1> 	setProtModeIntGate %1, %%continue, ACC_DPL_0
   221                              <1> %%test:
   222                              <1> 	%5
   223                              <1> 	jmp    error
   224                              <1> %%continue:
   225                              <1> 	%if %3 = 0
   226                              <1> 		%assign expectedCS C_SEG_PROT32
   227                              <1> 	%else
   228                              <1> 		%assign expectedCS CU_SEG_PROT32|3
   229                              <1> 	%endif
   230                              <1> 	%if %4 = -1
   231                              <1> 		protModeExcCheck %1, %2, %%test, expectedCS
   232                              <1> 	%else
   233                              <1> 		protModeExcCheck %1, %2, %4, expectedCS
   234                              <1> 	%endif
   235                              <1> 	setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   236                              <1> %endmacro
   237                              <1> 
   238                              <1> ;
   239                              <1> ; Checks exception result and restores the previous handler
   240                              <1> ;
   241                              <1> ; %1: vector
   242                              <1> ; %2: expected error code
   243                              <1> ; %3: expected pushed value of EIP
   244                              <1> ; %4: expected pushed value of CS (optional)
   245                              <1> ;
   246                              <1> %macro protModeExcCheck 3-4 -1
   247                              <1> 	%if %1 == 8 || (%1 > 10 && %1 <= 14)
   248                              <1> 	%assign exc_errcode 4
   249                              <1> 	cmp    [ss:esp], dword %2
   250                              <1> 	jne    error
   251                              <1> 	%else
   252                              <1> 	%assign exc_errcode 0
   253                              <1> 	%endif
   254                              <1> 	%if %4 != -1
   255                              <1> 		cmp    [ss:esp+exc_errcode+4], dword %4
   256                              <1> 		jne    error
   257                              <1> 	%else
   258                              <1> 		mov    bx, cs
   259                              <1> 		test   bx, 7
   260                              <1> 		jnz %%ring3
   261                              <1> 		%%ring0:
   262                              <1> 		cmp    [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   263                              <1> 		jne    error
   264                              <1> 		jmp %%continue
   265                              <1> 		%%ring3:
   266                              <1> 		cmp    [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   267                              <1> 		jne    error
   268                              <1> 		%%continue:
   269                              <1> 	%endif
   270                              <1> 	cmp    [ss:esp+exc_errcode], dword %3
   271                              <1> 	jne    error
   272                              <1> 	add    esp, 12+exc_errcode
   273                              <1> %endmacro
   229                                  
   230                                  
   231                                  ;;; support for ROM based GDT (currently unused)
   232                                  romGDT:
   233                                  romGDTEnd:
   234                                  romGDTaddr:
   235 000015D1 FFFF                    	dw romGDTEnd - romGDT - 1 ; 16-bit limit
   236 000015D3 [D115]0F00              	dw romGDT, 0x000f         ; 32-bit base address
   237                                  ;;;
   238                                  
   239                                  ptrGDTreal: ; pointer to the pmode GDT for real mode code
   240 000015D7 00000000                	dd 0             ; 32-bit offset
   241 000015DB 5000                    	dw GDT_SEG_REAL  ; 16-bit segment selector
   242                                  ptrIDTreal: ; pointer to the pmode IDT for real mode code
   243 000015DD 00000000                	dd 0
   244 000015E1 4000                    	dw IDT_SEG_REAL
   245                                  
   246                                  initGDT:
   247                                  	; the first descriptor in the GDT is always a dud (the null selector)
   248                                  	defGDTDesc NULL
   248                              <1>  %assign %1 GDTSelDesc
   248 000015E3 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   248 000015E9 66B800000000        <1>  mov eax, %1
   248 000015EF 66BE00000000        <1>  mov esi, %2
   248 000015F5 66BF00000000        <1>  mov edi, %3
   248 000015FB BA0000              <1>  mov dx, %4|%5
   248                              <1>  initDescriptor
   248 000015FE 6625F8FF0000        <2>  and eax, 0xFFF8
   248 00001604 6601C3              <2>  add ebx, eax
   248 00001607 67893B              <2>  mov word [ebx], di
   248 0000160A 67897302            <2>  mov word [ebx+2], si
   248 0000160E 66C1EE10            <2>  shr esi, 16
   248 00001612 89F0                <2>  mov ax, si
   248 00001614 67884304            <2>  mov byte [ebx+4], al
   248 00001618 67887305            <2>  mov byte [ebx+5], dh
   248 0000161C 66C1EF10            <2>  shr edi, 16
   248 00001620 89F9                <2>  mov cx, di
   248 00001622 80E10F              <2>  and cl, 0x0f
   248 00001625 67884B06            <2>  mov byte [ebx+6], cl
   248 00001629 80E2F0              <2>  and dl, 0xf0
   248 0000162C 67085306            <2>  or byte [ebx+6], dl
   248 00001630 67886307            <2>  mov byte [ebx+7], ah
   248                              <1>  %assign GDTSelDesc GDTSelDesc+8
   249                                  	defGDTDesc C_SEG_PROT16,  0x000f0000,0x0000ffff,ACC_TYPE_CODE_R|ACC_PRESENT
   249                              <1>  %assign %1 GDTSelDesc
   249 00001634 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   249 0000163A 66B808000000        <1>  mov eax, %1
   249 00001640 66BE00000F00        <1>  mov esi, %2
   249 00001646 66BFFFFF0000        <1>  mov edi, %3
   249 0000164C BA009A              <1>  mov dx, %4|%5
   249                              <1>  initDescriptor
   249 0000164F 6625F8FF0000        <2>  and eax, 0xFFF8
   249 00001655 6601C3              <2>  add ebx, eax
   249 00001658 67893B              <2>  mov word [ebx], di
   249 0000165B 67897302            <2>  mov word [ebx+2], si
   249 0000165F 66C1EE10            <2>  shr esi, 16
   249 00001663 89F0                <2>  mov ax, si
   249 00001665 67884304            <2>  mov byte [ebx+4], al
   249 00001669 67887305            <2>  mov byte [ebx+5], dh
   249 0000166D 66C1EF10            <2>  shr edi, 16
   249 00001671 89F9                <2>  mov cx, di
   249 00001673 80E10F              <2>  and cl, 0x0f
   249 00001676 67884B06            <2>  mov byte [ebx+6], cl
   249 0000167A 80E2F0              <2>  and dl, 0xf0
   249 0000167D 67085306            <2>  or byte [ebx+6], dl
   249 00001681 67886307            <2>  mov byte [ebx+7], ah
   249                              <1>  %assign GDTSelDesc GDTSelDesc+8
   250                                  	defGDTDesc C_SEG_PROT32,  0x000f0000,0x0000ffff,ACC_TYPE_CODE_R|ACC_PRESENT,EXT_32BIT
   250                              <1>  %assign %1 GDTSelDesc
   250 00001685 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   250 0000168B 66B810000000        <1>  mov eax, %1
   250 00001691 66BE00000F00        <1>  mov esi, %2
   250 00001697 66BFFFFF0000        <1>  mov edi, %3
   250 0000169D BA409A              <1>  mov dx, %4|%5
   250                              <1>  initDescriptor
   250 000016A0 6625F8FF0000        <2>  and eax, 0xFFF8
   250 000016A6 6601C3              <2>  add ebx, eax
   250 000016A9 67893B              <2>  mov word [ebx], di
   250 000016AC 67897302            <2>  mov word [ebx+2], si
   250 000016B0 66C1EE10            <2>  shr esi, 16
   250 000016B4 89F0                <2>  mov ax, si
   250 000016B6 67884304            <2>  mov byte [ebx+4], al
   250 000016BA 67887305            <2>  mov byte [ebx+5], dh
   250 000016BE 66C1EF10            <2>  shr edi, 16
   250 000016C2 89F9                <2>  mov cx, di
   250 000016C4 80E10F              <2>  and cl, 0x0f
   250 000016C7 67884B06            <2>  mov byte [ebx+6], cl
   250 000016CB 80E2F0              <2>  and dl, 0xf0
   250 000016CE 67085306            <2>  or byte [ebx+6], dl
   250 000016D2 67886307            <2>  mov byte [ebx+7], ah
   250                              <1>  %assign GDTSelDesc GDTSelDesc+8
   251                                  	defGDTDesc CU_SEG_PROT32, 0x000f0000,0x0000ffff,ACC_TYPE_CODE_R|ACC_PRESENT|ACC_DPL_3,EXT_32BIT
   251                              <1>  %assign %1 GDTSelDesc
   251 000016D6 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   251 000016DC 66B818000000        <1>  mov eax, %1
   251 000016E2 66BE00000F00        <1>  mov esi, %2
   251 000016E8 66BFFFFF0000        <1>  mov edi, %3
   251 000016EE BA40FA              <1>  mov dx, %4|%5
   251                              <1>  initDescriptor
   251 000016F1 6625F8FF0000        <2>  and eax, 0xFFF8
   251 000016F7 6601C3              <2>  add ebx, eax
   251 000016FA 67893B              <2>  mov word [ebx], di
   251 000016FD 67897302            <2>  mov word [ebx+2], si
   251 00001701 66C1EE10            <2>  shr esi, 16
   251 00001705 89F0                <2>  mov ax, si
   251 00001707 67884304            <2>  mov byte [ebx+4], al
   251 0000170B 67887305            <2>  mov byte [ebx+5], dh
   251 0000170F 66C1EF10            <2>  shr edi, 16
   251 00001713 89F9                <2>  mov cx, di
   251 00001715 80E10F              <2>  and cl, 0x0f
   251 00001718 67884B06            <2>  mov byte [ebx+6], cl
   251 0000171C 80E2F0              <2>  and dl, 0xf0
   251 0000171F 67085306            <2>  or byte [ebx+6], dl
   251 00001723 67886307            <2>  mov byte [ebx+7], ah
   251                              <1>  %assign GDTSelDesc GDTSelDesc+8
   252                                  	defGDTDesc CC_SEG_PROT32, 0x000f0000,0x0000ffff,ACC_TYPE_CODE_R|ACC_TYPE_CONFORMING|ACC_PRESENT|EXT_32BIT
   252                              <1>  %assign %1 GDTSelDesc
   252 00001727 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   252 0000172D 66B820000000        <1>  mov eax, %1
   252 00001733 66BE00000F00        <1>  mov esi, %2
   252 00001739 66BFFFFF0000        <1>  mov edi, %3
   252 0000173F BA409E              <1>  mov dx, %4|%5
   252                              <1>  initDescriptor
   252 00001742 6625F8FF0000        <2>  and eax, 0xFFF8
   252 00001748 6601C3              <2>  add ebx, eax
   252 0000174B 67893B              <2>  mov word [ebx], di
   252 0000174E 67897302            <2>  mov word [ebx+2], si
   252 00001752 66C1EE10            <2>  shr esi, 16
   252 00001756 89F0                <2>  mov ax, si
   252 00001758 67884304            <2>  mov byte [ebx+4], al
   252 0000175C 67887305            <2>  mov byte [ebx+5], dh
   252 00001760 66C1EF10            <2>  shr edi, 16
   252 00001764 89F9                <2>  mov cx, di
   252 00001766 80E10F              <2>  and cl, 0x0f
   252 00001769 67884B06            <2>  mov byte [ebx+6], cl
   252 0000176D 80E2F0              <2>  and dl, 0xf0
   252 00001770 67085306            <2>  or byte [ebx+6], dl
   252 00001774 67886307            <2>  mov byte [ebx+7], ah
   252                              <1>  %assign GDTSelDesc GDTSelDesc+8
   253                                  	defGDTDesc IDT_SEG_PROT,  0x00000400,0x000000ff,ACC_TYPE_DATA_W|ACC_PRESENT
   253                              <1>  %assign %1 GDTSelDesc
   253 00001778 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   253 0000177E 66B828000000        <1>  mov eax, %1
   253 00001784 66BE00040000        <1>  mov esi, %2
   253 0000178A 66BFFF000000        <1>  mov edi, %3
   253 00001790 BA0092              <1>  mov dx, %4|%5
   253                              <1>  initDescriptor
   253 00001793 6625F8FF0000        <2>  and eax, 0xFFF8
   253 00001799 6601C3              <2>  add ebx, eax
   253 0000179C 67893B              <2>  mov word [ebx], di
   253 0000179F 67897302            <2>  mov word [ebx+2], si
   253 000017A3 66C1EE10            <2>  shr esi, 16
   253 000017A7 89F0                <2>  mov ax, si
   253 000017A9 67884304            <2>  mov byte [ebx+4], al
   253 000017AD 67887305            <2>  mov byte [ebx+5], dh
   253 000017B1 66C1EF10            <2>  shr edi, 16
   253 000017B5 89F9                <2>  mov cx, di
   253 000017B7 80E10F              <2>  and cl, 0x0f
   253 000017BA 67884B06            <2>  mov byte [ebx+6], cl
   253 000017BE 80E2F0              <2>  and dl, 0xf0
   253 000017C1 67085306            <2>  or byte [ebx+6], dl
   253 000017C5 67886307            <2>  mov byte [ebx+7], ah
   253                              <1>  %assign GDTSelDesc GDTSelDesc+8
   254                                  	defGDTDesc IDTU_SEG_PROT, 0x00000400,0x000000ff,ACC_TYPE_DATA_W|ACC_PRESENT|ACC_DPL_3
   254                              <1>  %assign %1 GDTSelDesc
   254 000017C9 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   254 000017CF 66B830000000        <1>  mov eax, %1
   254 000017D5 66BE00040000        <1>  mov esi, %2
   254 000017DB 66BFFF000000        <1>  mov edi, %3
   254 000017E1 BA00F2              <1>  mov dx, %4|%5
   254                              <1>  initDescriptor
   254 000017E4 6625F8FF0000        <2>  and eax, 0xFFF8
   254 000017EA 6601C3              <2>  add ebx, eax
   254 000017ED 67893B              <2>  mov word [ebx], di
   254 000017F0 67897302            <2>  mov word [ebx+2], si
   254 000017F4 66C1EE10            <2>  shr esi, 16
   254 000017F8 89F0                <2>  mov ax, si
   254 000017FA 67884304            <2>  mov byte [ebx+4], al
   254 000017FE 67887305            <2>  mov byte [ebx+5], dh
   254 00001802 66C1EF10            <2>  shr edi, 16
   254 00001806 89F9                <2>  mov cx, di
   254 00001808 80E10F              <2>  and cl, 0x0f
   254 0000180B 67884B06            <2>  mov byte [ebx+6], cl
   254 0000180F 80E2F0              <2>  and dl, 0xf0
   254 00001812 67085306            <2>  or byte [ebx+6], dl
   254 00001816 67886307            <2>  mov byte [ebx+7], ah
   254                              <1>  %assign GDTSelDesc GDTSelDesc+8
   255                                  	defGDTDesc GDT_DSEG_PROT, 0x00000500,0x000002ff,ACC_TYPE_DATA_W|ACC_PRESENT
   255                              <1>  %assign %1 GDTSelDesc
   255 0000181A 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   255 00001820 66B838000000        <1>  mov eax, %1
   255 00001826 66BE00050000        <1>  mov esi, %2
   255 0000182C 66BFFF020000        <1>  mov edi, %3
   255 00001832 BA0092              <1>  mov dx, %4|%5
   255                              <1>  initDescriptor
   255 00001835 6625F8FF0000        <2>  and eax, 0xFFF8
   255 0000183B 6601C3              <2>  add ebx, eax
   255 0000183E 67893B              <2>  mov word [ebx], di
   255 00001841 67897302            <2>  mov word [ebx+2], si
   255 00001845 66C1EE10            <2>  shr esi, 16
   255 00001849 89F0                <2>  mov ax, si
   255 0000184B 67884304            <2>  mov byte [ebx+4], al
   255 0000184F 67887305            <2>  mov byte [ebx+5], dh
   255 00001853 66C1EF10            <2>  shr edi, 16
   255 00001857 89F9                <2>  mov cx, di
   255 00001859 80E10F              <2>  and cl, 0x0f
   255 0000185C 67884B06            <2>  mov byte [ebx+6], cl
   255 00001860 80E2F0              <2>  and dl, 0xf0
   255 00001863 67085306            <2>  or byte [ebx+6], dl
   255 00001867 67886307            <2>  mov byte [ebx+7], ah
   255                              <1>  %assign GDTSelDesc GDTSelDesc+8
   256                                  	defGDTDesc GDTU_DSEG_PROT,0x00000500,0x000002ff,ACC_TYPE_DATA_W|ACC_PRESENT|ACC_DPL_3
   256                              <1>  %assign %1 GDTSelDesc
   256 0000186B 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   256 00001871 66B840000000        <1>  mov eax, %1
   256 00001877 66BE00050000        <1>  mov esi, %2
   256 0000187D 66BFFF020000        <1>  mov edi, %3
   256 00001883 BA00F2              <1>  mov dx, %4|%5
   256                              <1>  initDescriptor
   256 00001886 6625F8FF0000        <2>  and eax, 0xFFF8
   256 0000188C 6601C3              <2>  add ebx, eax
   256 0000188F 67893B              <2>  mov word [ebx], di
   256 00001892 67897302            <2>  mov word [ebx+2], si
   256 00001896 66C1EE10            <2>  shr esi, 16
   256 0000189A 89F0                <2>  mov ax, si
   256 0000189C 67884304            <2>  mov byte [ebx+4], al
   256 000018A0 67887305            <2>  mov byte [ebx+5], dh
   256 000018A4 66C1EF10            <2>  shr edi, 16
   256 000018A8 89F9                <2>  mov cx, di
   256 000018AA 80E10F              <2>  and cl, 0x0f
   256 000018AD 67884B06            <2>  mov byte [ebx+6], cl
   256 000018B1 80E2F0              <2>  and dl, 0xf0
   256 000018B4 67085306            <2>  or byte [ebx+6], dl
   256 000018B8 67886307            <2>  mov byte [ebx+7], ah
   256                              <1>  %assign GDTSelDesc GDTSelDesc+8
   257                                  	defGDTDesc LDT_SEG_PROT,  0x00000800,0x000007ff,ACC_TYPE_LDT|ACC_PRESENT
   257                              <1>  %assign %1 GDTSelDesc
   257 000018BC 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   257 000018C2 66B848000000        <1>  mov eax, %1
   257 000018C8 66BE00080000        <1>  mov esi, %2
   257 000018CE 66BFFF070000        <1>  mov edi, %3
   257 000018D4 BA0082              <1>  mov dx, %4|%5
   257                              <1>  initDescriptor
   257 000018D7 6625F8FF0000        <2>  and eax, 0xFFF8
   257 000018DD 6601C3              <2>  add ebx, eax
   257 000018E0 67893B              <2>  mov word [ebx], di
   257 000018E3 67897302            <2>  mov word [ebx+2], si
   257 000018E7 66C1EE10            <2>  shr esi, 16
   257 000018EB 89F0                <2>  mov ax, si
   257 000018ED 67884304            <2>  mov byte [ebx+4], al
   257 000018F1 67887305            <2>  mov byte [ebx+5], dh
   257 000018F5 66C1EF10            <2>  shr edi, 16
   257 000018F9 89F9                <2>  mov cx, di
   257 000018FB 80E10F              <2>  and cl, 0x0f
   257 000018FE 67884B06            <2>  mov byte [ebx+6], cl
   257 00001902 80E2F0              <2>  and dl, 0xf0
   257 00001905 67085306            <2>  or byte [ebx+6], dl
   257 00001909 67886307            <2>  mov byte [ebx+7], ah
   257                              <1>  %assign GDTSelDesc GDTSelDesc+8
   258                                  	defGDTDesc LDT_DSEG_PROT, 0x00000800,0x000007ff,ACC_TYPE_DATA_W|ACC_PRESENT
   258                              <1>  %assign %1 GDTSelDesc
   258 0000190D 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   258 00001913 66B850000000        <1>  mov eax, %1
   258 00001919 66BE00080000        <1>  mov esi, %2
   258 0000191F 66BFFF070000        <1>  mov edi, %3
   258 00001925 BA0092              <1>  mov dx, %4|%5
   258                              <1>  initDescriptor
   258 00001928 6625F8FF0000        <2>  and eax, 0xFFF8
   258 0000192E 6601C3              <2>  add ebx, eax
   258 00001931 67893B              <2>  mov word [ebx], di
   258 00001934 67897302            <2>  mov word [ebx+2], si
   258 00001938 66C1EE10            <2>  shr esi, 16
   258 0000193C 89F0                <2>  mov ax, si
   258 0000193E 67884304            <2>  mov byte [ebx+4], al
   258 00001942 67887305            <2>  mov byte [ebx+5], dh
   258 00001946 66C1EF10            <2>  shr edi, 16
   258 0000194A 89F9                <2>  mov cx, di
   258 0000194C 80E10F              <2>  and cl, 0x0f
   258 0000194F 67884B06            <2>  mov byte [ebx+6], cl
   258 00001953 80E2F0              <2>  and dl, 0xf0
   258 00001956 67085306            <2>  or byte [ebx+6], dl
   258 0000195A 67886307            <2>  mov byte [ebx+7], ah
   258                              <1>  %assign GDTSelDesc GDTSelDesc+8
   259                                  	defGDTDesc PG_SEG_PROT,   0x00001000,0x00002fff,ACC_TYPE_DATA_W|ACC_PRESENT
   259                              <1>  %assign %1 GDTSelDesc
   259 0000195E 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   259 00001964 66B858000000        <1>  mov eax, %1
   259 0000196A 66BE00100000        <1>  mov esi, %2
   259 00001970 66BFFF2F0000        <1>  mov edi, %3
   259 00001976 BA0092              <1>  mov dx, %4|%5
   259                              <1>  initDescriptor
   259 00001979 6625F8FF0000        <2>  and eax, 0xFFF8
   259 0000197F 6601C3              <2>  add ebx, eax
   259 00001982 67893B              <2>  mov word [ebx], di
   259 00001985 67897302            <2>  mov word [ebx+2], si
   259 00001989 66C1EE10            <2>  shr esi, 16
   259 0000198D 89F0                <2>  mov ax, si
   259 0000198F 67884304            <2>  mov byte [ebx+4], al
   259 00001993 67887305            <2>  mov byte [ebx+5], dh
   259 00001997 66C1EF10            <2>  shr edi, 16
   259 0000199B 89F9                <2>  mov cx, di
   259 0000199D 80E10F              <2>  and cl, 0x0f
   259 000019A0 67884B06            <2>  mov byte [ebx+6], cl
   259 000019A4 80E2F0              <2>  and dl, 0xf0
   259 000019A7 67085306            <2>  or byte [ebx+6], dl
   259 000019AB 67886307            <2>  mov byte [ebx+7], ah
   259                              <1>  %assign GDTSelDesc GDTSelDesc+8
   260                                  	defGDTDesc S_SEG_PROT32,  0x00010000,0x0008ffff,ACC_TYPE_DATA_W|ACC_PRESENT,EXT_32BIT
   260                              <1>  %assign %1 GDTSelDesc
   260 000019AF 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   260 000019B5 66B860000000        <1>  mov eax, %1
   260 000019BB 66BE00000100        <1>  mov esi, %2
   260 000019C1 66BFFFFF0800        <1>  mov edi, %3
   260 000019C7 BA4092              <1>  mov dx, %4|%5
   260                              <1>  initDescriptor
   260 000019CA 6625F8FF0000        <2>  and eax, 0xFFF8
   260 000019D0 6601C3              <2>  add ebx, eax
   260 000019D3 67893B              <2>  mov word [ebx], di
   260 000019D6 67897302            <2>  mov word [ebx+2], si
   260 000019DA 66C1EE10            <2>  shr esi, 16
   260 000019DE 89F0                <2>  mov ax, si
   260 000019E0 67884304            <2>  mov byte [ebx+4], al
   260 000019E4 67887305            <2>  mov byte [ebx+5], dh
   260 000019E8 66C1EF10            <2>  shr edi, 16
   260 000019EC 89F9                <2>  mov cx, di
   260 000019EE 80E10F              <2>  and cl, 0x0f
   260 000019F1 67884B06            <2>  mov byte [ebx+6], cl
   260 000019F5 80E2F0              <2>  and dl, 0xf0
   260 000019F8 67085306            <2>  or byte [ebx+6], dl
   260 000019FC 67886307            <2>  mov byte [ebx+7], ah
   260                              <1>  %assign GDTSelDesc GDTSelDesc+8
   261                                  	defGDTDesc SU_SEG_PROT32, 0x00010000,0x0008ffff,ACC_TYPE_DATA_W|ACC_PRESENT|ACC_DPL_3,EXT_32BIT
   261                              <1>  %assign %1 GDTSelDesc
   261 00001A00 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   261 00001A06 66B868000000        <1>  mov eax, %1
   261 00001A0C 66BE00000100        <1>  mov esi, %2
   261 00001A12 66BFFFFF0800        <1>  mov edi, %3
   261 00001A18 BA40F2              <1>  mov dx, %4|%5
   261                              <1>  initDescriptor
   261 00001A1B 6625F8FF0000        <2>  and eax, 0xFFF8
   261 00001A21 6601C3              <2>  add ebx, eax
   261 00001A24 67893B              <2>  mov word [ebx], di
   261 00001A27 67897302            <2>  mov word [ebx+2], si
   261 00001A2B 66C1EE10            <2>  shr esi, 16
   261 00001A2F 89F0                <2>  mov ax, si
   261 00001A31 67884304            <2>  mov byte [ebx+4], al
   261 00001A35 67887305            <2>  mov byte [ebx+5], dh
   261 00001A39 66C1EF10            <2>  shr edi, 16
   261 00001A3D 89F9                <2>  mov cx, di
   261 00001A3F 80E10F              <2>  and cl, 0x0f
   261 00001A42 67884B06            <2>  mov byte [ebx+6], cl
   261 00001A46 80E2F0              <2>  and dl, 0xf0
   261 00001A49 67085306            <2>  or byte [ebx+6], dl
   261 00001A4D 67886307            <2>  mov byte [ebx+7], ah
   261                              <1>  %assign GDTSelDesc GDTSelDesc+8
   262                                  	defGDTDesc TSS_PROT,      0x00004000,0x00000fff,ACC_TYPE_TSS|ACC_PRESENT|ACC_DPL_3
   262                              <1>  %assign %1 GDTSelDesc
   262 00001A51 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   262 00001A57 66B870000000        <1>  mov eax, %1
   262 00001A5D 66BE00400000        <1>  mov esi, %2
   262 00001A63 66BFFF0F0000        <1>  mov edi, %3
   262 00001A69 BA00E9              <1>  mov dx, %4|%5
   262                              <1>  initDescriptor
   262 00001A6C 6625F8FF0000        <2>  and eax, 0xFFF8
   262 00001A72 6601C3              <2>  add ebx, eax
   262 00001A75 67893B              <2>  mov word [ebx], di
   262 00001A78 67897302            <2>  mov word [ebx+2], si
   262 00001A7C 66C1EE10            <2>  shr esi, 16
   262 00001A80 89F0                <2>  mov ax, si
   262 00001A82 67884304            <2>  mov byte [ebx+4], al
   262 00001A86 67887305            <2>  mov byte [ebx+5], dh
   262 00001A8A 66C1EF10            <2>  shr edi, 16
   262 00001A8E 89F9                <2>  mov cx, di
   262 00001A90 80E10F              <2>  and cl, 0x0f
   262 00001A93 67884B06            <2>  mov byte [ebx+6], cl
   262 00001A97 80E2F0              <2>  and dl, 0xf0
   262 00001A9A 67085306            <2>  or byte [ebx+6], dl
   262 00001A9E 67886307            <2>  mov byte [ebx+7], ah
   262                              <1>  %assign GDTSelDesc GDTSelDesc+8
   263                                  	defGDTDesc TSS_DSEG_PROT, 0x00004000,0x00000fff,ACC_TYPE_DATA_W|ACC_PRESENT
   263                              <1>  %assign %1 GDTSelDesc
   263 00001AA2 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   263 00001AA8 66B878000000        <1>  mov eax, %1
   263 00001AAE 66BE00400000        <1>  mov esi, %2
   263 00001AB4 66BFFF0F0000        <1>  mov edi, %3
   263 00001ABA BA0092              <1>  mov dx, %4|%5
   263                              <1>  initDescriptor
   263 00001ABD 6625F8FF0000        <2>  and eax, 0xFFF8
   263 00001AC3 6601C3              <2>  add ebx, eax
   263 00001AC6 67893B              <2>  mov word [ebx], di
   263 00001AC9 67897302            <2>  mov word [ebx+2], si
   263 00001ACD 66C1EE10            <2>  shr esi, 16
   263 00001AD1 89F0                <2>  mov ax, si
   263 00001AD3 67884304            <2>  mov byte [ebx+4], al
   263 00001AD7 67887305            <2>  mov byte [ebx+5], dh
   263 00001ADB 66C1EF10            <2>  shr edi, 16
   263 00001ADF 89F9                <2>  mov cx, di
   263 00001AE1 80E10F              <2>  and cl, 0x0f
   263 00001AE4 67884B06            <2>  mov byte [ebx+6], cl
   263 00001AE8 80E2F0              <2>  and dl, 0xf0
   263 00001AEB 67085306            <2>  or byte [ebx+6], dl
   263 00001AEF 67886307            <2>  mov byte [ebx+7], ah
   263                              <1>  %assign GDTSelDesc GDTSelDesc+8
   264                                  	defGDTDesc FLAT_SEG_PROT, 0x00000000,0xffffffff,ACC_TYPE_DATA_W|ACC_PRESENT
   264                              <1>  %assign %1 GDTSelDesc
   264 00001AF3 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   264 00001AF9 66B880000000        <1>  mov eax, %1
   264 00001AFF 66BE00000000        <1>  mov esi, %2
   264 00001B05 66BFFFFFFFFF        <1>  mov edi, %3
   264 00001B0B BA0092              <1>  mov dx, %4|%5
   264                              <1>  initDescriptor
   264 00001B0E 6625F8FF0000        <2>  and eax, 0xFFF8
   264 00001B14 6601C3              <2>  add ebx, eax
   264 00001B17 67893B              <2>  mov word [ebx], di
   264 00001B1A 67897302            <2>  mov word [ebx+2], si
   264 00001B1E 66C1EE10            <2>  shr esi, 16
   264 00001B22 89F0                <2>  mov ax, si
   264 00001B24 67884304            <2>  mov byte [ebx+4], al
   264 00001B28 67887305            <2>  mov byte [ebx+5], dh
   264 00001B2C 66C1EF10            <2>  shr edi, 16
   264 00001B30 89F9                <2>  mov cx, di
   264 00001B32 80E10F              <2>  and cl, 0x0f
   264 00001B35 67884B06            <2>  mov byte [ebx+6], cl
   264 00001B39 80E2F0              <2>  and dl, 0xf0
   264 00001B3C 67085306            <2>  or byte [ebx+6], dl
   264 00001B40 67886307            <2>  mov byte [ebx+7], ah
   264                              <1>  %assign GDTSelDesc GDTSelDesc+8
   265                                  	defGDTDesc RING0_GATE ; placeholder for a call gate used to switch to ring 0
   265                              <1>  %assign %1 GDTSelDesc
   265 00001B44 2E66C51E[D715]      <1>  lds ebx, [cs:ptrGDTreal]
   265 00001B4A 66B888000000        <1>  mov eax, %1
   265 00001B50 66BE00000000        <1>  mov esi, %2
   265 00001B56 66BF00000000        <1>  mov edi, %3
   265 00001B5C BA0000              <1>  mov dx, %4|%5
   265                              <1>  initDescriptor
   265 00001B5F 6625F8FF0000        <2>  and eax, 0xFFF8
   265 00001B65 6601C3              <2>  add ebx, eax
   265 00001B68 67893B              <2>  mov word [ebx], di
   265 00001B6B 67897302            <2>  mov word [ebx+2], si
   265 00001B6F 66C1EE10            <2>  shr esi, 16
   265 00001B73 89F0                <2>  mov ax, si
   265 00001B75 67884304            <2>  mov byte [ebx+4], al
   265 00001B79 67887305            <2>  mov byte [ebx+5], dh
   265 00001B7D 66C1EF10            <2>  shr edi, 16
   265 00001B81 89F9                <2>  mov cx, di
   265 00001B83 80E10F              <2>  and cl, 0x0f
   265 00001B86 67884B06            <2>  mov byte [ebx+6], cl
   265 00001B8A 80E2F0              <2>  and dl, 0xf0
   265 00001B8D 67085306            <2>  or byte [ebx+6], dl
   265 00001B91 67886307            <2>  mov byte [ebx+7], ah
   265                              <1>  %assign GDTSelDesc GDTSelDesc+8
   266                                  
   267 00001B95 EB6B                    	jmp initIDT
   268                                  
   269                                  ptrIDTprot: ; pointer to the IDT for pmode
   270 00001B97 00000000                	dd 0             ; 32-bit offset
   271 00001B9B 2800                    	dw IDT_SEG_PROT  ; 16-bit segment selector
   272                                  ptrIDTUprot: ; pointer to the IDT for pmode
   273 00001B9D 00000000                	dd 0             ; 32-bit offset
   274 00001BA1 3000                    	dw IDTU_SEG_PROT  ; 16-bit segment selector
   275                                  ptrGDTprot: ; pointer to the GDT for pmode (kernel mode data segment)
   276 00001BA3 00000000                	dd 0
   277 00001BA7 3800                    	dw GDT_DSEG_PROT
   278                                  ptrGDTUprot: ; pointer to the GDT for pmode (user mode data segment)
   279 00001BA9 00000000                	dd 0
   280 00001BAD 4000                    	dw GDTU_DSEG_PROT
   281                                  ptrLDTprot: ; pointer to the LDT for pmode
   282 00001BAF 00000000                	dd 0
   283 00001BB3 5000                    	dw LDT_DSEG_PROT
   284                                  ptrPDprot: ; pointer to the Page Directory for pmode
   285 00001BB5 00000000                	dd 0
   286 00001BB9 5800                    	dw PG_SEG_PROT
   287                                  ptrPT0prot: ; pointer to Page Table 0
   288 00001BBB 00100000                	dd 0x1000
   289 00001BBF 5800                    	dw PG_SEG_PROT
   290                                  ptrPT1prot: ; pointer to Page Table 1
   291 00001BC1 00200000                	dd 0x2000
   292 00001BC5 5800                    	dw PG_SEG_PROT
   293                                  ptrSSprot: ; pointer to the stack for pmode
   294 00001BC7 FFFF0000                	dd ESP_R0_PROT
   295 00001BCB 6000                    	dw S_SEG_PROT32
   296                                  ptrTSSprot: ; pointer to the task state segment
   297 00001BCD 00000000                	dd 0
   298 00001BD1 7800                    	dw TSS_DSEG_PROT
   299                                  addrProtIDT: ; address of pmode IDT to be used with lidt
   300 00001BD3 FF00                    	dw 0xFF              ; 16-bit limit
   301 00001BD5 00040000                	dd IDT_SEG_REAL << 4 ; 32-bit base address
   302                                  addrGDT: ; address of GDT to be used with lgdt
   303 00001BD9 FF02                    	dw GDT_SEG_LIMIT
   304 00001BDB 00050000                	dd GDT_SEG_REAL << 4
   305                                  
   306                                  ; Initializes an interrupt gate in system memory in real mode
   307                                  initIntGateReal:
   308 00001BDF 6660                    	pushad
   309                                  	initIntGate
   309 00001BE1 66C1E003            <1>  shl eax, 3
   309 00001BE5 6601C3              <1>  add ebx, eax
   309 00001BE8 67893B              <1>  mov word [ebx], di
   309 00001BEB 67897302            <1>  mov word [ebx+2], si
   309 00001BEF 81CA008E            <1>  or dx, ACC_TYPE_GATE386_INT | ACC_PRESENT
   309 00001BF3 67895304            <1>  mov word [ebx+4], dx
   309 00001BF7 66C1EF10            <1>  shr edi, 16
   309 00001BFB 67897B06            <1>  mov word [ebx+6], di
   310 00001BFF 6661                    	popad
   311 00001C01 C3                      	ret
   312                                  
   313                                  initIDT:
   314 00001C02 2E66C51E[DD15]          	lds    ebx, [cs:ptrIDTreal]
   315 00001C08 66BE10000000            	mov    esi, C_SEG_PROT32
   316 00001C0E 66BF[8FD50000]          	mov    edi, DefaultExcHandler
   317 00001C14 BA0000                  	mov    dx,  ACC_DPL_0
   318                                  %assign vector 0
   319                                  %rep    0x15
   320                                  	mov    eax, vector
   321                                  	call   initIntGateReal
   322                                  %assign vector vector+1
   323                                  %endrep
   323 00001C17 66B800000000        <1>  mov eax, vector
   323 00001C1D E8BFFF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001C20 66B801000000        <1>  mov eax, vector
   323 00001C26 E8B6FF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001C29 66B802000000        <1>  mov eax, vector
   323 00001C2F E8ADFF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001C32 66B803000000        <1>  mov eax, vector
   323 00001C38 E8A4FF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001C3B 66B804000000        <1>  mov eax, vector
   323 00001C41 E89BFF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001C44 66B805000000        <1>  mov eax, vector
   323 00001C4A E892FF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001C4D 66B806000000        <1>  mov eax, vector
   323 00001C53 E889FF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001C56 66B807000000        <1>  mov eax, vector
   323 00001C5C E880FF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001C5F 66B808000000        <1>  mov eax, vector
   323 00001C65 E877FF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001C68 66B809000000        <1>  mov eax, vector
   323 00001C6E E86EFF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001C71 66B80A000000        <1>  mov eax, vector
   323 00001C77 E865FF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001C7A 66B80B000000        <1>  mov eax, vector
   323 00001C80 E85CFF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001C83 66B80C000000        <1>  mov eax, vector
   323 00001C89 E853FF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001C8C 66B80D000000        <1>  mov eax, vector
   323 00001C92 E84AFF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001C95 66B80E000000        <1>  mov eax, vector
   323 00001C9B E841FF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001C9E 66B80F000000        <1>  mov eax, vector
   323 00001CA4 E838FF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001CA7 66B810000000        <1>  mov eax, vector
   323 00001CAD E82FFF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001CB0 66B811000000        <1>  mov eax, vector
   323 00001CB6 E826FF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001CB9 66B812000000        <1>  mov eax, vector
   323 00001CBF E81DFF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001CC2 66B813000000        <1>  mov eax, vector
   323 00001CC8 E814FF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   323 00001CCB 66B814000000        <1>  mov eax, vector
   323 00001CD1 E80BFF              <1>  call initIntGateReal
   323                              <1> %assign vector vector+1
   324                                  
   325 00001CD4 EB00                    	jmp initPaging
   326                                  
   327                                  initPaging:
   328                                  ;
   329                                  ; pages:
   330                                  ;  00000-00FFF   1  1000h   4K IDTs, GDT and LDT
   331                                  ;  01000-01FFF   1  1000h   4K page directory
   332                                  ;  02000-02FFF   1  1000h   4K page table 0
   333                                  ;  03000-03FFF   1  1000h   4K page table 1
   334                                  ;  04000-04FFF   1  1000h   4K task switch segments
   335                                  ;  05000-0FFFF  11  c000h  44K free
   336                                  ;  10000-1FFFF  16 10000h  64K stack
   337                                  ;  20000-9EFFF 127 7f000h 508K tests
   338                                  ;  9F000-9FFFF   1  1000h   4K used for page faults (PTE 9Fh)
   339                                  ;
   340                                  PAGE_DIR_ADDR equ 0x1000
   341                                  PAGE_TBL0_ADDR equ PAGE_DIR_ADDR+0x1000
   342                                  PAGE_TBL1_ADDR equ PAGE_DIR_ADDR+0x2000
   343                                  
   344                                  ;   Now we want to build a page directory and a page table. We need two pages of
   345                                  ;   4K-aligned physical memory.  We use a hard-coded address, segment 0x100,
   346                                  ;   corresponding to physical address 0x1000.
   347                                  ;
   348 00001CD6 66BE00100000            	mov   esi, PAGE_DIR_ADDR
   349 00001CDC 6689F0                  	mov   eax, esi
   350 00001CDF 66C1E804                	shr   eax, 4
   351 00001CE3 8EC0                    	mov   es,  eax
   352                                  ;
   353                                  ;   Build a page directory at ES:EDI (0100:0000) with only 1 valid PDE (the first one),
   354                                  ;   because we're not going to access any memory outside the first 1MB.
   355                                  ;
   356 00001CE5 FC                      	cld
   357 00001CE6 66B807200000            	mov   eax, PAGE_TBL0_ADDR | PTE_PRESENT | PTE_USER | PTE_WRITE
   358 00001CEC 6631FF                  	xor   edi, edi
   359 00001CEF 66AB                    	stosd
   360 00001CF1 66B9FF030000            	mov   ecx, 1024-1 ; ECX == number of (remaining) PDEs to write
   361 00001CF7 6631C0                  	xor   eax, eax    ; fill remaining PDEs with 0
   362 00001CFA F366AB                  	rep   stosd
   363                                  ;
   364                                  ;   Build a page table at EDI with 256 (out of 1024) valid PTEs, mapping the first 1MB
   365                                  ;   as linear == physical.
   366                                  ;
   367 00001CFD 66B807000000            	mov   eax, PTE_PRESENT | PTE_WRITE | PTE_USER
   368 00001D03 66B900010000            	mov   ecx, 256 ; ECX == number of PTEs to write
   369                                  .initPT:
   370 00001D09 66AB                    	stosd
   371 00001D0B 660500100000            	add   eax, 0x1000
   372 00001D11 E2F6                    	loop  .initPT
   373 00001D13 66B900030000            	mov   ecx, 1024-256 ; ECX == number of (remaining) PTEs to write
   374 00001D19 6631C0                  	xor   eax, eax
   375 00001D1C F366AB                  	rep   stosd
   376                                  
   377                                  switchToProtMode:
   378 00001D1F FA                      	cli ; make sure interrupts are off now, since we've not initialized the IDT yet
   379 00001D20 2E660F011E[D31B]        	o32 lidt [cs:addrProtIDT]
   380 00001D27 2E660F0116[D91B]        	o32 lgdt [cs:addrGDT]
   381 00001D2E 0F22DE                  	mov    cr3, esi
   382 00001D31 0F20C0                  	mov    eax, cr0
   383 00001D34 660D01000080            	or     eax, CR0_MSW_PE | CR0_PG
   384 00001D3A 0F22C0                  	mov    cr0, eax
   385 00001D3D EA[421D]1000            	jmp    C_SEG_PROT32:toProt32 ; jump to flush the prefetch queue
   386                                  toProt32:
   387                                  	bits 32
   388 00001D42 EB70                    	jmp    initLDT
   389                                  
   390                                  %include "protected_p.asm"
     1                              <1> ; Procedures for 32 bit code segment
     2                              <1> 
     3                              <1> initIntGateProt:
     4                              <1> 	initIntGate
     4 00001D44 C1E003              <2>  shl eax, 3
     4 00001D47 01C3                <2>  add ebx, eax
     4 00001D49 66893B              <2>  mov word [ebx], di
     4 00001D4C 66897302            <2>  mov word [ebx+2], si
     4 00001D50 6681CA008E          <2>  or dx, ACC_TYPE_GATE386_INT | ACC_PRESENT
     4 00001D55 66895304            <2>  mov word [ebx+4], dx
     4 00001D59 C1EF10              <2>  shr edi, 16
     4 00001D5C 66897B06            <2>  mov word [ebx+6], di
     5 00001D60 C3                  <1> 	ret
     6                              <1> 
     7                              <1> initDescriptorProt:
     8                              <1> 	initDescriptor
     8 00001D61 25F8FF0000          <2>  and eax, 0xFFF8
     8 00001D66 01C3                <2>  add ebx, eax
     8 00001D68 66893B              <2>  mov word [ebx], di
     8 00001D6B 66897302            <2>  mov word [ebx+2], si
     8 00001D6F C1EE10              <2>  shr esi, 16
     8 00001D72 6689F0              <2>  mov ax, si
     8 00001D75 884304              <2>  mov byte [ebx+4], al
     8 00001D78 887305              <2>  mov byte [ebx+5], dh
     8 00001D7B C1EF10              <2>  shr edi, 16
     8 00001D7E 6689F9              <2>  mov cx, di
     8 00001D81 80E10F              <2>  and cl, 0x0f
     8 00001D84 884B06              <2>  mov byte [ebx+6], cl
     8 00001D87 80E2F0              <2>  and dl, 0xf0
     8 00001D8A 085306              <2>  or byte [ebx+6], dl
     8 00001D8D 886307              <2>  mov byte [ebx+7], ah
     9 00001D90 C3                  <1> 	ret
    10                              <1> 
    11                              <1> ;
    12                              <1> ; Defines a Call Gate in GDT
    13                              <1> ;
    14                              <1> ;    7                             0 7                             0
    15                              <1> ;   ╔═══════════════════════════════════════════════════════════════╗
    16                              <1> ; +7║                  DESTINATION OFFSET 31-16                     ║+6
    17                              <1> ;   ╟───┬───────┬───┬───────────────┬───────────┬───────────────────╢
    18                              <1> ; +5║ P │  DPL  │ 0 │ 1   1   0   0 │ x   x   x │  WORD COUNT 4-0   ║+4
    19                              <1> ;   ╟───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───────────┬───────╢
    20                              <1> ; +3║                 DESTINATION SELECTOR 15-2             │ x   x ║+2
    21                              <1> ;   ╟───────────────────────────────┴───────────────────────┴───┴───╢
    22                              <1> ; +1║                  DESTINATION OFFSET 15-0                      ║ 0
    23                              <1> ;   ╚═══════════════════════════════╧═══════════════════════════════╝
    24                              <1> ;    15                                                            0
    25                              <1> ;
    26                              <1> ; FS:EBX pointer to the GDT
    27                              <1> ; EAX GDT selector
    28                              <1> ; SI  destination selector
    29                              <1> ; EDI destination offset
    30                              <1> ; DL word count
    31                              <1> ; DH DPL (as bit field, use ACC_DPL_* equs on dx)
    32                              <1> ;
    33                              <1> initCallGate:
    34 00001D91 25F8FF0000          <1> 	and    eax, 0xFFF8
    35 00001D96 01C3                <1> 	add    ebx, eax
    36 00001D98 6466893B            <1> 	mov    word [fs:ebx], di   ; DESTINATION OFFSET 15-0
    37 00001D9C 6466897302          <1> 	mov    word [fs:ebx+2], si ; DESTINATION SELECTOR 15-2
    38 00001DA1 6681CA008C          <1> 	or     dx, ACC_TYPE_GATE386_CALL | ACC_PRESENT
    39 00001DA6 6466895304          <1> 	mov    word [fs:ebx+4], dx ; ACC byte | WORD COUNT 4-0
    40 00001DAB C1EF10              <1> 	shr    edi, 16
    41 00001DAE 6466897B06          <1> 	mov    word [fs:ebx+6], di ; DESTINATION OFFSET 31-16
    42 00001DB3 C3                  <1> 	ret
   391                                  
   392                                  initLDT:
   393                                  	defLDTDesc D_SEG_PROT16,   TEST_BASE, 0x000fffff,ACC_TYPE_DATA_W|ACC_PRESENT
   393                              <1>  %assign %1 LDTSelDesc
   393 00001DB4 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   393 00001DBB B804000000          <1>  mov eax, %1
   393 00001DC0 BE00000200          <1>  mov esi, %2
   393 00001DC5 BFFFFF0F00          <1>  mov edi, %3
   393 00001DCA 66BA0092            <1>  mov dx, %4|%5
   393                              <1>  initDescriptor
   393 00001DCE 25F8FF0000          <2>  and eax, 0xFFF8
   393 00001DD3 01C3                <2>  add ebx, eax
   393 00001DD5 66893B              <2>  mov word [ebx], di
   393 00001DD8 66897302            <2>  mov word [ebx+2], si
   393 00001DDC C1EE10              <2>  shr esi, 16
   393 00001DDF 6689F0              <2>  mov ax, si
   393 00001DE2 884304              <2>  mov byte [ebx+4], al
   393 00001DE5 887305              <2>  mov byte [ebx+5], dh
   393 00001DE8 C1EF10              <2>  shr edi, 16
   393 00001DEB 6689F9              <2>  mov cx, di
   393 00001DEE 80E10F              <2>  and cl, 0x0f
   393 00001DF1 884B06              <2>  mov byte [ebx+6], cl
   393 00001DF4 80E2F0              <2>  and dl, 0xf0
   393 00001DF7 085306              <2>  or byte [ebx+6], dl
   393 00001DFA 886307              <2>  mov byte [ebx+7], ah
   393                              <1>  %assign LDTSelDesc LDTSelDesc+8
   394                                  	defLDTDesc D_SEG_PROT32,   TEST_BASE, 0x000fffff,ACC_TYPE_DATA_W|ACC_PRESENT,EXT_32BIT
   394                              <1>  %assign %1 LDTSelDesc
   394 00001DFD 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   394 00001E04 B80C000000          <1>  mov eax, %1
   394 00001E09 BE00000200          <1>  mov esi, %2
   394 00001E0E BFFFFF0F00          <1>  mov edi, %3
   394 00001E13 66BA4092            <1>  mov dx, %4|%5
   394                              <1>  initDescriptor
   394 00001E17 25F8FF0000          <2>  and eax, 0xFFF8
   394 00001E1C 01C3                <2>  add ebx, eax
   394 00001E1E 66893B              <2>  mov word [ebx], di
   394 00001E21 66897302            <2>  mov word [ebx+2], si
   394 00001E25 C1EE10              <2>  shr esi, 16
   394 00001E28 6689F0              <2>  mov ax, si
   394 00001E2B 884304              <2>  mov byte [ebx+4], al
   394 00001E2E 887305              <2>  mov byte [ebx+5], dh
   394 00001E31 C1EF10              <2>  shr edi, 16
   394 00001E34 6689F9              <2>  mov cx, di
   394 00001E37 80E10F              <2>  and cl, 0x0f
   394 00001E3A 884B06              <2>  mov byte [ebx+6], cl
   394 00001E3D 80E2F0              <2>  and dl, 0xf0
   394 00001E40 085306              <2>  or byte [ebx+6], dl
   394 00001E43 886307              <2>  mov byte [ebx+7], ah
   394                              <1>  %assign LDTSelDesc LDTSelDesc+8
   395                                  	defLDTDesc DU_SEG_PROT,    TEST_BASE, 0x000fffff,ACC_TYPE_DATA_W|ACC_PRESENT|ACC_DPL_3
   395                              <1>  %assign %1 LDTSelDesc
   395 00001E46 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   395 00001E4D B814000000          <1>  mov eax, %1
   395 00001E52 BE00000200          <1>  mov esi, %2
   395 00001E57 BFFFFF0F00          <1>  mov edi, %3
   395 00001E5C 66BA00F2            <1>  mov dx, %4|%5
   395                              <1>  initDescriptor
   395 00001E60 25F8FF0000          <2>  and eax, 0xFFF8
   395 00001E65 01C3                <2>  add ebx, eax
   395 00001E67 66893B              <2>  mov word [ebx], di
   395 00001E6A 66897302            <2>  mov word [ebx+2], si
   395 00001E6E C1EE10              <2>  shr esi, 16
   395 00001E71 6689F0              <2>  mov ax, si
   395 00001E74 884304              <2>  mov byte [ebx+4], al
   395 00001E77 887305              <2>  mov byte [ebx+5], dh
   395 00001E7A C1EF10              <2>  shr edi, 16
   395 00001E7D 6689F9              <2>  mov cx, di
   395 00001E80 80E10F              <2>  and cl, 0x0f
   395 00001E83 884B06              <2>  mov byte [ebx+6], cl
   395 00001E86 80E2F0              <2>  and dl, 0xf0
   395 00001E89 085306              <2>  or byte [ebx+6], dl
   395 00001E8C 886307              <2>  mov byte [ebx+7], ah
   395                              <1>  %assign LDTSelDesc LDTSelDesc+8
   396                                  	defLDTDesc D1_SEG_PROT,    TEST_BASE1,0x000fffff,ACC_TYPE_DATA_W|ACC_PRESENT
   396                              <1>  %assign %1 LDTSelDesc
   396 00001E8F 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   396 00001E96 B81C000000          <1>  mov eax, %1
   396 00001E9B BE00400200          <1>  mov esi, %2
   396 00001EA0 BFFFFF0F00          <1>  mov edi, %3
   396 00001EA5 66BA0092            <1>  mov dx, %4|%5
   396                              <1>  initDescriptor
   396 00001EA9 25F8FF0000          <2>  and eax, 0xFFF8
   396 00001EAE 01C3                <2>  add ebx, eax
   396 00001EB0 66893B              <2>  mov word [ebx], di
   396 00001EB3 66897302            <2>  mov word [ebx+2], si
   396 00001EB7 C1EE10              <2>  shr esi, 16
   396 00001EBA 6689F0              <2>  mov ax, si
   396 00001EBD 884304              <2>  mov byte [ebx+4], al
   396 00001EC0 887305              <2>  mov byte [ebx+5], dh
   396 00001EC3 C1EF10              <2>  shr edi, 16
   396 00001EC6 6689F9              <2>  mov cx, di
   396 00001EC9 80E10F              <2>  and cl, 0x0f
   396 00001ECC 884B06              <2>  mov byte [ebx+6], cl
   396 00001ECF 80E2F0              <2>  and dl, 0xf0
   396 00001ED2 085306              <2>  or byte [ebx+6], dl
   396 00001ED5 886307              <2>  mov byte [ebx+7], ah
   396                              <1>  %assign LDTSelDesc LDTSelDesc+8
   397                                  	defLDTDesc D2_SEG_PROT,    TEST_BASE2,0x000fffff,ACC_TYPE_DATA_W|ACC_PRESENT
   397                              <1>  %assign %1 LDTSelDesc
   397 00001ED8 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   397 00001EDF B824000000          <1>  mov eax, %1
   397 00001EE4 BE00400600          <1>  mov esi, %2
   397 00001EE9 BFFFFF0F00          <1>  mov edi, %3
   397 00001EEE 66BA0092            <1>  mov dx, %4|%5
   397                              <1>  initDescriptor
   397 00001EF2 25F8FF0000          <2>  and eax, 0xFFF8
   397 00001EF7 01C3                <2>  add ebx, eax
   397 00001EF9 66893B              <2>  mov word [ebx], di
   397 00001EFC 66897302            <2>  mov word [ebx+2], si
   397 00001F00 C1EE10              <2>  shr esi, 16
   397 00001F03 6689F0              <2>  mov ax, si
   397 00001F06 884304              <2>  mov byte [ebx+4], al
   397 00001F09 887305              <2>  mov byte [ebx+5], dh
   397 00001F0C C1EF10              <2>  shr edi, 16
   397 00001F0F 6689F9              <2>  mov cx, di
   397 00001F12 80E10F              <2>  and cl, 0x0f
   397 00001F15 884B06              <2>  mov byte [ebx+6], cl
   397 00001F18 80E2F0              <2>  and dl, 0xf0
   397 00001F1B 085306              <2>  or byte [ebx+6], dl
   397 00001F1E 886307              <2>  mov byte [ebx+7], ah
   397                              <1>  %assign LDTSelDesc LDTSelDesc+8
   398                                  	defLDTDesc DC_SEG_PROT32,  TEST_BASE1,0x000fffff,ACC_TYPE_CODE_R|ACC_PRESENT,EXT_32BIT
   398                              <1>  %assign %1 LDTSelDesc
   398 00001F21 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   398 00001F28 B82C000000          <1>  mov eax, %1
   398 00001F2D BE00400200          <1>  mov esi, %2
   398 00001F32 BFFFFF0F00          <1>  mov edi, %3
   398 00001F37 66BA409A            <1>  mov dx, %4|%5
   398                              <1>  initDescriptor
   398 00001F3B 25F8FF0000          <2>  and eax, 0xFFF8
   398 00001F40 01C3                <2>  add ebx, eax
   398 00001F42 66893B              <2>  mov word [ebx], di
   398 00001F45 66897302            <2>  mov word [ebx+2], si
   398 00001F49 C1EE10              <2>  shr esi, 16
   398 00001F4C 6689F0              <2>  mov ax, si
   398 00001F4F 884304              <2>  mov byte [ebx+4], al
   398 00001F52 887305              <2>  mov byte [ebx+5], dh
   398 00001F55 C1EF10              <2>  shr edi, 16
   398 00001F58 6689F9              <2>  mov cx, di
   398 00001F5B 80E10F              <2>  and cl, 0x0f
   398 00001F5E 884B06              <2>  mov byte [ebx+6], cl
   398 00001F61 80E2F0              <2>  and dl, 0xf0
   398 00001F64 085306              <2>  or byte [ebx+6], dl
   398 00001F67 886307              <2>  mov byte [ebx+7], ah
   398                              <1>  %assign LDTSelDesc LDTSelDesc+8
   399                                  	defLDTDesc RO_SEG_PROT,    TEST_BASE, 0x000fffff,ACC_TYPE_DATA_R|ACC_PRESENT
   399                              <1>  %assign %1 LDTSelDesc
   399 00001F6A 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   399 00001F71 B834000000          <1>  mov eax, %1
   399 00001F76 BE00000200          <1>  mov esi, %2
   399 00001F7B BFFFFF0F00          <1>  mov edi, %3
   399 00001F80 66BA0090            <1>  mov dx, %4|%5
   399                              <1>  initDescriptor
   399 00001F84 25F8FF0000          <2>  and eax, 0xFFF8
   399 00001F89 01C3                <2>  add ebx, eax
   399 00001F8B 66893B              <2>  mov word [ebx], di
   399 00001F8E 66897302            <2>  mov word [ebx+2], si
   399 00001F92 C1EE10              <2>  shr esi, 16
   399 00001F95 6689F0              <2>  mov ax, si
   399 00001F98 884304              <2>  mov byte [ebx+4], al
   399 00001F9B 887305              <2>  mov byte [ebx+5], dh
   399 00001F9E C1EF10              <2>  shr edi, 16
   399 00001FA1 6689F9              <2>  mov cx, di
   399 00001FA4 80E10F              <2>  and cl, 0x0f
   399 00001FA7 884B06              <2>  mov byte [ebx+6], cl
   399 00001FAA 80E2F0              <2>  and dl, 0xf0
   399 00001FAD 085306              <2>  or byte [ebx+6], dl
   399 00001FB0 886307              <2>  mov byte [ebx+7], ah
   399                              <1>  %assign LDTSelDesc LDTSelDesc+8
   400                                  	defLDTDesc ROU_SEG_PROT,   TEST_BASE, 0x000fffff,ACC_TYPE_DATA_R|ACC_PRESENT|ACC_DPL_3
   400                              <1>  %assign %1 LDTSelDesc
   400 00001FB3 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   400 00001FBA B83C000000          <1>  mov eax, %1
   400 00001FBF BE00000200          <1>  mov esi, %2
   400 00001FC4 BFFFFF0F00          <1>  mov edi, %3
   400 00001FC9 66BA00F0            <1>  mov dx, %4|%5
   400                              <1>  initDescriptor
   400 00001FCD 25F8FF0000          <2>  and eax, 0xFFF8
   400 00001FD2 01C3                <2>  add ebx, eax
   400 00001FD4 66893B              <2>  mov word [ebx], di
   400 00001FD7 66897302            <2>  mov word [ebx+2], si
   400 00001FDB C1EE10              <2>  shr esi, 16
   400 00001FDE 6689F0              <2>  mov ax, si
   400 00001FE1 884304              <2>  mov byte [ebx+4], al
   400 00001FE4 887305              <2>  mov byte [ebx+5], dh
   400 00001FE7 C1EF10              <2>  shr edi, 16
   400 00001FEA 6689F9              <2>  mov cx, di
   400 00001FED 80E10F              <2>  and cl, 0x0f
   400 00001FF0 884B06              <2>  mov byte [ebx+6], cl
   400 00001FF3 80E2F0              <2>  and dl, 0xf0
   400 00001FF6 085306              <2>  or byte [ebx+6], dl
   400 00001FF9 886307              <2>  mov byte [ebx+7], ah
   400                              <1>  %assign LDTSelDesc LDTSelDesc+8
   401                                  	defLDTDesc DTEST_SEG_PROT, TEST_BASE, 0x000fffff,ACC_TYPE_DATA_W|ACC_PRESENT,EXT_32BIT
   401                              <1>  %assign %1 LDTSelDesc
   401 00001FFC 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   401 00002003 B844000000          <1>  mov eax, %1
   401 00002008 BE00000200          <1>  mov esi, %2
   401 0000200D BFFFFF0F00          <1>  mov edi, %3
   401 00002012 66BA4092            <1>  mov dx, %4|%5
   401                              <1>  initDescriptor
   401 00002016 25F8FF0000          <2>  and eax, 0xFFF8
   401 0000201B 01C3                <2>  add ebx, eax
   401 0000201D 66893B              <2>  mov word [ebx], di
   401 00002020 66897302            <2>  mov word [ebx+2], si
   401 00002024 C1EE10              <2>  shr esi, 16
   401 00002027 6689F0              <2>  mov ax, si
   401 0000202A 884304              <2>  mov byte [ebx+4], al
   401 0000202D 887305              <2>  mov byte [ebx+5], dh
   401 00002030 C1EF10              <2>  shr edi, 16
   401 00002033 6689F9              <2>  mov cx, di
   401 00002036 80E10F              <2>  and cl, 0x0f
   401 00002039 884B06              <2>  mov byte [ebx+6], cl
   401 0000203C 80E2F0              <2>  and dl, 0xf0
   401 0000203F 085306              <2>  or byte [ebx+6], dl
   401 00002042 886307              <2>  mov byte [ebx+7], ah
   401                              <1>  %assign LDTSelDesc LDTSelDesc+8
   402                                  	defLDTDesc DPL1_SEG_PROT,  TEST_BASE, 0x000fffff,ACC_TYPE_DATA_W|ACC_PRESENT|ACC_DPL_1
   402                              <1>  %assign %1 LDTSelDesc
   402 00002045 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   402 0000204C B84C000000          <1>  mov eax, %1
   402 00002051 BE00000200          <1>  mov esi, %2
   402 00002056 BFFFFF0F00          <1>  mov edi, %3
   402 0000205B 66BA00B2            <1>  mov dx, %4|%5
   402                              <1>  initDescriptor
   402 0000205F 25F8FF0000          <2>  and eax, 0xFFF8
   402 00002064 01C3                <2>  add ebx, eax
   402 00002066 66893B              <2>  mov word [ebx], di
   402 00002069 66897302            <2>  mov word [ebx+2], si
   402 0000206D C1EE10              <2>  shr esi, 16
   402 00002070 6689F0              <2>  mov ax, si
   402 00002073 884304              <2>  mov byte [ebx+4], al
   402 00002076 887305              <2>  mov byte [ebx+5], dh
   402 00002079 C1EF10              <2>  shr edi, 16
   402 0000207C 6689F9              <2>  mov cx, di
   402 0000207F 80E10F              <2>  and cl, 0x0f
   402 00002082 884B06              <2>  mov byte [ebx+6], cl
   402 00002085 80E2F0              <2>  and dl, 0xf0
   402 00002088 085306              <2>  or byte [ebx+6], dl
   402 0000208B 886307              <2>  mov byte [ebx+7], ah
   402                              <1>  %assign LDTSelDesc LDTSelDesc+8
   403                                  	defLDTDesc NP_SEG_PROT,    TEST_BASE, 0x000fffff,ACC_TYPE_DATA_W
   403                              <1>  %assign %1 LDTSelDesc
   403 0000208E 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   403 00002095 B854000000          <1>  mov eax, %1
   403 0000209A BE00000200          <1>  mov esi, %2
   403 0000209F BFFFFF0F00          <1>  mov edi, %3
   403 000020A4 66BA0012            <1>  mov dx, %4|%5
   403                              <1>  initDescriptor
   403 000020A8 25F8FF0000          <2>  and eax, 0xFFF8
   403 000020AD 01C3                <2>  add ebx, eax
   403 000020AF 66893B              <2>  mov word [ebx], di
   403 000020B2 66897302            <2>  mov word [ebx+2], si
   403 000020B6 C1EE10              <2>  shr esi, 16
   403 000020B9 6689F0              <2>  mov ax, si
   403 000020BC 884304              <2>  mov byte [ebx+4], al
   403 000020BF 887305              <2>  mov byte [ebx+5], dh
   403 000020C2 C1EF10              <2>  shr edi, 16
   403 000020C5 6689F9              <2>  mov cx, di
   403 000020C8 80E10F              <2>  and cl, 0x0f
   403 000020CB 884B06              <2>  mov byte [ebx+6], cl
   403 000020CE 80E2F0              <2>  and dl, 0xf0
   403 000020D1 085306              <2>  or byte [ebx+6], dl
   403 000020D4 886307              <2>  mov byte [ebx+7], ah
   403                              <1>  %assign LDTSelDesc LDTSelDesc+8
   404                                  	defLDTDesc SYS_SEG_PROT,   TEST_BASE, 0x000fffff,ACC_PRESENT
   404                              <1>  %assign %1 LDTSelDesc
   404 000020D7 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   404 000020DE B85C000000          <1>  mov eax, %1
   404 000020E3 BE00000200          <1>  mov esi, %2
   404 000020E8 BFFFFF0F00          <1>  mov edi, %3
   404 000020ED 66BA0080            <1>  mov dx, %4|%5
   404                              <1>  initDescriptor
   404 000020F1 25F8FF0000          <2>  and eax, 0xFFF8
   404 000020F6 01C3                <2>  add ebx, eax
   404 000020F8 66893B              <2>  mov word [ebx], di
   404 000020FB 66897302            <2>  mov word [ebx+2], si
   404 000020FF C1EE10              <2>  shr esi, 16
   404 00002102 6689F0              <2>  mov ax, si
   404 00002105 884304              <2>  mov byte [ebx+4], al
   404 00002108 887305              <2>  mov byte [ebx+5], dh
   404 0000210B C1EF10              <2>  shr edi, 16
   404 0000210E 6689F9              <2>  mov cx, di
   404 00002111 80E10F              <2>  and cl, 0x0f
   404 00002114 884B06              <2>  mov byte [ebx+6], cl
   404 00002117 80E2F0              <2>  and dl, 0xf0
   404 0000211A 085306              <2>  or byte [ebx+6], dl
   404 0000211D 886307              <2>  mov byte [ebx+7], ah
   404                              <1>  %assign LDTSelDesc LDTSelDesc+8
   405                                  
   406 00002120 66B84800                	mov  ax, LDT_SEG_PROT
   407 00002124 0F00D0                  	lldt ax
   408 00002127 66B87000                	mov  ax, TSS_PROT
   409 0000212B 0F00D8                  	ltr  ax
   410 0000212E E9C2000000              	jmp  protTests
   411                                  
   412                                  %include "tss_p.asm"
     1                              <1> ; 32-bit Task State Segment
     2                              <1> ;
     3                              <1> ;      31              23              15              7             0
     4                              <1> ;     ╔═══════════════╪═══════════════╬═══════════════╪═════════════╦═╗
     5                              <1> ;     ║          I/O MAP BASE         ║ 0 0 0 0 0 0 0   0 0 0 0 0 0 ║T║64
     6                              <1> ;     ╟───────────────┼───────────────╫───────────────┼─────────────╨─╢
     7                              <1> ;     ║0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0║              LDT              ║60
     8                              <1> ;     ╟───────────────┼───────────────╫───────────────┼───────────────╢
     9                              <1> ;     ║0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0║              GS               ║5C
    10                              <1> ;     ╟───────────────┼───────────────╫───────────────┼───────────────╢
    11                              <1> ;     ║0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0║              FS               ║58
    12                              <1> ;     ╟───────────────┼───────────────╫───────────────┼───────────────╢
    13                              <1> ;     ║0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0║              DS               ║54
    14                              <1> ;     ╟───────────────┼───────────────╫───────────────┼───────────────╢
    15                              <1> ;     ║0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0║              SS               ║50
    16                              <1> ;     ╟───────────────┼───────────────╫───────────────┼───────────────╢
    17                              <1> ;     ║0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0║              CS               ║4C
    18                              <1> ;     ╟───────────────┼───────────────╫───────────────┼───────────────╢
    19                              <1> ;     ║0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0║              ES               ║48
    20                              <1> ;     ╟───────────────┼───────────────╫───────────────┼───────────────╢
    21                              <1> ;     ║                              EDI                              ║44
    22                              <1> ;     ╟───────────────┼───────────────┼───────────────┼───────────────╢
    23                              <1> ;     ║                              ESI                              ║40
    24                              <1> ;     ╟───────────────┼───────────────┼───────────────┼───────────────╢
    25                              <1> ;     ║                              EBP                              ║3C
    26                              <1> ;     ╟───────────────┼───────────────┼───────────────┼───────────────╢
    27                              <1> ;     ║                              ESP                              ║38
    28                              <1> ;     ╟───────────────┼───────────────┼───────────────┼───────────────╢
    29                              <1> ;     ║                              EBX                              ║34
    30                              <1> ;     ╟───────────────┼───────────────┼───────────────┼───────────────╢
    31                              <1> ;     ║                              EDX                              ║30
    32                              <1> ;     ╠═══════════════╪═══════════════╪═══════════════╪═══════════════╣
    33                              <1> ;     ║                              ECX                              ║2C
    34                              <1> ;     ╟───────────────┼───────────────┼───────────────┼───────────────╢
    35                              <1> ;     ║                              EAX                              ║28
    36                              <1> ;     ╟───────────────┼───────────────┼───────────────┼───────────────╢
    37                              <1> ;     ║                            EFLAGS                             ║24
    38                              <1> ;     ╟───────────────┼───────────────┼───────────────┼───────────────╢
    39                              <1> ;     ║                    INSTRUCTION POINTER (EIP)                  ║20
    40                              <1> ;     ╟───────────────┼───────────────┼───────────────┼───────────────╢
    41                              <1> ;     ║                          CR3  (PDPR)                          ║1C
    42                              <1> ;     ╟───────────────┼───────────────╫───────────────┼───────────────╢
    43                              <1> ;     ║0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0║              SS2              ║18
    44                              <1> ;     ╟───────────────┼───────────────╫───────────────┼───────────────╢
    45                              <1> ;     ║                             ESP2                              ║14
    46                              <1> ;     ╟───────────────┼───────────────╫───────────────┼───────────────╢
    47                              <1> ;     ║0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0║              SS1              ║10
    48                              <1> ;     ╟───────────────┼───────────────╫───────────────┼───────────────╢
    49                              <1> ;     ║                             ESP1                              ║0C
    50                              <1> ;     ╟───────────────┼───────────────╫───────────────┼───────────────╢
    51                              <1> ;     ║0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0║              SS0              ║8
    52                              <1> ;     ╟───────────────┼───────────────╫───────────────┼───────────────╢
    53                              <1> ;     ║                             ESP0                              ║4
    54                              <1> ;     ╟───────────────┼───────────────╫───────────────┼───────────────╢
    55                              <1> ;     ║0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0║   BACK LINK TO PREVIOUS TSS   ║0
    56                              <1> ;     ╚═══════════════╪═══════════════╬═══════════════╪═══════════════╝
    57                              <1> ;
    58                              <1> ; T = debug trap bit. Causes the processor to raise a debug exception when a
    59                              <1> ;     task switch occurs.
    60                              <1> 
    61                              <1> clearTSS:
    62                              <1> 	; initialize everything to 0
    63 00002133 2EC43D[CD1B0000]    <1> 	les    edi, [cs:ptrTSSprot]
    64 0000213A 31C0                <1> 	xor    eax, eax
    65 0000213C B968000000          <1> 	mov    ecx, 26*4
    66 00002141 FC                  <1> 	cld
    67 00002142 F3AB                <1> 	rep stosd
    68 00002144 C3                  <1> 	ret
   413                                  %include "protected_rings_p.asm"
     1                              <1> ;
     2                              <1> ; Tests the Current Privilege Level value
     3                              <1> ;
     4                              <1> ; %1 the value (0-3) to compare to; jumps to error if not equal.
     5                              <1> ;
     6                              <1> %macro testCPL 1
     7                              <1> 	mov  ax, cs
     8                              <1> 	and  ax, 3
     9                              <1> 	cmp  ax, %1
    10                              <1> 	jne  error
    11                              <1> %endmacro
    12                              <1> 
    13                              <1> 
    14                              <1> ; Switches from Ring 0 to Ring 3
    15                              <1> ;
    16                              <1> ; After calling this procedure consider all the registers and flags as trashed.
    17                              <1> ; Also, the stack will be different, so saving the CPU state there will be pointless.
    18                              <1> ;
    19                              <1> switchToRing3:
    20                              <1> 	; In order to swich to user mode (ring 3) we need to execute an IRET with these
    21                              <1> 	; values on the stack:
    22                              <1> 	; - the instruction to continue execution at - the value of EIP.
    23                              <1> 	; - the code segment selector to change to.
    24                              <1> 	; - the value of the EFLAGS register to load.
    25                              <1> 	; - the stack pointer to load.
    26                              <1> 	; - the stack segment selector to change to.
    27                              <1> 	; We also need:
    28                              <1> 	; - a 32bit code descriptor in GDT with DPL 3
    29                              <1> 	; - a 32bit data descriptor in GDT with DPL 3 (for the new stack)
    30                              <1> 	; - to put the ring 0 stack in TSS.SS0 and TSS.ESP0
    31                              <1> 	testCPL 0 ; we must be in ring 0
    31 00002145 668CC8              <2>  mov ax, cs
    31 00002148 6683E003            <2>  and ax, 3
    31 0000214C 6683F800            <2>  cmp ax, %1
    31 00002150 0F8539B40000        <2>  jne error
    32 00002156 5A                  <1> 	pop    edx ; read the return offset
    33 00002157 668CD8              <1> 	mov    ax, ds
    34 0000215A 2EC51D[CD1B0000]    <1> 	lds    ebx, [cs:ptrTSSprot]
    35                              <1> 	; save ring 0 data segments, they'll be restored with switchToRing0
    36 00002161 66894354            <1> 	mov    [ebx+0x54], ax ; save DS
    37 00002165 668CC0              <1> 	mov    ax, es
    38 00002168 66894348            <1> 	mov    [ebx+0x48], ax ; save ES
    39 0000216C 668CE0              <1> 	mov    ax, fs
    40 0000216F 66894358            <1> 	mov    [ebx+0x58], ax ; save FS
    41 00002173 668CE8              <1> 	mov    ax, gs
    42 00002176 6689435C            <1> 	mov    [ebx+0x5C], ax ; save GS
    43                              <1> 	; set ring 0 SS:ESP
    44 0000217A 896304              <1> 	mov    [ebx+4], esp
    45 0000217D 8CD0                <1> 	mov    eax, ss
    46 0000217F 894308              <1> 	mov    [ebx+8], eax
    47 00002182 FA                  <1> 	cli                           ; disable ints during switching
    48 00002183 6A6B                <1> 	push dword SU_SEG_PROT32|3    ; push user stack with RPL=3
    49 00002185 68FF7F0000          <1> 	push dword ESP_R3_PROT        ; push user mode esp
    50 0000218A 9C                  <1> 	pushfd                        ; push eflags
    51 0000218B 36814C240400020000  <1> 	or   dword [ss:esp+4], 0x200  ; reenable interrupts in ring 3 (can't use privileged sti)
    52 00002194 6A1B                <1> 	push dword CU_SEG_PROT32|3    ; push user code segment with RPL=3
    53 00002196 52                  <1> 	push dword edx                ; push return EIP
    54 00002197 CF                  <1> 	iretd
    55                              <1> 
    56                              <1> 
    57                              <1> ; Switches from Ring 3 to Ring 0
    58                              <1> ;
    59                              <1> ; After calling this procedure consider all the registers and flags as trashed.
    60                              <1> ;
    61                              <1> switchToRing0:
    62                              <1> 	testCPL 3 ; we must be in ring 3
    62 00002198 668CC8              <2>  mov ax, cs
    62 0000219B 6683E003            <2>  and ax, 3
    62 0000219F 6683F803            <2>  cmp ax, %1
    62 000021A3 0F85E6B30000        <2>  jne error
    63                              <1> 	; In order to swich to kernel mode (ring 0) we'll use a Call Gate.
    64                              <1> 	; A placeholder for a Call Gate is already present in the GDT.
    65 000021A9 59                  <1> 	pop  ecx ; read the return offset
    66 000021AA 2E0FB41D[A91B0000]  <1> 	lfs  ebx, [cs:ptrGDTUprot]
    67 000021B2 B888000000          <1> 	mov  eax, RING0_GATE
    68 000021B7 BE10000000          <1> 	mov  esi, C_SEG_PROT32
    69 000021BC BF[D1210000]        <1> 	mov  edi, .ring0
    70 000021C1 66BA0060            <1> 	mov  dx,  ACC_DPL_3 ; the DPL needs to be 3
    71 000021C5 E8C7FBFFFF          <1> 	call initCallGate
    72 000021CA 9A000000008B00      <1> 	call RING0_GATE|3:0 ; the RPL needs to be 3, the offset will be ignored.
    73                              <1> .ring0:
    74 000021D1 83C410              <1> 	add  esp, 16 ; remove from stack CS:EIP+SS:ESP pushed by the CALL to RING0_GATE
    75                              <1> 	; restore ring 0 data segments saved by switchToRing3
    76 000021D4 2EC51D[CD1B0000]    <1> 	lds  ebx, [cs:ptrTSSprot]
    77 000021DB 668B4348            <1> 	mov  ax, [ebx+0x48] ; restore ES
    78 000021DF 8EC0                <1> 	mov  es, ax
    79 000021E1 668B4358            <1> 	mov  ax, [ebx+0x58] ; restore FS
    80 000021E5 8EE0                <1> 	mov  fs, ax
    81 000021E7 668B435C            <1> 	mov  ax, [ebx+0x5C] ; restore GS
    82 000021EB 8EE8                <1> 	mov  gs, ax
    83 000021ED 668B4354            <1> 	mov  ax, [ebx+0x54] ; restore DS
    84 000021F1 8ED8                <1> 	mov  ds, ax
    85                              <1> 	; return to caller
    86 000021F3 51                  <1> 	push ecx
    87 000021F4 C3                  <1> 	ret
   414                                  
   415                                  protTests:
   416                                  ;
   417                                  ;   Test the stack
   418                                  ;
   419                                  %include "tests/stack_m.asm"
     1                              <1> ;
     2                              <1> ; Tests 16-bit and 32-bit PUSH/POP for general purpose registers.
     3                              <1> ; 50+rw PUSH r16
     4                              <1> ; 50+rd PUSH r32
     5                              <1> ; 58+rw POP r16
     6                              <1> ; 58+rd POP r32
     7                              <1> ;
     8                              <1> ; %1: register to be tested, 16-bit name; one of the following:
     9                              <1> ;     ax, bx, cx, dx, bp, si, di, sp
    10                              <1> ; %2: stack address size: 16 or 32
    11                              <1> ;
    12                              <1> %macro testPushPopR 2
    13                              <1> 	%if %1 = bp
    14                              <1> 		%define sptr eax
    15                              <1> 	%else
    16                              <1> 		%define sptr ebp
    17                              <1> 	%endif
    18                              <1> 
    19                              <1> 	%if %2 = 16
    20                              <1> 		%define push16esp 0x2fffe
    21                              <1> 		%define push32esp 0x2fffc
    22                              <1> 	%else
    23                              <1> 		%define push16esp 0x1fffe
    24                              <1> 		%define push32esp 0x1fffc
    25                              <1> 	%endif
    26                              <1> 
    27                              <1> 	%define r16 %1
    28                              <1> 	%define r32 e%1
    29                              <1> 
    30                              <1> 	mov    esp, 0x20000          ; ESP := 0x20000
    31                              <1> 	mov    r32, 0x20000
    32                              <1> 	lea    sptr, [esp-4]         ; sptr := ESP - 4
    33                              <1> 	%if %2 = 16
    34                              <1> 	and    sptr, 0xffff          ; sptr := 0x0FFFC (sptr now mirrors SP instead of ESP)
    35                              <1> 	%endif
    36                              <1> 
    37                              <1> 	mov    [sptr], dword 0xdeadbeef
    38                              <1> 	push   r32                   ; 32-bit PUSH
    39                              <1> 	cmp    [sptr], dword 0x20000 ; was the push 32-bit and did it use the correct eSP?
    40                              <1> 	jne    error                 ; no, error
    41                              <1> 	cmp    esp, push32esp        ; did the push update the correct eSP?
    42                              <1> 	jne    error                 ; no, error
    43                              <1> 
    44                              <1> 	mov    [sptr], dword 0xdeadbeef
    45                              <1> 	pop    r32                   ; 32-bit POP
    46                              <1> 	cmp    r32, dword 0xdeadbeef
    47                              <1> 	jne    error
    48                              <1> 
    49                              <1> 	%if r16 <> sp
    50                              <1> 	cmp    esp, 0x20000          ; did the pop update the correct eSP?
    51                              <1> 	jne    error                 ; no, error
    52                              <1> 	%endif
    53                              <1> 
    54                              <1> 	mov    r32, 0x20000
    55                              <1> 
    56                              <1> 	mov    [sptr], dword 0xdeadbeef
    57                              <1> 	push   r16                   ; 16-bit PUSH
    58                              <1> 	cmp    [sptr], dword 0x0000beef ; was the push 16-bit and did it use the correct eSP?
    59                              <1> 	jne    error                 ; no, error
    60                              <1> 	cmp    esp, push16esp        ; did the push update the correct eSP?
    61                              <1> 	jne    error                 ; no, error
    62                              <1> 
    63                              <1> 	mov    [sptr], dword 0xdeadbeef
    64                              <1> 	pop    r16                   ; 16-bit POP
    65                              <1> 	cmp    r16, 0xdead
    66                              <1> 	jne    error
    67                              <1> 
    68                              <1> 	%if r16 <> sp
    69                              <1> 	cmp    esp, 0x20000          ; did the pop update the correct eSP?
    70                              <1> 	jne    error                 ; no, error
    71                              <1> 	%endif
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> ;
    75                              <1> ; Tests 16-bit and 32-bit PUSH/POP for segment registers.
    76                              <1> ;   0E PUSH CS
    77                              <1> ;   1E PUSH DS
    78                              <1> ;   1F POP DS
    79                              <1> ;   16 PUSH SS
    80                              <1> ;   17 POP SS
    81                              <1> ;   06 PUSH ES
    82                              <1> ;   07 POP ES
    83                              <1> ; 0FA0 PUSH FS
    84                              <1> ; 0FA1 POP FS
    85                              <1> ; 0FA8 PUSH GS
    86                              <1> ; 0FA9 POP GS
    87                              <1> ;
    88                              <1> ; %1: register to be tested, one of the following:
    89                              <1> ;     cs, ds, ss, es, fs, gs
    90                              <1> ; %2: stack address size: 16 or 32
    91                              <1> ;
    92                              <1> %macro testPushPopSR 2
    93                              <1> 	%if %2 = 16
    94                              <1> 		%define push16esp 0x2fffe
    95                              <1> 		%define push32esp 0x2fffc
    96                              <1> 	%else
    97                              <1> 		%define push16esp 0x1fffe
    98                              <1> 		%define push32esp 0x1fffc
    99                              <1> 	%endif
   100                              <1> 
   101                              <1> 	mov    dx, %1                ; save segment register value
   102                              <1> 	mov    esp, 0x20000
   103                              <1> 	lea    ebp, [esp-4]
   104                              <1> 	%if %2 = 16
   105                              <1> 	and    ebp, 0xffff           ; EBP now mirrors SP instead of ESP
   106                              <1> 	%endif
   107                              <1> 
   108                              <1> 	mov    [ebp], dword 0xdeadbeef ; put control dword on stack
   109                              <1> 	o32 push %1                  ; 32-bit PUSH
   110                              <1> 	cmp    [ebp], dx             ; was the least significant word correctly written?
   111                              <1> 	jne    error                 ; no, error
   112                              <1> 	%if TEST_UNDEF
   113                              <1> 	; 80386, 80486 perform a 16-bit move, leaving the upper portion of the stack
   114                              <1> 	; location unmodified (tested on real hardware). Probably all 32-bit Intel
   115                              <1> 	; CPUs behave in this way, but this behaviour is not specified in the docs
   116                              <1> 	; for older CPUs and is cited in the most recent docs like this:
   117                              <1> 	; "If the source operand is a segment register (16 bits) and the operand
   118                              <1> 	; size is 32-bits, either a zero-extended value is pushed on the stack or
   119                              <1> 	; the segment selector is written on the stack using a 16-bit move. For the
   120                              <1> 	; last case, all recent Core and Atom processors perform a 16-bit move,
   121                              <1> 	; leaving the upper portion of the stack location unmodified."
   122                              <1> 	cmp    [ebp+2], word 0xdead  ; has the most significant word been overwritten?
   123                              <1> 	jne    error                 ; yes, error
   124                              <1> 	%endif
   125                              <1> 	cmp    esp, push32esp        ; did the push update the correct stack pointer reg?
   126                              <1> 	jne    error                 ; no, error
   127                              <1> 
   128                              <1> 	%if %1 <> cs
   129                              <1> 	mov    [ebp], dword DTEST_SEG_PROT ; write test segment on stack
   130                              <1> 	o32 pop %1                   ; 32-bit POP
   131                              <1> 	mov    ax, %1
   132                              <1> 	cmp    ax, DTEST_SEG_PROT      ; is the popped segment the one on the stack?
   133                              <1> 	jne    error                 ; no, error
   134                              <1> 	cmp    esp, 0x20000          ; did the pop update the correct stack pointer reg?
   135                              <1> 	jne    error                 ; no, error
   136                              <1> 	mov    %1, dx                ; restore segment
   137                              <1> 	%else
   138                              <1> 	mov    esp, 0x20000
   139                              <1> 	%endif
   140                              <1> 
   141                              <1> 	mov    [ebp], dword 0xdeadbeef
   142                              <1> 	o16 push %1                  ; 16-bit PUSH
   143                              <1> 	cmp    [ebp+2], dx           ; was the push 16-bit and did it use the correct stack pointer reg?
   144                              <1> 	jne    error                 ; no, error
   145                              <1> 	cmp    esp, push16esp        ; did the push update the correct stack pointer reg?
   146                              <1> 	jne    error                 ; no, error
   147                              <1> 
   148                              <1> 	%if %1 <> cs
   149                              <1> 	mov    [ebp+2], word DTEST_SEG_PROT ; write test segment on stack
   150                              <1> 	o16 pop %1                   ; 16-bit POP
   151                              <1> 	mov    ax, %1
   152                              <1> 	cmp    ax, DTEST_SEG_PROT      ; is the popped segment the one on the stack?
   153                              <1> 	jne    error                 ; no, error
   154                              <1> 	cmp    esp, 0x20000          ; did the pop update the correct stack pointer reg?
   155                              <1> 	jne    error                 ; no, error
   156                              <1> 	mov    %1, dx                ; restore segment
   157                              <1> 	%else
   158                              <1> 	mov esp, 0x20000
   159                              <1> 	%endif
   160                              <1> 
   161                              <1> %endmacro
   162                              <1> 
   163                              <1> ;
   164                              <1> ; Tests 16-bit and 32-bit PUSH/POP with memory operand.
   165                              <1> ; FF /6 PUSH r/m16
   166                              <1> ; FF /6 PUSH r/m32
   167                              <1> ; 8F /0 POP r/m16
   168                              <1> ; 8F /0 POP r/m32
   169                              <1> ;
   170                              <1> ; %1: stack address size: 16 or 32
   171                              <1> ;
   172                              <1> %macro testPushPopM 1
   173                              <1> 
   174                              <1> 	%if %1 = 16
   175                              <1> 		%define push16esp 0x2fffe
   176                              <1> 		%define push32esp 0x2fffc
   177                              <1> 	%else
   178                              <1> 		%define push16esp 0x1fffe
   179                              <1> 		%define push32esp 0x1fffc
   180                              <1> 	%endif
   181                              <1> 
   182                              <1> 	mov    esp, 0x20000
   183                              <1> 	lea    ebp, [esp-4]
   184                              <1> 	%if %1 = 16
   185                              <1> 	and    ebp, 0xffff             ; EBP now mirrors SP instead of ESP
   186                              <1> 	%endif
   187                              <1> 
   188                              <1> 	lea    esi, [esp-8]            ; init pointer to dword operand in memory
   189                              <1> 	mov    [esi], dword 0x11223344 ; put test dword in memory
   190                              <1> 
   191                              <1> 	mov    [ebp], dword 0xdeadbeef ; put control dword on stack
   192                              <1> 	push   dword [esi]             ; 32-bit PUSH
   193                              <1> 	cmp    [ebp], dword 0x11223344 ; was it a 32-bit push? did it use the correct pointer?
   194                              <1> 	jne    error                   ; no, error
   195                              <1> 	cmp    esp, push32esp          ; did the push update the correct stack pointer reg?
   196                              <1> 	jne    error                   ; no, error
   197                              <1> 
   198                              <1> 	mov    [esi], dword 0xdeadbeef ; put control dword in memory
   199                              <1> 	pop    dword [esi]             ; 32-bit POP
   200                              <1> 	cmp    [esi], dword 0x11223344 ; was it a 32-bit pop? did it use the correct pointer?
   201                              <1> 	jne    error                   ; no, error
   202                              <1> 	cmp    esp, 0x20000            ; did the pop update the correct eSP?
   203                              <1> 	jne    error                   ; no, error
   204                              <1> 
   205                              <1> 	mov    [ebp], dword 0xdeadbeef ; put control dword on stack
   206                              <1> 	push   word [esi]              ; 16-bit PUSH
   207                              <1> 	cmp    [ebp], dword 0x3344beef ; was it a 16-bit push? did it use the correct pointer?
   208                              <1> 	jne    error                   ; no, error
   209                              <1> 	cmp    esp, push16esp          ; did the push update the correct pointer?
   210                              <1> 	jne    error                   ; no, error
   211                              <1> 
   212                              <1> 	mov    [esi], dword 0xdeadbeef ; put control dword in memory
   213                              <1> 	pop    word [esi]              ; 16-bit POP
   214                              <1> 	cmp    [esi], dword 0xdead3344 ; was it a 16-bit pop? did it use the correct pointer?
   215                              <1> 	jne    error                   ; no, error
   216                              <1> 	cmp    esp, 0x20000            ; did the pop update the correct pointer?
   217                              <1> 	jne    error                   ; no, error
   218                              <1> %endmacro
   219                              <1> 
   220                              <1> ;
   221                              <1> ; Tests 16-bit PUSHA/POPA
   222                              <1> ; 60 PUSHA
   223                              <1> ; 61 POPA
   224                              <1> ;
   225                              <1> ; %1: stack address size: 16 or 32
   226                              <1> ;
   227                              <1> %macro testPushPopAll16 1
   228                              <1> 
   229                              <1> 	%if %1 = 16
   230                              <1> 		%define push16esp 0x2fff0
   231                              <1> 	%else
   232                              <1> 		%define push16esp 0x1fff0
   233                              <1> 	%endif
   234                              <1> 
   235                              <1> 	mov    esp, 0x20000
   236                              <1> 	lea    ebp, [esp-2]
   237                              <1> 	%if %1 = 16
   238                              <1> 	and    ebp, 0xffff ; EBP now mirrors SP instead of ESP
   239                              <1> 	%endif
   240                              <1> 
   241                              <1> 	; reset stack memory
   242                              <1> 	mov    ecx, 8
   243                              <1> 	mov    edi, ebp
   244                              <1> %%initstack:
   245                              <1> 	mov    [edi], word 0xbeef
   246                              <1> 	sub    edi, 2
   247                              <1> 	loop   %%initstack
   248                              <1> 
   249                              <1> 	; init general registers
   250                              <1> 	mov    eax, 0x11111111
   251                              <1> 	mov    ecx, 0x22222222
   252                              <1> 	mov    edx, 0x33333333
   253                              <1> 	mov    ebx, 0x44444444
   254                              <1> 	; esp 0x20000
   255                              <1> 	; ebp 0x0ffff or 0x1ffff
   256                              <1> 	mov    esi, 0x77777777
   257                              <1> 	mov    edi, 0x88888888
   258                              <1> 
   259                              <1> 	o16 pusha ; 16-bit PUSHA
   260                              <1> 
   261                              <1> 	; verify result
   262                              <1> 	; order: AX, CX, DX, BX, SP (original value), BP, SI, and DI
   263                              <1> 	cmp    [ebp], ax
   264                              <1> 	jne    error
   265                              <1> 	cmp    [ebp-2], cx
   266                              <1> 	jne    error
   267                              <1> 	cmp    [ebp-4], dx
   268                              <1> 	jne    error
   269                              <1> 	cmp    [ebp-6], bx
   270                              <1> 	jne    error
   271                              <1> 	cmp    [ebp-8], word 0x0000
   272                              <1> 	jne    error
   273                              <1> 	cmp    [ebp-10], bp
   274                              <1> 	jne    error
   275                              <1> 	cmp    [ebp-12], si
   276                              <1> 	jne    error
   277                              <1> 	cmp    [ebp-14], di
   278                              <1> 	jne    error
   279                              <1> 
   280                              <1> 	cmp    esp, push16esp
   281                              <1> 	jne    error
   282                              <1> 
   283                              <1> 	; put bogus value for SP in the stack so that we can detect if it'll be popped
   284                              <1> 	mov    [ebp-8], word 0xbeef
   285                              <1> 
   286                              <1> 	; reset general registers
   287                              <1> 	mov    eax, 0xdeadbeef
   288                              <1> 	mov    ecx, 0xdeadbeef
   289                              <1> 	mov    edx, 0xdeadbeef
   290                              <1> 	mov    ebx, 0xdeadbeef
   291                              <1> 	; esp
   292                              <1> 	mov    ebp, 0xdeadbeef
   293                              <1> 	mov    esi, 0xdeadbeef
   294                              <1> 	mov    edi, 0xdeadbeef
   295                              <1> 
   296                              <1> 	o16 popa ; 16-bit POPA
   297                              <1> 
   298                              <1> 	; verify result
   299                              <1> 	; order: AX, CX, DX, BX, SP (original value), BP, SI, and DI
   300                              <1> 	cmp    eax, 0xdead1111
   301                              <1> 	jne    error
   302                              <1> 	cmp    ecx, 0xdead2222
   303                              <1> 	jne    error
   304                              <1> 	cmp    edx, 0xdead3333
   305                              <1> 	jne    error
   306                              <1> 	cmp    ebx, 0xdead4444
   307                              <1> 	jne    error
   308                              <1> 	cmp    esp, 0x20000
   309                              <1> 	jne    error
   310                              <1> 	mov    eax, 0xdead0000
   311                              <1> 	sub    ax, 2
   312                              <1> 	cmp    ebp, eax
   313                              <1> 	jne    error
   314                              <1> 	cmp    esi, 0xdead7777
   315                              <1> 	jne    error
   316                              <1> 	cmp    edi, 0xdead8888
   317                              <1> 	jne    error
   318                              <1> 
   319                              <1> %endmacro
   320                              <1> 
   321                              <1> ;
   322                              <1> ; Tests 32-bit PUSHA/POPA
   323                              <1> ; 60 PUSHAD
   324                              <1> ; 61 POPAD
   325                              <1> ;
   326                              <1> ; %1: stack address size: 16 or 32
   327                              <1> ;
   328                              <1> %macro testPushPopAll32 1
   329                              <1> 
   330                              <1> 	%if %1 = 16
   331                              <1> 		%define push32esp 0x2ffe0
   332                              <1> 	%else
   333                              <1> 		%define push32esp 0x1ffe0
   334                              <1> 	%endif
   335                              <1> 
   336                              <1> 	mov    esp, 0x20000
   337                              <1> 	lea    ebp, [esp-4]
   338                              <1> 	%if %1 = 16
   339                              <1> 	and    ebp, 0xffff ; EBP now mirrors SP instead of ESP
   340                              <1> 	%endif
   341                              <1> 
   342                              <1> 	; reset stack memory
   343                              <1> 	mov    ecx, 8
   344                              <1> 	mov    edi, ebp
   345                              <1> %%initstack:
   346                              <1> 	mov    [edi], dword 0xdeadbeef
   347                              <1> 	sub    edi, 4
   348                              <1> 	loop   %%initstack
   349                              <1> 
   350                              <1> 	; init general registers
   351                              <1> 	mov    eax, 0x11111111
   352                              <1> 	mov    ecx, 0x22222222
   353                              <1> 	mov    edx, 0x33333333
   354                              <1> 	mov    ebx, 0x44444444
   355                              <1> 	; esp 0x20000
   356                              <1> 	; ebp 0x0ffff or 0x1ffff
   357                              <1> 	mov    esi, 0x77777777
   358                              <1> 	mov    edi, 0x88888888
   359                              <1> 
   360                              <1> 	o32 pusha ; 32-bit PUSHA
   361                              <1> 
   362                              <1> 	; verify result
   363                              <1> 	; order: EAX, ECX, EDX, EBX, ESP (original value), EBP, ESI, and EDI
   364                              <1> 	cmp    [ebp], eax
   365                              <1> 	jne    error
   366                              <1> 	cmp    [ebp-4], ecx
   367                              <1> 	jne    error
   368                              <1> 	cmp    [ebp-8], edx
   369                              <1> 	jne    error
   370                              <1> 	cmp    [ebp-12], ebx
   371                              <1> 	jne    error
   372                              <1> 	cmp    [ebp-16], dword 0x20000
   373                              <1> 	jne    error
   374                              <1> 	cmp    [ebp-20], ebp
   375                              <1> 	jne    error
   376                              <1> 	cmp    [ebp-24], esi
   377                              <1> 	jne    error
   378                              <1> 	cmp    [ebp-28], edi
   379                              <1> 	jne    error
   380                              <1> 
   381                              <1> 	cmp    esp, push32esp
   382                              <1> 	jne    error
   383                              <1> 
   384                              <1> 	; put bogus value for eSP in the stack so that we can detect if it'll be popped
   385                              <1> 	mov    [ebp-16], dword 0xdeadbeef
   386                              <1> 
   387                              <1> 	; reset general registers
   388                              <1> 	mov    eax, 0xdeadbeef
   389                              <1> 	mov    ecx, 0xdeadbeef
   390                              <1> 	mov    edx, 0xdeadbeef
   391                              <1> 	mov    ebx, 0xdeadbeef
   392                              <1> 	; esp
   393                              <1> 	mov    ebp, 0xdeadbeef
   394                              <1> 	mov    esi, 0xdeadbeef
   395                              <1> 	mov    edi, 0xdeadbeef
   396                              <1> 
   397                              <1> 	o32 popa ; 32-bit POPA
   398                              <1> 
   399                              <1> 	; verify result
   400                              <1> 	; order: EAX, ECX, EDX, EBX, ESP (original value), EBP, ESI, and EDI
   401                              <1> 	cmp    eax, 0x11111111
   402                              <1> 	jne    error
   403                              <1> 	cmp    ecx, 0x22222222
   404                              <1> 	jne    error
   405                              <1> 	cmp    edx, 0x33333333
   406                              <1> 	jne    error
   407                              <1> 	cmp    ebx, 0x44444444
   408                              <1> 	jne    error
   409                              <1> 	cmp    esp, 0x20000
   410                              <1> 	jne    error
   411                              <1> 	lea    eax, [esp-4]
   412                              <1> 	%if %1 = 16
   413                              <1> 	and    eax, 0xffff
   414                              <1> 	%endif
   415                              <1> 	cmp    ebp, eax
   416                              <1> 	jne    error
   417                              <1> 	cmp    esi, 0x77777777
   418                              <1> 	jne    error
   419                              <1> 	cmp    edi, 0x88888888
   420                              <1> 	jne    error
   421                              <1> 
   422                              <1> %endmacro
   423                              <1> 
   424                              <1> 
   425                              <1> ;
   426                              <1> ; Tests for PUSH immediate value
   427                              <1> ;
   428                              <1> 
   429                              <1> ; 6A ib PUSH imm8
   430                              <1> ;
   431                              <1> ; %1: operand size
   432                              <1> ; %2: byte test value
   433                              <1> ; %3: memory expected value
   434                              <1> ; %4: esp expected value
   435                              <1> %macro testBytePush 4
   436                              <1> 	mov    esp, 0x20000
   437                              <1> 	mov    [ebp], dword 0xdeadbeef
   438                              <1> 	%1 push byte %2 ; sign extended byte push
   439                              <1> 	cmp    [ebp], dword %3
   440                              <1> 	jne    error
   441                              <1> 	cmp    esp, %4
   442                              <1> 	jne    error
   443                              <1> %endmacro
   444                              <1> 
   445                              <1> ; 68 iw PUSH imm16
   446                              <1> ; 68 id PUSH imm32
   447                              <1> ;
   448                              <1> ; %1: stack address size: 16 or 32
   449                              <1> %macro testPushImm 1
   450                              <1> 
   451                              <1> 	mov    esp, 0x20000
   452                              <1> 	lea    ebp, [esp-4]
   453                              <1> 	%if %1 = 16
   454                              <1> 	and    ebp, 0xffff ; EBP now mirrors SP instead of ESP
   455                              <1> 	%endif
   456                              <1> 
   457                              <1> 	mov    [ebp], dword 0xdeadbeef
   458                              <1> 
   459                              <1> 	push   dword 0x11223344 ; 32-bit push
   460                              <1> 
   461                              <1> 	cmp    [ebp], dword 0x11223344
   462                              <1> 	jne    error
   463                              <1> 	%if %1 = 16
   464                              <1> 	cmp    esp, 0x2fffc
   465                              <1> 	%else
   466                              <1> 	cmp    esp, 0x1fffc
   467                              <1> 	%endif
   468                              <1> 	jne    error
   469                              <1> 
   470                              <1> 	mov    esp, 0x20000
   471                              <1> 	mov    [ebp], dword 0xdeadbeef
   472                              <1> 
   473                              <1> 	push   word 0x1122 ; 16-bit push
   474                              <1> 
   475                              <1> 	cmp    [ebp], dword 0x1122beef
   476                              <1> 	jne    error
   477                              <1> 	%if %1 = 16
   478                              <1> 	cmp    esp, 0x2fffe
   479                              <1> 	%else
   480                              <1> 	cmp    esp, 0x1fffe
   481                              <1> 	%endif
   482                              <1> 	jne error
   483                              <1> 
   484                              <1> 	%if %1 = 16
   485                              <1> 		%define push16esp 0x2fffe
   486                              <1> 		%define push32esp 0x2fffc
   487                              <1> 	%else
   488                              <1> 		%define push16esp 0x1fffe
   489                              <1> 		%define push32esp 0x1fffc
   490                              <1> 	%endif
   491                              <1> 	testBytePush o16, 0x11, 0x0011beef, push16esp
   492                              <1> 	testBytePush o32, 0x11, 0x00000011, push32esp
   493                              <1> 	testBytePush o16, 0x81, 0xff81beef, push16esp
   494                              <1> 	testBytePush o32, 0x81, 0xffffff81, push32esp
   495                              <1> 
   496                              <1> %endmacro
   497                              <1> 
   498                              <1> 
   499                              <1> ;
   500                              <1> ; Tests for PUSHF(D)/POPF(D)
   501                              <1> ;
   502                              <1> ; NOTE: these macros do not test protection or flags behaviour, only if the
   503                              <1> ; stack is propery used.
   504                              <1> ;
   505                              <1> 
   506                              <1> ; 9D POPF
   507                              <1> ;
   508                              <1> ; %1: operand size: 16 or 32
   509                              <1> %macro testPopF 1
   510                              <1> 	push   dword 0
   511                              <1> 	popfd
   512                              <1> 	%if %1 = 16
   513                              <1> 	mov    [ebp+2], word 0x08D7    ; OF,SF,ZF,AF,PF,CF
   514                              <1> 	%else
   515                              <1> 	mov    [ebp], dword 0x000008D7 ; OF,SF,ZF,AF,PF,CF
   516                              <1> 	%endif
   517                              <1> 	mov    esp, push%1esp
   518                              <1> 	o%1 popf
   519                              <1> 	jno    error           ; OF
   520                              <1> 	lahf
   521                              <1> 	cmp    ah, 0xD7        ; SF:ZF:0:AF:0:PF:1:CF
   522                              <1> 	jne    error
   523                              <1> 	cmp    esp, 0x20000
   524                              <1> 	jne    error
   525                              <1> %endmacro
   526                              <1> 
   527                              <1> ; 9C PUSHF
   528                              <1> ;
   529                              <1> ; %1: operand size: 16 or 32
   530                              <1> %macro testPushF 1
   531                              <1> 	push dword 0
   532                              <1> 	popfd        ; put all flags to 0
   533                              <1> 	jo error
   534                              <1> 	jc error
   535                              <1> 	jz error
   536                              <1> 	js error
   537                              <1> 	jpe error
   538                              <1> 	; AF unverified?
   539                              <1> 	mov    esp, 0x20000
   540                              <1> 	mov    [ebp], dword 0xdeadbeef
   541                              <1> 	stc
   542                              <1> 	std
   543                              <1> 	sti
   544                              <1> 	o%1 pushf
   545                              <1> 	%if %1 = 16
   546                              <1> 	cmp    [ebp], dword 0x0603beef
   547                              <1> 	%else
   548                              <1> 	cmp    [ebp], dword 0x00000603
   549                              <1> 	%endif
   550                              <1> 	jne    error
   551                              <1> 	cmp    esp, push%1esp
   552                              <1> 	jne    error
   553                              <1> %endmacro
   554                              <1> 
   555                              <1> ; %1: stack size: 16 or 32
   556                              <1> %macro testPushPopF 1
   557                              <1> 	%if %1 = 16
   558                              <1> 		%define push16esp 0x2fffe
   559                              <1> 		%define push32esp 0x2fffc
   560                              <1> 	%else
   561                              <1> 		%define push16esp 0x1fffe
   562                              <1> 		%define push32esp 0x1fffc
   563                              <1> 	%endif
   564                              <1> 
   565                              <1> 	mov    esp, 0x20000
   566                              <1> 	lea    ebp, [esp-4]
   567                              <1> 	%if %1 = 16
   568                              <1> 	and    ebp, 0xffff ; EBP now mirrors SP instead of ESP
   569                              <1> 	%endif
   570                              <1> 
   571                              <1> 	testPushF 16
   572                              <1> 	testPushF 32
   573                              <1> 	testPopF 16
   574                              <1> 	testPopF 32
   575                              <1> %endmacro
   420                                  
   421                                  	POST 9
   421 000021F5 B009                <1>  mov al, 0x%1
   421 000021F7 66BA9001            <1>  mov dx, POST_PORT
   421 000021FB EE                  <1>  out dx, al
   422                                  ;
   423                                  ;   For the next tests, with a 16-bit data segment in SS, we
   424                                  ;   expect all pushes/pops will occur at SP rather than ESP.
   425                                  ;
   426 000021FC 66B80400                	mov    ax, D_SEG_PROT16
   427 00002200 8ED8                    	mov    ds, ax
   428 00002202 8ED0                    	mov    ss, ax
   429 00002204 8EC0                    	mov    es, ax
   430 00002206 8EE0                    	mov    fs, ax
   431 00002208 8EE8                    	mov    gs, ax
   432                                  
   433                                  	;
   434                                  	; general purpose registers
   435                                  	;
   436                                  	testPushPopR ax,16
   436                              <1>  %if %1 = bp
   436                              <1>  %define sptr eax
   436                              <1>  %else
   436                              <1>  %define sptr ebp
   436                              <1>  %endif
   436                              <1> 
   436                              <1>  %if %2 = 16
   436                              <1>  %define push16esp 0x2fffe
   436                              <1>  %define push32esp 0x2fffc
   436                              <1>  %else
   436                              <1>  %define push16esp 0x1fffe
   436                              <1>  %define push32esp 0x1fffc
   436                              <1>  %endif
   436                              <1> 
   436                              <1>  %define r16 %1
   436                              <1>  %define r32 e%1
   436                              <1> 
   436 0000220A BC00000200          <1>  mov esp, 0x20000
   436 0000220F B800000200          <1>  mov r32, 0x20000
   436 00002214 8D6C24FC            <1>  lea sptr, [esp-4]
   436                              <1>  %if %2 = 16
   436 00002218 81E5FFFF0000        <1>  and sptr, 0xffff
   436                              <1>  %endif
   436                              <1> 
   436 0000221E C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   436 00002225 50                  <1>  push r32
   436 00002226 817D0000000200      <1>  cmp [sptr], dword 0x20000
   436 0000222D 0F855CB30000        <1>  jne error
   436 00002233 81FCFCFF0200        <1>  cmp esp, push32esp
   436 00002239 0F8550B30000        <1>  jne error
   436                              <1> 
   436 0000223F C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   436 00002246 58                  <1>  pop r32
   436 00002247 3DEFBEADDE          <1>  cmp r32, dword 0xdeadbeef
   436 0000224C 0F853DB30000        <1>  jne error
   436                              <1> 
   436                              <1>  %if r16 <> sp
   436 00002252 81FC00000200        <1>  cmp esp, 0x20000
   436 00002258 0F8531B30000        <1>  jne error
   436                              <1>  %endif
   436                              <1> 
   436 0000225E B800000200          <1>  mov r32, 0x20000
   436                              <1> 
   436 00002263 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   436 0000226A 6650                <1>  push r16
   436 0000226C 817D00EFBE0000      <1>  cmp [sptr], dword 0x0000beef
   436 00002273 0F8516B30000        <1>  jne error
   436 00002279 81FCFEFF0200        <1>  cmp esp, push16esp
   436 0000227F 0F850AB30000        <1>  jne error
   436                              <1> 
   436 00002285 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   436 0000228C 6658                <1>  pop r16
   436 0000228E 663DADDE            <1>  cmp r16, 0xdead
   436 00002292 0F85F7B20000        <1>  jne error
   436                              <1> 
   436                              <1>  %if r16 <> sp
   436 00002298 81FC00000200        <1>  cmp esp, 0x20000
   436 0000229E 0F85EBB20000        <1>  jne error
   436                              <1>  %endif
   437                                  	testPushPopR bx,16
   437                              <1>  %if %1 = bp
   437                              <1>  %define sptr eax
   437                              <1>  %else
   437                              <1>  %define sptr ebp
   437                              <1>  %endif
   437                              <1> 
   437                              <1>  %if %2 = 16
   437                              <1>  %define push16esp 0x2fffe
   437                              <1>  %define push32esp 0x2fffc
   437                              <1>  %else
   437                              <1>  %define push16esp 0x1fffe
   437                              <1>  %define push32esp 0x1fffc
   437                              <1>  %endif
   437                              <1> 
   437                              <1>  %define r16 %1
   437                              <1>  %define r32 e%1
   437                              <1> 
   437 000022A4 BC00000200          <1>  mov esp, 0x20000
   437 000022A9 BB00000200          <1>  mov r32, 0x20000
   437 000022AE 8D6C24FC            <1>  lea sptr, [esp-4]
   437                              <1>  %if %2 = 16
   437 000022B2 81E5FFFF0000        <1>  and sptr, 0xffff
   437                              <1>  %endif
   437                              <1> 
   437 000022B8 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   437 000022BF 53                  <1>  push r32
   437 000022C0 817D0000000200      <1>  cmp [sptr], dword 0x20000
   437 000022C7 0F85C2B20000        <1>  jne error
   437 000022CD 81FCFCFF0200        <1>  cmp esp, push32esp
   437 000022D3 0F85B6B20000        <1>  jne error
   437                              <1> 
   437 000022D9 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   437 000022E0 5B                  <1>  pop r32
   437 000022E1 81FBEFBEADDE        <1>  cmp r32, dword 0xdeadbeef
   437 000022E7 0F85A2B20000        <1>  jne error
   437                              <1> 
   437                              <1>  %if r16 <> sp
   437 000022ED 81FC00000200        <1>  cmp esp, 0x20000
   437 000022F3 0F8596B20000        <1>  jne error
   437                              <1>  %endif
   437                              <1> 
   437 000022F9 BB00000200          <1>  mov r32, 0x20000
   437                              <1> 
   437 000022FE C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   437 00002305 6653                <1>  push r16
   437 00002307 817D00EFBE0000      <1>  cmp [sptr], dword 0x0000beef
   437 0000230E 0F857BB20000        <1>  jne error
   437 00002314 81FCFEFF0200        <1>  cmp esp, push16esp
   437 0000231A 0F856FB20000        <1>  jne error
   437                              <1> 
   437 00002320 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   437 00002327 665B                <1>  pop r16
   437 00002329 6681FBADDE          <1>  cmp r16, 0xdead
   437 0000232E 0F855BB20000        <1>  jne error
   437                              <1> 
   437                              <1>  %if r16 <> sp
   437 00002334 81FC00000200        <1>  cmp esp, 0x20000
   437 0000233A 0F854FB20000        <1>  jne error
   437                              <1>  %endif
   438                                  	testPushPopR cx,16
   438                              <1>  %if %1 = bp
   438                              <1>  %define sptr eax
   438                              <1>  %else
   438                              <1>  %define sptr ebp
   438                              <1>  %endif
   438                              <1> 
   438                              <1>  %if %2 = 16
   438                              <1>  %define push16esp 0x2fffe
   438                              <1>  %define push32esp 0x2fffc
   438                              <1>  %else
   438                              <1>  %define push16esp 0x1fffe
   438                              <1>  %define push32esp 0x1fffc
   438                              <1>  %endif
   438                              <1> 
   438                              <1>  %define r16 %1
   438                              <1>  %define r32 e%1
   438                              <1> 
   438 00002340 BC00000200          <1>  mov esp, 0x20000
   438 00002345 B900000200          <1>  mov r32, 0x20000
   438 0000234A 8D6C24FC            <1>  lea sptr, [esp-4]
   438                              <1>  %if %2 = 16
   438 0000234E 81E5FFFF0000        <1>  and sptr, 0xffff
   438                              <1>  %endif
   438                              <1> 
   438 00002354 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   438 0000235B 51                  <1>  push r32
   438 0000235C 817D0000000200      <1>  cmp [sptr], dword 0x20000
   438 00002363 0F8526B20000        <1>  jne error
   438 00002369 81FCFCFF0200        <1>  cmp esp, push32esp
   438 0000236F 0F851AB20000        <1>  jne error
   438                              <1> 
   438 00002375 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   438 0000237C 59                  <1>  pop r32
   438 0000237D 81F9EFBEADDE        <1>  cmp r32, dword 0xdeadbeef
   438 00002383 0F8506B20000        <1>  jne error
   438                              <1> 
   438                              <1>  %if r16 <> sp
   438 00002389 81FC00000200        <1>  cmp esp, 0x20000
   438 0000238F 0F85FAB10000        <1>  jne error
   438                              <1>  %endif
   438                              <1> 
   438 00002395 B900000200          <1>  mov r32, 0x20000
   438                              <1> 
   438 0000239A C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   438 000023A1 6651                <1>  push r16
   438 000023A3 817D00EFBE0000      <1>  cmp [sptr], dword 0x0000beef
   438 000023AA 0F85DFB10000        <1>  jne error
   438 000023B0 81FCFEFF0200        <1>  cmp esp, push16esp
   438 000023B6 0F85D3B10000        <1>  jne error
   438                              <1> 
   438 000023BC C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   438 000023C3 6659                <1>  pop r16
   438 000023C5 6681F9ADDE          <1>  cmp r16, 0xdead
   438 000023CA 0F85BFB10000        <1>  jne error
   438                              <1> 
   438                              <1>  %if r16 <> sp
   438 000023D0 81FC00000200        <1>  cmp esp, 0x20000
   438 000023D6 0F85B3B10000        <1>  jne error
   438                              <1>  %endif
   439                                  	testPushPopR dx,16
   439                              <1>  %if %1 = bp
   439                              <1>  %define sptr eax
   439                              <1>  %else
   439                              <1>  %define sptr ebp
   439                              <1>  %endif
   439                              <1> 
   439                              <1>  %if %2 = 16
   439                              <1>  %define push16esp 0x2fffe
   439                              <1>  %define push32esp 0x2fffc
   439                              <1>  %else
   439                              <1>  %define push16esp 0x1fffe
   439                              <1>  %define push32esp 0x1fffc
   439                              <1>  %endif
   439                              <1> 
   439                              <1>  %define r16 %1
   439                              <1>  %define r32 e%1
   439                              <1> 
   439 000023DC BC00000200          <1>  mov esp, 0x20000
   439 000023E1 BA00000200          <1>  mov r32, 0x20000
   439 000023E6 8D6C24FC            <1>  lea sptr, [esp-4]
   439                              <1>  %if %2 = 16
   439 000023EA 81E5FFFF0000        <1>  and sptr, 0xffff
   439                              <1>  %endif
   439                              <1> 
   439 000023F0 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   439 000023F7 52                  <1>  push r32
   439 000023F8 817D0000000200      <1>  cmp [sptr], dword 0x20000
   439 000023FF 0F858AB10000        <1>  jne error
   439 00002405 81FCFCFF0200        <1>  cmp esp, push32esp
   439 0000240B 0F857EB10000        <1>  jne error
   439                              <1> 
   439 00002411 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   439 00002418 5A                  <1>  pop r32
   439 00002419 81FAEFBEADDE        <1>  cmp r32, dword 0xdeadbeef
   439 0000241F 0F856AB10000        <1>  jne error
   439                              <1> 
   439                              <1>  %if r16 <> sp
   439 00002425 81FC00000200        <1>  cmp esp, 0x20000
   439 0000242B 0F855EB10000        <1>  jne error
   439                              <1>  %endif
   439                              <1> 
   439 00002431 BA00000200          <1>  mov r32, 0x20000
   439                              <1> 
   439 00002436 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   439 0000243D 6652                <1>  push r16
   439 0000243F 817D00EFBE0000      <1>  cmp [sptr], dword 0x0000beef
   439 00002446 0F8543B10000        <1>  jne error
   439 0000244C 81FCFEFF0200        <1>  cmp esp, push16esp
   439 00002452 0F8537B10000        <1>  jne error
   439                              <1> 
   439 00002458 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   439 0000245F 665A                <1>  pop r16
   439 00002461 6681FAADDE          <1>  cmp r16, 0xdead
   439 00002466 0F8523B10000        <1>  jne error
   439                              <1> 
   439                              <1>  %if r16 <> sp
   439 0000246C 81FC00000200        <1>  cmp esp, 0x20000
   439 00002472 0F8517B10000        <1>  jne error
   439                              <1>  %endif
   440                                  	testPushPopR sp,16
   440                              <1>  %if %1 = bp
   440                              <1>  %define sptr eax
   440                              <1>  %else
   440                              <1>  %define sptr ebp
   440                              <1>  %endif
   440                              <1> 
   440                              <1>  %if %2 = 16
   440                              <1>  %define push16esp 0x2fffe
   440                              <1>  %define push32esp 0x2fffc
   440                              <1>  %else
   440                              <1>  %define push16esp 0x1fffe
   440                              <1>  %define push32esp 0x1fffc
   440                              <1>  %endif
   440                              <1> 
   440                              <1>  %define r16 %1
   440                              <1>  %define r32 e%1
   440                              <1> 
   440 00002478 BC00000200          <1>  mov esp, 0x20000
   440 0000247D BC00000200          <1>  mov r32, 0x20000
   440 00002482 8D6C24FC            <1>  lea sptr, [esp-4]
   440                              <1>  %if %2 = 16
   440 00002486 81E5FFFF0000        <1>  and sptr, 0xffff
   440                              <1>  %endif
   440                              <1> 
   440 0000248C C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   440 00002493 54                  <1>  push r32
   440 00002494 817D0000000200      <1>  cmp [sptr], dword 0x20000
   440 0000249B 0F85EEB00000        <1>  jne error
   440 000024A1 81FCFCFF0200        <1>  cmp esp, push32esp
   440 000024A7 0F85E2B00000        <1>  jne error
   440                              <1> 
   440 000024AD C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   440 000024B4 5C                  <1>  pop r32
   440 000024B5 81FCEFBEADDE        <1>  cmp r32, dword 0xdeadbeef
   440 000024BB 0F85CEB00000        <1>  jne error
   440                              <1> 
   440                              <1>  %if r16 <> sp
   440                              <1>  cmp esp, 0x20000
   440                              <1>  jne error
   440                              <1>  %endif
   440                              <1> 
   440 000024C1 BC00000200          <1>  mov r32, 0x20000
   440                              <1> 
   440 000024C6 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   440 000024CD 6654                <1>  push r16
   440 000024CF 817D00EFBE0000      <1>  cmp [sptr], dword 0x0000beef
   440 000024D6 0F85B3B00000        <1>  jne error
   440 000024DC 81FCFEFF0200        <1>  cmp esp, push16esp
   440 000024E2 0F85A7B00000        <1>  jne error
   440                              <1> 
   440 000024E8 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   440 000024EF 665C                <1>  pop r16
   440 000024F1 6681FCADDE          <1>  cmp r16, 0xdead
   440 000024F6 0F8593B00000        <1>  jne error
   440                              <1> 
   440                              <1>  %if r16 <> sp
   440                              <1>  cmp esp, 0x20000
   440                              <1>  jne error
   440                              <1>  %endif
   441                                  	testPushPopR bp,16
   441                              <1>  %if %1 = bp
   441                              <1>  %define sptr eax
   441                              <1>  %else
   441                              <1>  %define sptr ebp
   441                              <1>  %endif
   441                              <1> 
   441                              <1>  %if %2 = 16
   441                              <1>  %define push16esp 0x2fffe
   441                              <1>  %define push32esp 0x2fffc
   441                              <1>  %else
   441                              <1>  %define push16esp 0x1fffe
   441                              <1>  %define push32esp 0x1fffc
   441                              <1>  %endif
   441                              <1> 
   441                              <1>  %define r16 %1
   441                              <1>  %define r32 e%1
   441                              <1> 
   441 000024FC BC00000200          <1>  mov esp, 0x20000
   441 00002501 BD00000200          <1>  mov r32, 0x20000
   441 00002506 8D4424FC            <1>  lea sptr, [esp-4]
   441                              <1>  %if %2 = 16
   441 0000250A 25FFFF0000          <1>  and sptr, 0xffff
   441                              <1>  %endif
   441                              <1> 
   441 0000250F C700EFBEADDE        <1>  mov [sptr], dword 0xdeadbeef
   441 00002515 55                  <1>  push r32
   441 00002516 813800000200        <1>  cmp [sptr], dword 0x20000
   441 0000251C 0F856DB00000        <1>  jne error
   441 00002522 81FCFCFF0200        <1>  cmp esp, push32esp
   441 00002528 0F8561B00000        <1>  jne error
   441                              <1> 
   441 0000252E C700EFBEADDE        <1>  mov [sptr], dword 0xdeadbeef
   441 00002534 5D                  <1>  pop r32
   441 00002535 81FDEFBEADDE        <1>  cmp r32, dword 0xdeadbeef
   441 0000253B 0F854EB00000        <1>  jne error
   441                              <1> 
   441                              <1>  %if r16 <> sp
   441 00002541 81FC00000200        <1>  cmp esp, 0x20000
   441 00002547 0F8542B00000        <1>  jne error
   441                              <1>  %endif
   441                              <1> 
   441 0000254D BD00000200          <1>  mov r32, 0x20000
   441                              <1> 
   441 00002552 C700EFBEADDE        <1>  mov [sptr], dword 0xdeadbeef
   441 00002558 6655                <1>  push r16
   441 0000255A 8138EFBE0000        <1>  cmp [sptr], dword 0x0000beef
   441 00002560 0F8529B00000        <1>  jne error
   441 00002566 81FCFEFF0200        <1>  cmp esp, push16esp
   441 0000256C 0F851DB00000        <1>  jne error
   441                              <1> 
   441 00002572 C700EFBEADDE        <1>  mov [sptr], dword 0xdeadbeef
   441 00002578 665D                <1>  pop r16
   441 0000257A 6681FDADDE          <1>  cmp r16, 0xdead
   441 0000257F 0F850AB00000        <1>  jne error
   441                              <1> 
   441                              <1>  %if r16 <> sp
   441 00002585 81FC00000200        <1>  cmp esp, 0x20000
   441 0000258B 0F85FEAF0000        <1>  jne error
   441                              <1>  %endif
   442                                  	testPushPopR si,16
   442                              <1>  %if %1 = bp
   442                              <1>  %define sptr eax
   442                              <1>  %else
   442                              <1>  %define sptr ebp
   442                              <1>  %endif
   442                              <1> 
   442                              <1>  %if %2 = 16
   442                              <1>  %define push16esp 0x2fffe
   442                              <1>  %define push32esp 0x2fffc
   442                              <1>  %else
   442                              <1>  %define push16esp 0x1fffe
   442                              <1>  %define push32esp 0x1fffc
   442                              <1>  %endif
   442                              <1> 
   442                              <1>  %define r16 %1
   442                              <1>  %define r32 e%1
   442                              <1> 
   442 00002591 BC00000200          <1>  mov esp, 0x20000
   442 00002596 BE00000200          <1>  mov r32, 0x20000
   442 0000259B 8D6C24FC            <1>  lea sptr, [esp-4]
   442                              <1>  %if %2 = 16
   442 0000259F 81E5FFFF0000        <1>  and sptr, 0xffff
   442                              <1>  %endif
   442                              <1> 
   442 000025A5 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   442 000025AC 56                  <1>  push r32
   442 000025AD 817D0000000200      <1>  cmp [sptr], dword 0x20000
   442 000025B4 0F85D5AF0000        <1>  jne error
   442 000025BA 81FCFCFF0200        <1>  cmp esp, push32esp
   442 000025C0 0F85C9AF0000        <1>  jne error
   442                              <1> 
   442 000025C6 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   442 000025CD 5E                  <1>  pop r32
   442 000025CE 81FEEFBEADDE        <1>  cmp r32, dword 0xdeadbeef
   442 000025D4 0F85B5AF0000        <1>  jne error
   442                              <1> 
   442                              <1>  %if r16 <> sp
   442 000025DA 81FC00000200        <1>  cmp esp, 0x20000
   442 000025E0 0F85A9AF0000        <1>  jne error
   442                              <1>  %endif
   442                              <1> 
   442 000025E6 BE00000200          <1>  mov r32, 0x20000
   442                              <1> 
   442 000025EB C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   442 000025F2 6656                <1>  push r16
   442 000025F4 817D00EFBE0000      <1>  cmp [sptr], dword 0x0000beef
   442 000025FB 0F858EAF0000        <1>  jne error
   442 00002601 81FCFEFF0200        <1>  cmp esp, push16esp
   442 00002607 0F8582AF0000        <1>  jne error
   442                              <1> 
   442 0000260D C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   442 00002614 665E                <1>  pop r16
   442 00002616 6681FEADDE          <1>  cmp r16, 0xdead
   442 0000261B 0F856EAF0000        <1>  jne error
   442                              <1> 
   442                              <1>  %if r16 <> sp
   442 00002621 81FC00000200        <1>  cmp esp, 0x20000
   442 00002627 0F8562AF0000        <1>  jne error
   442                              <1>  %endif
   443                                  	testPushPopR di,16
   443                              <1>  %if %1 = bp
   443                              <1>  %define sptr eax
   443                              <1>  %else
   443                              <1>  %define sptr ebp
   443                              <1>  %endif
   443                              <1> 
   443                              <1>  %if %2 = 16
   443                              <1>  %define push16esp 0x2fffe
   443                              <1>  %define push32esp 0x2fffc
   443                              <1>  %else
   443                              <1>  %define push16esp 0x1fffe
   443                              <1>  %define push32esp 0x1fffc
   443                              <1>  %endif
   443                              <1> 
   443                              <1>  %define r16 %1
   443                              <1>  %define r32 e%1
   443                              <1> 
   443 0000262D BC00000200          <1>  mov esp, 0x20000
   443 00002632 BF00000200          <1>  mov r32, 0x20000
   443 00002637 8D6C24FC            <1>  lea sptr, [esp-4]
   443                              <1>  %if %2 = 16
   443 0000263B 81E5FFFF0000        <1>  and sptr, 0xffff
   443                              <1>  %endif
   443                              <1> 
   443 00002641 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   443 00002648 57                  <1>  push r32
   443 00002649 817D0000000200      <1>  cmp [sptr], dword 0x20000
   443 00002650 0F8539AF0000        <1>  jne error
   443 00002656 81FCFCFF0200        <1>  cmp esp, push32esp
   443 0000265C 0F852DAF0000        <1>  jne error
   443                              <1> 
   443 00002662 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   443 00002669 5F                  <1>  pop r32
   443 0000266A 81FFEFBEADDE        <1>  cmp r32, dword 0xdeadbeef
   443 00002670 0F8519AF0000        <1>  jne error
   443                              <1> 
   443                              <1>  %if r16 <> sp
   443 00002676 81FC00000200        <1>  cmp esp, 0x20000
   443 0000267C 0F850DAF0000        <1>  jne error
   443                              <1>  %endif
   443                              <1> 
   443 00002682 BF00000200          <1>  mov r32, 0x20000
   443                              <1> 
   443 00002687 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   443 0000268E 6657                <1>  push r16
   443 00002690 817D00EFBE0000      <1>  cmp [sptr], dword 0x0000beef
   443 00002697 0F85F2AE0000        <1>  jne error
   443 0000269D 81FCFEFF0200        <1>  cmp esp, push16esp
   443 000026A3 0F85E6AE0000        <1>  jne error
   443                              <1> 
   443 000026A9 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   443 000026B0 665F                <1>  pop r16
   443 000026B2 6681FFADDE          <1>  cmp r16, 0xdead
   443 000026B7 0F85D2AE0000        <1>  jne error
   443                              <1> 
   443                              <1>  %if r16 <> sp
   443 000026BD 81FC00000200        <1>  cmp esp, 0x20000
   443 000026C3 0F85C6AE0000        <1>  jne error
   443                              <1>  %endif
   444                                  
   445                                  	testPushPopAll16 16
   445                              <1> 
   445                              <1>  %if %1 = 16
   445                              <1>  %define push16esp 0x2fff0
   445                              <1>  %else
   445                              <1>  %define push16esp 0x1fff0
   445                              <1>  %endif
   445                              <1> 
   445 000026C9 BC00000200          <1>  mov esp, 0x20000
   445 000026CE 8D6C24FE            <1>  lea ebp, [esp-2]
   445                              <1>  %if %1 = 16
   445 000026D2 81E5FFFF0000        <1>  and ebp, 0xffff
   445                              <1>  %endif
   445                              <1> 
   445                              <1> 
   445 000026D8 B908000000          <1>  mov ecx, 8
   445 000026DD 89EF                <1>  mov edi, ebp
   445                              <1> %%initstack:
   445 000026DF 66C707EFBE          <1>  mov [edi], word 0xbeef
   445 000026E4 83EF02              <1>  sub edi, 2
   445 000026E7 E2F6                <1>  loop %%initstack
   445                              <1> 
   445                              <1> 
   445 000026E9 B811111111          <1>  mov eax, 0x11111111
   445 000026EE B922222222          <1>  mov ecx, 0x22222222
   445 000026F3 BA33333333          <1>  mov edx, 0x33333333
   445 000026F8 BB44444444          <1>  mov ebx, 0x44444444
   445                              <1> 
   445                              <1> 
   445 000026FD BE77777777          <1>  mov esi, 0x77777777
   445 00002702 BF88888888          <1>  mov edi, 0x88888888
   445                              <1> 
   445 00002707 6660                <1>  o16 pusha
   445                              <1> 
   445                              <1> 
   445                              <1> 
   445 00002709 66394500            <1>  cmp [ebp], ax
   445 0000270D 0F857CAE0000        <1>  jne error
   445 00002713 66394DFE            <1>  cmp [ebp-2], cx
   445 00002717 0F8572AE0000        <1>  jne error
   445 0000271D 663955FC            <1>  cmp [ebp-4], dx
   445 00002721 0F8568AE0000        <1>  jne error
   445 00002727 66395DFA            <1>  cmp [ebp-6], bx
   445 0000272B 0F855EAE0000        <1>  jne error
   445 00002731 66837DF800          <1>  cmp [ebp-8], word 0x0000
   445 00002736 0F8553AE0000        <1>  jne error
   445 0000273C 66396DF6            <1>  cmp [ebp-10], bp
   445 00002740 0F8549AE0000        <1>  jne error
   445 00002746 663975F4            <1>  cmp [ebp-12], si
   445 0000274A 0F853FAE0000        <1>  jne error
   445 00002750 66397DF2            <1>  cmp [ebp-14], di
   445 00002754 0F8535AE0000        <1>  jne error
   445                              <1> 
   445 0000275A 81FCF0FF0200        <1>  cmp esp, push16esp
   445 00002760 0F8529AE0000        <1>  jne error
   445                              <1> 
   445                              <1> 
   445 00002766 66C745F8EFBE        <1>  mov [ebp-8], word 0xbeef
   445                              <1> 
   445                              <1> 
   445 0000276C B8EFBEADDE          <1>  mov eax, 0xdeadbeef
   445 00002771 B9EFBEADDE          <1>  mov ecx, 0xdeadbeef
   445 00002776 BAEFBEADDE          <1>  mov edx, 0xdeadbeef
   445 0000277B BBEFBEADDE          <1>  mov ebx, 0xdeadbeef
   445                              <1> 
   445 00002780 BDEFBEADDE          <1>  mov ebp, 0xdeadbeef
   445 00002785 BEEFBEADDE          <1>  mov esi, 0xdeadbeef
   445 0000278A BFEFBEADDE          <1>  mov edi, 0xdeadbeef
   445                              <1> 
   445 0000278F 6661                <1>  o16 popa
   445                              <1> 
   445                              <1> 
   445                              <1> 
   445 00002791 3D1111ADDE          <1>  cmp eax, 0xdead1111
   445 00002796 0F85F3AD0000        <1>  jne error
   445 0000279C 81F92222ADDE        <1>  cmp ecx, 0xdead2222
   445 000027A2 0F85E7AD0000        <1>  jne error
   445 000027A8 81FA3333ADDE        <1>  cmp edx, 0xdead3333
   445 000027AE 0F85DBAD0000        <1>  jne error
   445 000027B4 81FB4444ADDE        <1>  cmp ebx, 0xdead4444
   445 000027BA 0F85CFAD0000        <1>  jne error
   445 000027C0 81FC00000200        <1>  cmp esp, 0x20000
   445 000027C6 0F85C3AD0000        <1>  jne error
   445 000027CC B80000ADDE          <1>  mov eax, 0xdead0000
   445 000027D1 6683E802            <1>  sub ax, 2
   445 000027D5 39C5                <1>  cmp ebp, eax
   445 000027D7 0F85B2AD0000        <1>  jne error
   445 000027DD 81FE7777ADDE        <1>  cmp esi, 0xdead7777
   445 000027E3 0F85A6AD0000        <1>  jne error
   445 000027E9 81FF8888ADDE        <1>  cmp edi, 0xdead8888
   445 000027EF 0F859AAD0000        <1>  jne error
   445                              <1> 
   446                                  	testPushPopAll32 16
   446                              <1> 
   446                              <1>  %if %1 = 16
   446                              <1>  %define push32esp 0x2ffe0
   446                              <1>  %else
   446                              <1>  %define push32esp 0x1ffe0
   446                              <1>  %endif
   446                              <1> 
   446 000027F5 BC00000200          <1>  mov esp, 0x20000
   446 000027FA 8D6C24FC            <1>  lea ebp, [esp-4]
   446                              <1>  %if %1 = 16
   446 000027FE 81E5FFFF0000        <1>  and ebp, 0xffff
   446                              <1>  %endif
   446                              <1> 
   446                              <1> 
   446 00002804 B908000000          <1>  mov ecx, 8
   446 00002809 89EF                <1>  mov edi, ebp
   446                              <1> %%initstack:
   446 0000280B C707EFBEADDE        <1>  mov [edi], dword 0xdeadbeef
   446 00002811 83EF04              <1>  sub edi, 4
   446 00002814 E2F5                <1>  loop %%initstack
   446                              <1> 
   446                              <1> 
   446 00002816 B811111111          <1>  mov eax, 0x11111111
   446 0000281B B922222222          <1>  mov ecx, 0x22222222
   446 00002820 BA33333333          <1>  mov edx, 0x33333333
   446 00002825 BB44444444          <1>  mov ebx, 0x44444444
   446                              <1> 
   446                              <1> 
   446 0000282A BE77777777          <1>  mov esi, 0x77777777
   446 0000282F BF88888888          <1>  mov edi, 0x88888888
   446                              <1> 
   446 00002834 60                  <1>  o32 pusha
   446                              <1> 
   446                              <1> 
   446                              <1> 
   446 00002835 394500              <1>  cmp [ebp], eax
   446 00002838 0F8551AD0000        <1>  jne error
   446 0000283E 394DFC              <1>  cmp [ebp-4], ecx
   446 00002841 0F8548AD0000        <1>  jne error
   446 00002847 3955F8              <1>  cmp [ebp-8], edx
   446 0000284A 0F853FAD0000        <1>  jne error
   446 00002850 395DF4              <1>  cmp [ebp-12], ebx
   446 00002853 0F8536AD0000        <1>  jne error
   446 00002859 817DF000000200      <1>  cmp [ebp-16], dword 0x20000
   446 00002860 0F8529AD0000        <1>  jne error
   446 00002866 396DEC              <1>  cmp [ebp-20], ebp
   446 00002869 0F8520AD0000        <1>  jne error
   446 0000286F 3975E8              <1>  cmp [ebp-24], esi
   446 00002872 0F8517AD0000        <1>  jne error
   446 00002878 397DE4              <1>  cmp [ebp-28], edi
   446 0000287B 0F850EAD0000        <1>  jne error
   446                              <1> 
   446 00002881 81FCE0FF0200        <1>  cmp esp, push32esp
   446 00002887 0F8502AD0000        <1>  jne error
   446                              <1> 
   446                              <1> 
   446 0000288D C745F0EFBEADDE      <1>  mov [ebp-16], dword 0xdeadbeef
   446                              <1> 
   446                              <1> 
   446 00002894 B8EFBEADDE          <1>  mov eax, 0xdeadbeef
   446 00002899 B9EFBEADDE          <1>  mov ecx, 0xdeadbeef
   446 0000289E BAEFBEADDE          <1>  mov edx, 0xdeadbeef
   446 000028A3 BBEFBEADDE          <1>  mov ebx, 0xdeadbeef
   446                              <1> 
   446 000028A8 BDEFBEADDE          <1>  mov ebp, 0xdeadbeef
   446 000028AD BEEFBEADDE          <1>  mov esi, 0xdeadbeef
   446 000028B2 BFEFBEADDE          <1>  mov edi, 0xdeadbeef
   446                              <1> 
   446 000028B7 61                  <1>  o32 popa
   446                              <1> 
   446                              <1> 
   446                              <1> 
   446 000028B8 3D11111111          <1>  cmp eax, 0x11111111
   446 000028BD 0F85CCAC0000        <1>  jne error
   446 000028C3 81F922222222        <1>  cmp ecx, 0x22222222
   446 000028C9 0F85C0AC0000        <1>  jne error
   446 000028CF 81FA33333333        <1>  cmp edx, 0x33333333
   446 000028D5 0F85B4AC0000        <1>  jne error
   446 000028DB 81FB44444444        <1>  cmp ebx, 0x44444444
   446 000028E1 0F85A8AC0000        <1>  jne error
   446 000028E7 81FC00000200        <1>  cmp esp, 0x20000
   446 000028ED 0F859CAC0000        <1>  jne error
   446 000028F3 8D4424FC            <1>  lea eax, [esp-4]
   446                              <1>  %if %1 = 16
   446 000028F7 25FFFF0000          <1>  and eax, 0xffff
   446                              <1>  %endif
   446 000028FC 39C5                <1>  cmp ebp, eax
   446 000028FE 0F858BAC0000        <1>  jne error
   446 00002904 81FE77777777        <1>  cmp esi, 0x77777777
   446 0000290A 0F857FAC0000        <1>  jne error
   446 00002910 81FF88888888        <1>  cmp edi, 0x88888888
   446 00002916 0F8573AC0000        <1>  jne error
   446                              <1> 
   447                                  
   448                                  	;
   449                                  	; segment registers
   450                                  	;
   451                                  	testPushPopSR cs,16
   451                              <1>  %if %2 = 16
   451                              <1>  %define push16esp 0x2fffe
   451                              <1>  %define push32esp 0x2fffc
   451                              <1>  %else
   451                              <1>  %define push16esp 0x1fffe
   451                              <1>  %define push32esp 0x1fffc
   451                              <1>  %endif
   451                              <1> 
   451 0000291C 668CCA              <1>  mov dx, %1
   451 0000291F BC00000200          <1>  mov esp, 0x20000
   451 00002924 8D6C24FC            <1>  lea ebp, [esp-4]
   451                              <1>  %if %2 = 16
   451 00002928 81E5FFFF0000        <1>  and ebp, 0xffff
   451                              <1>  %endif
   451                              <1> 
   451 0000292E C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   451 00002935 0E                  <1>  o32 push %1
   451 00002936 66395500            <1>  cmp [ebp], dx
   451 0000293A 0F854FAC0000        <1>  jne error
   451                              <1>  %if TEST_UNDEF
   451                              <1> 
   451                              <1> 
   451                              <1> 
   451                              <1> 
   451                              <1> 
   451                              <1> 
   451                              <1> 
   451                              <1> 
   451                              <1> 
   451                              <1>  cmp [ebp+2], word 0xdead
   451                              <1>  jne error
   451                              <1>  %endif
   451 00002940 81FCFCFF0200        <1>  cmp esp, push32esp
   451 00002946 0F8543AC0000        <1>  jne error
   451                              <1> 
   451                              <1>  %if %1 <> cs
   451                              <1>  mov [ebp], dword DTEST_SEG_PROT
   451                              <1>  o32 pop %1
   451                              <1>  mov ax, %1
   451                              <1>  cmp ax, DTEST_SEG_PROT
   451                              <1>  jne error
   451                              <1>  cmp esp, 0x20000
   451                              <1>  jne error
   451                              <1>  mov %1, dx
   451                              <1>  %else
   451 0000294C BC00000200          <1>  mov esp, 0x20000
   451                              <1>  %endif
   451                              <1> 
   451 00002951 C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   451 00002958 660E                <1>  o16 push %1
   451 0000295A 66395502            <1>  cmp [ebp+2], dx
   451 0000295E 0F852BAC0000        <1>  jne error
   451 00002964 81FCFEFF0200        <1>  cmp esp, push16esp
   451 0000296A 0F851FAC0000        <1>  jne error
   451                              <1> 
   451                              <1>  %if %1 <> cs
   451                              <1>  mov [ebp+2], word DTEST_SEG_PROT
   451                              <1>  o16 pop %1
   451                              <1>  mov ax, %1
   451                              <1>  cmp ax, DTEST_SEG_PROT
   451                              <1>  jne error
   451                              <1>  cmp esp, 0x20000
   451                              <1>  jne error
   451                              <1>  mov %1, dx
   451                              <1>  %else
   451 00002970 BC00000200          <1>  mov esp, 0x20000
   451                              <1>  %endif
   451                              <1> 
   452                                  	testPushPopSR ds,16
   452                              <1>  %if %2 = 16
   452                              <1>  %define push16esp 0x2fffe
   452                              <1>  %define push32esp 0x2fffc
   452                              <1>  %else
   452                              <1>  %define push16esp 0x1fffe
   452                              <1>  %define push32esp 0x1fffc
   452                              <1>  %endif
   452                              <1> 
   452 00002975 668CDA              <1>  mov dx, %1
   452 00002978 BC00000200          <1>  mov esp, 0x20000
   452 0000297D 8D6C24FC            <1>  lea ebp, [esp-4]
   452                              <1>  %if %2 = 16
   452 00002981 81E5FFFF0000        <1>  and ebp, 0xffff
   452                              <1>  %endif
   452                              <1> 
   452 00002987 C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   452 0000298E 1E                  <1>  o32 push %1
   452 0000298F 66395500            <1>  cmp [ebp], dx
   452 00002993 0F85F6AB0000        <1>  jne error
   452                              <1>  %if TEST_UNDEF
   452                              <1> 
   452                              <1> 
   452                              <1> 
   452                              <1> 
   452                              <1> 
   452                              <1> 
   452                              <1> 
   452                              <1> 
   452                              <1> 
   452                              <1>  cmp [ebp+2], word 0xdead
   452                              <1>  jne error
   452                              <1>  %endif
   452 00002999 81FCFCFF0200        <1>  cmp esp, push32esp
   452 0000299F 0F85EAAB0000        <1>  jne error
   452                              <1> 
   452                              <1>  %if %1 <> cs
   452 000029A5 C7450044000000      <1>  mov [ebp], dword DTEST_SEG_PROT
   452 000029AC 1F                  <1>  o32 pop %1
   452 000029AD 668CD8              <1>  mov ax, %1
   452 000029B0 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   452 000029B4 0F85D5AB0000        <1>  jne error
   452 000029BA 81FC00000200        <1>  cmp esp, 0x20000
   452 000029C0 0F85C9AB0000        <1>  jne error
   452 000029C6 8EDA                <1>  mov %1, dx
   452                              <1>  %else
   452                              <1>  mov esp, 0x20000
   452                              <1>  %endif
   452                              <1> 
   452 000029C8 C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   452 000029CF 661E                <1>  o16 push %1
   452 000029D1 66395502            <1>  cmp [ebp+2], dx
   452 000029D5 0F85B4AB0000        <1>  jne error
   452 000029DB 81FCFEFF0200        <1>  cmp esp, push16esp
   452 000029E1 0F85A8AB0000        <1>  jne error
   452                              <1> 
   452                              <1>  %if %1 <> cs
   452 000029E7 66C745024400        <1>  mov [ebp+2], word DTEST_SEG_PROT
   452 000029ED 661F                <1>  o16 pop %1
   452 000029EF 668CD8              <1>  mov ax, %1
   452 000029F2 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   452 000029F6 0F8593AB0000        <1>  jne error
   452 000029FC 81FC00000200        <1>  cmp esp, 0x20000
   452 00002A02 0F8587AB0000        <1>  jne error
   452 00002A08 8EDA                <1>  mov %1, dx
   452                              <1>  %else
   452                              <1>  mov esp, 0x20000
   452                              <1>  %endif
   452                              <1> 
   453                                  	testPushPopSR ss,16
   453                              <1>  %if %2 = 16
   453                              <1>  %define push16esp 0x2fffe
   453                              <1>  %define push32esp 0x2fffc
   453                              <1>  %else
   453                              <1>  %define push16esp 0x1fffe
   453                              <1>  %define push32esp 0x1fffc
   453                              <1>  %endif
   453                              <1> 
   453 00002A0A 668CD2              <1>  mov dx, %1
   453 00002A0D BC00000200          <1>  mov esp, 0x20000
   453 00002A12 8D6C24FC            <1>  lea ebp, [esp-4]
   453                              <1>  %if %2 = 16
   453 00002A16 81E5FFFF0000        <1>  and ebp, 0xffff
   453                              <1>  %endif
   453                              <1> 
   453 00002A1C C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   453 00002A23 16                  <1>  o32 push %1
   453 00002A24 66395500            <1>  cmp [ebp], dx
   453 00002A28 0F8561AB0000        <1>  jne error
   453                              <1>  %if TEST_UNDEF
   453                              <1> 
   453                              <1> 
   453                              <1> 
   453                              <1> 
   453                              <1> 
   453                              <1> 
   453                              <1> 
   453                              <1> 
   453                              <1> 
   453                              <1>  cmp [ebp+2], word 0xdead
   453                              <1>  jne error
   453                              <1>  %endif
   453 00002A2E 81FCFCFF0200        <1>  cmp esp, push32esp
   453 00002A34 0F8555AB0000        <1>  jne error
   453                              <1> 
   453                              <1>  %if %1 <> cs
   453 00002A3A C7450044000000      <1>  mov [ebp], dword DTEST_SEG_PROT
   453 00002A41 17                  <1>  o32 pop %1
   453 00002A42 668CD0              <1>  mov ax, %1
   453 00002A45 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   453 00002A49 0F8540AB0000        <1>  jne error
   453 00002A4F 81FC00000200        <1>  cmp esp, 0x20000
   453 00002A55 0F8534AB0000        <1>  jne error
   453 00002A5B 8ED2                <1>  mov %1, dx
   453                              <1>  %else
   453                              <1>  mov esp, 0x20000
   453                              <1>  %endif
   453                              <1> 
   453 00002A5D C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   453 00002A64 6616                <1>  o16 push %1
   453 00002A66 66395502            <1>  cmp [ebp+2], dx
   453 00002A6A 0F851FAB0000        <1>  jne error
   453 00002A70 81FCFEFF0200        <1>  cmp esp, push16esp
   453 00002A76 0F8513AB0000        <1>  jne error
   453                              <1> 
   453                              <1>  %if %1 <> cs
   453 00002A7C 66C745024400        <1>  mov [ebp+2], word DTEST_SEG_PROT
   453 00002A82 6617                <1>  o16 pop %1
   453 00002A84 668CD0              <1>  mov ax, %1
   453 00002A87 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   453 00002A8B 0F85FEAA0000        <1>  jne error
   453 00002A91 81FC00000200        <1>  cmp esp, 0x20000
   453 00002A97 0F85F2AA0000        <1>  jne error
   453 00002A9D 8ED2                <1>  mov %1, dx
   453                              <1>  %else
   453                              <1>  mov esp, 0x20000
   453                              <1>  %endif
   453                              <1> 
   454                                  	testPushPopSR es,16
   454                              <1>  %if %2 = 16
   454                              <1>  %define push16esp 0x2fffe
   454                              <1>  %define push32esp 0x2fffc
   454                              <1>  %else
   454                              <1>  %define push16esp 0x1fffe
   454                              <1>  %define push32esp 0x1fffc
   454                              <1>  %endif
   454                              <1> 
   454 00002A9F 668CC2              <1>  mov dx, %1
   454 00002AA2 BC00000200          <1>  mov esp, 0x20000
   454 00002AA7 8D6C24FC            <1>  lea ebp, [esp-4]
   454                              <1>  %if %2 = 16
   454 00002AAB 81E5FFFF0000        <1>  and ebp, 0xffff
   454                              <1>  %endif
   454                              <1> 
   454 00002AB1 C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   454 00002AB8 06                  <1>  o32 push %1
   454 00002AB9 66395500            <1>  cmp [ebp], dx
   454 00002ABD 0F85CCAA0000        <1>  jne error
   454                              <1>  %if TEST_UNDEF
   454                              <1> 
   454                              <1> 
   454                              <1> 
   454                              <1> 
   454                              <1> 
   454                              <1> 
   454                              <1> 
   454                              <1> 
   454                              <1> 
   454                              <1>  cmp [ebp+2], word 0xdead
   454                              <1>  jne error
   454                              <1>  %endif
   454 00002AC3 81FCFCFF0200        <1>  cmp esp, push32esp
   454 00002AC9 0F85C0AA0000        <1>  jne error
   454                              <1> 
   454                              <1>  %if %1 <> cs
   454 00002ACF C7450044000000      <1>  mov [ebp], dword DTEST_SEG_PROT
   454 00002AD6 07                  <1>  o32 pop %1
   454 00002AD7 668CC0              <1>  mov ax, %1
   454 00002ADA 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   454 00002ADE 0F85ABAA0000        <1>  jne error
   454 00002AE4 81FC00000200        <1>  cmp esp, 0x20000
   454 00002AEA 0F859FAA0000        <1>  jne error
   454 00002AF0 8EC2                <1>  mov %1, dx
   454                              <1>  %else
   454                              <1>  mov esp, 0x20000
   454                              <1>  %endif
   454                              <1> 
   454 00002AF2 C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   454 00002AF9 6606                <1>  o16 push %1
   454 00002AFB 66395502            <1>  cmp [ebp+2], dx
   454 00002AFF 0F858AAA0000        <1>  jne error
   454 00002B05 81FCFEFF0200        <1>  cmp esp, push16esp
   454 00002B0B 0F857EAA0000        <1>  jne error
   454                              <1> 
   454                              <1>  %if %1 <> cs
   454 00002B11 66C745024400        <1>  mov [ebp+2], word DTEST_SEG_PROT
   454 00002B17 6607                <1>  o16 pop %1
   454 00002B19 668CC0              <1>  mov ax, %1
   454 00002B1C 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   454 00002B20 0F8569AA0000        <1>  jne error
   454 00002B26 81FC00000200        <1>  cmp esp, 0x20000
   454 00002B2C 0F855DAA0000        <1>  jne error
   454 00002B32 8EC2                <1>  mov %1, dx
   454                              <1>  %else
   454                              <1>  mov esp, 0x20000
   454                              <1>  %endif
   454                              <1> 
   455                                  	testPushPopSR fs,16
   455                              <1>  %if %2 = 16
   455                              <1>  %define push16esp 0x2fffe
   455                              <1>  %define push32esp 0x2fffc
   455                              <1>  %else
   455                              <1>  %define push16esp 0x1fffe
   455                              <1>  %define push32esp 0x1fffc
   455                              <1>  %endif
   455                              <1> 
   455 00002B34 668CE2              <1>  mov dx, %1
   455 00002B37 BC00000200          <1>  mov esp, 0x20000
   455 00002B3C 8D6C24FC            <1>  lea ebp, [esp-4]
   455                              <1>  %if %2 = 16
   455 00002B40 81E5FFFF0000        <1>  and ebp, 0xffff
   455                              <1>  %endif
   455                              <1> 
   455 00002B46 C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   455 00002B4D 0FA0                <1>  o32 push %1
   455 00002B4F 66395500            <1>  cmp [ebp], dx
   455 00002B53 0F8536AA0000        <1>  jne error
   455                              <1>  %if TEST_UNDEF
   455                              <1> 
   455                              <1> 
   455                              <1> 
   455                              <1> 
   455                              <1> 
   455                              <1> 
   455                              <1> 
   455                              <1> 
   455                              <1> 
   455                              <1>  cmp [ebp+2], word 0xdead
   455                              <1>  jne error
   455                              <1>  %endif
   455 00002B59 81FCFCFF0200        <1>  cmp esp, push32esp
   455 00002B5F 0F852AAA0000        <1>  jne error
   455                              <1> 
   455                              <1>  %if %1 <> cs
   455 00002B65 C7450044000000      <1>  mov [ebp], dword DTEST_SEG_PROT
   455 00002B6C 0FA1                <1>  o32 pop %1
   455 00002B6E 668CE0              <1>  mov ax, %1
   455 00002B71 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   455 00002B75 0F8514AA0000        <1>  jne error
   455 00002B7B 81FC00000200        <1>  cmp esp, 0x20000
   455 00002B81 0F8508AA0000        <1>  jne error
   455 00002B87 8EE2                <1>  mov %1, dx
   455                              <1>  %else
   455                              <1>  mov esp, 0x20000
   455                              <1>  %endif
   455                              <1> 
   455 00002B89 C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   455 00002B90 660FA0              <1>  o16 push %1
   455 00002B93 66395502            <1>  cmp [ebp+2], dx
   455 00002B97 0F85F2A90000        <1>  jne error
   455 00002B9D 81FCFEFF0200        <1>  cmp esp, push16esp
   455 00002BA3 0F85E6A90000        <1>  jne error
   455                              <1> 
   455                              <1>  %if %1 <> cs
   455 00002BA9 66C745024400        <1>  mov [ebp+2], word DTEST_SEG_PROT
   455 00002BAF 660FA1              <1>  o16 pop %1
   455 00002BB2 668CE0              <1>  mov ax, %1
   455 00002BB5 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   455 00002BB9 0F85D0A90000        <1>  jne error
   455 00002BBF 81FC00000200        <1>  cmp esp, 0x20000
   455 00002BC5 0F85C4A90000        <1>  jne error
   455 00002BCB 8EE2                <1>  mov %1, dx
   455                              <1>  %else
   455                              <1>  mov esp, 0x20000
   455                              <1>  %endif
   455                              <1> 
   456                                  	testPushPopSR gs,16
   456                              <1>  %if %2 = 16
   456                              <1>  %define push16esp 0x2fffe
   456                              <1>  %define push32esp 0x2fffc
   456                              <1>  %else
   456                              <1>  %define push16esp 0x1fffe
   456                              <1>  %define push32esp 0x1fffc
   456                              <1>  %endif
   456                              <1> 
   456 00002BCD 668CEA              <1>  mov dx, %1
   456 00002BD0 BC00000200          <1>  mov esp, 0x20000
   456 00002BD5 8D6C24FC            <1>  lea ebp, [esp-4]
   456                              <1>  %if %2 = 16
   456 00002BD9 81E5FFFF0000        <1>  and ebp, 0xffff
   456                              <1>  %endif
   456                              <1> 
   456 00002BDF C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   456 00002BE6 0FA8                <1>  o32 push %1
   456 00002BE8 66395500            <1>  cmp [ebp], dx
   456 00002BEC 0F859DA90000        <1>  jne error
   456                              <1>  %if TEST_UNDEF
   456                              <1> 
   456                              <1> 
   456                              <1> 
   456                              <1> 
   456                              <1> 
   456                              <1> 
   456                              <1> 
   456                              <1> 
   456                              <1> 
   456                              <1>  cmp [ebp+2], word 0xdead
   456                              <1>  jne error
   456                              <1>  %endif
   456 00002BF2 81FCFCFF0200        <1>  cmp esp, push32esp
   456 00002BF8 0F8591A90000        <1>  jne error
   456                              <1> 
   456                              <1>  %if %1 <> cs
   456 00002BFE C7450044000000      <1>  mov [ebp], dword DTEST_SEG_PROT
   456 00002C05 0FA9                <1>  o32 pop %1
   456 00002C07 668CE8              <1>  mov ax, %1
   456 00002C0A 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   456 00002C0E 0F857BA90000        <1>  jne error
   456 00002C14 81FC00000200        <1>  cmp esp, 0x20000
   456 00002C1A 0F856FA90000        <1>  jne error
   456 00002C20 8EEA                <1>  mov %1, dx
   456                              <1>  %else
   456                              <1>  mov esp, 0x20000
   456                              <1>  %endif
   456                              <1> 
   456 00002C22 C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   456 00002C29 660FA8              <1>  o16 push %1
   456 00002C2C 66395502            <1>  cmp [ebp+2], dx
   456 00002C30 0F8559A90000        <1>  jne error
   456 00002C36 81FCFEFF0200        <1>  cmp esp, push16esp
   456 00002C3C 0F854DA90000        <1>  jne error
   456                              <1> 
   456                              <1>  %if %1 <> cs
   456 00002C42 66C745024400        <1>  mov [ebp+2], word DTEST_SEG_PROT
   456 00002C48 660FA9              <1>  o16 pop %1
   456 00002C4B 668CE8              <1>  mov ax, %1
   456 00002C4E 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   456 00002C52 0F8537A90000        <1>  jne error
   456 00002C58 81FC00000200        <1>  cmp esp, 0x20000
   456 00002C5E 0F852BA90000        <1>  jne error
   456 00002C64 8EEA                <1>  mov %1, dx
   456                              <1>  %else
   456                              <1>  mov esp, 0x20000
   456                              <1>  %endif
   456                              <1> 
   457                                  
   458                                  	;
   459                                  	; memory
   460                                  	;
   461                                  	testPushPopM 16
   461                              <1> 
   461                              <1>  %if %1 = 16
   461                              <1>  %define push16esp 0x2fffe
   461                              <1>  %define push32esp 0x2fffc
   461                              <1>  %else
   461                              <1>  %define push16esp 0x1fffe
   461                              <1>  %define push32esp 0x1fffc
   461                              <1>  %endif
   461                              <1> 
   461 00002C66 BC00000200          <1>  mov esp, 0x20000
   461 00002C6B 8D6C24FC            <1>  lea ebp, [esp-4]
   461                              <1>  %if %1 = 16
   461 00002C6F 81E5FFFF0000        <1>  and ebp, 0xffff
   461                              <1>  %endif
   461                              <1> 
   461 00002C75 8D7424F8            <1>  lea esi, [esp-8]
   461 00002C79 C70644332211        <1>  mov [esi], dword 0x11223344
   461                              <1> 
   461 00002C7F C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   461 00002C86 FF36                <1>  push dword [esi]
   461 00002C88 817D0044332211      <1>  cmp [ebp], dword 0x11223344
   461 00002C8F 0F85FAA80000        <1>  jne error
   461 00002C95 81FCFCFF0200        <1>  cmp esp, push32esp
   461 00002C9B 0F85EEA80000        <1>  jne error
   461                              <1> 
   461 00002CA1 C706EFBEADDE        <1>  mov [esi], dword 0xdeadbeef
   461 00002CA7 8F06                <1>  pop dword [esi]
   461 00002CA9 813E44332211        <1>  cmp [esi], dword 0x11223344
   461 00002CAF 0F85DAA80000        <1>  jne error
   461 00002CB5 81FC00000200        <1>  cmp esp, 0x20000
   461 00002CBB 0F85CEA80000        <1>  jne error
   461                              <1> 
   461 00002CC1 C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   461 00002CC8 66FF36              <1>  push word [esi]
   461 00002CCB 817D00EFBE4433      <1>  cmp [ebp], dword 0x3344beef
   461 00002CD2 0F85B7A80000        <1>  jne error
   461 00002CD8 81FCFEFF0200        <1>  cmp esp, push16esp
   461 00002CDE 0F85ABA80000        <1>  jne error
   461                              <1> 
   461 00002CE4 C706EFBEADDE        <1>  mov [esi], dword 0xdeadbeef
   461 00002CEA 668F06              <1>  pop word [esi]
   461 00002CED 813E4433ADDE        <1>  cmp [esi], dword 0xdead3344
   461 00002CF3 0F8596A80000        <1>  jne error
   461 00002CF9 81FC00000200        <1>  cmp esp, 0x20000
   461 00002CFF 0F858AA80000        <1>  jne error
   462                                  	testPushImm 16
   462                              <1> 
   462 00002D05 BC00000200          <1>  mov esp, 0x20000
   462 00002D0A 8D6C24FC            <1>  lea ebp, [esp-4]
   462                              <1>  %if %1 = 16
   462 00002D0E 81E5FFFF0000        <1>  and ebp, 0xffff
   462                              <1>  %endif
   462                              <1> 
   462 00002D14 C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   462                              <1> 
   462 00002D1B 6844332211          <1>  push dword 0x11223344
   462                              <1> 
   462 00002D20 817D0044332211      <1>  cmp [ebp], dword 0x11223344
   462 00002D27 0F8562A80000        <1>  jne error
   462                              <1>  %if %1 = 16
   462 00002D2D 81FCFCFF0200        <1>  cmp esp, 0x2fffc
   462                              <1>  %else
   462                              <1>  cmp esp, 0x1fffc
   462                              <1>  %endif
   462 00002D33 0F8556A80000        <1>  jne error
   462                              <1> 
   462 00002D39 BC00000200          <1>  mov esp, 0x20000
   462 00002D3E C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   462                              <1> 
   462 00002D45 66682211            <1>  push word 0x1122
   462                              <1> 
   462 00002D49 817D00EFBE2211      <1>  cmp [ebp], dword 0x1122beef
   462 00002D50 0F8539A80000        <1>  jne error
   462                              <1>  %if %1 = 16
   462 00002D56 81FCFEFF0200        <1>  cmp esp, 0x2fffe
   462                              <1>  %else
   462                              <1>  cmp esp, 0x1fffe
   462                              <1>  %endif
   462 00002D5C 0F852DA80000        <1>  jne error
   462                              <1> 
   462                              <1>  %if %1 = 16
   462                              <1>  %define push16esp 0x2fffe
   462                              <1>  %define push32esp 0x2fffc
   462                              <1>  %else
   462                              <1>  %define push16esp 0x1fffe
   462                              <1>  %define push32esp 0x1fffc
   462                              <1>  %endif
   462                              <1>  testBytePush o16, 0x11, 0x0011beef, push16esp
   462 00002D62 BC00000200          <2>  mov esp, 0x20000
   462 00002D67 C74500EFBEADDE      <2>  mov [ebp], dword 0xdeadbeef
   462 00002D6E 666A11              <2>  %1 push byte %2
   462 00002D71 817D00EFBE1100      <2>  cmp [ebp], dword %3
   462 00002D78 0F8511A80000        <2>  jne error
   462 00002D7E 81FCFEFF0200        <2>  cmp esp, %4
   462 00002D84 0F8505A80000        <2>  jne error
   462                              <1>  testBytePush o32, 0x11, 0x00000011, push32esp
   462 00002D8A BC00000200          <2>  mov esp, 0x20000
   462 00002D8F C74500EFBEADDE      <2>  mov [ebp], dword 0xdeadbeef
   462 00002D96 6A11                <2>  %1 push byte %2
   462 00002D98 837D0011            <2>  cmp [ebp], dword %3
   462 00002D9C 0F85EDA70000        <2>  jne error
   462 00002DA2 81FCFCFF0200        <2>  cmp esp, %4
   462 00002DA8 0F85E1A70000        <2>  jne error
   462                              <1>  testBytePush o16, 0x81, 0xff81beef, push16esp
   462 00002DAE BC00000200          <2>  mov esp, 0x20000
   462 00002DB3 C74500EFBEADDE      <2>  mov [ebp], dword 0xdeadbeef
   462 00002DBA 666A81              <2>  %1 push byte %2
   462          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   462 00002DBD 817D00EFBE81FF      <2>  cmp [ebp], dword %3
   462 00002DC4 0F85C5A70000        <2>  jne error
   462 00002DCA 81FCFEFF0200        <2>  cmp esp, %4
   462 00002DD0 0F85B9A70000        <2>  jne error
   462                              <1>  testBytePush o32, 0x81, 0xffffff81, push32esp
   462 00002DD6 BC00000200          <2>  mov esp, 0x20000
   462 00002DDB C74500EFBEADDE      <2>  mov [ebp], dword 0xdeadbeef
   462 00002DE2 6A81                <2>  %1 push byte %2
   462          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   462 00002DE4 837D0081            <2>  cmp [ebp], dword %3
   462 00002DE8 0F85A1A70000        <2>  jne error
   462 00002DEE 81FCFCFF0200        <2>  cmp esp, %4
   462 00002DF4 0F8595A70000        <2>  jne error
   462                              <1> 
   463                                  
   464                                  	;
   465                                  	; flags
   466                                  	;
   467                                  	testPushPopF 16
   467                              <1>  %if %1 = 16
   467                              <1>  %define push16esp 0x2fffe
   467                              <1>  %define push32esp 0x2fffc
   467                              <1>  %else
   467                              <1>  %define push16esp 0x1fffe
   467                              <1>  %define push32esp 0x1fffc
   467                              <1>  %endif
   467                              <1> 
   467 00002DFA BC00000200          <1>  mov esp, 0x20000
   467 00002DFF 8D6C24FC            <1>  lea ebp, [esp-4]
   467                              <1>  %if %1 = 16
   467 00002E03 81E5FFFF0000        <1>  and ebp, 0xffff
   467                              <1>  %endif
   467                              <1> 
   467                              <1>  testPushF 16
   467 00002E09 6A00                <2>  push dword 0
   467 00002E0B 9D                  <2>  popfd
   467 00002E0C 0F807DA70000        <2>  jo error
   467 00002E12 0F8277A70000        <2>  jc error
   467 00002E18 0F8471A70000        <2>  jz error
   467 00002E1E 0F886BA70000        <2>  js error
   467 00002E24 0F8A65A70000        <2>  jpe error
   467                              <2> 
   467 00002E2A BC00000200          <2>  mov esp, 0x20000
   467 00002E2F C74500EFBEADDE      <2>  mov [ebp], dword 0xdeadbeef
   467 00002E36 F9                  <2>  stc
   467 00002E37 FD                  <2>  std
   467 00002E38 FB                  <2>  sti
   467 00002E39 669C                <2>  o%1 pushf
   467                              <2>  %if %1 = 16
   467 00002E3B 817D00EFBE0306      <2>  cmp [ebp], dword 0x0603beef
   467                              <2>  %else
   467                              <2>  cmp [ebp], dword 0x00000603
   467                              <2>  %endif
   467 00002E42 0F8547A70000        <2>  jne error
   467 00002E48 81FCFEFF0200        <2>  cmp esp, push%1esp
   467 00002E4E 0F853BA70000        <2>  jne error
   467                              <1>  testPushF 32
   467 00002E54 6A00                <2>  push dword 0
   467 00002E56 9D                  <2>  popfd
   467 00002E57 0F8032A70000        <2>  jo error
   467 00002E5D 0F822CA70000        <2>  jc error
   467 00002E63 0F8426A70000        <2>  jz error
   467 00002E69 0F8820A70000        <2>  js error
   467 00002E6F 0F8A1AA70000        <2>  jpe error
   467                              <2> 
   467 00002E75 BC00000200          <2>  mov esp, 0x20000
   467 00002E7A C74500EFBEADDE      <2>  mov [ebp], dword 0xdeadbeef
   467 00002E81 F9                  <2>  stc
   467 00002E82 FD                  <2>  std
   467 00002E83 FB                  <2>  sti
   467 00002E84 9C                  <2>  o%1 pushf
   467                              <2>  %if %1 = 16
   467                              <2>  cmp [ebp], dword 0x0603beef
   467                              <2>  %else
   467 00002E85 817D0003060000      <2>  cmp [ebp], dword 0x00000603
   467                              <2>  %endif
   467 00002E8C 0F85FDA60000        <2>  jne error
   467 00002E92 81FCFCFF0200        <2>  cmp esp, push%1esp
   467 00002E98 0F85F1A60000        <2>  jne error
   467                              <1>  testPopF 16
   467 00002E9E 6A00                <2>  push dword 0
   467 00002EA0 9D                  <2>  popfd
   467                              <2>  %if %1 = 16
   467 00002EA1 66C74502D708        <2>  mov [ebp+2], word 0x08D7
   467                              <2>  %else
   467                              <2>  mov [ebp], dword 0x000008D7
   467                              <2>  %endif
   467 00002EA7 BCFEFF0200          <2>  mov esp, push%1esp
   467 00002EAC 669D                <2>  o%1 popf
   467 00002EAE 0F81DBA60000        <2>  jno error
   467 00002EB4 9F                  <2>  lahf
   467 00002EB5 80FCD7              <2>  cmp ah, 0xD7
   467 00002EB8 0F85D1A60000        <2>  jne error
   467 00002EBE 81FC00000200        <2>  cmp esp, 0x20000
   467 00002EC4 0F85C5A60000        <2>  jne error
   467                              <1>  testPopF 32
   467 00002ECA 6A00                <2>  push dword 0
   467 00002ECC 9D                  <2>  popfd
   467                              <2>  %if %1 = 16
   467                              <2>  mov [ebp+2], word 0x08D7
   467                              <2>  %else
   467 00002ECD C74500D7080000      <2>  mov [ebp], dword 0x000008D7
   467                              <2>  %endif
   467 00002ED4 BCFCFF0200          <2>  mov esp, push%1esp
   467 00002ED9 9D                  <2>  o%1 popf
   467 00002EDA 0F81AFA60000        <2>  jno error
   467 00002EE0 9F                  <2>  lahf
   467 00002EE1 80FCD7              <2>  cmp ah, 0xD7
   467 00002EE4 0F85A5A60000        <2>  jne error
   467 00002EEA 81FC00000200        <2>  cmp esp, 0x20000
   467 00002EF0 0F8599A60000        <2>  jne error
   468                                  
   469                                  ;
   470                                  ;   Now use a 32-bit stack address size.
   471                                  ;   All pushes/pops will occur at ESP rather than SP.
   472                                  ;
   473 00002EF6 66B80C00                	mov    ax,  D_SEG_PROT32
   474 00002EFA 8ED0                    	mov    ss,  ax
   475                                  
   476                                  	testPushPopR ax,32
   476                              <1>  %if %1 = bp
   476                              <1>  %define sptr eax
   476                              <1>  %else
   476                              <1>  %define sptr ebp
   476                              <1>  %endif
   476                              <1> 
   476                              <1>  %if %2 = 16
   476                              <1>  %define push16esp 0x2fffe
   476                              <1>  %define push32esp 0x2fffc
   476                              <1>  %else
   476                              <1>  %define push16esp 0x1fffe
   476                              <1>  %define push32esp 0x1fffc
   476                              <1>  %endif
   476                              <1> 
   476                              <1>  %define r16 %1
   476                              <1>  %define r32 e%1
   476                              <1> 
   476 00002EFC BC00000200          <1>  mov esp, 0x20000
   476 00002F01 B800000200          <1>  mov r32, 0x20000
   476 00002F06 8D6C24FC            <1>  lea sptr, [esp-4]
   476                              <1>  %if %2 = 16
   476                              <1>  and sptr, 0xffff
   476                              <1>  %endif
   476                              <1> 
   476 00002F0A C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   476 00002F11 50                  <1>  push r32
   476 00002F12 817D0000000200      <1>  cmp [sptr], dword 0x20000
   476 00002F19 0F8570A60000        <1>  jne error
   476 00002F1F 81FCFCFF0100        <1>  cmp esp, push32esp
   476 00002F25 0F8564A60000        <1>  jne error
   476                              <1> 
   476 00002F2B C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   476 00002F32 58                  <1>  pop r32
   476 00002F33 3DEFBEADDE          <1>  cmp r32, dword 0xdeadbeef
   476 00002F38 0F8551A60000        <1>  jne error
   476                              <1> 
   476                              <1>  %if r16 <> sp
   476 00002F3E 81FC00000200        <1>  cmp esp, 0x20000
   476 00002F44 0F8545A60000        <1>  jne error
   476                              <1>  %endif
   476                              <1> 
   476 00002F4A B800000200          <1>  mov r32, 0x20000
   476                              <1> 
   476 00002F4F C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   476 00002F56 6650                <1>  push r16
   476 00002F58 817D00EFBE0000      <1>  cmp [sptr], dword 0x0000beef
   476 00002F5F 0F852AA60000        <1>  jne error
   476 00002F65 81FCFEFF0100        <1>  cmp esp, push16esp
   476 00002F6B 0F851EA60000        <1>  jne error
   476                              <1> 
   476 00002F71 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   476 00002F78 6658                <1>  pop r16
   476 00002F7A 663DADDE            <1>  cmp r16, 0xdead
   476 00002F7E 0F850BA60000        <1>  jne error
   476                              <1> 
   476                              <1>  %if r16 <> sp
   476 00002F84 81FC00000200        <1>  cmp esp, 0x20000
   476 00002F8A 0F85FFA50000        <1>  jne error
   476                              <1>  %endif
   477                                  	testPushPopR bx,32
   477                              <1>  %if %1 = bp
   477                              <1>  %define sptr eax
   477                              <1>  %else
   477                              <1>  %define sptr ebp
   477                              <1>  %endif
   477                              <1> 
   477                              <1>  %if %2 = 16
   477                              <1>  %define push16esp 0x2fffe
   477                              <1>  %define push32esp 0x2fffc
   477                              <1>  %else
   477                              <1>  %define push16esp 0x1fffe
   477                              <1>  %define push32esp 0x1fffc
   477                              <1>  %endif
   477                              <1> 
   477                              <1>  %define r16 %1
   477                              <1>  %define r32 e%1
   477                              <1> 
   477 00002F90 BC00000200          <1>  mov esp, 0x20000
   477 00002F95 BB00000200          <1>  mov r32, 0x20000
   477 00002F9A 8D6C24FC            <1>  lea sptr, [esp-4]
   477                              <1>  %if %2 = 16
   477                              <1>  and sptr, 0xffff
   477                              <1>  %endif
   477                              <1> 
   477 00002F9E C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   477 00002FA5 53                  <1>  push r32
   477 00002FA6 817D0000000200      <1>  cmp [sptr], dword 0x20000
   477 00002FAD 0F85DCA50000        <1>  jne error
   477 00002FB3 81FCFCFF0100        <1>  cmp esp, push32esp
   477 00002FB9 0F85D0A50000        <1>  jne error
   477                              <1> 
   477 00002FBF C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   477 00002FC6 5B                  <1>  pop r32
   477 00002FC7 81FBEFBEADDE        <1>  cmp r32, dword 0xdeadbeef
   477 00002FCD 0F85BCA50000        <1>  jne error
   477                              <1> 
   477                              <1>  %if r16 <> sp
   477 00002FD3 81FC00000200        <1>  cmp esp, 0x20000
   477 00002FD9 0F85B0A50000        <1>  jne error
   477                              <1>  %endif
   477                              <1> 
   477 00002FDF BB00000200          <1>  mov r32, 0x20000
   477                              <1> 
   477 00002FE4 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   477 00002FEB 6653                <1>  push r16
   477 00002FED 817D00EFBE0000      <1>  cmp [sptr], dword 0x0000beef
   477 00002FF4 0F8595A50000        <1>  jne error
   477 00002FFA 81FCFEFF0100        <1>  cmp esp, push16esp
   477 00003000 0F8589A50000        <1>  jne error
   477                              <1> 
   477 00003006 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   477 0000300D 665B                <1>  pop r16
   477 0000300F 6681FBADDE          <1>  cmp r16, 0xdead
   477 00003014 0F8575A50000        <1>  jne error
   477                              <1> 
   477                              <1>  %if r16 <> sp
   477 0000301A 81FC00000200        <1>  cmp esp, 0x20000
   477 00003020 0F8569A50000        <1>  jne error
   477                              <1>  %endif
   478                                  	testPushPopR cx,32
   478                              <1>  %if %1 = bp
   478                              <1>  %define sptr eax
   478                              <1>  %else
   478                              <1>  %define sptr ebp
   478                              <1>  %endif
   478                              <1> 
   478                              <1>  %if %2 = 16
   478                              <1>  %define push16esp 0x2fffe
   478                              <1>  %define push32esp 0x2fffc
   478                              <1>  %else
   478                              <1>  %define push16esp 0x1fffe
   478                              <1>  %define push32esp 0x1fffc
   478                              <1>  %endif
   478                              <1> 
   478                              <1>  %define r16 %1
   478                              <1>  %define r32 e%1
   478                              <1> 
   478 00003026 BC00000200          <1>  mov esp, 0x20000
   478 0000302B B900000200          <1>  mov r32, 0x20000
   478 00003030 8D6C24FC            <1>  lea sptr, [esp-4]
   478                              <1>  %if %2 = 16
   478                              <1>  and sptr, 0xffff
   478                              <1>  %endif
   478                              <1> 
   478 00003034 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   478 0000303B 51                  <1>  push r32
   478 0000303C 817D0000000200      <1>  cmp [sptr], dword 0x20000
   478 00003043 0F8546A50000        <1>  jne error
   478 00003049 81FCFCFF0100        <1>  cmp esp, push32esp
   478 0000304F 0F853AA50000        <1>  jne error
   478                              <1> 
   478 00003055 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   478 0000305C 59                  <1>  pop r32
   478 0000305D 81F9EFBEADDE        <1>  cmp r32, dword 0xdeadbeef
   478 00003063 0F8526A50000        <1>  jne error
   478                              <1> 
   478                              <1>  %if r16 <> sp
   478 00003069 81FC00000200        <1>  cmp esp, 0x20000
   478 0000306F 0F851AA50000        <1>  jne error
   478                              <1>  %endif
   478                              <1> 
   478 00003075 B900000200          <1>  mov r32, 0x20000
   478                              <1> 
   478 0000307A C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   478 00003081 6651                <1>  push r16
   478 00003083 817D00EFBE0000      <1>  cmp [sptr], dword 0x0000beef
   478 0000308A 0F85FFA40000        <1>  jne error
   478 00003090 81FCFEFF0100        <1>  cmp esp, push16esp
   478 00003096 0F85F3A40000        <1>  jne error
   478                              <1> 
   478 0000309C C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   478 000030A3 6659                <1>  pop r16
   478 000030A5 6681F9ADDE          <1>  cmp r16, 0xdead
   478 000030AA 0F85DFA40000        <1>  jne error
   478                              <1> 
   478                              <1>  %if r16 <> sp
   478 000030B0 81FC00000200        <1>  cmp esp, 0x20000
   478 000030B6 0F85D3A40000        <1>  jne error
   478                              <1>  %endif
   479                                  	testPushPopR dx,32
   479                              <1>  %if %1 = bp
   479                              <1>  %define sptr eax
   479                              <1>  %else
   479                              <1>  %define sptr ebp
   479                              <1>  %endif
   479                              <1> 
   479                              <1>  %if %2 = 16
   479                              <1>  %define push16esp 0x2fffe
   479                              <1>  %define push32esp 0x2fffc
   479                              <1>  %else
   479                              <1>  %define push16esp 0x1fffe
   479                              <1>  %define push32esp 0x1fffc
   479                              <1>  %endif
   479                              <1> 
   479                              <1>  %define r16 %1
   479                              <1>  %define r32 e%1
   479                              <1> 
   479 000030BC BC00000200          <1>  mov esp, 0x20000
   479 000030C1 BA00000200          <1>  mov r32, 0x20000
   479 000030C6 8D6C24FC            <1>  lea sptr, [esp-4]
   479                              <1>  %if %2 = 16
   479                              <1>  and sptr, 0xffff
   479                              <1>  %endif
   479                              <1> 
   479 000030CA C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   479 000030D1 52                  <1>  push r32
   479 000030D2 817D0000000200      <1>  cmp [sptr], dword 0x20000
   479 000030D9 0F85B0A40000        <1>  jne error
   479 000030DF 81FCFCFF0100        <1>  cmp esp, push32esp
   479 000030E5 0F85A4A40000        <1>  jne error
   479                              <1> 
   479 000030EB C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   479 000030F2 5A                  <1>  pop r32
   479 000030F3 81FAEFBEADDE        <1>  cmp r32, dword 0xdeadbeef
   479 000030F9 0F8590A40000        <1>  jne error
   479                              <1> 
   479                              <1>  %if r16 <> sp
   479 000030FF 81FC00000200        <1>  cmp esp, 0x20000
   479 00003105 0F8584A40000        <1>  jne error
   479                              <1>  %endif
   479                              <1> 
   479 0000310B BA00000200          <1>  mov r32, 0x20000
   479                              <1> 
   479 00003110 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   479 00003117 6652                <1>  push r16
   479 00003119 817D00EFBE0000      <1>  cmp [sptr], dword 0x0000beef
   479 00003120 0F8569A40000        <1>  jne error
   479 00003126 81FCFEFF0100        <1>  cmp esp, push16esp
   479 0000312C 0F855DA40000        <1>  jne error
   479                              <1> 
   479 00003132 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   479 00003139 665A                <1>  pop r16
   479 0000313B 6681FAADDE          <1>  cmp r16, 0xdead
   479 00003140 0F8549A40000        <1>  jne error
   479                              <1> 
   479                              <1>  %if r16 <> sp
   479 00003146 81FC00000200        <1>  cmp esp, 0x20000
   479 0000314C 0F853DA40000        <1>  jne error
   479                              <1>  %endif
   480                                  	testPushPopR bp,32
   480                              <1>  %if %1 = bp
   480                              <1>  %define sptr eax
   480                              <1>  %else
   480                              <1>  %define sptr ebp
   480                              <1>  %endif
   480                              <1> 
   480                              <1>  %if %2 = 16
   480                              <1>  %define push16esp 0x2fffe
   480                              <1>  %define push32esp 0x2fffc
   480                              <1>  %else
   480                              <1>  %define push16esp 0x1fffe
   480                              <1>  %define push32esp 0x1fffc
   480                              <1>  %endif
   480                              <1> 
   480                              <1>  %define r16 %1
   480                              <1>  %define r32 e%1
   480                              <1> 
   480 00003152 BC00000200          <1>  mov esp, 0x20000
   480 00003157 BD00000200          <1>  mov r32, 0x20000
   480 0000315C 8D4424FC            <1>  lea sptr, [esp-4]
   480                              <1>  %if %2 = 16
   480                              <1>  and sptr, 0xffff
   480                              <1>  %endif
   480                              <1> 
   480 00003160 C700EFBEADDE        <1>  mov [sptr], dword 0xdeadbeef
   480 00003166 55                  <1>  push r32
   480 00003167 813800000200        <1>  cmp [sptr], dword 0x20000
   480 0000316D 0F851CA40000        <1>  jne error
   480 00003173 81FCFCFF0100        <1>  cmp esp, push32esp
   480 00003179 0F8510A40000        <1>  jne error
   480                              <1> 
   480 0000317F C700EFBEADDE        <1>  mov [sptr], dword 0xdeadbeef
   480 00003185 5D                  <1>  pop r32
   480 00003186 81FDEFBEADDE        <1>  cmp r32, dword 0xdeadbeef
   480 0000318C 0F85FDA30000        <1>  jne error
   480                              <1> 
   480                              <1>  %if r16 <> sp
   480 00003192 81FC00000200        <1>  cmp esp, 0x20000
   480 00003198 0F85F1A30000        <1>  jne error
   480                              <1>  %endif
   480                              <1> 
   480 0000319E BD00000200          <1>  mov r32, 0x20000
   480                              <1> 
   480 000031A3 C700EFBEADDE        <1>  mov [sptr], dword 0xdeadbeef
   480 000031A9 6655                <1>  push r16
   480 000031AB 8138EFBE0000        <1>  cmp [sptr], dword 0x0000beef
   480 000031B1 0F85D8A30000        <1>  jne error
   480 000031B7 81FCFEFF0100        <1>  cmp esp, push16esp
   480 000031BD 0F85CCA30000        <1>  jne error
   480                              <1> 
   480 000031C3 C700EFBEADDE        <1>  mov [sptr], dword 0xdeadbeef
   480 000031C9 665D                <1>  pop r16
   480 000031CB 6681FDADDE          <1>  cmp r16, 0xdead
   480 000031D0 0F85B9A30000        <1>  jne error
   480                              <1> 
   480                              <1>  %if r16 <> sp
   480 000031D6 81FC00000200        <1>  cmp esp, 0x20000
   480 000031DC 0F85ADA30000        <1>  jne error
   480                              <1>  %endif
   481                                  	testPushPopR sp,32
   481                              <1>  %if %1 = bp
   481                              <1>  %define sptr eax
   481                              <1>  %else
   481                              <1>  %define sptr ebp
   481                              <1>  %endif
   481                              <1> 
   481                              <1>  %if %2 = 16
   481                              <1>  %define push16esp 0x2fffe
   481                              <1>  %define push32esp 0x2fffc
   481                              <1>  %else
   481                              <1>  %define push16esp 0x1fffe
   481                              <1>  %define push32esp 0x1fffc
   481                              <1>  %endif
   481                              <1> 
   481                              <1>  %define r16 %1
   481                              <1>  %define r32 e%1
   481                              <1> 
   481 000031E2 BC00000200          <1>  mov esp, 0x20000
   481 000031E7 BC00000200          <1>  mov r32, 0x20000
   481 000031EC 8D6C24FC            <1>  lea sptr, [esp-4]
   481                              <1>  %if %2 = 16
   481                              <1>  and sptr, 0xffff
   481                              <1>  %endif
   481                              <1> 
   481 000031F0 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   481 000031F7 54                  <1>  push r32
   481 000031F8 817D0000000200      <1>  cmp [sptr], dword 0x20000
   481 000031FF 0F858AA30000        <1>  jne error
   481 00003205 81FCFCFF0100        <1>  cmp esp, push32esp
   481 0000320B 0F857EA30000        <1>  jne error
   481                              <1> 
   481 00003211 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   481 00003218 5C                  <1>  pop r32
   481 00003219 81FCEFBEADDE        <1>  cmp r32, dword 0xdeadbeef
   481 0000321F 0F856AA30000        <1>  jne error
   481                              <1> 
   481                              <1>  %if r16 <> sp
   481                              <1>  cmp esp, 0x20000
   481                              <1>  jne error
   481                              <1>  %endif
   481                              <1> 
   481 00003225 BC00000200          <1>  mov r32, 0x20000
   481                              <1> 
   481 0000322A C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   481 00003231 6654                <1>  push r16
   481 00003233 817D00EFBE0000      <1>  cmp [sptr], dword 0x0000beef
   481 0000323A 0F854FA30000        <1>  jne error
   481 00003240 81FCFEFF0100        <1>  cmp esp, push16esp
   481 00003246 0F8543A30000        <1>  jne error
   481                              <1> 
   481 0000324C C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   481 00003253 665C                <1>  pop r16
   481 00003255 6681FCADDE          <1>  cmp r16, 0xdead
   481 0000325A 0F852FA30000        <1>  jne error
   481                              <1> 
   481                              <1>  %if r16 <> sp
   481                              <1>  cmp esp, 0x20000
   481                              <1>  jne error
   481                              <1>  %endif
   482                                  	testPushPopR si,32
   482                              <1>  %if %1 = bp
   482                              <1>  %define sptr eax
   482                              <1>  %else
   482                              <1>  %define sptr ebp
   482                              <1>  %endif
   482                              <1> 
   482                              <1>  %if %2 = 16
   482                              <1>  %define push16esp 0x2fffe
   482                              <1>  %define push32esp 0x2fffc
   482                              <1>  %else
   482                              <1>  %define push16esp 0x1fffe
   482                              <1>  %define push32esp 0x1fffc
   482                              <1>  %endif
   482                              <1> 
   482                              <1>  %define r16 %1
   482                              <1>  %define r32 e%1
   482                              <1> 
   482 00003260 BC00000200          <1>  mov esp, 0x20000
   482 00003265 BE00000200          <1>  mov r32, 0x20000
   482 0000326A 8D6C24FC            <1>  lea sptr, [esp-4]
   482                              <1>  %if %2 = 16
   482                              <1>  and sptr, 0xffff
   482                              <1>  %endif
   482                              <1> 
   482 0000326E C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   482 00003275 56                  <1>  push r32
   482 00003276 817D0000000200      <1>  cmp [sptr], dword 0x20000
   482 0000327D 0F850CA30000        <1>  jne error
   482 00003283 81FCFCFF0100        <1>  cmp esp, push32esp
   482 00003289 0F8500A30000        <1>  jne error
   482                              <1> 
   482 0000328F C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   482 00003296 5E                  <1>  pop r32
   482 00003297 81FEEFBEADDE        <1>  cmp r32, dword 0xdeadbeef
   482 0000329D 0F85ECA20000        <1>  jne error
   482                              <1> 
   482                              <1>  %if r16 <> sp
   482 000032A3 81FC00000200        <1>  cmp esp, 0x20000
   482 000032A9 0F85E0A20000        <1>  jne error
   482                              <1>  %endif
   482                              <1> 
   482 000032AF BE00000200          <1>  mov r32, 0x20000
   482                              <1> 
   482 000032B4 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   482 000032BB 6656                <1>  push r16
   482 000032BD 817D00EFBE0000      <1>  cmp [sptr], dword 0x0000beef
   482 000032C4 0F85C5A20000        <1>  jne error
   482 000032CA 81FCFEFF0100        <1>  cmp esp, push16esp
   482 000032D0 0F85B9A20000        <1>  jne error
   482                              <1> 
   482 000032D6 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   482 000032DD 665E                <1>  pop r16
   482 000032DF 6681FEADDE          <1>  cmp r16, 0xdead
   482 000032E4 0F85A5A20000        <1>  jne error
   482                              <1> 
   482                              <1>  %if r16 <> sp
   482 000032EA 81FC00000200        <1>  cmp esp, 0x20000
   482 000032F0 0F8599A20000        <1>  jne error
   482                              <1>  %endif
   483                                  	testPushPopR di,32
   483                              <1>  %if %1 = bp
   483                              <1>  %define sptr eax
   483                              <1>  %else
   483                              <1>  %define sptr ebp
   483                              <1>  %endif
   483                              <1> 
   483                              <1>  %if %2 = 16
   483                              <1>  %define push16esp 0x2fffe
   483                              <1>  %define push32esp 0x2fffc
   483                              <1>  %else
   483                              <1>  %define push16esp 0x1fffe
   483                              <1>  %define push32esp 0x1fffc
   483                              <1>  %endif
   483                              <1> 
   483                              <1>  %define r16 %1
   483                              <1>  %define r32 e%1
   483                              <1> 
   483 000032F6 BC00000200          <1>  mov esp, 0x20000
   483 000032FB BF00000200          <1>  mov r32, 0x20000
   483 00003300 8D6C24FC            <1>  lea sptr, [esp-4]
   483                              <1>  %if %2 = 16
   483                              <1>  and sptr, 0xffff
   483                              <1>  %endif
   483                              <1> 
   483 00003304 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   483 0000330B 57                  <1>  push r32
   483 0000330C 817D0000000200      <1>  cmp [sptr], dword 0x20000
   483 00003313 0F8576A20000        <1>  jne error
   483 00003319 81FCFCFF0100        <1>  cmp esp, push32esp
   483 0000331F 0F856AA20000        <1>  jne error
   483                              <1> 
   483 00003325 C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   483 0000332C 5F                  <1>  pop r32
   483 0000332D 81FFEFBEADDE        <1>  cmp r32, dword 0xdeadbeef
   483 00003333 0F8556A20000        <1>  jne error
   483                              <1> 
   483                              <1>  %if r16 <> sp
   483 00003339 81FC00000200        <1>  cmp esp, 0x20000
   483 0000333F 0F854AA20000        <1>  jne error
   483                              <1>  %endif
   483                              <1> 
   483 00003345 BF00000200          <1>  mov r32, 0x20000
   483                              <1> 
   483 0000334A C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   483 00003351 6657                <1>  push r16
   483 00003353 817D00EFBE0000      <1>  cmp [sptr], dword 0x0000beef
   483 0000335A 0F852FA20000        <1>  jne error
   483 00003360 81FCFEFF0100        <1>  cmp esp, push16esp
   483 00003366 0F8523A20000        <1>  jne error
   483                              <1> 
   483 0000336C C74500EFBEADDE      <1>  mov [sptr], dword 0xdeadbeef
   483 00003373 665F                <1>  pop r16
   483 00003375 6681FFADDE          <1>  cmp r16, 0xdead
   483 0000337A 0F850FA20000        <1>  jne error
   483                              <1> 
   483                              <1>  %if r16 <> sp
   483 00003380 81FC00000200        <1>  cmp esp, 0x20000
   483 00003386 0F8503A20000        <1>  jne error
   483                              <1>  %endif
   484                                  
   485                                  	testPushPopAll16 32
   485                              <1> 
   485                              <1>  %if %1 = 16
   485                              <1>  %define push16esp 0x2fff0
   485                              <1>  %else
   485                              <1>  %define push16esp 0x1fff0
   485                              <1>  %endif
   485                              <1> 
   485 0000338C BC00000200          <1>  mov esp, 0x20000
   485 00003391 8D6C24FE            <1>  lea ebp, [esp-2]
   485                              <1>  %if %1 = 16
   485                              <1>  and ebp, 0xffff
   485                              <1>  %endif
   485                              <1> 
   485                              <1> 
   485 00003395 B908000000          <1>  mov ecx, 8
   485 0000339A 89EF                <1>  mov edi, ebp
   485                              <1> %%initstack:
   485 0000339C 66C707EFBE          <1>  mov [edi], word 0xbeef
   485 000033A1 83EF02              <1>  sub edi, 2
   485 000033A4 E2F6                <1>  loop %%initstack
   485                              <1> 
   485                              <1> 
   485 000033A6 B811111111          <1>  mov eax, 0x11111111
   485 000033AB B922222222          <1>  mov ecx, 0x22222222
   485 000033B0 BA33333333          <1>  mov edx, 0x33333333
   485 000033B5 BB44444444          <1>  mov ebx, 0x44444444
   485                              <1> 
   485                              <1> 
   485 000033BA BE77777777          <1>  mov esi, 0x77777777
   485 000033BF BF88888888          <1>  mov edi, 0x88888888
   485                              <1> 
   485 000033C4 6660                <1>  o16 pusha
   485                              <1> 
   485                              <1> 
   485                              <1> 
   485 000033C6 66394500            <1>  cmp [ebp], ax
   485 000033CA 0F85BFA10000        <1>  jne error
   485 000033D0 66394DFE            <1>  cmp [ebp-2], cx
   485 000033D4 0F85B5A10000        <1>  jne error
   485 000033DA 663955FC            <1>  cmp [ebp-4], dx
   485 000033DE 0F85ABA10000        <1>  jne error
   485 000033E4 66395DFA            <1>  cmp [ebp-6], bx
   485 000033E8 0F85A1A10000        <1>  jne error
   485 000033EE 66837DF800          <1>  cmp [ebp-8], word 0x0000
   485 000033F3 0F8596A10000        <1>  jne error
   485 000033F9 66396DF6            <1>  cmp [ebp-10], bp
   485 000033FD 0F858CA10000        <1>  jne error
   485 00003403 663975F4            <1>  cmp [ebp-12], si
   485 00003407 0F8582A10000        <1>  jne error
   485 0000340D 66397DF2            <1>  cmp [ebp-14], di
   485 00003411 0F8578A10000        <1>  jne error
   485                              <1> 
   485 00003417 81FCF0FF0100        <1>  cmp esp, push16esp
   485 0000341D 0F856CA10000        <1>  jne error
   485                              <1> 
   485                              <1> 
   485 00003423 66C745F8EFBE        <1>  mov [ebp-8], word 0xbeef
   485                              <1> 
   485                              <1> 
   485 00003429 B8EFBEADDE          <1>  mov eax, 0xdeadbeef
   485 0000342E B9EFBEADDE          <1>  mov ecx, 0xdeadbeef
   485 00003433 BAEFBEADDE          <1>  mov edx, 0xdeadbeef
   485 00003438 BBEFBEADDE          <1>  mov ebx, 0xdeadbeef
   485                              <1> 
   485 0000343D BDEFBEADDE          <1>  mov ebp, 0xdeadbeef
   485 00003442 BEEFBEADDE          <1>  mov esi, 0xdeadbeef
   485 00003447 BFEFBEADDE          <1>  mov edi, 0xdeadbeef
   485                              <1> 
   485 0000344C 6661                <1>  o16 popa
   485                              <1> 
   485                              <1> 
   485                              <1> 
   485 0000344E 3D1111ADDE          <1>  cmp eax, 0xdead1111
   485 00003453 0F8536A10000        <1>  jne error
   485 00003459 81F92222ADDE        <1>  cmp ecx, 0xdead2222
   485 0000345F 0F852AA10000        <1>  jne error
   485 00003465 81FA3333ADDE        <1>  cmp edx, 0xdead3333
   485 0000346B 0F851EA10000        <1>  jne error
   485 00003471 81FB4444ADDE        <1>  cmp ebx, 0xdead4444
   485 00003477 0F8512A10000        <1>  jne error
   485 0000347D 81FC00000200        <1>  cmp esp, 0x20000
   485 00003483 0F8506A10000        <1>  jne error
   485 00003489 B80000ADDE          <1>  mov eax, 0xdead0000
   485 0000348E 6683E802            <1>  sub ax, 2
   485 00003492 39C5                <1>  cmp ebp, eax
   485 00003494 0F85F5A00000        <1>  jne error
   485 0000349A 81FE7777ADDE        <1>  cmp esi, 0xdead7777
   485 000034A0 0F85E9A00000        <1>  jne error
   485 000034A6 81FF8888ADDE        <1>  cmp edi, 0xdead8888
   485 000034AC 0F85DDA00000        <1>  jne error
   485                              <1> 
   486                                  	testPushPopAll32 32
   486                              <1> 
   486                              <1>  %if %1 = 16
   486                              <1>  %define push32esp 0x2ffe0
   486                              <1>  %else
   486                              <1>  %define push32esp 0x1ffe0
   486                              <1>  %endif
   486                              <1> 
   486 000034B2 BC00000200          <1>  mov esp, 0x20000
   486 000034B7 8D6C24FC            <1>  lea ebp, [esp-4]
   486                              <1>  %if %1 = 16
   486                              <1>  and ebp, 0xffff
   486                              <1>  %endif
   486                              <1> 
   486                              <1> 
   486 000034BB B908000000          <1>  mov ecx, 8
   486 000034C0 89EF                <1>  mov edi, ebp
   486                              <1> %%initstack:
   486 000034C2 C707EFBEADDE        <1>  mov [edi], dword 0xdeadbeef
   486 000034C8 83EF04              <1>  sub edi, 4
   486 000034CB E2F5                <1>  loop %%initstack
   486                              <1> 
   486                              <1> 
   486 000034CD B811111111          <1>  mov eax, 0x11111111
   486 000034D2 B922222222          <1>  mov ecx, 0x22222222
   486 000034D7 BA33333333          <1>  mov edx, 0x33333333
   486 000034DC BB44444444          <1>  mov ebx, 0x44444444
   486                              <1> 
   486                              <1> 
   486 000034E1 BE77777777          <1>  mov esi, 0x77777777
   486 000034E6 BF88888888          <1>  mov edi, 0x88888888
   486                              <1> 
   486 000034EB 60                  <1>  o32 pusha
   486                              <1> 
   486                              <1> 
   486                              <1> 
   486 000034EC 394500              <1>  cmp [ebp], eax
   486 000034EF 0F859AA00000        <1>  jne error
   486 000034F5 394DFC              <1>  cmp [ebp-4], ecx
   486 000034F8 0F8591A00000        <1>  jne error
   486 000034FE 3955F8              <1>  cmp [ebp-8], edx
   486 00003501 0F8588A00000        <1>  jne error
   486 00003507 395DF4              <1>  cmp [ebp-12], ebx
   486 0000350A 0F857FA00000        <1>  jne error
   486 00003510 817DF000000200      <1>  cmp [ebp-16], dword 0x20000
   486 00003517 0F8572A00000        <1>  jne error
   486 0000351D 396DEC              <1>  cmp [ebp-20], ebp
   486 00003520 0F8569A00000        <1>  jne error
   486 00003526 3975E8              <1>  cmp [ebp-24], esi
   486 00003529 0F8560A00000        <1>  jne error
   486 0000352F 397DE4              <1>  cmp [ebp-28], edi
   486 00003532 0F8557A00000        <1>  jne error
   486                              <1> 
   486 00003538 81FCE0FF0100        <1>  cmp esp, push32esp
   486 0000353E 0F854BA00000        <1>  jne error
   486                              <1> 
   486                              <1> 
   486 00003544 C745F0EFBEADDE      <1>  mov [ebp-16], dword 0xdeadbeef
   486                              <1> 
   486                              <1> 
   486 0000354B B8EFBEADDE          <1>  mov eax, 0xdeadbeef
   486 00003550 B9EFBEADDE          <1>  mov ecx, 0xdeadbeef
   486 00003555 BAEFBEADDE          <1>  mov edx, 0xdeadbeef
   486 0000355A BBEFBEADDE          <1>  mov ebx, 0xdeadbeef
   486                              <1> 
   486 0000355F BDEFBEADDE          <1>  mov ebp, 0xdeadbeef
   486 00003564 BEEFBEADDE          <1>  mov esi, 0xdeadbeef
   486 00003569 BFEFBEADDE          <1>  mov edi, 0xdeadbeef
   486                              <1> 
   486 0000356E 61                  <1>  o32 popa
   486                              <1> 
   486                              <1> 
   486                              <1> 
   486 0000356F 3D11111111          <1>  cmp eax, 0x11111111
   486 00003574 0F8515A00000        <1>  jne error
   486 0000357A 81F922222222        <1>  cmp ecx, 0x22222222
   486 00003580 0F8509A00000        <1>  jne error
   486 00003586 81FA33333333        <1>  cmp edx, 0x33333333
   486 0000358C 0F85FD9F0000        <1>  jne error
   486 00003592 81FB44444444        <1>  cmp ebx, 0x44444444
   486 00003598 0F85F19F0000        <1>  jne error
   486 0000359E 81FC00000200        <1>  cmp esp, 0x20000
   486 000035A4 0F85E59F0000        <1>  jne error
   486 000035AA 8D4424FC            <1>  lea eax, [esp-4]
   486                              <1>  %if %1 = 16
   486                              <1>  and eax, 0xffff
   486                              <1>  %endif
   486 000035AE 39C5                <1>  cmp ebp, eax
   486 000035B0 0F85D99F0000        <1>  jne error
   486 000035B6 81FE77777777        <1>  cmp esi, 0x77777777
   486 000035BC 0F85CD9F0000        <1>  jne error
   486 000035C2 81FF88888888        <1>  cmp edi, 0x88888888
   486 000035C8 0F85C19F0000        <1>  jne error
   486                              <1> 
   487                                  
   488                                  	testPushPopSR cs,32
   488                              <1>  %if %2 = 16
   488                              <1>  %define push16esp 0x2fffe
   488                              <1>  %define push32esp 0x2fffc
   488                              <1>  %else
   488                              <1>  %define push16esp 0x1fffe
   488                              <1>  %define push32esp 0x1fffc
   488                              <1>  %endif
   488                              <1> 
   488 000035CE 668CCA              <1>  mov dx, %1
   488 000035D1 BC00000200          <1>  mov esp, 0x20000
   488 000035D6 8D6C24FC            <1>  lea ebp, [esp-4]
   488                              <1>  %if %2 = 16
   488                              <1>  and ebp, 0xffff
   488                              <1>  %endif
   488                              <1> 
   488 000035DA C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   488 000035E1 0E                  <1>  o32 push %1
   488 000035E2 66395500            <1>  cmp [ebp], dx
   488 000035E6 0F85A39F0000        <1>  jne error
   488                              <1>  %if TEST_UNDEF
   488                              <1> 
   488                              <1> 
   488                              <1> 
   488                              <1> 
   488                              <1> 
   488                              <1> 
   488                              <1> 
   488                              <1> 
   488                              <1> 
   488                              <1>  cmp [ebp+2], word 0xdead
   488                              <1>  jne error
   488                              <1>  %endif
   488 000035EC 81FCFCFF0100        <1>  cmp esp, push32esp
   488 000035F2 0F85979F0000        <1>  jne error
   488                              <1> 
   488                              <1>  %if %1 <> cs
   488                              <1>  mov [ebp], dword DTEST_SEG_PROT
   488                              <1>  o32 pop %1
   488                              <1>  mov ax, %1
   488                              <1>  cmp ax, DTEST_SEG_PROT
   488                              <1>  jne error
   488                              <1>  cmp esp, 0x20000
   488                              <1>  jne error
   488                              <1>  mov %1, dx
   488                              <1>  %else
   488 000035F8 BC00000200          <1>  mov esp, 0x20000
   488                              <1>  %endif
   488                              <1> 
   488 000035FD C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   488 00003604 660E                <1>  o16 push %1
   488 00003606 66395502            <1>  cmp [ebp+2], dx
   488 0000360A 0F857F9F0000        <1>  jne error
   488 00003610 81FCFEFF0100        <1>  cmp esp, push16esp
   488 00003616 0F85739F0000        <1>  jne error
   488                              <1> 
   488                              <1>  %if %1 <> cs
   488                              <1>  mov [ebp+2], word DTEST_SEG_PROT
   488                              <1>  o16 pop %1
   488                              <1>  mov ax, %1
   488                              <1>  cmp ax, DTEST_SEG_PROT
   488                              <1>  jne error
   488                              <1>  cmp esp, 0x20000
   488                              <1>  jne error
   488                              <1>  mov %1, dx
   488                              <1>  %else
   488 0000361C BC00000200          <1>  mov esp, 0x20000
   488                              <1>  %endif
   488                              <1> 
   489                                  	testPushPopSR ds,32
   489                              <1>  %if %2 = 16
   489                              <1>  %define push16esp 0x2fffe
   489                              <1>  %define push32esp 0x2fffc
   489                              <1>  %else
   489                              <1>  %define push16esp 0x1fffe
   489                              <1>  %define push32esp 0x1fffc
   489                              <1>  %endif
   489                              <1> 
   489 00003621 668CDA              <1>  mov dx, %1
   489 00003624 BC00000200          <1>  mov esp, 0x20000
   489 00003629 8D6C24FC            <1>  lea ebp, [esp-4]
   489                              <1>  %if %2 = 16
   489                              <1>  and ebp, 0xffff
   489                              <1>  %endif
   489                              <1> 
   489 0000362D C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   489 00003634 1E                  <1>  o32 push %1
   489 00003635 66395500            <1>  cmp [ebp], dx
   489 00003639 0F85509F0000        <1>  jne error
   489                              <1>  %if TEST_UNDEF
   489                              <1> 
   489                              <1> 
   489                              <1> 
   489                              <1> 
   489                              <1> 
   489                              <1> 
   489                              <1> 
   489                              <1> 
   489                              <1> 
   489                              <1>  cmp [ebp+2], word 0xdead
   489                              <1>  jne error
   489                              <1>  %endif
   489 0000363F 81FCFCFF0100        <1>  cmp esp, push32esp
   489 00003645 0F85449F0000        <1>  jne error
   489                              <1> 
   489                              <1>  %if %1 <> cs
   489 0000364B C7450044000000      <1>  mov [ebp], dword DTEST_SEG_PROT
   489 00003652 1F                  <1>  o32 pop %1
   489 00003653 668CD8              <1>  mov ax, %1
   489 00003656 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   489 0000365A 0F852F9F0000        <1>  jne error
   489 00003660 81FC00000200        <1>  cmp esp, 0x20000
   489 00003666 0F85239F0000        <1>  jne error
   489 0000366C 8EDA                <1>  mov %1, dx
   489                              <1>  %else
   489                              <1>  mov esp, 0x20000
   489                              <1>  %endif
   489                              <1> 
   489 0000366E C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   489 00003675 661E                <1>  o16 push %1
   489 00003677 66395502            <1>  cmp [ebp+2], dx
   489 0000367B 0F850E9F0000        <1>  jne error
   489 00003681 81FCFEFF0100        <1>  cmp esp, push16esp
   489 00003687 0F85029F0000        <1>  jne error
   489                              <1> 
   489                              <1>  %if %1 <> cs
   489 0000368D 66C745024400        <1>  mov [ebp+2], word DTEST_SEG_PROT
   489 00003693 661F                <1>  o16 pop %1
   489 00003695 668CD8              <1>  mov ax, %1
   489 00003698 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   489 0000369C 0F85ED9E0000        <1>  jne error
   489 000036A2 81FC00000200        <1>  cmp esp, 0x20000
   489 000036A8 0F85E19E0000        <1>  jne error
   489 000036AE 8EDA                <1>  mov %1, dx
   489                              <1>  %else
   489                              <1>  mov esp, 0x20000
   489                              <1>  %endif
   489                              <1> 
   490                                  	testPushPopSR ss,32
   490                              <1>  %if %2 = 16
   490                              <1>  %define push16esp 0x2fffe
   490                              <1>  %define push32esp 0x2fffc
   490                              <1>  %else
   490                              <1>  %define push16esp 0x1fffe
   490                              <1>  %define push32esp 0x1fffc
   490                              <1>  %endif
   490                              <1> 
   490 000036B0 668CD2              <1>  mov dx, %1
   490 000036B3 BC00000200          <1>  mov esp, 0x20000
   490 000036B8 8D6C24FC            <1>  lea ebp, [esp-4]
   490                              <1>  %if %2 = 16
   490                              <1>  and ebp, 0xffff
   490                              <1>  %endif
   490                              <1> 
   490 000036BC C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   490 000036C3 16                  <1>  o32 push %1
   490 000036C4 66395500            <1>  cmp [ebp], dx
   490 000036C8 0F85C19E0000        <1>  jne error
   490                              <1>  %if TEST_UNDEF
   490                              <1> 
   490                              <1> 
   490                              <1> 
   490                              <1> 
   490                              <1> 
   490                              <1> 
   490                              <1> 
   490                              <1> 
   490                              <1> 
   490                              <1>  cmp [ebp+2], word 0xdead
   490                              <1>  jne error
   490                              <1>  %endif
   490 000036CE 81FCFCFF0100        <1>  cmp esp, push32esp
   490 000036D4 0F85B59E0000        <1>  jne error
   490                              <1> 
   490                              <1>  %if %1 <> cs
   490 000036DA C7450044000000      <1>  mov [ebp], dword DTEST_SEG_PROT
   490 000036E1 17                  <1>  o32 pop %1
   490 000036E2 668CD0              <1>  mov ax, %1
   490 000036E5 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   490 000036E9 0F85A09E0000        <1>  jne error
   490 000036EF 81FC00000200        <1>  cmp esp, 0x20000
   490 000036F5 0F85949E0000        <1>  jne error
   490 000036FB 8ED2                <1>  mov %1, dx
   490                              <1>  %else
   490                              <1>  mov esp, 0x20000
   490                              <1>  %endif
   490                              <1> 
   490 000036FD C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   490 00003704 6616                <1>  o16 push %1
   490 00003706 66395502            <1>  cmp [ebp+2], dx
   490 0000370A 0F857F9E0000        <1>  jne error
   490 00003710 81FCFEFF0100        <1>  cmp esp, push16esp
   490 00003716 0F85739E0000        <1>  jne error
   490                              <1> 
   490                              <1>  %if %1 <> cs
   490 0000371C 66C745024400        <1>  mov [ebp+2], word DTEST_SEG_PROT
   490 00003722 6617                <1>  o16 pop %1
   490 00003724 668CD0              <1>  mov ax, %1
   490 00003727 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   490 0000372B 0F855E9E0000        <1>  jne error
   490 00003731 81FC00000200        <1>  cmp esp, 0x20000
   490 00003737 0F85529E0000        <1>  jne error
   490 0000373D 8ED2                <1>  mov %1, dx
   490                              <1>  %else
   490                              <1>  mov esp, 0x20000
   490                              <1>  %endif
   490                              <1> 
   491                                  	testPushPopSR es,32
   491                              <1>  %if %2 = 16
   491                              <1>  %define push16esp 0x2fffe
   491                              <1>  %define push32esp 0x2fffc
   491                              <1>  %else
   491                              <1>  %define push16esp 0x1fffe
   491                              <1>  %define push32esp 0x1fffc
   491                              <1>  %endif
   491                              <1> 
   491 0000373F 668CC2              <1>  mov dx, %1
   491 00003742 BC00000200          <1>  mov esp, 0x20000
   491 00003747 8D6C24FC            <1>  lea ebp, [esp-4]
   491                              <1>  %if %2 = 16
   491                              <1>  and ebp, 0xffff
   491                              <1>  %endif
   491                              <1> 
   491 0000374B C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   491 00003752 06                  <1>  o32 push %1
   491 00003753 66395500            <1>  cmp [ebp], dx
   491 00003757 0F85329E0000        <1>  jne error
   491                              <1>  %if TEST_UNDEF
   491                              <1> 
   491                              <1> 
   491                              <1> 
   491                              <1> 
   491                              <1> 
   491                              <1> 
   491                              <1> 
   491                              <1> 
   491                              <1> 
   491                              <1>  cmp [ebp+2], word 0xdead
   491                              <1>  jne error
   491                              <1>  %endif
   491 0000375D 81FCFCFF0100        <1>  cmp esp, push32esp
   491 00003763 0F85269E0000        <1>  jne error
   491                              <1> 
   491                              <1>  %if %1 <> cs
   491 00003769 C7450044000000      <1>  mov [ebp], dword DTEST_SEG_PROT
   491 00003770 07                  <1>  o32 pop %1
   491 00003771 668CC0              <1>  mov ax, %1
   491 00003774 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   491 00003778 0F85119E0000        <1>  jne error
   491 0000377E 81FC00000200        <1>  cmp esp, 0x20000
   491 00003784 0F85059E0000        <1>  jne error
   491 0000378A 8EC2                <1>  mov %1, dx
   491                              <1>  %else
   491                              <1>  mov esp, 0x20000
   491                              <1>  %endif
   491                              <1> 
   491 0000378C C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   491 00003793 6606                <1>  o16 push %1
   491 00003795 66395502            <1>  cmp [ebp+2], dx
   491 00003799 0F85F09D0000        <1>  jne error
   491 0000379F 81FCFEFF0100        <1>  cmp esp, push16esp
   491 000037A5 0F85E49D0000        <1>  jne error
   491                              <1> 
   491                              <1>  %if %1 <> cs
   491 000037AB 66C745024400        <1>  mov [ebp+2], word DTEST_SEG_PROT
   491 000037B1 6607                <1>  o16 pop %1
   491 000037B3 668CC0              <1>  mov ax, %1
   491 000037B6 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   491 000037BA 0F85CF9D0000        <1>  jne error
   491 000037C0 81FC00000200        <1>  cmp esp, 0x20000
   491 000037C6 0F85C39D0000        <1>  jne error
   491 000037CC 8EC2                <1>  mov %1, dx
   491                              <1>  %else
   491                              <1>  mov esp, 0x20000
   491                              <1>  %endif
   491                              <1> 
   492                                  	testPushPopSR fs,32
   492                              <1>  %if %2 = 16
   492                              <1>  %define push16esp 0x2fffe
   492                              <1>  %define push32esp 0x2fffc
   492                              <1>  %else
   492                              <1>  %define push16esp 0x1fffe
   492                              <1>  %define push32esp 0x1fffc
   492                              <1>  %endif
   492                              <1> 
   492 000037CE 668CE2              <1>  mov dx, %1
   492 000037D1 BC00000200          <1>  mov esp, 0x20000
   492 000037D6 8D6C24FC            <1>  lea ebp, [esp-4]
   492                              <1>  %if %2 = 16
   492                              <1>  and ebp, 0xffff
   492                              <1>  %endif
   492                              <1> 
   492 000037DA C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   492 000037E1 0FA0                <1>  o32 push %1
   492 000037E3 66395500            <1>  cmp [ebp], dx
   492 000037E7 0F85A29D0000        <1>  jne error
   492                              <1>  %if TEST_UNDEF
   492                              <1> 
   492                              <1> 
   492                              <1> 
   492                              <1> 
   492                              <1> 
   492                              <1> 
   492                              <1> 
   492                              <1> 
   492                              <1> 
   492                              <1>  cmp [ebp+2], word 0xdead
   492                              <1>  jne error
   492                              <1>  %endif
   492 000037ED 81FCFCFF0100        <1>  cmp esp, push32esp
   492 000037F3 0F85969D0000        <1>  jne error
   492                              <1> 
   492                              <1>  %if %1 <> cs
   492 000037F9 C7450044000000      <1>  mov [ebp], dword DTEST_SEG_PROT
   492 00003800 0FA1                <1>  o32 pop %1
   492 00003802 668CE0              <1>  mov ax, %1
   492 00003805 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   492 00003809 0F85809D0000        <1>  jne error
   492 0000380F 81FC00000200        <1>  cmp esp, 0x20000
   492 00003815 0F85749D0000        <1>  jne error
   492 0000381B 8EE2                <1>  mov %1, dx
   492                              <1>  %else
   492                              <1>  mov esp, 0x20000
   492                              <1>  %endif
   492                              <1> 
   492 0000381D C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   492 00003824 660FA0              <1>  o16 push %1
   492 00003827 66395502            <1>  cmp [ebp+2], dx
   492 0000382B 0F855E9D0000        <1>  jne error
   492 00003831 81FCFEFF0100        <1>  cmp esp, push16esp
   492 00003837 0F85529D0000        <1>  jne error
   492                              <1> 
   492                              <1>  %if %1 <> cs
   492 0000383D 66C745024400        <1>  mov [ebp+2], word DTEST_SEG_PROT
   492 00003843 660FA1              <1>  o16 pop %1
   492 00003846 668CE0              <1>  mov ax, %1
   492 00003849 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   492 0000384D 0F853C9D0000        <1>  jne error
   492 00003853 81FC00000200        <1>  cmp esp, 0x20000
   492 00003859 0F85309D0000        <1>  jne error
   492 0000385F 8EE2                <1>  mov %1, dx
   492                              <1>  %else
   492                              <1>  mov esp, 0x20000
   492                              <1>  %endif
   492                              <1> 
   493                                  	testPushPopSR gs,32
   493                              <1>  %if %2 = 16
   493                              <1>  %define push16esp 0x2fffe
   493                              <1>  %define push32esp 0x2fffc
   493                              <1>  %else
   493                              <1>  %define push16esp 0x1fffe
   493                              <1>  %define push32esp 0x1fffc
   493                              <1>  %endif
   493                              <1> 
   493 00003861 668CEA              <1>  mov dx, %1
   493 00003864 BC00000200          <1>  mov esp, 0x20000
   493 00003869 8D6C24FC            <1>  lea ebp, [esp-4]
   493                              <1>  %if %2 = 16
   493                              <1>  and ebp, 0xffff
   493                              <1>  %endif
   493                              <1> 
   493 0000386D C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   493 00003874 0FA8                <1>  o32 push %1
   493 00003876 66395500            <1>  cmp [ebp], dx
   493 0000387A 0F850F9D0000        <1>  jne error
   493                              <1>  %if TEST_UNDEF
   493                              <1> 
   493                              <1> 
   493                              <1> 
   493                              <1> 
   493                              <1> 
   493                              <1> 
   493                              <1> 
   493                              <1> 
   493                              <1> 
   493                              <1>  cmp [ebp+2], word 0xdead
   493                              <1>  jne error
   493                              <1>  %endif
   493 00003880 81FCFCFF0100        <1>  cmp esp, push32esp
   493 00003886 0F85039D0000        <1>  jne error
   493                              <1> 
   493                              <1>  %if %1 <> cs
   493 0000388C C7450044000000      <1>  mov [ebp], dword DTEST_SEG_PROT
   493 00003893 0FA9                <1>  o32 pop %1
   493 00003895 668CE8              <1>  mov ax, %1
   493 00003898 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   493 0000389C 0F85ED9C0000        <1>  jne error
   493 000038A2 81FC00000200        <1>  cmp esp, 0x20000
   493 000038A8 0F85E19C0000        <1>  jne error
   493 000038AE 8EEA                <1>  mov %1, dx
   493                              <1>  %else
   493                              <1>  mov esp, 0x20000
   493                              <1>  %endif
   493                              <1> 
   493 000038B0 C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   493 000038B7 660FA8              <1>  o16 push %1
   493 000038BA 66395502            <1>  cmp [ebp+2], dx
   493 000038BE 0F85CB9C0000        <1>  jne error
   493 000038C4 81FCFEFF0100        <1>  cmp esp, push16esp
   493 000038CA 0F85BF9C0000        <1>  jne error
   493                              <1> 
   493                              <1>  %if %1 <> cs
   493 000038D0 66C745024400        <1>  mov [ebp+2], word DTEST_SEG_PROT
   493 000038D6 660FA9              <1>  o16 pop %1
   493 000038D9 668CE8              <1>  mov ax, %1
   493 000038DC 6683F844            <1>  cmp ax, DTEST_SEG_PROT
   493 000038E0 0F85A99C0000        <1>  jne error
   493 000038E6 81FC00000200        <1>  cmp esp, 0x20000
   493 000038EC 0F859D9C0000        <1>  jne error
   493 000038F2 8EEA                <1>  mov %1, dx
   493                              <1>  %else
   493                              <1>  mov esp, 0x20000
   493                              <1>  %endif
   493                              <1> 
   494                                  
   495                                  	testPushPopM 32
   495                              <1> 
   495                              <1>  %if %1 = 16
   495                              <1>  %define push16esp 0x2fffe
   495                              <1>  %define push32esp 0x2fffc
   495                              <1>  %else
   495                              <1>  %define push16esp 0x1fffe
   495                              <1>  %define push32esp 0x1fffc
   495                              <1>  %endif
   495                              <1> 
   495 000038F4 BC00000200          <1>  mov esp, 0x20000
   495 000038F9 8D6C24FC            <1>  lea ebp, [esp-4]
   495                              <1>  %if %1 = 16
   495                              <1>  and ebp, 0xffff
   495                              <1>  %endif
   495                              <1> 
   495 000038FD 8D7424F8            <1>  lea esi, [esp-8]
   495 00003901 C70644332211        <1>  mov [esi], dword 0x11223344
   495                              <1> 
   495 00003907 C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   495 0000390E FF36                <1>  push dword [esi]
   495 00003910 817D0044332211      <1>  cmp [ebp], dword 0x11223344
   495 00003917 0F85729C0000        <1>  jne error
   495 0000391D 81FCFCFF0100        <1>  cmp esp, push32esp
   495 00003923 0F85669C0000        <1>  jne error
   495                              <1> 
   495 00003929 C706EFBEADDE        <1>  mov [esi], dword 0xdeadbeef
   495 0000392F 8F06                <1>  pop dword [esi]
   495 00003931 813E44332211        <1>  cmp [esi], dword 0x11223344
   495 00003937 0F85529C0000        <1>  jne error
   495 0000393D 81FC00000200        <1>  cmp esp, 0x20000
   495 00003943 0F85469C0000        <1>  jne error
   495                              <1> 
   495 00003949 C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   495 00003950 66FF36              <1>  push word [esi]
   495 00003953 817D00EFBE4433      <1>  cmp [ebp], dword 0x3344beef
   495 0000395A 0F852F9C0000        <1>  jne error
   495 00003960 81FCFEFF0100        <1>  cmp esp, push16esp
   495 00003966 0F85239C0000        <1>  jne error
   495                              <1> 
   495 0000396C C706EFBEADDE        <1>  mov [esi], dword 0xdeadbeef
   495 00003972 668F06              <1>  pop word [esi]
   495 00003975 813E4433ADDE        <1>  cmp [esi], dword 0xdead3344
   495 0000397B 0F850E9C0000        <1>  jne error
   495 00003981 81FC00000200        <1>  cmp esp, 0x20000
   495 00003987 0F85029C0000        <1>  jne error
   496                                  	testPushImm 32
   496                              <1> 
   496 0000398D BC00000200          <1>  mov esp, 0x20000
   496 00003992 8D6C24FC            <1>  lea ebp, [esp-4]
   496                              <1>  %if %1 = 16
   496                              <1>  and ebp, 0xffff
   496                              <1>  %endif
   496                              <1> 
   496 00003996 C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   496                              <1> 
   496 0000399D 6844332211          <1>  push dword 0x11223344
   496                              <1> 
   496 000039A2 817D0044332211      <1>  cmp [ebp], dword 0x11223344
   496 000039A9 0F85E09B0000        <1>  jne error
   496                              <1>  %if %1 = 16
   496                              <1>  cmp esp, 0x2fffc
   496                              <1>  %else
   496 000039AF 81FCFCFF0100        <1>  cmp esp, 0x1fffc
   496                              <1>  %endif
   496 000039B5 0F85D49B0000        <1>  jne error
   496                              <1> 
   496 000039BB BC00000200          <1>  mov esp, 0x20000
   496 000039C0 C74500EFBEADDE      <1>  mov [ebp], dword 0xdeadbeef
   496                              <1> 
   496 000039C7 66682211            <1>  push word 0x1122
   496                              <1> 
   496 000039CB 817D00EFBE2211      <1>  cmp [ebp], dword 0x1122beef
   496 000039D2 0F85B79B0000        <1>  jne error
   496                              <1>  %if %1 = 16
   496                              <1>  cmp esp, 0x2fffe
   496                              <1>  %else
   496 000039D8 81FCFEFF0100        <1>  cmp esp, 0x1fffe
   496                              <1>  %endif
   496 000039DE 0F85AB9B0000        <1>  jne error
   496                              <1> 
   496                              <1>  %if %1 = 16
   496                              <1>  %define push16esp 0x2fffe
   496                              <1>  %define push32esp 0x2fffc
   496                              <1>  %else
   496                              <1>  %define push16esp 0x1fffe
   496                              <1>  %define push32esp 0x1fffc
   496                              <1>  %endif
   496                              <1>  testBytePush o16, 0x11, 0x0011beef, push16esp
   496 000039E4 BC00000200          <2>  mov esp, 0x20000
   496 000039E9 C74500EFBEADDE      <2>  mov [ebp], dword 0xdeadbeef
   496 000039F0 666A11              <2>  %1 push byte %2
   496 000039F3 817D00EFBE1100      <2>  cmp [ebp], dword %3
   496 000039FA 0F858F9B0000        <2>  jne error
   496 00003A00 81FCFEFF0100        <2>  cmp esp, %4
   496 00003A06 0F85839B0000        <2>  jne error
   496                              <1>  testBytePush o32, 0x11, 0x00000011, push32esp
   496 00003A0C BC00000200          <2>  mov esp, 0x20000
   496 00003A11 C74500EFBEADDE      <2>  mov [ebp], dword 0xdeadbeef
   496 00003A18 6A11                <2>  %1 push byte %2
   496 00003A1A 837D0011            <2>  cmp [ebp], dword %3
   496 00003A1E 0F856B9B0000        <2>  jne error
   496 00003A24 81FCFCFF0100        <2>  cmp esp, %4
   496 00003A2A 0F855F9B0000        <2>  jne error
   496                              <1>  testBytePush o16, 0x81, 0xff81beef, push16esp
   496 00003A30 BC00000200          <2>  mov esp, 0x20000
   496 00003A35 C74500EFBEADDE      <2>  mov [ebp], dword 0xdeadbeef
   496 00003A3C 666A81              <2>  %1 push byte %2
   496          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   496 00003A3F 817D00EFBE81FF      <2>  cmp [ebp], dword %3
   496 00003A46 0F85439B0000        <2>  jne error
   496 00003A4C 81FCFEFF0100        <2>  cmp esp, %4
   496 00003A52 0F85379B0000        <2>  jne error
   496                              <1>  testBytePush o32, 0x81, 0xffffff81, push32esp
   496 00003A58 BC00000200          <2>  mov esp, 0x20000
   496 00003A5D C74500EFBEADDE      <2>  mov [ebp], dword 0xdeadbeef
   496 00003A64 6A81                <2>  %1 push byte %2
   496          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   496 00003A66 837D0081            <2>  cmp [ebp], dword %3
   496 00003A6A 0F851F9B0000        <2>  jne error
   496 00003A70 81FCFCFF0100        <2>  cmp esp, %4
   496 00003A76 0F85139B0000        <2>  jne error
   496                              <1> 
   497                                  
   498                                  	testPushPopF 32
   498                              <1>  %if %1 = 16
   498                              <1>  %define push16esp 0x2fffe
   498                              <1>  %define push32esp 0x2fffc
   498                              <1>  %else
   498                              <1>  %define push16esp 0x1fffe
   498                              <1>  %define push32esp 0x1fffc
   498                              <1>  %endif
   498                              <1> 
   498 00003A7C BC00000200          <1>  mov esp, 0x20000
   498 00003A81 8D6C24FC            <1>  lea ebp, [esp-4]
   498                              <1>  %if %1 = 16
   498                              <1>  and ebp, 0xffff
   498                              <1>  %endif
   498                              <1> 
   498                              <1>  testPushF 16
   498 00003A85 6A00                <2>  push dword 0
   498 00003A87 9D                  <2>  popfd
   498 00003A88 0F80019B0000        <2>  jo error
   498 00003A8E 0F82FB9A0000        <2>  jc error
   498 00003A94 0F84F59A0000        <2>  jz error
   498 00003A9A 0F88EF9A0000        <2>  js error
   498 00003AA0 0F8AE99A0000        <2>  jpe error
   498                              <2> 
   498 00003AA6 BC00000200          <2>  mov esp, 0x20000
   498 00003AAB C74500EFBEADDE      <2>  mov [ebp], dword 0xdeadbeef
   498 00003AB2 F9                  <2>  stc
   498 00003AB3 FD                  <2>  std
   498 00003AB4 FB                  <2>  sti
   498 00003AB5 669C                <2>  o%1 pushf
   498                              <2>  %if %1 = 16
   498 00003AB7 817D00EFBE0306      <2>  cmp [ebp], dword 0x0603beef
   498                              <2>  %else
   498                              <2>  cmp [ebp], dword 0x00000603
   498                              <2>  %endif
   498 00003ABE 0F85CB9A0000        <2>  jne error
   498 00003AC4 81FCFEFF0100        <2>  cmp esp, push%1esp
   498 00003ACA 0F85BF9A0000        <2>  jne error
   498                              <1>  testPushF 32
   498 00003AD0 6A00                <2>  push dword 0
   498 00003AD2 9D                  <2>  popfd
   498 00003AD3 0F80B69A0000        <2>  jo error
   498 00003AD9 0F82B09A0000        <2>  jc error
   498 00003ADF 0F84AA9A0000        <2>  jz error
   498 00003AE5 0F88A49A0000        <2>  js error
   498 00003AEB 0F8A9E9A0000        <2>  jpe error
   498                              <2> 
   498 00003AF1 BC00000200          <2>  mov esp, 0x20000
   498 00003AF6 C74500EFBEADDE      <2>  mov [ebp], dword 0xdeadbeef
   498 00003AFD F9                  <2>  stc
   498 00003AFE FD                  <2>  std
   498 00003AFF FB                  <2>  sti
   498 00003B00 9C                  <2>  o%1 pushf
   498                              <2>  %if %1 = 16
   498                              <2>  cmp [ebp], dword 0x0603beef
   498                              <2>  %else
   498 00003B01 817D0003060000      <2>  cmp [ebp], dword 0x00000603
   498                              <2>  %endif
   498 00003B08 0F85819A0000        <2>  jne error
   498 00003B0E 81FCFCFF0100        <2>  cmp esp, push%1esp
   498 00003B14 0F85759A0000        <2>  jne error
   498                              <1>  testPopF 16
   498 00003B1A 6A00                <2>  push dword 0
   498 00003B1C 9D                  <2>  popfd
   498                              <2>  %if %1 = 16
   498 00003B1D 66C74502D708        <2>  mov [ebp+2], word 0x08D7
   498                              <2>  %else
   498                              <2>  mov [ebp], dword 0x000008D7
   498                              <2>  %endif
   498 00003B23 BCFEFF0100          <2>  mov esp, push%1esp
   498 00003B28 669D                <2>  o%1 popf
   498 00003B2A 0F815F9A0000        <2>  jno error
   498 00003B30 9F                  <2>  lahf
   498 00003B31 80FCD7              <2>  cmp ah, 0xD7
   498 00003B34 0F85559A0000        <2>  jne error
   498 00003B3A 81FC00000200        <2>  cmp esp, 0x20000
   498 00003B40 0F85499A0000        <2>  jne error
   498                              <1>  testPopF 32
   498 00003B46 6A00                <2>  push dword 0
   498 00003B48 9D                  <2>  popfd
   498                              <2>  %if %1 = 16
   498                              <2>  mov [ebp+2], word 0x08D7
   498                              <2>  %else
   498 00003B49 C74500D7080000      <2>  mov [ebp], dword 0x000008D7
   498                              <2>  %endif
   498 00003B50 BCFCFF0100          <2>  mov esp, push%1esp
   498 00003B55 9D                  <2>  o%1 popf
   498 00003B56 0F81339A0000        <2>  jno error
   498 00003B5C 9F                  <2>  lahf
   498 00003B5D 80FCD7              <2>  cmp ah, 0xD7
   498 00003B60 0F85299A0000        <2>  jne error
   498 00003B66 81FC00000200        <2>  cmp esp, 0x20000
   498 00003B6C 0F851D9A0000        <2>  jne error
   499                                  
   500                                  
   501                                  	; the stack works
   502                                  	; initialize it for the next tests
   503                                  	loadProtModeStack
   503 00003B72 2E0FB225[C71B0000]  <1>  lss esp, [cs:ptrSSprot]
   504                                  
   505                                  	advTestSegProt
   505                              <1>  advTestBase
   505                              <2>  %assign TEST_BASE1 TEST_BASE1+0x1000
   505                              <2>  %assign TEST_BASE2 TEST_BASE2+0x1000
   505                              <1>  updLDTDescBase D1_SEG_PROT,TEST_BASE1
   505 00003B7A 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   505 00003B81 83C318              <2>  add ebx, (%1) & 0xFFF8
   505 00003B84 66C743020050        <2>  mov word [ebx+2], (%2)&0xFFFF
   505 00003B8A C6430402            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   505 00003B8E C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   505                              <1>  updLDTDescBase D2_SEG_PROT,TEST_BASE2
   505 00003B92 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   505 00003B99 83C320              <2>  add ebx, (%1) & 0xFFF8
   505 00003B9C 66C743020050        <2>  mov word [ebx+2], (%2)&0xFFFF
   505 00003BA2 C6430406            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   505 00003BA6 C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   505 00003BAA 66BA1C00            <1>  mov dx, D1_SEG_PROT
   505 00003BAE 8EDA                <1>  mov ds, dx
   505 00003BB0 66BA2400            <1>  mov dx, D2_SEG_PROT
   505 00003BB4 8EC2                <1>  mov es, dx
   506                                  
   507                                  ;
   508                                  ;   Test user mode (ring 3) switching
   509                                  ;
   510                                  	POST A
   510 00003BB6 B00A                <1>  mov al, 0x%1
   510 00003BB8 66BA9001            <1>  mov dx, POST_PORT
   510 00003BBC EE                  <1>  out dx, al
   511 00003BBD E871E5FFFF              	call   clearTSS
   512 00003BC2 66B80C00                	mov    ax, D_SEG_PROT32
   513 00003BC6 8ED8                    	mov    ds, ax
   514 00003BC8 8EC0                    	mov    es, ax
   515 00003BCA 8EE0                    	mov    fs, ax
   516 00003BCC 8EE8                    	mov    gs, ax
   517 00003BCE E872E5FFFF              	call   switchToRing3
   518                                  	; CS must be CU_SEG_PROT32|3 (CPL=3)
   519 00003BD3 668CC8                  	mov    ax, cs
   520 00003BD6 6683F81B                	cmp    ax, CU_SEG_PROT32|3
   521 00003BDA 0F85AF990000            	jne    error
   522                                  	; data segments must be NULL
   523 00003BE0 668CD8                  	mov    ax, ds
   524 00003BE3 6683F800                	cmp    ax, 0
   525 00003BE7 0F85A2990000            	jne    error
   526 00003BED 668CC0                  	mov    ax, es
   527 00003BF0 6683F800                	cmp    ax, 0
   528 00003BF4 0F8595990000            	jne    error
   529 00003BFA 668CE0                  	mov    ax, fs
   530 00003BFD 6683F800                	cmp    ax, 0
   531 00003C01 0F8588990000            	jne    error
   532 00003C07 668CE8                  	mov    ax, gs
   533 00003C0A 6683F800                	cmp    ax, 0
   534 00003C0E 0F857B990000            	jne    error
   535                                  	; test some privileged ops
   536                                  	protModeFaultTest EX_GP, 0, cli
   536                              <1>  setProtModeIntGate %1, %%continue
   536 00003C14 60                  <2>  pushad
   536 00003C15 9C                  <2>  pushf
   536 00003C16 668CD8              <2>  mov ax, ds
   536 00003C19 6650                <2>  push ax
   536 00003C1B B80D000000          <2>  mov eax, %1
   536 00003C20 BF[6D3C0000]        <2>  mov edi, %2
   536                              <2>  %if %3 != -1
   536                              <2>  mov dx, %3
   536                              <2>  %else
   536 00003C25 668CCA              <2>  mov dx, cs
   536 00003C28 6683E207            <2>  and dx, 7
   536 00003C2C 66C1E20D            <2>  shl dx, 13
   536                              <2>  %endif
   536 00003C30 6683FA00            <2>  cmp dx, ACC_DPL_0
   536 00003C34 7507                <2>  jne %%dpl3
   536                              <2> %%dpl0:
   536 00003C36 BE10000000          <2>  mov esi, C_SEG_PROT32
   536 00003C3B EB05                <2>  jmp %%cont
   536                              <2> %%dpl3:
   536 00003C3D BE18000000          <2>  mov esi, CU_SEG_PROT32
   536                              <2> %%cont:
   536 00003C42 668CC9              <2>  mov cx, cs
   536 00003C45 66F7C10700          <2>  test cx, 7
   536 00003C4A 7509                <2>  jnz %%ring3
   536                              <2> %%ring0:
   536 00003C4C 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   536 00003C53 EB07                <2>  jmp %%call
   536                              <2> %%ring3:
   536 00003C55 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   536                              <2> %%call:
   536 00003C5C E8E3E0FFFF          <2>  call initIntGateProt
   536 00003C61 6658                <2>  pop ax
   536 00003C63 8ED8                <2>  mov ds, ax
   536 00003C65 9D                  <2>  popf
   536 00003C66 61                  <2>  popad
   536                              <1> %%test:
   536 00003C67 FA                  <1>  %3
   536 00003C68 E922990000          <1>  jmp error
   536                              <1> %%continue:
   536                              <1>  protModeExcCheck %1, %2, %%test
   536                              <2>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   536                              <2>  %assign exc_errcode 4
   536 00003C6D 36833C2400          <2>  cmp [ss:esp], dword %2
   536 00003C72 0F8517990000        <2>  jne error
   536                              <2>  %else
   536                              <2>  %assign exc_errcode 0
   536                              <2>  %endif
   536                              <2>  %if %4 != -1
   536                              <2>  cmp [ss:esp+exc_errcode+4], dword %4
   536                              <2>  jne error
   536                              <2>  %else
   536 00003C78 668CCB              <2>  mov bx, cs
   536 00003C7B 66F7C30700          <2>  test bx, 7
   536 00003C80 750E                <2>  jnz %%ring3
   536                              <2>  %%ring0:
   536 00003C82 36837C240810        <2>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   536 00003C88 0F8501990000        <2>  jne error
   536 00003C8E EB0C                <2>  jmp %%continue
   536                              <2>  %%ring3:
   536 00003C90 36837C24081B        <2>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   536 00003C96 0F85F3980000        <2>  jne error
   536                              <2>  %%continue:
   536                              <2>  %endif
   536 00003C9C 36817C2404-         <2>  cmp [ss:esp+exc_errcode], dword %3
   536 00003CA1 [673C0000]          <2>
   536 00003CA5 0F85E4980000        <2>  jne error
   536 00003CAB 83C410              <2>  add esp, 12+exc_errcode
   536                              <1>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   536 00003CAE 60                  <2>  pushad
   536 00003CAF 9C                  <2>  pushf
   536 00003CB0 668CD8              <2>  mov ax, ds
   536 00003CB3 6650                <2>  push ax
   536 00003CB5 B80D000000          <2>  mov eax, %1
   536 00003CBA BF[8FD50000]        <2>  mov edi, %2
   536                              <2>  %if %3 != -1
   536 00003CBF 66BA0000            <2>  mov dx, %3
   536                              <2>  %else
   536                              <2>  mov dx, cs
   536                              <2>  and dx, 7
   536                              <2>  shl dx, 13
   536                              <2>  %endif
   536 00003CC3 6683FA00            <2>  cmp dx, ACC_DPL_0
   536 00003CC7 7507                <2>  jne %%dpl3
   536                              <2> %%dpl0:
   536 00003CC9 BE10000000          <2>  mov esi, C_SEG_PROT32
   536 00003CCE EB05                <2>  jmp %%cont
   536                              <2> %%dpl3:
   536 00003CD0 BE18000000          <2>  mov esi, CU_SEG_PROT32
   536                              <2> %%cont:
   536 00003CD5 668CC9              <2>  mov cx, cs
   536 00003CD8 66F7C10700          <2>  test cx, 7
   536 00003CDD 7509                <2>  jnz %%ring3
   536                              <2> %%ring0:
   536 00003CDF 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   536 00003CE6 EB07                <2>  jmp %%call
   536                              <2> %%ring3:
   536 00003CE8 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   536                              <2> %%call:
   536 00003CEF E850E0FFFF          <2>  call initIntGateProt
   536 00003CF4 6658                <2>  pop ax
   536 00003CF6 8ED8                <2>  mov ds, ax
   536 00003CF8 9D                  <2>  popf
   536 00003CF9 61                  <2>  popad
   537                                  	protModeFaultTest EX_GP, 0, hlt
   537                              <1>  setProtModeIntGate %1, %%continue
   537 00003CFA 60                  <2>  pushad
   537 00003CFB 9C                  <2>  pushf
   537 00003CFC 668CD8              <2>  mov ax, ds
   537 00003CFF 6650                <2>  push ax
   537 00003D01 B80D000000          <2>  mov eax, %1
   537 00003D06 BF[533D0000]        <2>  mov edi, %2
   537                              <2>  %if %3 != -1
   537                              <2>  mov dx, %3
   537                              <2>  %else
   537 00003D0B 668CCA              <2>  mov dx, cs
   537 00003D0E 6683E207            <2>  and dx, 7
   537 00003D12 66C1E20D            <2>  shl dx, 13
   537                              <2>  %endif
   537 00003D16 6683FA00            <2>  cmp dx, ACC_DPL_0
   537 00003D1A 7507                <2>  jne %%dpl3
   537                              <2> %%dpl0:
   537 00003D1C BE10000000          <2>  mov esi, C_SEG_PROT32
   537 00003D21 EB05                <2>  jmp %%cont
   537                              <2> %%dpl3:
   537 00003D23 BE18000000          <2>  mov esi, CU_SEG_PROT32
   537                              <2> %%cont:
   537 00003D28 668CC9              <2>  mov cx, cs
   537 00003D2B 66F7C10700          <2>  test cx, 7
   537 00003D30 7509                <2>  jnz %%ring3
   537                              <2> %%ring0:
   537 00003D32 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   537 00003D39 EB07                <2>  jmp %%call
   537                              <2> %%ring3:
   537 00003D3B 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   537                              <2> %%call:
   537 00003D42 E8FDDFFFFF          <2>  call initIntGateProt
   537 00003D47 6658                <2>  pop ax
   537 00003D49 8ED8                <2>  mov ds, ax
   537 00003D4B 9D                  <2>  popf
   537 00003D4C 61                  <2>  popad
   537                              <1> %%test:
   537 00003D4D F4                  <1>  %3
   537 00003D4E E93C980000          <1>  jmp error
   537                              <1> %%continue:
   537                              <1>  protModeExcCheck %1, %2, %%test
   537                              <2>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   537                              <2>  %assign exc_errcode 4
   537 00003D53 36833C2400          <2>  cmp [ss:esp], dword %2
   537 00003D58 0F8531980000        <2>  jne error
   537                              <2>  %else
   537                              <2>  %assign exc_errcode 0
   537                              <2>  %endif
   537                              <2>  %if %4 != -1
   537                              <2>  cmp [ss:esp+exc_errcode+4], dword %4
   537                              <2>  jne error
   537                              <2>  %else
   537 00003D5E 668CCB              <2>  mov bx, cs
   537 00003D61 66F7C30700          <2>  test bx, 7
   537 00003D66 750E                <2>  jnz %%ring3
   537                              <2>  %%ring0:
   537 00003D68 36837C240810        <2>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   537 00003D6E 0F851B980000        <2>  jne error
   537 00003D74 EB0C                <2>  jmp %%continue
   537                              <2>  %%ring3:
   537 00003D76 36837C24081B        <2>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   537 00003D7C 0F850D980000        <2>  jne error
   537                              <2>  %%continue:
   537                              <2>  %endif
   537 00003D82 36817C2404-         <2>  cmp [ss:esp+exc_errcode], dword %3
   537 00003D87 [4D3D0000]          <2>
   537 00003D8B 0F85FE970000        <2>  jne error
   537 00003D91 83C410              <2>  add esp, 12+exc_errcode
   537                              <1>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   537 00003D94 60                  <2>  pushad
   537 00003D95 9C                  <2>  pushf
   537 00003D96 668CD8              <2>  mov ax, ds
   537 00003D99 6650                <2>  push ax
   537 00003D9B B80D000000          <2>  mov eax, %1
   537 00003DA0 BF[8FD50000]        <2>  mov edi, %2
   537                              <2>  %if %3 != -1
   537 00003DA5 66BA0000            <2>  mov dx, %3
   537                              <2>  %else
   537                              <2>  mov dx, cs
   537                              <2>  and dx, 7
   537                              <2>  shl dx, 13
   537                              <2>  %endif
   537 00003DA9 6683FA00            <2>  cmp dx, ACC_DPL_0
   537 00003DAD 7507                <2>  jne %%dpl3
   537                              <2> %%dpl0:
   537 00003DAF BE10000000          <2>  mov esi, C_SEG_PROT32
   537 00003DB4 EB05                <2>  jmp %%cont
   537                              <2> %%dpl3:
   537 00003DB6 BE18000000          <2>  mov esi, CU_SEG_PROT32
   537                              <2> %%cont:
   537 00003DBB 668CC9              <2>  mov cx, cs
   537 00003DBE 66F7C10700          <2>  test cx, 7
   537 00003DC3 7509                <2>  jnz %%ring3
   537                              <2> %%ring0:
   537 00003DC5 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   537 00003DCC EB07                <2>  jmp %%call
   537                              <2> %%ring3:
   537 00003DCE 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   537                              <2> %%call:
   537 00003DD5 E86ADFFFFF          <2>  call initIntGateProt
   537 00003DDA 6658                <2>  pop ax
   537 00003DDC 8ED8                <2>  mov ds, ax
   537 00003DDE 9D                  <2>  popf
   537 00003DDF 61                  <2>  popad
   538                                  	; switch back to ring 0
   539 00003DE0 E8B3E3FFFF              	call switchToRing0
   540                                  	; CS must be C_SEG_PROT32|0 (CPL=0)
   541 00003DE5 668CC8                  	mov    ax, cs
   542 00003DE8 6683F810                	cmp    ax, C_SEG_PROT32
   543 00003DEC 0F859D970000            	jne    error
   544                                  
   545                                  ;
   546                                  ;   Test of moving segment registers in protected mode
   547                                  ;
   548                                  	POST B
   548 00003DF2 B00B                <1>  mov al, 0x%1
   548 00003DF4 66BA9001            <1>  mov dx, POST_PORT
   548 00003DF8 EE                  <1>  out dx, al
   549                                  
   550                                  	testMovSegR_prot ds
   550 00003DF9 BAFFFFFFFF          <1>  mov edx, -1
   550                              <1>  %if %1 = cs
   550                              <1>  mov dx, C_SEG_PROT32
   550                              <1>  %else
   550 00003DFE 66BA1C00            <1>  mov dx, D1_SEG_PROT
   550                              <1>  %endif
   550                              <1> 
   550                              <1> 
   550                              <1>  %if %1 = cs
   550                              <1>  loadProtModeStack
   550                              <1>  protModeFaultTest EX_UD, 0, mov %1,dx
   550                              <1>  %else
   550 00003E02 8EDA                <1>  mov %1, dx
   550                              <1>  %endif
   550                              <1> 
   550                              <1> 
   550 00003E04 6631C0              <1>  xor ax, ax
   550 00003E07 668CD8              <1>  mov ax, %1
   550 00003E0A 6639D0              <1>  cmp ax, dx
   550 00003E0D 0F857C970000        <1>  jne error
   550                              <1> 
   550                              <1> 
   550 00003E13 B8FFFFFFFF          <1>  mov eax, -1
   550 00003E18 8CD8                <1>  mov eax, %1
   550                              <1> 
   550                              <1> 
   550 00003E1A 6639D0              <1>  cmp ax, dx
   550 00003E1D 0F856C970000        <1>  jne error
   550                              <1> 
   550                              <1> 
   550 00003E23 C70500000000FFFFFF- <1>  mov [0], dword -1
   550 00003E2C FF                  <1>
   550 00003E2D 8C1D00000000        <1>  mov [0], %1
   550 00003E33 391500000000        <1>  cmp [0], edx
   550 00003E39 0F8550970000        <1>  jne error
   550                              <1> 
   550                              <1> 
   550                              <1>  %if %1 = cs
   550                              <1>  protModeFaultTest EX_UD, 0, mov %1,[0]
   550                              <1>  %else
   550 00003E3F 668CD9              <1>  mov cx, ds
   550 00003E42 66B84400            <1>  mov ax, DTEST_SEG_PROT
   550 00003E46 8ED8                <1>  mov %1, ax
   550                              <1>  %if %1 = ds
   550 00003E48 8EC1                <1>  mov es, cx
   550 00003E4A 268E1D00000000      <1>  mov %1, [es:0]
   550                              <1>  %else
   550                              <1>  mov %1, [0]
   550                              <1>  %endif
   550 00003E51 668CD8              <1>  mov ax, %1
   550 00003E54 6639D0              <1>  cmp ax, dx
   550 00003E57 0F8532970000        <1>  jne error
   550                              <1>  %endif
   550                              <1> 
   550                              <1>  loadProtModeStack
   550 00003E5D 2E0FB225[C71B0000]  <2>  lss esp, [cs:ptrSSprot]
   550                              <1>  %if %1 = ss
   550                              <1> 
   550                              <1>  mov ax, NULL
   550                              <1>  protModeFaultTest EX_GP, 0, mov %1,ax
   550                              <1> 
   550                              <1>  mov ax, DPL1_SEG_PROT|1
   550                              <1>  protModeFaultTest EX_GP, DPL1_SEG_PROT, mov %1,ax
   550                              <1> 
   550                              <1>  mov ax, RO_SEG_PROT
   550                              <1>  protModeFaultTest EX_GP, RO_SEG_PROT, mov %1,ax
   550                              <1> 
   550                              <1>  mov ax, NP_SEG_PROT
   550                              <1>  protModeFaultTest EX_SS, NP_SEG_PROT, mov %1,ax
   550                              <1>  %endif
   550                              <1>  %if %1 != cs
   550                              <1> 
   550 00003E65 66B8F8FF            <1>  mov ax, 0xFFF8
   550                              <1>  protModeFaultTest EX_GP, 0xfff8, mov %1,ax
   550                              <2>  setProtModeIntGate %1, %%continue
   550 00003E69 60                  <3>  pushad
   550 00003E6A 9C                  <3>  pushf
   550 00003E6B 668CD8              <3>  mov ax, ds
   550 00003E6E 6650                <3>  push ax
   550 00003E70 B80D000000          <3>  mov eax, %1
   550 00003E75 BF[C33E0000]        <3>  mov edi, %2
   550                              <3>  %if %3 != -1
   550                              <3>  mov dx, %3
   550                              <3>  %else
   550 00003E7A 668CCA              <3>  mov dx, cs
   550 00003E7D 6683E207            <3>  and dx, 7
   550 00003E81 66C1E20D            <3>  shl dx, 13
   550                              <3>  %endif
   550 00003E85 6683FA00            <3>  cmp dx, ACC_DPL_0
   550 00003E89 7507                <3>  jne %%dpl3
   550                              <3> %%dpl0:
   550 00003E8B BE10000000          <3>  mov esi, C_SEG_PROT32
   550 00003E90 EB05                <3>  jmp %%cont
   550                              <3> %%dpl3:
   550 00003E92 BE18000000          <3>  mov esi, CU_SEG_PROT32
   550                              <3> %%cont:
   550 00003E97 668CC9              <3>  mov cx, cs
   550 00003E9A 66F7C10700          <3>  test cx, 7
   550 00003E9F 7509                <3>  jnz %%ring3
   550                              <3> %%ring0:
   550 00003EA1 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   550 00003EA8 EB07                <3>  jmp %%call
   550                              <3> %%ring3:
   550 00003EAA 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   550                              <3> %%call:
   550 00003EB1 E88EDEFFFF          <3>  call initIntGateProt
   550 00003EB6 6658                <3>  pop ax
   550 00003EB8 8ED8                <3>  mov ds, ax
   550 00003EBA 9D                  <3>  popf
   550 00003EBB 61                  <3>  popad
   550                              <2> %%test:
   550 00003EBC 8ED8                <2>  %3
   550 00003EBE E9CC960000          <2>  jmp error
   550                              <2> %%continue:
   550                              <2>  protModeExcCheck %1, %2, %%test
   550                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   550                              <3>  %assign exc_errcode 4
   550 00003EC3 36813C24F8FF0000    <3>  cmp [ss:esp], dword %2
   550 00003ECB 0F85BE960000        <3>  jne error
   550                              <3>  %else
   550                              <3>  %assign exc_errcode 0
   550                              <3>  %endif
   550                              <3>  %if %4 != -1
   550                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   550                              <3>  jne error
   550                              <3>  %else
   550 00003ED1 668CCB              <3>  mov bx, cs
   550 00003ED4 66F7C30700          <3>  test bx, 7
   550 00003ED9 750E                <3>  jnz %%ring3
   550                              <3>  %%ring0:
   550 00003EDB 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   550 00003EE1 0F85A8960000        <3>  jne error
   550 00003EE7 EB0C                <3>  jmp %%continue
   550                              <3>  %%ring3:
   550 00003EE9 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   550 00003EEF 0F859A960000        <3>  jne error
   550                              <3>  %%continue:
   550                              <3>  %endif
   550 00003EF5 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   550 00003EFA [BC3E0000]          <3>
   550 00003EFE 0F858B960000        <3>  jne error
   550 00003F04 83C410              <3>  add esp, 12+exc_errcode
   550                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   550 00003F07 60                  <3>  pushad
   550 00003F08 9C                  <3>  pushf
   550 00003F09 668CD8              <3>  mov ax, ds
   550 00003F0C 6650                <3>  push ax
   550 00003F0E B80D000000          <3>  mov eax, %1
   550 00003F13 BF[8FD50000]        <3>  mov edi, %2
   550                              <3>  %if %3 != -1
   550 00003F18 66BA0000            <3>  mov dx, %3
   550                              <3>  %else
   550                              <3>  mov dx, cs
   550                              <3>  and dx, 7
   550                              <3>  shl dx, 13
   550                              <3>  %endif
   550 00003F1C 6683FA00            <3>  cmp dx, ACC_DPL_0
   550 00003F20 7507                <3>  jne %%dpl3
   550                              <3> %%dpl0:
   550 00003F22 BE10000000          <3>  mov esi, C_SEG_PROT32
   550 00003F27 EB05                <3>  jmp %%cont
   550                              <3> %%dpl3:
   550 00003F29 BE18000000          <3>  mov esi, CU_SEG_PROT32
   550                              <3> %%cont:
   550 00003F2E 668CC9              <3>  mov cx, cs
   550 00003F31 66F7C10700          <3>  test cx, 7
   550 00003F36 7509                <3>  jnz %%ring3
   550                              <3> %%ring0:
   550 00003F38 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   550 00003F3F EB07                <3>  jmp %%call
   550                              <3> %%ring3:
   550 00003F41 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   550                              <3> %%call:
   550 00003F48 E8F7DDFFFF          <3>  call initIntGateProt
   550 00003F4D 6658                <3>  pop ax
   550 00003F4F 8ED8                <3>  mov ds, ax
   550 00003F51 9D                  <3>  popf
   550 00003F52 61                  <3>  popad
   550                              <1>  %if %1 != ss
   550                              <1> 
   550 00003F53 66B85400            <1>  mov ax, NP_SEG_PROT
   550                              <1>  protModeFaultTest EX_NP, NP_SEG_PROT, mov %1,ax
   550                              <2>  setProtModeIntGate %1, %%continue
   550 00003F57 60                  <3>  pushad
   550 00003F58 9C                  <3>  pushf
   550 00003F59 668CD8              <3>  mov ax, ds
   550 00003F5C 6650                <3>  push ax
   550 00003F5E B80B000000          <3>  mov eax, %1
   550 00003F63 BF[B13F0000]        <3>  mov edi, %2
   550                              <3>  %if %3 != -1
   550                              <3>  mov dx, %3
   550                              <3>  %else
   550 00003F68 668CCA              <3>  mov dx, cs
   550 00003F6B 6683E207            <3>  and dx, 7
   550 00003F6F 66C1E20D            <3>  shl dx, 13
   550                              <3>  %endif
   550 00003F73 6683FA00            <3>  cmp dx, ACC_DPL_0
   550 00003F77 7507                <3>  jne %%dpl3
   550                              <3> %%dpl0:
   550 00003F79 BE10000000          <3>  mov esi, C_SEG_PROT32
   550 00003F7E EB05                <3>  jmp %%cont
   550                              <3> %%dpl3:
   550 00003F80 BE18000000          <3>  mov esi, CU_SEG_PROT32
   550                              <3> %%cont:
   550 00003F85 668CC9              <3>  mov cx, cs
   550 00003F88 66F7C10700          <3>  test cx, 7
   550 00003F8D 7509                <3>  jnz %%ring3
   550                              <3> %%ring0:
   550 00003F8F 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   550 00003F96 EB07                <3>  jmp %%call
   550                              <3> %%ring3:
   550 00003F98 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   550                              <3> %%call:
   550 00003F9F E8A0DDFFFF          <3>  call initIntGateProt
   550 00003FA4 6658                <3>  pop ax
   550 00003FA6 8ED8                <3>  mov ds, ax
   550 00003FA8 9D                  <3>  popf
   550 00003FA9 61                  <3>  popad
   550                              <2> %%test:
   550 00003FAA 8ED8                <2>  %3
   550 00003FAC E9DE950000          <2>  jmp error
   550                              <2> %%continue:
   550                              <2>  protModeExcCheck %1, %2, %%test
   550                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   550                              <3>  %assign exc_errcode 4
   550 00003FB1 36833C2454          <3>  cmp [ss:esp], dword %2
   550 00003FB6 0F85D3950000        <3>  jne error
   550                              <3>  %else
   550                              <3>  %assign exc_errcode 0
   550                              <3>  %endif
   550                              <3>  %if %4 != -1
   550                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   550                              <3>  jne error
   550                              <3>  %else
   550 00003FBC 668CCB              <3>  mov bx, cs
   550 00003FBF 66F7C30700          <3>  test bx, 7
   550 00003FC4 750E                <3>  jnz %%ring3
   550                              <3>  %%ring0:
   550 00003FC6 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   550 00003FCC 0F85BD950000        <3>  jne error
   550 00003FD2 EB0C                <3>  jmp %%continue
   550                              <3>  %%ring3:
   550 00003FD4 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   550 00003FDA 0F85AF950000        <3>  jne error
   550                              <3>  %%continue:
   550                              <3>  %endif
   550 00003FE0 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   550 00003FE5 [AA3F0000]          <3>
   550 00003FE9 0F85A0950000        <3>  jne error
   550 00003FEF 83C410              <3>  add esp, 12+exc_errcode
   550                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   550 00003FF2 60                  <3>  pushad
   550 00003FF3 9C                  <3>  pushf
   550 00003FF4 668CD8              <3>  mov ax, ds
   550 00003FF7 6650                <3>  push ax
   550 00003FF9 B80B000000          <3>  mov eax, %1
   550 00003FFE BF[8FD50000]        <3>  mov edi, %2
   550                              <3>  %if %3 != -1
   550 00004003 66BA0000            <3>  mov dx, %3
   550                              <3>  %else
   550                              <3>  mov dx, cs
   550                              <3>  and dx, 7
   550                              <3>  shl dx, 13
   550                              <3>  %endif
   550 00004007 6683FA00            <3>  cmp dx, ACC_DPL_0
   550 0000400B 7507                <3>  jne %%dpl3
   550                              <3> %%dpl0:
   550 0000400D BE10000000          <3>  mov esi, C_SEG_PROT32
   550 00004012 EB05                <3>  jmp %%cont
   550                              <3> %%dpl3:
   550 00004014 BE18000000          <3>  mov esi, CU_SEG_PROT32
   550                              <3> %%cont:
   550 00004019 668CC9              <3>  mov cx, cs
   550 0000401C 66F7C10700          <3>  test cx, 7
   550 00004021 7509                <3>  jnz %%ring3
   550                              <3> %%ring0:
   550 00004023 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   550 0000402A EB07                <3>  jmp %%call
   550                              <3> %%ring3:
   550 0000402C 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   550                              <3> %%call:
   550 00004033 E80CDDFFFF          <3>  call initIntGateProt
   550 00004038 6658                <3>  pop ax
   550 0000403A 8ED8                <3>  mov ds, ax
   550 0000403C 9D                  <3>  popf
   550 0000403D 61                  <3>  popad
   550                              <1> 
   550 0000403E 66B85C00            <1>  mov ax, SYS_SEG_PROT
   550                              <1>  protModeFaultTest EX_GP, SYS_SEG_PROT, mov %1,ax
   550                              <2>  setProtModeIntGate %1, %%continue
   550 00004042 60                  <3>  pushad
   550 00004043 9C                  <3>  pushf
   550 00004044 668CD8              <3>  mov ax, ds
   550 00004047 6650                <3>  push ax
   550 00004049 B80D000000          <3>  mov eax, %1
   550 0000404E BF[9C400000]        <3>  mov edi, %2
   550                              <3>  %if %3 != -1
   550                              <3>  mov dx, %3
   550                              <3>  %else
   550 00004053 668CCA              <3>  mov dx, cs
   550 00004056 6683E207            <3>  and dx, 7
   550 0000405A 66C1E20D            <3>  shl dx, 13
   550                              <3>  %endif
   550 0000405E 6683FA00            <3>  cmp dx, ACC_DPL_0
   550 00004062 7507                <3>  jne %%dpl3
   550                              <3> %%dpl0:
   550 00004064 BE10000000          <3>  mov esi, C_SEG_PROT32
   550 00004069 EB05                <3>  jmp %%cont
   550                              <3> %%dpl3:
   550 0000406B BE18000000          <3>  mov esi, CU_SEG_PROT32
   550                              <3> %%cont:
   550 00004070 668CC9              <3>  mov cx, cs
   550 00004073 66F7C10700          <3>  test cx, 7
   550 00004078 7509                <3>  jnz %%ring3
   550                              <3> %%ring0:
   550 0000407A 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   550 00004081 EB07                <3>  jmp %%call
   550                              <3> %%ring3:
   550 00004083 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   550                              <3> %%call:
   550 0000408A E8B5DCFFFF          <3>  call initIntGateProt
   550 0000408F 6658                <3>  pop ax
   550 00004091 8ED8                <3>  mov ds, ax
   550 00004093 9D                  <3>  popf
   550 00004094 61                  <3>  popad
   550                              <2> %%test:
   550 00004095 8ED8                <2>  %3
   550 00004097 E9F3940000          <2>  jmp error
   550                              <2> %%continue:
   550                              <2>  protModeExcCheck %1, %2, %%test
   550                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   550                              <3>  %assign exc_errcode 4
   550 0000409C 36833C245C          <3>  cmp [ss:esp], dword %2
   550 000040A1 0F85E8940000        <3>  jne error
   550                              <3>  %else
   550                              <3>  %assign exc_errcode 0
   550                              <3>  %endif
   550                              <3>  %if %4 != -1
   550                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   550                              <3>  jne error
   550                              <3>  %else
   550 000040A7 668CCB              <3>  mov bx, cs
   550 000040AA 66F7C30700          <3>  test bx, 7
   550 000040AF 750E                <3>  jnz %%ring3
   550                              <3>  %%ring0:
   550 000040B1 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   550 000040B7 0F85D2940000        <3>  jne error
   550 000040BD EB0C                <3>  jmp %%continue
   550                              <3>  %%ring3:
   550 000040BF 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   550 000040C5 0F85C4940000        <3>  jne error
   550                              <3>  %%continue:
   550                              <3>  %endif
   550 000040CB 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   550 000040D0 [95400000]          <3>
   550 000040D4 0F85B5940000        <3>  jne error
   550 000040DA 83C410              <3>  add esp, 12+exc_errcode
   550                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   550 000040DD 60                  <3>  pushad
   550 000040DE 9C                  <3>  pushf
   550 000040DF 668CD8              <3>  mov ax, ds
   550 000040E2 6650                <3>  push ax
   550 000040E4 B80D000000          <3>  mov eax, %1
   550 000040E9 BF[8FD50000]        <3>  mov edi, %2
   550                              <3>  %if %3 != -1
   550 000040EE 66BA0000            <3>  mov dx, %3
   550                              <3>  %else
   550                              <3>  mov dx, cs
   550                              <3>  and dx, 7
   550                              <3>  shl dx, 13
   550                              <3>  %endif
   550 000040F2 6683FA00            <3>  cmp dx, ACC_DPL_0
   550 000040F6 7507                <3>  jne %%dpl3
   550                              <3> %%dpl0:
   550 000040F8 BE10000000          <3>  mov esi, C_SEG_PROT32
   550 000040FD EB05                <3>  jmp %%cont
   550                              <3> %%dpl3:
   550 000040FF BE18000000          <3>  mov esi, CU_SEG_PROT32
   550                              <3> %%cont:
   550 00004104 668CC9              <3>  mov cx, cs
   550 00004107 66F7C10700          <3>  test cx, 7
   550 0000410C 7509                <3>  jnz %%ring3
   550                              <3> %%ring0:
   550 0000410E 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   550 00004115 EB07                <3>  jmp %%call
   550                              <3> %%ring3:
   550 00004117 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   550                              <3> %%call:
   550 0000411E E821DCFFFF          <3>  call initIntGateProt
   550 00004123 6658                <3>  pop ax
   550 00004125 8ED8                <3>  mov ds, ax
   550 00004127 9D                  <3>  popf
   550 00004128 61                  <3>  popad
   550                              <1> 
   550                              <1> 
   550 00004129 E817E0FFFF          <1>  call switchToRing3
   550 0000412E 66B84700            <1>  mov ax, DTEST_SEG_PROT|3
   550                              <1>  protModeFaultTest EX_GP, DTEST_SEG_PROT, mov %1,ax
   550                              <2>  setProtModeIntGate %1, %%continue
   550 00004132 60                  <3>  pushad
   550 00004133 9C                  <3>  pushf
   550 00004134 668CD8              <3>  mov ax, ds
   550 00004137 6650                <3>  push ax
   550 00004139 B80D000000          <3>  mov eax, %1
   550 0000413E BF[8C410000]        <3>  mov edi, %2
   550                              <3>  %if %3 != -1
   550                              <3>  mov dx, %3
   550                              <3>  %else
   550 00004143 668CCA              <3>  mov dx, cs
   550 00004146 6683E207            <3>  and dx, 7
   550 0000414A 66C1E20D            <3>  shl dx, 13
   550                              <3>  %endif
   550 0000414E 6683FA00            <3>  cmp dx, ACC_DPL_0
   550 00004152 7507                <3>  jne %%dpl3
   550                              <3> %%dpl0:
   550 00004154 BE10000000          <3>  mov esi, C_SEG_PROT32
   550 00004159 EB05                <3>  jmp %%cont
   550                              <3> %%dpl3:
   550 0000415B BE18000000          <3>  mov esi, CU_SEG_PROT32
   550                              <3> %%cont:
   550 00004160 668CC9              <3>  mov cx, cs
   550 00004163 66F7C10700          <3>  test cx, 7
   550 00004168 7509                <3>  jnz %%ring3
   550                              <3> %%ring0:
   550 0000416A 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   550 00004171 EB07                <3>  jmp %%call
   550                              <3> %%ring3:
   550 00004173 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   550                              <3> %%call:
   550 0000417A E8C5DBFFFF          <3>  call initIntGateProt
   550 0000417F 6658                <3>  pop ax
   550 00004181 8ED8                <3>  mov ds, ax
   550 00004183 9D                  <3>  popf
   550 00004184 61                  <3>  popad
   550                              <2> %%test:
   550 00004185 8ED8                <2>  %3
   550 00004187 E903940000          <2>  jmp error
   550                              <2> %%continue:
   550                              <2>  protModeExcCheck %1, %2, %%test
   550                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   550                              <3>  %assign exc_errcode 4
   550 0000418C 36833C2444          <3>  cmp [ss:esp], dword %2
   550 00004191 0F85F8930000        <3>  jne error
   550                              <3>  %else
   550                              <3>  %assign exc_errcode 0
   550                              <3>  %endif
   550                              <3>  %if %4 != -1
   550                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   550                              <3>  jne error
   550                              <3>  %else
   550 00004197 668CCB              <3>  mov bx, cs
   550 0000419A 66F7C30700          <3>  test bx, 7
   550 0000419F 750E                <3>  jnz %%ring3
   550                              <3>  %%ring0:
   550 000041A1 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   550 000041A7 0F85E2930000        <3>  jne error
   550 000041AD EB0C                <3>  jmp %%continue
   550                              <3>  %%ring3:
   550 000041AF 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   550 000041B5 0F85D4930000        <3>  jne error
   550                              <3>  %%continue:
   550                              <3>  %endif
   550 000041BB 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   550 000041C0 [85410000]          <3>
   550 000041C4 0F85C5930000        <3>  jne error
   550 000041CA 83C410              <3>  add esp, 12+exc_errcode
   550                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   550 000041CD 60                  <3>  pushad
   550 000041CE 9C                  <3>  pushf
   550 000041CF 668CD8              <3>  mov ax, ds
   550 000041D2 6650                <3>  push ax
   550 000041D4 B80D000000          <3>  mov eax, %1
   550 000041D9 BF[8FD50000]        <3>  mov edi, %2
   550                              <3>  %if %3 != -1
   550 000041DE 66BA0000            <3>  mov dx, %3
   550                              <3>  %else
   550                              <3>  mov dx, cs
   550                              <3>  and dx, 7
   550                              <3>  shl dx, 13
   550                              <3>  %endif
   550 000041E2 6683FA00            <3>  cmp dx, ACC_DPL_0
   550 000041E6 7507                <3>  jne %%dpl3
   550                              <3> %%dpl0:
   550 000041E8 BE10000000          <3>  mov esi, C_SEG_PROT32
   550 000041ED EB05                <3>  jmp %%cont
   550                              <3> %%dpl3:
   550 000041EF BE18000000          <3>  mov esi, CU_SEG_PROT32
   550                              <3> %%cont:
   550 000041F4 668CC9              <3>  mov cx, cs
   550 000041F7 66F7C10700          <3>  test cx, 7
   550 000041FC 7509                <3>  jnz %%ring3
   550                              <3> %%ring0:
   550 000041FE 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   550 00004205 EB07                <3>  jmp %%call
   550                              <3> %%ring3:
   550 00004207 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   550                              <3> %%call:
   550 0000420E E831DBFFFF          <3>  call initIntGateProt
   550 00004213 6658                <3>  pop ax
   550 00004215 8ED8                <3>  mov ds, ax
   550 00004217 9D                  <3>  popf
   550 00004218 61                  <3>  popad
   550 00004219 E87ADFFFFF          <1>  call switchToRing0
   550                              <1>  %endif
   550                              <1>  %endif
   550                              <1> 
   551                                  	testMovSegR_prot es
   551 0000421E BAFFFFFFFF          <1>  mov edx, -1
   551                              <1>  %if %1 = cs
   551                              <1>  mov dx, C_SEG_PROT32
   551                              <1>  %else
   551 00004223 66BA1C00            <1>  mov dx, D1_SEG_PROT
   551                              <1>  %endif
   551                              <1> 
   551                              <1> 
   551                              <1>  %if %1 = cs
   551                              <1>  loadProtModeStack
   551                              <1>  protModeFaultTest EX_UD, 0, mov %1,dx
   551                              <1>  %else
   551 00004227 8EC2                <1>  mov %1, dx
   551                              <1>  %endif
   551                              <1> 
   551                              <1> 
   551 00004229 6631C0              <1>  xor ax, ax
   551 0000422C 668CC0              <1>  mov ax, %1
   551 0000422F 6639D0              <1>  cmp ax, dx
   551 00004232 0F8557930000        <1>  jne error
   551                              <1> 
   551                              <1> 
   551 00004238 B8FFFFFFFF          <1>  mov eax, -1
   551 0000423D 8CC0                <1>  mov eax, %1
   551                              <1> 
   551                              <1> 
   551 0000423F 6639D0              <1>  cmp ax, dx
   551 00004242 0F8547930000        <1>  jne error
   551                              <1> 
   551                              <1> 
   551 00004248 C70500000000FFFFFF- <1>  mov [0], dword -1
   551 00004251 FF                  <1>
   551 00004252 8C0500000000        <1>  mov [0], %1
   551 00004258 391500000000        <1>  cmp [0], edx
   551 0000425E 0F852B930000        <1>  jne error
   551                              <1> 
   551                              <1> 
   551                              <1>  %if %1 = cs
   551                              <1>  protModeFaultTest EX_UD, 0, mov %1,[0]
   551                              <1>  %else
   551 00004264 668CD9              <1>  mov cx, ds
   551 00004267 66B84400            <1>  mov ax, DTEST_SEG_PROT
   551 0000426B 8EC0                <1>  mov %1, ax
   551                              <1>  %if %1 = ds
   551                              <1>  mov es, cx
   551                              <1>  mov %1, [es:0]
   551                              <1>  %else
   551 0000426D 8E0500000000        <1>  mov %1, [0]
   551                              <1>  %endif
   551 00004273 668CC0              <1>  mov ax, %1
   551 00004276 6639D0              <1>  cmp ax, dx
   551 00004279 0F8510930000        <1>  jne error
   551                              <1>  %endif
   551                              <1> 
   551                              <1>  loadProtModeStack
   551 0000427F 2E0FB225[C71B0000]  <2>  lss esp, [cs:ptrSSprot]
   551                              <1>  %if %1 = ss
   551                              <1> 
   551                              <1>  mov ax, NULL
   551                              <1>  protModeFaultTest EX_GP, 0, mov %1,ax
   551                              <1> 
   551                              <1>  mov ax, DPL1_SEG_PROT|1
   551                              <1>  protModeFaultTest EX_GP, DPL1_SEG_PROT, mov %1,ax
   551                              <1> 
   551                              <1>  mov ax, RO_SEG_PROT
   551                              <1>  protModeFaultTest EX_GP, RO_SEG_PROT, mov %1,ax
   551                              <1> 
   551                              <1>  mov ax, NP_SEG_PROT
   551                              <1>  protModeFaultTest EX_SS, NP_SEG_PROT, mov %1,ax
   551                              <1>  %endif
   551                              <1>  %if %1 != cs
   551                              <1> 
   551 00004287 66B8F8FF            <1>  mov ax, 0xFFF8
   551                              <1>  protModeFaultTest EX_GP, 0xfff8, mov %1,ax
   551                              <2>  setProtModeIntGate %1, %%continue
   551 0000428B 60                  <3>  pushad
   551 0000428C 9C                  <3>  pushf
   551 0000428D 668CD8              <3>  mov ax, ds
   551 00004290 6650                <3>  push ax
   551 00004292 B80D000000          <3>  mov eax, %1
   551 00004297 BF[E5420000]        <3>  mov edi, %2
   551                              <3>  %if %3 != -1
   551                              <3>  mov dx, %3
   551                              <3>  %else
   551 0000429C 668CCA              <3>  mov dx, cs
   551 0000429F 6683E207            <3>  and dx, 7
   551 000042A3 66C1E20D            <3>  shl dx, 13
   551                              <3>  %endif
   551 000042A7 6683FA00            <3>  cmp dx, ACC_DPL_0
   551 000042AB 7507                <3>  jne %%dpl3
   551                              <3> %%dpl0:
   551 000042AD BE10000000          <3>  mov esi, C_SEG_PROT32
   551 000042B2 EB05                <3>  jmp %%cont
   551                              <3> %%dpl3:
   551 000042B4 BE18000000          <3>  mov esi, CU_SEG_PROT32
   551                              <3> %%cont:
   551 000042B9 668CC9              <3>  mov cx, cs
   551 000042BC 66F7C10700          <3>  test cx, 7
   551 000042C1 7509                <3>  jnz %%ring3
   551                              <3> %%ring0:
   551 000042C3 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   551 000042CA EB07                <3>  jmp %%call
   551                              <3> %%ring3:
   551 000042CC 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   551                              <3> %%call:
   551 000042D3 E86CDAFFFF          <3>  call initIntGateProt
   551 000042D8 6658                <3>  pop ax
   551 000042DA 8ED8                <3>  mov ds, ax
   551 000042DC 9D                  <3>  popf
   551 000042DD 61                  <3>  popad
   551                              <2> %%test:
   551 000042DE 8EC0                <2>  %3
   551 000042E0 E9AA920000          <2>  jmp error
   551                              <2> %%continue:
   551                              <2>  protModeExcCheck %1, %2, %%test
   551                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   551                              <3>  %assign exc_errcode 4
   551 000042E5 36813C24F8FF0000    <3>  cmp [ss:esp], dword %2
   551 000042ED 0F859C920000        <3>  jne error
   551                              <3>  %else
   551                              <3>  %assign exc_errcode 0
   551                              <3>  %endif
   551                              <3>  %if %4 != -1
   551                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   551                              <3>  jne error
   551                              <3>  %else
   551 000042F3 668CCB              <3>  mov bx, cs
   551 000042F6 66F7C30700          <3>  test bx, 7
   551 000042FB 750E                <3>  jnz %%ring3
   551                              <3>  %%ring0:
   551 000042FD 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   551 00004303 0F8586920000        <3>  jne error
   551 00004309 EB0C                <3>  jmp %%continue
   551                              <3>  %%ring3:
   551 0000430B 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   551 00004311 0F8578920000        <3>  jne error
   551                              <3>  %%continue:
   551                              <3>  %endif
   551 00004317 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   551 0000431C [DE420000]          <3>
   551 00004320 0F8569920000        <3>  jne error
   551 00004326 83C410              <3>  add esp, 12+exc_errcode
   551                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   551 00004329 60                  <3>  pushad
   551 0000432A 9C                  <3>  pushf
   551 0000432B 668CD8              <3>  mov ax, ds
   551 0000432E 6650                <3>  push ax
   551 00004330 B80D000000          <3>  mov eax, %1
   551 00004335 BF[8FD50000]        <3>  mov edi, %2
   551                              <3>  %if %3 != -1
   551 0000433A 66BA0000            <3>  mov dx, %3
   551                              <3>  %else
   551                              <3>  mov dx, cs
   551                              <3>  and dx, 7
   551                              <3>  shl dx, 13
   551                              <3>  %endif
   551 0000433E 6683FA00            <3>  cmp dx, ACC_DPL_0
   551 00004342 7507                <3>  jne %%dpl3
   551                              <3> %%dpl0:
   551 00004344 BE10000000          <3>  mov esi, C_SEG_PROT32
   551 00004349 EB05                <3>  jmp %%cont
   551                              <3> %%dpl3:
   551 0000434B BE18000000          <3>  mov esi, CU_SEG_PROT32
   551                              <3> %%cont:
   551 00004350 668CC9              <3>  mov cx, cs
   551 00004353 66F7C10700          <3>  test cx, 7
   551 00004358 7509                <3>  jnz %%ring3
   551                              <3> %%ring0:
   551 0000435A 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   551 00004361 EB07                <3>  jmp %%call
   551                              <3> %%ring3:
   551 00004363 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   551                              <3> %%call:
   551 0000436A E8D5D9FFFF          <3>  call initIntGateProt
   551 0000436F 6658                <3>  pop ax
   551 00004371 8ED8                <3>  mov ds, ax
   551 00004373 9D                  <3>  popf
   551 00004374 61                  <3>  popad
   551                              <1>  %if %1 != ss
   551                              <1> 
   551 00004375 66B85400            <1>  mov ax, NP_SEG_PROT
   551                              <1>  protModeFaultTest EX_NP, NP_SEG_PROT, mov %1,ax
   551                              <2>  setProtModeIntGate %1, %%continue
   551 00004379 60                  <3>  pushad
   551 0000437A 9C                  <3>  pushf
   551 0000437B 668CD8              <3>  mov ax, ds
   551 0000437E 6650                <3>  push ax
   551 00004380 B80B000000          <3>  mov eax, %1
   551 00004385 BF[D3430000]        <3>  mov edi, %2
   551                              <3>  %if %3 != -1
   551                              <3>  mov dx, %3
   551                              <3>  %else
   551 0000438A 668CCA              <3>  mov dx, cs
   551 0000438D 6683E207            <3>  and dx, 7
   551 00004391 66C1E20D            <3>  shl dx, 13
   551                              <3>  %endif
   551 00004395 6683FA00            <3>  cmp dx, ACC_DPL_0
   551 00004399 7507                <3>  jne %%dpl3
   551                              <3> %%dpl0:
   551 0000439B BE10000000          <3>  mov esi, C_SEG_PROT32
   551 000043A0 EB05                <3>  jmp %%cont
   551                              <3> %%dpl3:
   551 000043A2 BE18000000          <3>  mov esi, CU_SEG_PROT32
   551                              <3> %%cont:
   551 000043A7 668CC9              <3>  mov cx, cs
   551 000043AA 66F7C10700          <3>  test cx, 7
   551 000043AF 7509                <3>  jnz %%ring3
   551                              <3> %%ring0:
   551 000043B1 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   551 000043B8 EB07                <3>  jmp %%call
   551                              <3> %%ring3:
   551 000043BA 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   551                              <3> %%call:
   551 000043C1 E87ED9FFFF          <3>  call initIntGateProt
   551 000043C6 6658                <3>  pop ax
   551 000043C8 8ED8                <3>  mov ds, ax
   551 000043CA 9D                  <3>  popf
   551 000043CB 61                  <3>  popad
   551                              <2> %%test:
   551 000043CC 8EC0                <2>  %3
   551 000043CE E9BC910000          <2>  jmp error
   551                              <2> %%continue:
   551                              <2>  protModeExcCheck %1, %2, %%test
   551                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   551                              <3>  %assign exc_errcode 4
   551 000043D3 36833C2454          <3>  cmp [ss:esp], dword %2
   551 000043D8 0F85B1910000        <3>  jne error
   551                              <3>  %else
   551                              <3>  %assign exc_errcode 0
   551                              <3>  %endif
   551                              <3>  %if %4 != -1
   551                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   551                              <3>  jne error
   551                              <3>  %else
   551 000043DE 668CCB              <3>  mov bx, cs
   551 000043E1 66F7C30700          <3>  test bx, 7
   551 000043E6 750E                <3>  jnz %%ring3
   551                              <3>  %%ring0:
   551 000043E8 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   551 000043EE 0F859B910000        <3>  jne error
   551 000043F4 EB0C                <3>  jmp %%continue
   551                              <3>  %%ring3:
   551 000043F6 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   551 000043FC 0F858D910000        <3>  jne error
   551                              <3>  %%continue:
   551                              <3>  %endif
   551 00004402 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   551 00004407 [CC430000]          <3>
   551 0000440B 0F857E910000        <3>  jne error
   551 00004411 83C410              <3>  add esp, 12+exc_errcode
   551                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   551 00004414 60                  <3>  pushad
   551 00004415 9C                  <3>  pushf
   551 00004416 668CD8              <3>  mov ax, ds
   551 00004419 6650                <3>  push ax
   551 0000441B B80B000000          <3>  mov eax, %1
   551 00004420 BF[8FD50000]        <3>  mov edi, %2
   551                              <3>  %if %3 != -1
   551 00004425 66BA0000            <3>  mov dx, %3
   551                              <3>  %else
   551                              <3>  mov dx, cs
   551                              <3>  and dx, 7
   551                              <3>  shl dx, 13
   551                              <3>  %endif
   551 00004429 6683FA00            <3>  cmp dx, ACC_DPL_0
   551 0000442D 7507                <3>  jne %%dpl3
   551                              <3> %%dpl0:
   551 0000442F BE10000000          <3>  mov esi, C_SEG_PROT32
   551 00004434 EB05                <3>  jmp %%cont
   551                              <3> %%dpl3:
   551 00004436 BE18000000          <3>  mov esi, CU_SEG_PROT32
   551                              <3> %%cont:
   551 0000443B 668CC9              <3>  mov cx, cs
   551 0000443E 66F7C10700          <3>  test cx, 7
   551 00004443 7509                <3>  jnz %%ring3
   551                              <3> %%ring0:
   551 00004445 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   551 0000444C EB07                <3>  jmp %%call
   551                              <3> %%ring3:
   551 0000444E 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   551                              <3> %%call:
   551 00004455 E8EAD8FFFF          <3>  call initIntGateProt
   551 0000445A 6658                <3>  pop ax
   551 0000445C 8ED8                <3>  mov ds, ax
   551 0000445E 9D                  <3>  popf
   551 0000445F 61                  <3>  popad
   551                              <1> 
   551 00004460 66B85C00            <1>  mov ax, SYS_SEG_PROT
   551                              <1>  protModeFaultTest EX_GP, SYS_SEG_PROT, mov %1,ax
   551                              <2>  setProtModeIntGate %1, %%continue
   551 00004464 60                  <3>  pushad
   551 00004465 9C                  <3>  pushf
   551 00004466 668CD8              <3>  mov ax, ds
   551 00004469 6650                <3>  push ax
   551 0000446B B80D000000          <3>  mov eax, %1
   551 00004470 BF[BE440000]        <3>  mov edi, %2
   551                              <3>  %if %3 != -1
   551                              <3>  mov dx, %3
   551                              <3>  %else
   551 00004475 668CCA              <3>  mov dx, cs
   551 00004478 6683E207            <3>  and dx, 7
   551 0000447C 66C1E20D            <3>  shl dx, 13
   551                              <3>  %endif
   551 00004480 6683FA00            <3>  cmp dx, ACC_DPL_0
   551 00004484 7507                <3>  jne %%dpl3
   551                              <3> %%dpl0:
   551 00004486 BE10000000          <3>  mov esi, C_SEG_PROT32
   551 0000448B EB05                <3>  jmp %%cont
   551                              <3> %%dpl3:
   551 0000448D BE18000000          <3>  mov esi, CU_SEG_PROT32
   551                              <3> %%cont:
   551 00004492 668CC9              <3>  mov cx, cs
   551 00004495 66F7C10700          <3>  test cx, 7
   551 0000449A 7509                <3>  jnz %%ring3
   551                              <3> %%ring0:
   551 0000449C 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   551 000044A3 EB07                <3>  jmp %%call
   551                              <3> %%ring3:
   551 000044A5 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   551                              <3> %%call:
   551 000044AC E893D8FFFF          <3>  call initIntGateProt
   551 000044B1 6658                <3>  pop ax
   551 000044B3 8ED8                <3>  mov ds, ax
   551 000044B5 9D                  <3>  popf
   551 000044B6 61                  <3>  popad
   551                              <2> %%test:
   551 000044B7 8EC0                <2>  %3
   551 000044B9 E9D1900000          <2>  jmp error
   551                              <2> %%continue:
   551                              <2>  protModeExcCheck %1, %2, %%test
   551                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   551                              <3>  %assign exc_errcode 4
   551 000044BE 36833C245C          <3>  cmp [ss:esp], dword %2
   551 000044C3 0F85C6900000        <3>  jne error
   551                              <3>  %else
   551                              <3>  %assign exc_errcode 0
   551                              <3>  %endif
   551                              <3>  %if %4 != -1
   551                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   551                              <3>  jne error
   551                              <3>  %else
   551 000044C9 668CCB              <3>  mov bx, cs
   551 000044CC 66F7C30700          <3>  test bx, 7
   551 000044D1 750E                <3>  jnz %%ring3
   551                              <3>  %%ring0:
   551 000044D3 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   551 000044D9 0F85B0900000        <3>  jne error
   551 000044DF EB0C                <3>  jmp %%continue
   551                              <3>  %%ring3:
   551 000044E1 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   551 000044E7 0F85A2900000        <3>  jne error
   551                              <3>  %%continue:
   551                              <3>  %endif
   551 000044ED 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   551 000044F2 [B7440000]          <3>
   551 000044F6 0F8593900000        <3>  jne error
   551 000044FC 83C410              <3>  add esp, 12+exc_errcode
   551                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   551 000044FF 60                  <3>  pushad
   551 00004500 9C                  <3>  pushf
   551 00004501 668CD8              <3>  mov ax, ds
   551 00004504 6650                <3>  push ax
   551 00004506 B80D000000          <3>  mov eax, %1
   551 0000450B BF[8FD50000]        <3>  mov edi, %2
   551                              <3>  %if %3 != -1
   551 00004510 66BA0000            <3>  mov dx, %3
   551                              <3>  %else
   551                              <3>  mov dx, cs
   551                              <3>  and dx, 7
   551                              <3>  shl dx, 13
   551                              <3>  %endif
   551 00004514 6683FA00            <3>  cmp dx, ACC_DPL_0
   551 00004518 7507                <3>  jne %%dpl3
   551                              <3> %%dpl0:
   551 0000451A BE10000000          <3>  mov esi, C_SEG_PROT32
   551 0000451F EB05                <3>  jmp %%cont
   551                              <3> %%dpl3:
   551 00004521 BE18000000          <3>  mov esi, CU_SEG_PROT32
   551                              <3> %%cont:
   551 00004526 668CC9              <3>  mov cx, cs
   551 00004529 66F7C10700          <3>  test cx, 7
   551 0000452E 7509                <3>  jnz %%ring3
   551                              <3> %%ring0:
   551 00004530 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   551 00004537 EB07                <3>  jmp %%call
   551                              <3> %%ring3:
   551 00004539 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   551                              <3> %%call:
   551 00004540 E8FFD7FFFF          <3>  call initIntGateProt
   551 00004545 6658                <3>  pop ax
   551 00004547 8ED8                <3>  mov ds, ax
   551 00004549 9D                  <3>  popf
   551 0000454A 61                  <3>  popad
   551                              <1> 
   551                              <1> 
   551 0000454B E8F5DBFFFF          <1>  call switchToRing3
   551 00004550 66B84700            <1>  mov ax, DTEST_SEG_PROT|3
   551                              <1>  protModeFaultTest EX_GP, DTEST_SEG_PROT, mov %1,ax
   551                              <2>  setProtModeIntGate %1, %%continue
   551 00004554 60                  <3>  pushad
   551 00004555 9C                  <3>  pushf
   551 00004556 668CD8              <3>  mov ax, ds
   551 00004559 6650                <3>  push ax
   551 0000455B B80D000000          <3>  mov eax, %1
   551 00004560 BF[AE450000]        <3>  mov edi, %2
   551                              <3>  %if %3 != -1
   551                              <3>  mov dx, %3
   551                              <3>  %else
   551 00004565 668CCA              <3>  mov dx, cs
   551 00004568 6683E207            <3>  and dx, 7
   551 0000456C 66C1E20D            <3>  shl dx, 13
   551                              <3>  %endif
   551 00004570 6683FA00            <3>  cmp dx, ACC_DPL_0
   551 00004574 7507                <3>  jne %%dpl3
   551                              <3> %%dpl0:
   551 00004576 BE10000000          <3>  mov esi, C_SEG_PROT32
   551 0000457B EB05                <3>  jmp %%cont
   551                              <3> %%dpl3:
   551 0000457D BE18000000          <3>  mov esi, CU_SEG_PROT32
   551                              <3> %%cont:
   551 00004582 668CC9              <3>  mov cx, cs
   551 00004585 66F7C10700          <3>  test cx, 7
   551 0000458A 7509                <3>  jnz %%ring3
   551                              <3> %%ring0:
   551 0000458C 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   551 00004593 EB07                <3>  jmp %%call
   551                              <3> %%ring3:
   551 00004595 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   551                              <3> %%call:
   551 0000459C E8A3D7FFFF          <3>  call initIntGateProt
   551 000045A1 6658                <3>  pop ax
   551 000045A3 8ED8                <3>  mov ds, ax
   551 000045A5 9D                  <3>  popf
   551 000045A6 61                  <3>  popad
   551                              <2> %%test:
   551 000045A7 8EC0                <2>  %3
   551 000045A9 E9E18F0000          <2>  jmp error
   551                              <2> %%continue:
   551                              <2>  protModeExcCheck %1, %2, %%test
   551                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   551                              <3>  %assign exc_errcode 4
   551 000045AE 36833C2444          <3>  cmp [ss:esp], dword %2
   551 000045B3 0F85D68F0000        <3>  jne error
   551                              <3>  %else
   551                              <3>  %assign exc_errcode 0
   551                              <3>  %endif
   551                              <3>  %if %4 != -1
   551                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   551                              <3>  jne error
   551                              <3>  %else
   551 000045B9 668CCB              <3>  mov bx, cs
   551 000045BC 66F7C30700          <3>  test bx, 7
   551 000045C1 750E                <3>  jnz %%ring3
   551                              <3>  %%ring0:
   551 000045C3 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   551 000045C9 0F85C08F0000        <3>  jne error
   551 000045CF EB0C                <3>  jmp %%continue
   551                              <3>  %%ring3:
   551 000045D1 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   551 000045D7 0F85B28F0000        <3>  jne error
   551                              <3>  %%continue:
   551                              <3>  %endif
   551 000045DD 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   551 000045E2 [A7450000]          <3>
   551 000045E6 0F85A38F0000        <3>  jne error
   551 000045EC 83C410              <3>  add esp, 12+exc_errcode
   551                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   551 000045EF 60                  <3>  pushad
   551 000045F0 9C                  <3>  pushf
   551 000045F1 668CD8              <3>  mov ax, ds
   551 000045F4 6650                <3>  push ax
   551 000045F6 B80D000000          <3>  mov eax, %1
   551 000045FB BF[8FD50000]        <3>  mov edi, %2
   551                              <3>  %if %3 != -1
   551 00004600 66BA0000            <3>  mov dx, %3
   551                              <3>  %else
   551                              <3>  mov dx, cs
   551                              <3>  and dx, 7
   551                              <3>  shl dx, 13
   551                              <3>  %endif
   551 00004604 6683FA00            <3>  cmp dx, ACC_DPL_0
   551 00004608 7507                <3>  jne %%dpl3
   551                              <3> %%dpl0:
   551 0000460A BE10000000          <3>  mov esi, C_SEG_PROT32
   551 0000460F EB05                <3>  jmp %%cont
   551                              <3> %%dpl3:
   551 00004611 BE18000000          <3>  mov esi, CU_SEG_PROT32
   551                              <3> %%cont:
   551 00004616 668CC9              <3>  mov cx, cs
   551 00004619 66F7C10700          <3>  test cx, 7
   551 0000461E 7509                <3>  jnz %%ring3
   551                              <3> %%ring0:
   551 00004620 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   551 00004627 EB07                <3>  jmp %%call
   551                              <3> %%ring3:
   551 00004629 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   551                              <3> %%call:
   551 00004630 E80FD7FFFF          <3>  call initIntGateProt
   551 00004635 6658                <3>  pop ax
   551 00004637 8ED8                <3>  mov ds, ax
   551 00004639 9D                  <3>  popf
   551 0000463A 61                  <3>  popad
   551 0000463B E858DBFFFF          <1>  call switchToRing0
   551                              <1>  %endif
   551                              <1>  %endif
   551                              <1> 
   552                                  	testMovSegR_prot fs
   552 00004640 BAFFFFFFFF          <1>  mov edx, -1
   552                              <1>  %if %1 = cs
   552                              <1>  mov dx, C_SEG_PROT32
   552                              <1>  %else
   552 00004645 66BA1C00            <1>  mov dx, D1_SEG_PROT
   552                              <1>  %endif
   552                              <1> 
   552                              <1> 
   552                              <1>  %if %1 = cs
   552                              <1>  loadProtModeStack
   552                              <1>  protModeFaultTest EX_UD, 0, mov %1,dx
   552                              <1>  %else
   552 00004649 8EE2                <1>  mov %1, dx
   552                              <1>  %endif
   552                              <1> 
   552                              <1> 
   552 0000464B 6631C0              <1>  xor ax, ax
   552 0000464E 668CE0              <1>  mov ax, %1
   552 00004651 6639D0              <1>  cmp ax, dx
   552 00004654 0F85358F0000        <1>  jne error
   552                              <1> 
   552                              <1> 
   552 0000465A B8FFFFFFFF          <1>  mov eax, -1
   552 0000465F 8CE0                <1>  mov eax, %1
   552                              <1> 
   552                              <1> 
   552 00004661 6639D0              <1>  cmp ax, dx
   552 00004664 0F85258F0000        <1>  jne error
   552                              <1> 
   552                              <1> 
   552 0000466A C70500000000FFFFFF- <1>  mov [0], dword -1
   552 00004673 FF                  <1>
   552 00004674 8C2500000000        <1>  mov [0], %1
   552 0000467A 391500000000        <1>  cmp [0], edx
   552 00004680 0F85098F0000        <1>  jne error
   552                              <1> 
   552                              <1> 
   552                              <1>  %if %1 = cs
   552                              <1>  protModeFaultTest EX_UD, 0, mov %1,[0]
   552                              <1>  %else
   552 00004686 668CD9              <1>  mov cx, ds
   552 00004689 66B84400            <1>  mov ax, DTEST_SEG_PROT
   552 0000468D 8EE0                <1>  mov %1, ax
   552                              <1>  %if %1 = ds
   552                              <1>  mov es, cx
   552                              <1>  mov %1, [es:0]
   552                              <1>  %else
   552 0000468F 8E2500000000        <1>  mov %1, [0]
   552                              <1>  %endif
   552 00004695 668CE0              <1>  mov ax, %1
   552 00004698 6639D0              <1>  cmp ax, dx
   552 0000469B 0F85EE8E0000        <1>  jne error
   552                              <1>  %endif
   552                              <1> 
   552                              <1>  loadProtModeStack
   552 000046A1 2E0FB225[C71B0000]  <2>  lss esp, [cs:ptrSSprot]
   552                              <1>  %if %1 = ss
   552                              <1> 
   552                              <1>  mov ax, NULL
   552                              <1>  protModeFaultTest EX_GP, 0, mov %1,ax
   552                              <1> 
   552                              <1>  mov ax, DPL1_SEG_PROT|1
   552                              <1>  protModeFaultTest EX_GP, DPL1_SEG_PROT, mov %1,ax
   552                              <1> 
   552                              <1>  mov ax, RO_SEG_PROT
   552                              <1>  protModeFaultTest EX_GP, RO_SEG_PROT, mov %1,ax
   552                              <1> 
   552                              <1>  mov ax, NP_SEG_PROT
   552                              <1>  protModeFaultTest EX_SS, NP_SEG_PROT, mov %1,ax
   552                              <1>  %endif
   552                              <1>  %if %1 != cs
   552                              <1> 
   552 000046A9 66B8F8FF            <1>  mov ax, 0xFFF8
   552                              <1>  protModeFaultTest EX_GP, 0xfff8, mov %1,ax
   552                              <2>  setProtModeIntGate %1, %%continue
   552 000046AD 60                  <3>  pushad
   552 000046AE 9C                  <3>  pushf
   552 000046AF 668CD8              <3>  mov ax, ds
   552 000046B2 6650                <3>  push ax
   552 000046B4 B80D000000          <3>  mov eax, %1
   552 000046B9 BF[07470000]        <3>  mov edi, %2
   552                              <3>  %if %3 != -1
   552                              <3>  mov dx, %3
   552                              <3>  %else
   552 000046BE 668CCA              <3>  mov dx, cs
   552 000046C1 6683E207            <3>  and dx, 7
   552 000046C5 66C1E20D            <3>  shl dx, 13
   552                              <3>  %endif
   552 000046C9 6683FA00            <3>  cmp dx, ACC_DPL_0
   552 000046CD 7507                <3>  jne %%dpl3
   552                              <3> %%dpl0:
   552 000046CF BE10000000          <3>  mov esi, C_SEG_PROT32
   552 000046D4 EB05                <3>  jmp %%cont
   552                              <3> %%dpl3:
   552 000046D6 BE18000000          <3>  mov esi, CU_SEG_PROT32
   552                              <3> %%cont:
   552 000046DB 668CC9              <3>  mov cx, cs
   552 000046DE 66F7C10700          <3>  test cx, 7
   552 000046E3 7509                <3>  jnz %%ring3
   552                              <3> %%ring0:
   552 000046E5 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   552 000046EC EB07                <3>  jmp %%call
   552                              <3> %%ring3:
   552 000046EE 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   552                              <3> %%call:
   552 000046F5 E84AD6FFFF          <3>  call initIntGateProt
   552 000046FA 6658                <3>  pop ax
   552 000046FC 8ED8                <3>  mov ds, ax
   552 000046FE 9D                  <3>  popf
   552 000046FF 61                  <3>  popad
   552                              <2> %%test:
   552 00004700 8EE0                <2>  %3
   552 00004702 E9888E0000          <2>  jmp error
   552                              <2> %%continue:
   552                              <2>  protModeExcCheck %1, %2, %%test
   552                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   552                              <3>  %assign exc_errcode 4
   552 00004707 36813C24F8FF0000    <3>  cmp [ss:esp], dword %2
   552 0000470F 0F857A8E0000        <3>  jne error
   552                              <3>  %else
   552                              <3>  %assign exc_errcode 0
   552                              <3>  %endif
   552                              <3>  %if %4 != -1
   552                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   552                              <3>  jne error
   552                              <3>  %else
   552 00004715 668CCB              <3>  mov bx, cs
   552 00004718 66F7C30700          <3>  test bx, 7
   552 0000471D 750E                <3>  jnz %%ring3
   552                              <3>  %%ring0:
   552 0000471F 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   552 00004725 0F85648E0000        <3>  jne error
   552 0000472B EB0C                <3>  jmp %%continue
   552                              <3>  %%ring3:
   552 0000472D 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   552 00004733 0F85568E0000        <3>  jne error
   552                              <3>  %%continue:
   552                              <3>  %endif
   552 00004739 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   552 0000473E [00470000]          <3>
   552 00004742 0F85478E0000        <3>  jne error
   552 00004748 83C410              <3>  add esp, 12+exc_errcode
   552                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   552 0000474B 60                  <3>  pushad
   552 0000474C 9C                  <3>  pushf
   552 0000474D 668CD8              <3>  mov ax, ds
   552 00004750 6650                <3>  push ax
   552 00004752 B80D000000          <3>  mov eax, %1
   552 00004757 BF[8FD50000]        <3>  mov edi, %2
   552                              <3>  %if %3 != -1
   552 0000475C 66BA0000            <3>  mov dx, %3
   552                              <3>  %else
   552                              <3>  mov dx, cs
   552                              <3>  and dx, 7
   552                              <3>  shl dx, 13
   552                              <3>  %endif
   552 00004760 6683FA00            <3>  cmp dx, ACC_DPL_0
   552 00004764 7507                <3>  jne %%dpl3
   552                              <3> %%dpl0:
   552 00004766 BE10000000          <3>  mov esi, C_SEG_PROT32
   552 0000476B EB05                <3>  jmp %%cont
   552                              <3> %%dpl3:
   552 0000476D BE18000000          <3>  mov esi, CU_SEG_PROT32
   552                              <3> %%cont:
   552 00004772 668CC9              <3>  mov cx, cs
   552 00004775 66F7C10700          <3>  test cx, 7
   552 0000477A 7509                <3>  jnz %%ring3
   552                              <3> %%ring0:
   552 0000477C 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   552 00004783 EB07                <3>  jmp %%call
   552                              <3> %%ring3:
   552 00004785 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   552                              <3> %%call:
   552 0000478C E8B3D5FFFF          <3>  call initIntGateProt
   552 00004791 6658                <3>  pop ax
   552 00004793 8ED8                <3>  mov ds, ax
   552 00004795 9D                  <3>  popf
   552 00004796 61                  <3>  popad
   552                              <1>  %if %1 != ss
   552                              <1> 
   552 00004797 66B85400            <1>  mov ax, NP_SEG_PROT
   552                              <1>  protModeFaultTest EX_NP, NP_SEG_PROT, mov %1,ax
   552                              <2>  setProtModeIntGate %1, %%continue
   552 0000479B 60                  <3>  pushad
   552 0000479C 9C                  <3>  pushf
   552 0000479D 668CD8              <3>  mov ax, ds
   552 000047A0 6650                <3>  push ax
   552 000047A2 B80B000000          <3>  mov eax, %1
   552 000047A7 BF[F5470000]        <3>  mov edi, %2
   552                              <3>  %if %3 != -1
   552                              <3>  mov dx, %3
   552                              <3>  %else
   552 000047AC 668CCA              <3>  mov dx, cs
   552 000047AF 6683E207            <3>  and dx, 7
   552 000047B3 66C1E20D            <3>  shl dx, 13
   552                              <3>  %endif
   552 000047B7 6683FA00            <3>  cmp dx, ACC_DPL_0
   552 000047BB 7507                <3>  jne %%dpl3
   552                              <3> %%dpl0:
   552 000047BD BE10000000          <3>  mov esi, C_SEG_PROT32
   552 000047C2 EB05                <3>  jmp %%cont
   552                              <3> %%dpl3:
   552 000047C4 BE18000000          <3>  mov esi, CU_SEG_PROT32
   552                              <3> %%cont:
   552 000047C9 668CC9              <3>  mov cx, cs
   552 000047CC 66F7C10700          <3>  test cx, 7
   552 000047D1 7509                <3>  jnz %%ring3
   552                              <3> %%ring0:
   552 000047D3 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   552 000047DA EB07                <3>  jmp %%call
   552                              <3> %%ring3:
   552 000047DC 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   552                              <3> %%call:
   552 000047E3 E85CD5FFFF          <3>  call initIntGateProt
   552 000047E8 6658                <3>  pop ax
   552 000047EA 8ED8                <3>  mov ds, ax
   552 000047EC 9D                  <3>  popf
   552 000047ED 61                  <3>  popad
   552                              <2> %%test:
   552 000047EE 8EE0                <2>  %3
   552 000047F0 E99A8D0000          <2>  jmp error
   552                              <2> %%continue:
   552                              <2>  protModeExcCheck %1, %2, %%test
   552                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   552                              <3>  %assign exc_errcode 4
   552 000047F5 36833C2454          <3>  cmp [ss:esp], dword %2
   552 000047FA 0F858F8D0000        <3>  jne error
   552                              <3>  %else
   552                              <3>  %assign exc_errcode 0
   552                              <3>  %endif
   552                              <3>  %if %4 != -1
   552                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   552                              <3>  jne error
   552                              <3>  %else
   552 00004800 668CCB              <3>  mov bx, cs
   552 00004803 66F7C30700          <3>  test bx, 7
   552 00004808 750E                <3>  jnz %%ring3
   552                              <3>  %%ring0:
   552 0000480A 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   552 00004810 0F85798D0000        <3>  jne error
   552 00004816 EB0C                <3>  jmp %%continue
   552                              <3>  %%ring3:
   552 00004818 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   552 0000481E 0F856B8D0000        <3>  jne error
   552                              <3>  %%continue:
   552                              <3>  %endif
   552 00004824 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   552 00004829 [EE470000]          <3>
   552 0000482D 0F855C8D0000        <3>  jne error
   552 00004833 83C410              <3>  add esp, 12+exc_errcode
   552                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   552 00004836 60                  <3>  pushad
   552 00004837 9C                  <3>  pushf
   552 00004838 668CD8              <3>  mov ax, ds
   552 0000483B 6650                <3>  push ax
   552 0000483D B80B000000          <3>  mov eax, %1
   552 00004842 BF[8FD50000]        <3>  mov edi, %2
   552                              <3>  %if %3 != -1
   552 00004847 66BA0000            <3>  mov dx, %3
   552                              <3>  %else
   552                              <3>  mov dx, cs
   552                              <3>  and dx, 7
   552                              <3>  shl dx, 13
   552                              <3>  %endif
   552 0000484B 6683FA00            <3>  cmp dx, ACC_DPL_0
   552 0000484F 7507                <3>  jne %%dpl3
   552                              <3> %%dpl0:
   552 00004851 BE10000000          <3>  mov esi, C_SEG_PROT32
   552 00004856 EB05                <3>  jmp %%cont
   552                              <3> %%dpl3:
   552 00004858 BE18000000          <3>  mov esi, CU_SEG_PROT32
   552                              <3> %%cont:
   552 0000485D 668CC9              <3>  mov cx, cs
   552 00004860 66F7C10700          <3>  test cx, 7
   552 00004865 7509                <3>  jnz %%ring3
   552                              <3> %%ring0:
   552 00004867 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   552 0000486E EB07                <3>  jmp %%call
   552                              <3> %%ring3:
   552 00004870 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   552                              <3> %%call:
   552 00004877 E8C8D4FFFF          <3>  call initIntGateProt
   552 0000487C 6658                <3>  pop ax
   552 0000487E 8ED8                <3>  mov ds, ax
   552 00004880 9D                  <3>  popf
   552 00004881 61                  <3>  popad
   552                              <1> 
   552 00004882 66B85C00            <1>  mov ax, SYS_SEG_PROT
   552                              <1>  protModeFaultTest EX_GP, SYS_SEG_PROT, mov %1,ax
   552                              <2>  setProtModeIntGate %1, %%continue
   552 00004886 60                  <3>  pushad
   552 00004887 9C                  <3>  pushf
   552 00004888 668CD8              <3>  mov ax, ds
   552 0000488B 6650                <3>  push ax
   552 0000488D B80D000000          <3>  mov eax, %1
   552 00004892 BF[E0480000]        <3>  mov edi, %2
   552                              <3>  %if %3 != -1
   552                              <3>  mov dx, %3
   552                              <3>  %else
   552 00004897 668CCA              <3>  mov dx, cs
   552 0000489A 6683E207            <3>  and dx, 7
   552 0000489E 66C1E20D            <3>  shl dx, 13
   552                              <3>  %endif
   552 000048A2 6683FA00            <3>  cmp dx, ACC_DPL_0
   552 000048A6 7507                <3>  jne %%dpl3
   552                              <3> %%dpl0:
   552 000048A8 BE10000000          <3>  mov esi, C_SEG_PROT32
   552 000048AD EB05                <3>  jmp %%cont
   552                              <3> %%dpl3:
   552 000048AF BE18000000          <3>  mov esi, CU_SEG_PROT32
   552                              <3> %%cont:
   552 000048B4 668CC9              <3>  mov cx, cs
   552 000048B7 66F7C10700          <3>  test cx, 7
   552 000048BC 7509                <3>  jnz %%ring3
   552                              <3> %%ring0:
   552 000048BE 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   552 000048C5 EB07                <3>  jmp %%call
   552                              <3> %%ring3:
   552 000048C7 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   552                              <3> %%call:
   552 000048CE E871D4FFFF          <3>  call initIntGateProt
   552 000048D3 6658                <3>  pop ax
   552 000048D5 8ED8                <3>  mov ds, ax
   552 000048D7 9D                  <3>  popf
   552 000048D8 61                  <3>  popad
   552                              <2> %%test:
   552 000048D9 8EE0                <2>  %3
   552 000048DB E9AF8C0000          <2>  jmp error
   552                              <2> %%continue:
   552                              <2>  protModeExcCheck %1, %2, %%test
   552                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   552                              <3>  %assign exc_errcode 4
   552 000048E0 36833C245C          <3>  cmp [ss:esp], dword %2
   552 000048E5 0F85A48C0000        <3>  jne error
   552                              <3>  %else
   552                              <3>  %assign exc_errcode 0
   552                              <3>  %endif
   552                              <3>  %if %4 != -1
   552                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   552                              <3>  jne error
   552                              <3>  %else
   552 000048EB 668CCB              <3>  mov bx, cs
   552 000048EE 66F7C30700          <3>  test bx, 7
   552 000048F3 750E                <3>  jnz %%ring3
   552                              <3>  %%ring0:
   552 000048F5 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   552 000048FB 0F858E8C0000        <3>  jne error
   552 00004901 EB0C                <3>  jmp %%continue
   552                              <3>  %%ring3:
   552 00004903 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   552 00004909 0F85808C0000        <3>  jne error
   552                              <3>  %%continue:
   552                              <3>  %endif
   552 0000490F 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   552 00004914 [D9480000]          <3>
   552 00004918 0F85718C0000        <3>  jne error
   552 0000491E 83C410              <3>  add esp, 12+exc_errcode
   552                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   552 00004921 60                  <3>  pushad
   552 00004922 9C                  <3>  pushf
   552 00004923 668CD8              <3>  mov ax, ds
   552 00004926 6650                <3>  push ax
   552 00004928 B80D000000          <3>  mov eax, %1
   552 0000492D BF[8FD50000]        <3>  mov edi, %2
   552                              <3>  %if %3 != -1
   552 00004932 66BA0000            <3>  mov dx, %3
   552                              <3>  %else
   552                              <3>  mov dx, cs
   552                              <3>  and dx, 7
   552                              <3>  shl dx, 13
   552                              <3>  %endif
   552 00004936 6683FA00            <3>  cmp dx, ACC_DPL_0
   552 0000493A 7507                <3>  jne %%dpl3
   552                              <3> %%dpl0:
   552 0000493C BE10000000          <3>  mov esi, C_SEG_PROT32
   552 00004941 EB05                <3>  jmp %%cont
   552                              <3> %%dpl3:
   552 00004943 BE18000000          <3>  mov esi, CU_SEG_PROT32
   552                              <3> %%cont:
   552 00004948 668CC9              <3>  mov cx, cs
   552 0000494B 66F7C10700          <3>  test cx, 7
   552 00004950 7509                <3>  jnz %%ring3
   552                              <3> %%ring0:
   552 00004952 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   552 00004959 EB07                <3>  jmp %%call
   552                              <3> %%ring3:
   552 0000495B 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   552                              <3> %%call:
   552 00004962 E8DDD3FFFF          <3>  call initIntGateProt
   552 00004967 6658                <3>  pop ax
   552 00004969 8ED8                <3>  mov ds, ax
   552 0000496B 9D                  <3>  popf
   552 0000496C 61                  <3>  popad
   552                              <1> 
   552                              <1> 
   552 0000496D E8D3D7FFFF          <1>  call switchToRing3
   552 00004972 66B84700            <1>  mov ax, DTEST_SEG_PROT|3
   552                              <1>  protModeFaultTest EX_GP, DTEST_SEG_PROT, mov %1,ax
   552                              <2>  setProtModeIntGate %1, %%continue
   552 00004976 60                  <3>  pushad
   552 00004977 9C                  <3>  pushf
   552 00004978 668CD8              <3>  mov ax, ds
   552 0000497B 6650                <3>  push ax
   552 0000497D B80D000000          <3>  mov eax, %1
   552 00004982 BF[D0490000]        <3>  mov edi, %2
   552                              <3>  %if %3 != -1
   552                              <3>  mov dx, %3
   552                              <3>  %else
   552 00004987 668CCA              <3>  mov dx, cs
   552 0000498A 6683E207            <3>  and dx, 7
   552 0000498E 66C1E20D            <3>  shl dx, 13
   552                              <3>  %endif
   552 00004992 6683FA00            <3>  cmp dx, ACC_DPL_0
   552 00004996 7507                <3>  jne %%dpl3
   552                              <3> %%dpl0:
   552 00004998 BE10000000          <3>  mov esi, C_SEG_PROT32
   552 0000499D EB05                <3>  jmp %%cont
   552                              <3> %%dpl3:
   552 0000499F BE18000000          <3>  mov esi, CU_SEG_PROT32
   552                              <3> %%cont:
   552 000049A4 668CC9              <3>  mov cx, cs
   552 000049A7 66F7C10700          <3>  test cx, 7
   552 000049AC 7509                <3>  jnz %%ring3
   552                              <3> %%ring0:
   552 000049AE 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   552 000049B5 EB07                <3>  jmp %%call
   552                              <3> %%ring3:
   552 000049B7 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   552                              <3> %%call:
   552 000049BE E881D3FFFF          <3>  call initIntGateProt
   552 000049C3 6658                <3>  pop ax
   552 000049C5 8ED8                <3>  mov ds, ax
   552 000049C7 9D                  <3>  popf
   552 000049C8 61                  <3>  popad
   552                              <2> %%test:
   552 000049C9 8EE0                <2>  %3
   552 000049CB E9BF8B0000          <2>  jmp error
   552                              <2> %%continue:
   552                              <2>  protModeExcCheck %1, %2, %%test
   552                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   552                              <3>  %assign exc_errcode 4
   552 000049D0 36833C2444          <3>  cmp [ss:esp], dword %2
   552 000049D5 0F85B48B0000        <3>  jne error
   552                              <3>  %else
   552                              <3>  %assign exc_errcode 0
   552                              <3>  %endif
   552                              <3>  %if %4 != -1
   552                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   552                              <3>  jne error
   552                              <3>  %else
   552 000049DB 668CCB              <3>  mov bx, cs
   552 000049DE 66F7C30700          <3>  test bx, 7
   552 000049E3 750E                <3>  jnz %%ring3
   552                              <3>  %%ring0:
   552 000049E5 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   552 000049EB 0F859E8B0000        <3>  jne error
   552 000049F1 EB0C                <3>  jmp %%continue
   552                              <3>  %%ring3:
   552 000049F3 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   552 000049F9 0F85908B0000        <3>  jne error
   552                              <3>  %%continue:
   552                              <3>  %endif
   552 000049FF 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   552 00004A04 [C9490000]          <3>
   552 00004A08 0F85818B0000        <3>  jne error
   552 00004A0E 83C410              <3>  add esp, 12+exc_errcode
   552                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   552 00004A11 60                  <3>  pushad
   552 00004A12 9C                  <3>  pushf
   552 00004A13 668CD8              <3>  mov ax, ds
   552 00004A16 6650                <3>  push ax
   552 00004A18 B80D000000          <3>  mov eax, %1
   552 00004A1D BF[8FD50000]        <3>  mov edi, %2
   552                              <3>  %if %3 != -1
   552 00004A22 66BA0000            <3>  mov dx, %3
   552                              <3>  %else
   552                              <3>  mov dx, cs
   552                              <3>  and dx, 7
   552                              <3>  shl dx, 13
   552                              <3>  %endif
   552 00004A26 6683FA00            <3>  cmp dx, ACC_DPL_0
   552 00004A2A 7507                <3>  jne %%dpl3
   552                              <3> %%dpl0:
   552 00004A2C BE10000000          <3>  mov esi, C_SEG_PROT32
   552 00004A31 EB05                <3>  jmp %%cont
   552                              <3> %%dpl3:
   552 00004A33 BE18000000          <3>  mov esi, CU_SEG_PROT32
   552                              <3> %%cont:
   552 00004A38 668CC9              <3>  mov cx, cs
   552 00004A3B 66F7C10700          <3>  test cx, 7
   552 00004A40 7509                <3>  jnz %%ring3
   552                              <3> %%ring0:
   552 00004A42 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   552 00004A49 EB07                <3>  jmp %%call
   552                              <3> %%ring3:
   552 00004A4B 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   552                              <3> %%call:
   552 00004A52 E8EDD2FFFF          <3>  call initIntGateProt
   552 00004A57 6658                <3>  pop ax
   552 00004A59 8ED8                <3>  mov ds, ax
   552 00004A5B 9D                  <3>  popf
   552 00004A5C 61                  <3>  popad
   552 00004A5D E836D7FFFF          <1>  call switchToRing0
   552                              <1>  %endif
   552                              <1>  %endif
   552                              <1> 
   553                                  	testMovSegR_prot gs
   553 00004A62 BAFFFFFFFF          <1>  mov edx, -1
   553                              <1>  %if %1 = cs
   553                              <1>  mov dx, C_SEG_PROT32
   553                              <1>  %else
   553 00004A67 66BA1C00            <1>  mov dx, D1_SEG_PROT
   553                              <1>  %endif
   553                              <1> 
   553                              <1> 
   553                              <1>  %if %1 = cs
   553                              <1>  loadProtModeStack
   553                              <1>  protModeFaultTest EX_UD, 0, mov %1,dx
   553                              <1>  %else
   553 00004A6B 8EEA                <1>  mov %1, dx
   553                              <1>  %endif
   553                              <1> 
   553                              <1> 
   553 00004A6D 6631C0              <1>  xor ax, ax
   553 00004A70 668CE8              <1>  mov ax, %1
   553 00004A73 6639D0              <1>  cmp ax, dx
   553 00004A76 0F85138B0000        <1>  jne error
   553                              <1> 
   553                              <1> 
   553 00004A7C B8FFFFFFFF          <1>  mov eax, -1
   553 00004A81 8CE8                <1>  mov eax, %1
   553                              <1> 
   553                              <1> 
   553 00004A83 6639D0              <1>  cmp ax, dx
   553 00004A86 0F85038B0000        <1>  jne error
   553                              <1> 
   553                              <1> 
   553 00004A8C C70500000000FFFFFF- <1>  mov [0], dword -1
   553 00004A95 FF                  <1>
   553 00004A96 8C2D00000000        <1>  mov [0], %1
   553 00004A9C 391500000000        <1>  cmp [0], edx
   553 00004AA2 0F85E78A0000        <1>  jne error
   553                              <1> 
   553                              <1> 
   553                              <1>  %if %1 = cs
   553                              <1>  protModeFaultTest EX_UD, 0, mov %1,[0]
   553                              <1>  %else
   553 00004AA8 668CD9              <1>  mov cx, ds
   553 00004AAB 66B84400            <1>  mov ax, DTEST_SEG_PROT
   553 00004AAF 8EE8                <1>  mov %1, ax
   553                              <1>  %if %1 = ds
   553                              <1>  mov es, cx
   553                              <1>  mov %1, [es:0]
   553                              <1>  %else
   553 00004AB1 8E2D00000000        <1>  mov %1, [0]
   553                              <1>  %endif
   553 00004AB7 668CE8              <1>  mov ax, %1
   553 00004ABA 6639D0              <1>  cmp ax, dx
   553 00004ABD 0F85CC8A0000        <1>  jne error
   553                              <1>  %endif
   553                              <1> 
   553                              <1>  loadProtModeStack
   553 00004AC3 2E0FB225[C71B0000]  <2>  lss esp, [cs:ptrSSprot]
   553                              <1>  %if %1 = ss
   553                              <1> 
   553                              <1>  mov ax, NULL
   553                              <1>  protModeFaultTest EX_GP, 0, mov %1,ax
   553                              <1> 
   553                              <1>  mov ax, DPL1_SEG_PROT|1
   553                              <1>  protModeFaultTest EX_GP, DPL1_SEG_PROT, mov %1,ax
   553                              <1> 
   553                              <1>  mov ax, RO_SEG_PROT
   553                              <1>  protModeFaultTest EX_GP, RO_SEG_PROT, mov %1,ax
   553                              <1> 
   553                              <1>  mov ax, NP_SEG_PROT
   553                              <1>  protModeFaultTest EX_SS, NP_SEG_PROT, mov %1,ax
   553                              <1>  %endif
   553                              <1>  %if %1 != cs
   553                              <1> 
   553 00004ACB 66B8F8FF            <1>  mov ax, 0xFFF8
   553                              <1>  protModeFaultTest EX_GP, 0xfff8, mov %1,ax
   553                              <2>  setProtModeIntGate %1, %%continue
   553 00004ACF 60                  <3>  pushad
   553 00004AD0 9C                  <3>  pushf
   553 00004AD1 668CD8              <3>  mov ax, ds
   553 00004AD4 6650                <3>  push ax
   553 00004AD6 B80D000000          <3>  mov eax, %1
   553 00004ADB BF[294B0000]        <3>  mov edi, %2
   553                              <3>  %if %3 != -1
   553                              <3>  mov dx, %3
   553                              <3>  %else
   553 00004AE0 668CCA              <3>  mov dx, cs
   553 00004AE3 6683E207            <3>  and dx, 7
   553 00004AE7 66C1E20D            <3>  shl dx, 13
   553                              <3>  %endif
   553 00004AEB 6683FA00            <3>  cmp dx, ACC_DPL_0
   553 00004AEF 7507                <3>  jne %%dpl3
   553                              <3> %%dpl0:
   553 00004AF1 BE10000000          <3>  mov esi, C_SEG_PROT32
   553 00004AF6 EB05                <3>  jmp %%cont
   553                              <3> %%dpl3:
   553 00004AF8 BE18000000          <3>  mov esi, CU_SEG_PROT32
   553                              <3> %%cont:
   553 00004AFD 668CC9              <3>  mov cx, cs
   553 00004B00 66F7C10700          <3>  test cx, 7
   553 00004B05 7509                <3>  jnz %%ring3
   553                              <3> %%ring0:
   553 00004B07 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   553 00004B0E EB07                <3>  jmp %%call
   553                              <3> %%ring3:
   553 00004B10 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   553                              <3> %%call:
   553 00004B17 E828D2FFFF          <3>  call initIntGateProt
   553 00004B1C 6658                <3>  pop ax
   553 00004B1E 8ED8                <3>  mov ds, ax
   553 00004B20 9D                  <3>  popf
   553 00004B21 61                  <3>  popad
   553                              <2> %%test:
   553 00004B22 8EE8                <2>  %3
   553 00004B24 E9668A0000          <2>  jmp error
   553                              <2> %%continue:
   553                              <2>  protModeExcCheck %1, %2, %%test
   553                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   553                              <3>  %assign exc_errcode 4
   553 00004B29 36813C24F8FF0000    <3>  cmp [ss:esp], dword %2
   553 00004B31 0F85588A0000        <3>  jne error
   553                              <3>  %else
   553                              <3>  %assign exc_errcode 0
   553                              <3>  %endif
   553                              <3>  %if %4 != -1
   553                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   553                              <3>  jne error
   553                              <3>  %else
   553 00004B37 668CCB              <3>  mov bx, cs
   553 00004B3A 66F7C30700          <3>  test bx, 7
   553 00004B3F 750E                <3>  jnz %%ring3
   553                              <3>  %%ring0:
   553 00004B41 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   553 00004B47 0F85428A0000        <3>  jne error
   553 00004B4D EB0C                <3>  jmp %%continue
   553                              <3>  %%ring3:
   553 00004B4F 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   553 00004B55 0F85348A0000        <3>  jne error
   553                              <3>  %%continue:
   553                              <3>  %endif
   553 00004B5B 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   553 00004B60 [224B0000]          <3>
   553 00004B64 0F85258A0000        <3>  jne error
   553 00004B6A 83C410              <3>  add esp, 12+exc_errcode
   553                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   553 00004B6D 60                  <3>  pushad
   553 00004B6E 9C                  <3>  pushf
   553 00004B6F 668CD8              <3>  mov ax, ds
   553 00004B72 6650                <3>  push ax
   553 00004B74 B80D000000          <3>  mov eax, %1
   553 00004B79 BF[8FD50000]        <3>  mov edi, %2
   553                              <3>  %if %3 != -1
   553 00004B7E 66BA0000            <3>  mov dx, %3
   553                              <3>  %else
   553                              <3>  mov dx, cs
   553                              <3>  and dx, 7
   553                              <3>  shl dx, 13
   553                              <3>  %endif
   553 00004B82 6683FA00            <3>  cmp dx, ACC_DPL_0
   553 00004B86 7507                <3>  jne %%dpl3
   553                              <3> %%dpl0:
   553 00004B88 BE10000000          <3>  mov esi, C_SEG_PROT32
   553 00004B8D EB05                <3>  jmp %%cont
   553                              <3> %%dpl3:
   553 00004B8F BE18000000          <3>  mov esi, CU_SEG_PROT32
   553                              <3> %%cont:
   553 00004B94 668CC9              <3>  mov cx, cs
   553 00004B97 66F7C10700          <3>  test cx, 7
   553 00004B9C 7509                <3>  jnz %%ring3
   553                              <3> %%ring0:
   553 00004B9E 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   553 00004BA5 EB07                <3>  jmp %%call
   553                              <3> %%ring3:
   553 00004BA7 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   553                              <3> %%call:
   553 00004BAE E891D1FFFF          <3>  call initIntGateProt
   553 00004BB3 6658                <3>  pop ax
   553 00004BB5 8ED8                <3>  mov ds, ax
   553 00004BB7 9D                  <3>  popf
   553 00004BB8 61                  <3>  popad
   553                              <1>  %if %1 != ss
   553                              <1> 
   553 00004BB9 66B85400            <1>  mov ax, NP_SEG_PROT
   553                              <1>  protModeFaultTest EX_NP, NP_SEG_PROT, mov %1,ax
   553                              <2>  setProtModeIntGate %1, %%continue
   553 00004BBD 60                  <3>  pushad
   553 00004BBE 9C                  <3>  pushf
   553 00004BBF 668CD8              <3>  mov ax, ds
   553 00004BC2 6650                <3>  push ax
   553 00004BC4 B80B000000          <3>  mov eax, %1
   553 00004BC9 BF[174C0000]        <3>  mov edi, %2
   553                              <3>  %if %3 != -1
   553                              <3>  mov dx, %3
   553                              <3>  %else
   553 00004BCE 668CCA              <3>  mov dx, cs
   553 00004BD1 6683E207            <3>  and dx, 7
   553 00004BD5 66C1E20D            <3>  shl dx, 13
   553                              <3>  %endif
   553 00004BD9 6683FA00            <3>  cmp dx, ACC_DPL_0
   553 00004BDD 7507                <3>  jne %%dpl3
   553                              <3> %%dpl0:
   553 00004BDF BE10000000          <3>  mov esi, C_SEG_PROT32
   553 00004BE4 EB05                <3>  jmp %%cont
   553                              <3> %%dpl3:
   553 00004BE6 BE18000000          <3>  mov esi, CU_SEG_PROT32
   553                              <3> %%cont:
   553 00004BEB 668CC9              <3>  mov cx, cs
   553 00004BEE 66F7C10700          <3>  test cx, 7
   553 00004BF3 7509                <3>  jnz %%ring3
   553                              <3> %%ring0:
   553 00004BF5 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   553 00004BFC EB07                <3>  jmp %%call
   553                              <3> %%ring3:
   553 00004BFE 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   553                              <3> %%call:
   553 00004C05 E83AD1FFFF          <3>  call initIntGateProt
   553 00004C0A 6658                <3>  pop ax
   553 00004C0C 8ED8                <3>  mov ds, ax
   553 00004C0E 9D                  <3>  popf
   553 00004C0F 61                  <3>  popad
   553                              <2> %%test:
   553 00004C10 8EE8                <2>  %3
   553 00004C12 E978890000          <2>  jmp error
   553                              <2> %%continue:
   553                              <2>  protModeExcCheck %1, %2, %%test
   553                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   553                              <3>  %assign exc_errcode 4
   553 00004C17 36833C2454          <3>  cmp [ss:esp], dword %2
   553 00004C1C 0F856D890000        <3>  jne error
   553                              <3>  %else
   553                              <3>  %assign exc_errcode 0
   553                              <3>  %endif
   553                              <3>  %if %4 != -1
   553                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   553                              <3>  jne error
   553                              <3>  %else
   553 00004C22 668CCB              <3>  mov bx, cs
   553 00004C25 66F7C30700          <3>  test bx, 7
   553 00004C2A 750E                <3>  jnz %%ring3
   553                              <3>  %%ring0:
   553 00004C2C 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   553 00004C32 0F8557890000        <3>  jne error
   553 00004C38 EB0C                <3>  jmp %%continue
   553                              <3>  %%ring3:
   553 00004C3A 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   553 00004C40 0F8549890000        <3>  jne error
   553                              <3>  %%continue:
   553                              <3>  %endif
   553 00004C46 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   553 00004C4B [104C0000]          <3>
   553 00004C4F 0F853A890000        <3>  jne error
   553 00004C55 83C410              <3>  add esp, 12+exc_errcode
   553                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   553 00004C58 60                  <3>  pushad
   553 00004C59 9C                  <3>  pushf
   553 00004C5A 668CD8              <3>  mov ax, ds
   553 00004C5D 6650                <3>  push ax
   553 00004C5F B80B000000          <3>  mov eax, %1
   553 00004C64 BF[8FD50000]        <3>  mov edi, %2
   553                              <3>  %if %3 != -1
   553 00004C69 66BA0000            <3>  mov dx, %3
   553                              <3>  %else
   553                              <3>  mov dx, cs
   553                              <3>  and dx, 7
   553                              <3>  shl dx, 13
   553                              <3>  %endif
   553 00004C6D 6683FA00            <3>  cmp dx, ACC_DPL_0
   553 00004C71 7507                <3>  jne %%dpl3
   553                              <3> %%dpl0:
   553 00004C73 BE10000000          <3>  mov esi, C_SEG_PROT32
   553 00004C78 EB05                <3>  jmp %%cont
   553                              <3> %%dpl3:
   553 00004C7A BE18000000          <3>  mov esi, CU_SEG_PROT32
   553                              <3> %%cont:
   553 00004C7F 668CC9              <3>  mov cx, cs
   553 00004C82 66F7C10700          <3>  test cx, 7
   553 00004C87 7509                <3>  jnz %%ring3
   553                              <3> %%ring0:
   553 00004C89 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   553 00004C90 EB07                <3>  jmp %%call
   553                              <3> %%ring3:
   553 00004C92 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   553                              <3> %%call:
   553 00004C99 E8A6D0FFFF          <3>  call initIntGateProt
   553 00004C9E 6658                <3>  pop ax
   553 00004CA0 8ED8                <3>  mov ds, ax
   553 00004CA2 9D                  <3>  popf
   553 00004CA3 61                  <3>  popad
   553                              <1> 
   553 00004CA4 66B85C00            <1>  mov ax, SYS_SEG_PROT
   553                              <1>  protModeFaultTest EX_GP, SYS_SEG_PROT, mov %1,ax
   553                              <2>  setProtModeIntGate %1, %%continue
   553 00004CA8 60                  <3>  pushad
   553 00004CA9 9C                  <3>  pushf
   553 00004CAA 668CD8              <3>  mov ax, ds
   553 00004CAD 6650                <3>  push ax
   553 00004CAF B80D000000          <3>  mov eax, %1
   553 00004CB4 BF[024D0000]        <3>  mov edi, %2
   553                              <3>  %if %3 != -1
   553                              <3>  mov dx, %3
   553                              <3>  %else
   553 00004CB9 668CCA              <3>  mov dx, cs
   553 00004CBC 6683E207            <3>  and dx, 7
   553 00004CC0 66C1E20D            <3>  shl dx, 13
   553                              <3>  %endif
   553 00004CC4 6683FA00            <3>  cmp dx, ACC_DPL_0
   553 00004CC8 7507                <3>  jne %%dpl3
   553                              <3> %%dpl0:
   553 00004CCA BE10000000          <3>  mov esi, C_SEG_PROT32
   553 00004CCF EB05                <3>  jmp %%cont
   553                              <3> %%dpl3:
   553 00004CD1 BE18000000          <3>  mov esi, CU_SEG_PROT32
   553                              <3> %%cont:
   553 00004CD6 668CC9              <3>  mov cx, cs
   553 00004CD9 66F7C10700          <3>  test cx, 7
   553 00004CDE 7509                <3>  jnz %%ring3
   553                              <3> %%ring0:
   553 00004CE0 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   553 00004CE7 EB07                <3>  jmp %%call
   553                              <3> %%ring3:
   553 00004CE9 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   553                              <3> %%call:
   553 00004CF0 E84FD0FFFF          <3>  call initIntGateProt
   553 00004CF5 6658                <3>  pop ax
   553 00004CF7 8ED8                <3>  mov ds, ax
   553 00004CF9 9D                  <3>  popf
   553 00004CFA 61                  <3>  popad
   553                              <2> %%test:
   553 00004CFB 8EE8                <2>  %3
   553 00004CFD E98D880000          <2>  jmp error
   553                              <2> %%continue:
   553                              <2>  protModeExcCheck %1, %2, %%test
   553                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   553                              <3>  %assign exc_errcode 4
   553 00004D02 36833C245C          <3>  cmp [ss:esp], dword %2
   553 00004D07 0F8582880000        <3>  jne error
   553                              <3>  %else
   553                              <3>  %assign exc_errcode 0
   553                              <3>  %endif
   553                              <3>  %if %4 != -1
   553                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   553                              <3>  jne error
   553                              <3>  %else
   553 00004D0D 668CCB              <3>  mov bx, cs
   553 00004D10 66F7C30700          <3>  test bx, 7
   553 00004D15 750E                <3>  jnz %%ring3
   553                              <3>  %%ring0:
   553 00004D17 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   553 00004D1D 0F856C880000        <3>  jne error
   553 00004D23 EB0C                <3>  jmp %%continue
   553                              <3>  %%ring3:
   553 00004D25 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   553 00004D2B 0F855E880000        <3>  jne error
   553                              <3>  %%continue:
   553                              <3>  %endif
   553 00004D31 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   553 00004D36 [FB4C0000]          <3>
   553 00004D3A 0F854F880000        <3>  jne error
   553 00004D40 83C410              <3>  add esp, 12+exc_errcode
   553                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   553 00004D43 60                  <3>  pushad
   553 00004D44 9C                  <3>  pushf
   553 00004D45 668CD8              <3>  mov ax, ds
   553 00004D48 6650                <3>  push ax
   553 00004D4A B80D000000          <3>  mov eax, %1
   553 00004D4F BF[8FD50000]        <3>  mov edi, %2
   553                              <3>  %if %3 != -1
   553 00004D54 66BA0000            <3>  mov dx, %3
   553                              <3>  %else
   553                              <3>  mov dx, cs
   553                              <3>  and dx, 7
   553                              <3>  shl dx, 13
   553                              <3>  %endif
   553 00004D58 6683FA00            <3>  cmp dx, ACC_DPL_0
   553 00004D5C 7507                <3>  jne %%dpl3
   553                              <3> %%dpl0:
   553 00004D5E BE10000000          <3>  mov esi, C_SEG_PROT32
   553 00004D63 EB05                <3>  jmp %%cont
   553                              <3> %%dpl3:
   553 00004D65 BE18000000          <3>  mov esi, CU_SEG_PROT32
   553                              <3> %%cont:
   553 00004D6A 668CC9              <3>  mov cx, cs
   553 00004D6D 66F7C10700          <3>  test cx, 7
   553 00004D72 7509                <3>  jnz %%ring3
   553                              <3> %%ring0:
   553 00004D74 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   553 00004D7B EB07                <3>  jmp %%call
   553                              <3> %%ring3:
   553 00004D7D 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   553                              <3> %%call:
   553 00004D84 E8BBCFFFFF          <3>  call initIntGateProt
   553 00004D89 6658                <3>  pop ax
   553 00004D8B 8ED8                <3>  mov ds, ax
   553 00004D8D 9D                  <3>  popf
   553 00004D8E 61                  <3>  popad
   553                              <1> 
   553                              <1> 
   553 00004D8F E8B1D3FFFF          <1>  call switchToRing3
   553 00004D94 66B84700            <1>  mov ax, DTEST_SEG_PROT|3
   553                              <1>  protModeFaultTest EX_GP, DTEST_SEG_PROT, mov %1,ax
   553                              <2>  setProtModeIntGate %1, %%continue
   553 00004D98 60                  <3>  pushad
   553 00004D99 9C                  <3>  pushf
   553 00004D9A 668CD8              <3>  mov ax, ds
   553 00004D9D 6650                <3>  push ax
   553 00004D9F B80D000000          <3>  mov eax, %1
   553 00004DA4 BF[F24D0000]        <3>  mov edi, %2
   553                              <3>  %if %3 != -1
   553                              <3>  mov dx, %3
   553                              <3>  %else
   553 00004DA9 668CCA              <3>  mov dx, cs
   553 00004DAC 6683E207            <3>  and dx, 7
   553 00004DB0 66C1E20D            <3>  shl dx, 13
   553                              <3>  %endif
   553 00004DB4 6683FA00            <3>  cmp dx, ACC_DPL_0
   553 00004DB8 7507                <3>  jne %%dpl3
   553                              <3> %%dpl0:
   553 00004DBA BE10000000          <3>  mov esi, C_SEG_PROT32
   553 00004DBF EB05                <3>  jmp %%cont
   553                              <3> %%dpl3:
   553 00004DC1 BE18000000          <3>  mov esi, CU_SEG_PROT32
   553                              <3> %%cont:
   553 00004DC6 668CC9              <3>  mov cx, cs
   553 00004DC9 66F7C10700          <3>  test cx, 7
   553 00004DCE 7509                <3>  jnz %%ring3
   553                              <3> %%ring0:
   553 00004DD0 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   553 00004DD7 EB07                <3>  jmp %%call
   553                              <3> %%ring3:
   553 00004DD9 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   553                              <3> %%call:
   553 00004DE0 E85FCFFFFF          <3>  call initIntGateProt
   553 00004DE5 6658                <3>  pop ax
   553 00004DE7 8ED8                <3>  mov ds, ax
   553 00004DE9 9D                  <3>  popf
   553 00004DEA 61                  <3>  popad
   553                              <2> %%test:
   553 00004DEB 8EE8                <2>  %3
   553 00004DED E99D870000          <2>  jmp error
   553                              <2> %%continue:
   553                              <2>  protModeExcCheck %1, %2, %%test
   553                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   553                              <3>  %assign exc_errcode 4
   553 00004DF2 36833C2444          <3>  cmp [ss:esp], dword %2
   553 00004DF7 0F8592870000        <3>  jne error
   553                              <3>  %else
   553                              <3>  %assign exc_errcode 0
   553                              <3>  %endif
   553                              <3>  %if %4 != -1
   553                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   553                              <3>  jne error
   553                              <3>  %else
   553 00004DFD 668CCB              <3>  mov bx, cs
   553 00004E00 66F7C30700          <3>  test bx, 7
   553 00004E05 750E                <3>  jnz %%ring3
   553                              <3>  %%ring0:
   553 00004E07 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   553 00004E0D 0F857C870000        <3>  jne error
   553 00004E13 EB0C                <3>  jmp %%continue
   553                              <3>  %%ring3:
   553 00004E15 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   553 00004E1B 0F856E870000        <3>  jne error
   553                              <3>  %%continue:
   553                              <3>  %endif
   553 00004E21 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   553 00004E26 [EB4D0000]          <3>
   553 00004E2A 0F855F870000        <3>  jne error
   553 00004E30 83C410              <3>  add esp, 12+exc_errcode
   553                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   553 00004E33 60                  <3>  pushad
   553 00004E34 9C                  <3>  pushf
   553 00004E35 668CD8              <3>  mov ax, ds
   553 00004E38 6650                <3>  push ax
   553 00004E3A B80D000000          <3>  mov eax, %1
   553 00004E3F BF[8FD50000]        <3>  mov edi, %2
   553                              <3>  %if %3 != -1
   553 00004E44 66BA0000            <3>  mov dx, %3
   553                              <3>  %else
   553                              <3>  mov dx, cs
   553                              <3>  and dx, 7
   553                              <3>  shl dx, 13
   553                              <3>  %endif
   553 00004E48 6683FA00            <3>  cmp dx, ACC_DPL_0
   553 00004E4C 7507                <3>  jne %%dpl3
   553                              <3> %%dpl0:
   553 00004E4E BE10000000          <3>  mov esi, C_SEG_PROT32
   553 00004E53 EB05                <3>  jmp %%cont
   553                              <3> %%dpl3:
   553 00004E55 BE18000000          <3>  mov esi, CU_SEG_PROT32
   553                              <3> %%cont:
   553 00004E5A 668CC9              <3>  mov cx, cs
   553 00004E5D 66F7C10700          <3>  test cx, 7
   553 00004E62 7509                <3>  jnz %%ring3
   553                              <3> %%ring0:
   553 00004E64 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   553 00004E6B EB07                <3>  jmp %%call
   553                              <3> %%ring3:
   553 00004E6D 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   553                              <3> %%call:
   553 00004E74 E8CBCEFFFF          <3>  call initIntGateProt
   553 00004E79 6658                <3>  pop ax
   553 00004E7B 8ED8                <3>  mov ds, ax
   553 00004E7D 9D                  <3>  popf
   553 00004E7E 61                  <3>  popad
   553 00004E7F E814D3FFFF          <1>  call switchToRing0
   553                              <1>  %endif
   553                              <1>  %endif
   553                              <1> 
   554                                  	testMovSegR_prot cs
   554 00004E84 BAFFFFFFFF          <1>  mov edx, -1
   554                              <1>  %if %1 = cs
   554 00004E89 66BA1000            <1>  mov dx, C_SEG_PROT32
   554                              <1>  %else
   554                              <1>  mov dx, D1_SEG_PROT
   554                              <1>  %endif
   554                              <1> 
   554                              <1> 
   554                              <1>  %if %1 = cs
   554                              <1>  loadProtModeStack
   554 00004E8D 2E0FB225[C71B0000]  <2>  lss esp, [cs:ptrSSprot]
   554                              <1>  protModeFaultTest EX_UD, 0, mov %1,dx
   554                              <2>  setProtModeIntGate %1, %%continue
   554 00004E95 60                  <3>  pushad
   554 00004E96 9C                  <3>  pushf
   554 00004E97 668CD8              <3>  mov ax, ds
   554 00004E9A 6650                <3>  push ax
   554 00004E9C B806000000          <3>  mov eax, %1
   554 00004EA1 BF[EF4E0000]        <3>  mov edi, %2
   554                              <3>  %if %3 != -1
   554                              <3>  mov dx, %3
   554                              <3>  %else
   554 00004EA6 668CCA              <3>  mov dx, cs
   554 00004EA9 6683E207            <3>  and dx, 7
   554 00004EAD 66C1E20D            <3>  shl dx, 13
   554                              <3>  %endif
   554 00004EB1 6683FA00            <3>  cmp dx, ACC_DPL_0
   554 00004EB5 7507                <3>  jne %%dpl3
   554                              <3> %%dpl0:
   554 00004EB7 BE10000000          <3>  mov esi, C_SEG_PROT32
   554 00004EBC EB05                <3>  jmp %%cont
   554                              <3> %%dpl3:
   554 00004EBE BE18000000          <3>  mov esi, CU_SEG_PROT32
   554                              <3> %%cont:
   554 00004EC3 668CC9              <3>  mov cx, cs
   554 00004EC6 66F7C10700          <3>  test cx, 7
   554 00004ECB 7509                <3>  jnz %%ring3
   554                              <3> %%ring0:
   554 00004ECD 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   554 00004ED4 EB07                <3>  jmp %%call
   554                              <3> %%ring3:
   554 00004ED6 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   554                              <3> %%call:
   554 00004EDD E862CEFFFF          <3>  call initIntGateProt
   554 00004EE2 6658                <3>  pop ax
   554 00004EE4 8ED8                <3>  mov ds, ax
   554 00004EE6 9D                  <3>  popf
   554 00004EE7 61                  <3>  popad
   554                              <2> %%test:
   554 00004EE8 8ECA                <2>  %3
   554 00004EEA E9A0860000          <2>  jmp error
   554                              <2> %%continue:
   554                              <2>  protModeExcCheck %1, %2, %%test
   554                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   554                              <3>  %assign exc_errcode 4
   554                              <3>  cmp [ss:esp], dword %2
   554                              <3>  jne error
   554                              <3>  %else
   554                              <3>  %assign exc_errcode 0
   554                              <3>  %endif
   554                              <3>  %if %4 != -1
   554                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   554                              <3>  jne error
   554                              <3>  %else
   554 00004EEF 668CCB              <3>  mov bx, cs
   554 00004EF2 66F7C30700          <3>  test bx, 7
   554 00004EF7 750E                <3>  jnz %%ring3
   554                              <3>  %%ring0:
   554 00004EF9 36837C240410        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   554 00004EFF 0F858A860000        <3>  jne error
   554 00004F05 EB0C                <3>  jmp %%continue
   554                              <3>  %%ring3:
   554 00004F07 36837C24041B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   554 00004F0D 0F857C860000        <3>  jne error
   554                              <3>  %%continue:
   554                              <3>  %endif
   554 00004F13 36813C24[E84E0000]  <3>  cmp [ss:esp+exc_errcode], dword %3
   554 00004F1B 0F856E860000        <3>  jne error
   554 00004F21 83C40C              <3>  add esp, 12+exc_errcode
   554                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   554 00004F24 60                  <3>  pushad
   554 00004F25 9C                  <3>  pushf
   554 00004F26 668CD8              <3>  mov ax, ds
   554 00004F29 6650                <3>  push ax
   554 00004F2B B806000000          <3>  mov eax, %1
   554 00004F30 BF[8FD50000]        <3>  mov edi, %2
   554                              <3>  %if %3 != -1
   554 00004F35 66BA0000            <3>  mov dx, %3
   554                              <3>  %else
   554                              <3>  mov dx, cs
   554                              <3>  and dx, 7
   554                              <3>  shl dx, 13
   554                              <3>  %endif
   554 00004F39 6683FA00            <3>  cmp dx, ACC_DPL_0
   554 00004F3D 7507                <3>  jne %%dpl3
   554                              <3> %%dpl0:
   554 00004F3F BE10000000          <3>  mov esi, C_SEG_PROT32
   554 00004F44 EB05                <3>  jmp %%cont
   554                              <3> %%dpl3:
   554 00004F46 BE18000000          <3>  mov esi, CU_SEG_PROT32
   554                              <3> %%cont:
   554 00004F4B 668CC9              <3>  mov cx, cs
   554 00004F4E 66F7C10700          <3>  test cx, 7
   554 00004F53 7509                <3>  jnz %%ring3
   554                              <3> %%ring0:
   554 00004F55 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   554 00004F5C EB07                <3>  jmp %%call
   554                              <3> %%ring3:
   554 00004F5E 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   554                              <3> %%call:
   554 00004F65 E8DACDFFFF          <3>  call initIntGateProt
   554 00004F6A 6658                <3>  pop ax
   554 00004F6C 8ED8                <3>  mov ds, ax
   554 00004F6E 9D                  <3>  popf
   554 00004F6F 61                  <3>  popad
   554                              <1>  %else
   554                              <1>  mov %1, dx
   554                              <1>  %endif
   554                              <1> 
   554                              <1> 
   554 00004F70 6631C0              <1>  xor ax, ax
   554 00004F73 668CC8              <1>  mov ax, %1
   554 00004F76 6639D0              <1>  cmp ax, dx
   554 00004F79 0F8510860000        <1>  jne error
   554                              <1> 
   554                              <1> 
   554 00004F7F B8FFFFFFFF          <1>  mov eax, -1
   554 00004F84 8CC8                <1>  mov eax, %1
   554                              <1> 
   554                              <1> 
   554 00004F86 6639D0              <1>  cmp ax, dx
   554 00004F89 0F8500860000        <1>  jne error
   554                              <1> 
   554                              <1> 
   554 00004F8F C70500000000FFFFFF- <1>  mov [0], dword -1
   554 00004F98 FF                  <1>
   554 00004F99 8C0D00000000        <1>  mov [0], %1
   554 00004F9F 391500000000        <1>  cmp [0], edx
   554 00004FA5 0F85E4850000        <1>  jne error
   554                              <1> 
   554                              <1> 
   554                              <1>  %if %1 = cs
   554                              <1>  protModeFaultTest EX_UD, 0, mov %1,[0]
   554                              <2>  setProtModeIntGate %1, %%continue
   554 00004FAB 60                  <3>  pushad
   554 00004FAC 9C                  <3>  pushf
   554 00004FAD 668CD8              <3>  mov ax, ds
   554 00004FB0 6650                <3>  push ax
   554 00004FB2 B806000000          <3>  mov eax, %1
   554 00004FB7 BF[09500000]        <3>  mov edi, %2
   554                              <3>  %if %3 != -1
   554                              <3>  mov dx, %3
   554                              <3>  %else
   554 00004FBC 668CCA              <3>  mov dx, cs
   554 00004FBF 6683E207            <3>  and dx, 7
   554 00004FC3 66C1E20D            <3>  shl dx, 13
   554                              <3>  %endif
   554 00004FC7 6683FA00            <3>  cmp dx, ACC_DPL_0
   554 00004FCB 7507                <3>  jne %%dpl3
   554                              <3> %%dpl0:
   554 00004FCD BE10000000          <3>  mov esi, C_SEG_PROT32
   554 00004FD2 EB05                <3>  jmp %%cont
   554                              <3> %%dpl3:
   554 00004FD4 BE18000000          <3>  mov esi, CU_SEG_PROT32
   554                              <3> %%cont:
   554 00004FD9 668CC9              <3>  mov cx, cs
   554 00004FDC 66F7C10700          <3>  test cx, 7
   554 00004FE1 7509                <3>  jnz %%ring3
   554                              <3> %%ring0:
   554 00004FE3 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   554 00004FEA EB07                <3>  jmp %%call
   554                              <3> %%ring3:
   554 00004FEC 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   554                              <3> %%call:
   554 00004FF3 E84CCDFFFF          <3>  call initIntGateProt
   554 00004FF8 6658                <3>  pop ax
   554 00004FFA 8ED8                <3>  mov ds, ax
   554 00004FFC 9D                  <3>  popf
   554 00004FFD 61                  <3>  popad
   554                              <2> %%test:
   554 00004FFE 8E0D00000000        <2>  %3
   554 00005004 E986850000          <2>  jmp error
   554                              <2> %%continue:
   554                              <2>  protModeExcCheck %1, %2, %%test
   554                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   554                              <3>  %assign exc_errcode 4
   554                              <3>  cmp [ss:esp], dword %2
   554                              <3>  jne error
   554                              <3>  %else
   554                              <3>  %assign exc_errcode 0
   554                              <3>  %endif
   554                              <3>  %if %4 != -1
   554                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   554                              <3>  jne error
   554                              <3>  %else
   554 00005009 668CCB              <3>  mov bx, cs
   554 0000500C 66F7C30700          <3>  test bx, 7
   554 00005011 750E                <3>  jnz %%ring3
   554                              <3>  %%ring0:
   554 00005013 36837C240410        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   554 00005019 0F8570850000        <3>  jne error
   554 0000501F EB0C                <3>  jmp %%continue
   554                              <3>  %%ring3:
   554 00005021 36837C24041B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   554 00005027 0F8562850000        <3>  jne error
   554                              <3>  %%continue:
   554                              <3>  %endif
   554 0000502D 36813C24[FE4F0000]  <3>  cmp [ss:esp+exc_errcode], dword %3
   554 00005035 0F8554850000        <3>  jne error
   554 0000503B 83C40C              <3>  add esp, 12+exc_errcode
   554                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   554 0000503E 60                  <3>  pushad
   554 0000503F 9C                  <3>  pushf
   554 00005040 668CD8              <3>  mov ax, ds
   554 00005043 6650                <3>  push ax
   554 00005045 B806000000          <3>  mov eax, %1
   554 0000504A BF[8FD50000]        <3>  mov edi, %2
   554                              <3>  %if %3 != -1
   554 0000504F 66BA0000            <3>  mov dx, %3
   554                              <3>  %else
   554                              <3>  mov dx, cs
   554                              <3>  and dx, 7
   554                              <3>  shl dx, 13
   554                              <3>  %endif
   554 00005053 6683FA00            <3>  cmp dx, ACC_DPL_0
   554 00005057 7507                <3>  jne %%dpl3
   554                              <3> %%dpl0:
   554 00005059 BE10000000          <3>  mov esi, C_SEG_PROT32
   554 0000505E EB05                <3>  jmp %%cont
   554                              <3> %%dpl3:
   554 00005060 BE18000000          <3>  mov esi, CU_SEG_PROT32
   554                              <3> %%cont:
   554 00005065 668CC9              <3>  mov cx, cs
   554 00005068 66F7C10700          <3>  test cx, 7
   554 0000506D 7509                <3>  jnz %%ring3
   554                              <3> %%ring0:
   554 0000506F 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   554 00005076 EB07                <3>  jmp %%call
   554                              <3> %%ring3:
   554 00005078 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   554                              <3> %%call:
   554 0000507F E8C0CCFFFF          <3>  call initIntGateProt
   554 00005084 6658                <3>  pop ax
   554 00005086 8ED8                <3>  mov ds, ax
   554 00005088 9D                  <3>  popf
   554 00005089 61                  <3>  popad
   554                              <1>  %else
   554                              <1>  mov cx, ds
   554                              <1>  mov ax, DTEST_SEG_PROT
   554                              <1>  mov %1, ax
   554                              <1>  %if %1 = ds
   554                              <1>  mov es, cx
   554                              <1>  mov %1, [es:0]
   554                              <1>  %else
   554                              <1>  mov %1, [0]
   554                              <1>  %endif
   554                              <1>  mov ax, %1
   554                              <1>  cmp ax, dx
   554                              <1>  jne error
   554                              <1>  %endif
   554                              <1> 
   554                              <1>  loadProtModeStack
   554 0000508A 2E0FB225[C71B0000]  <2>  lss esp, [cs:ptrSSprot]
   554                              <1>  %if %1 = ss
   554                              <1> 
   554                              <1>  mov ax, NULL
   554                              <1>  protModeFaultTest EX_GP, 0, mov %1,ax
   554                              <1> 
   554                              <1>  mov ax, DPL1_SEG_PROT|1
   554                              <1>  protModeFaultTest EX_GP, DPL1_SEG_PROT, mov %1,ax
   554                              <1> 
   554                              <1>  mov ax, RO_SEG_PROT
   554                              <1>  protModeFaultTest EX_GP, RO_SEG_PROT, mov %1,ax
   554                              <1> 
   554                              <1>  mov ax, NP_SEG_PROT
   554                              <1>  protModeFaultTest EX_SS, NP_SEG_PROT, mov %1,ax
   554                              <1>  %endif
   554                              <1>  %if %1 != cs
   554                              <1> 
   554                              <1>  mov ax, 0xFFF8
   554                              <1>  protModeFaultTest EX_GP, 0xfff8, mov %1,ax
   554                              <1>  %if %1 != ss
   554                              <1> 
   554                              <1>  mov ax, NP_SEG_PROT
   554                              <1>  protModeFaultTest EX_NP, NP_SEG_PROT, mov %1,ax
   554                              <1> 
   554                              <1>  mov ax, SYS_SEG_PROT
   554                              <1>  protModeFaultTest EX_GP, SYS_SEG_PROT, mov %1,ax
   554                              <1> 
   554                              <1> 
   554                              <1>  call switchToRing3
   554                              <1>  mov ax, DTEST_SEG_PROT|3
   554                              <1>  protModeFaultTest EX_GP, DTEST_SEG_PROT, mov %1,ax
   554                              <1>  call switchToRing0
   554                              <1>  %endif
   554                              <1>  %endif
   554                              <1> 
   555                                  	testMovSegR_prot ss
   555 00005092 BAFFFFFFFF          <1>  mov edx, -1
   555                              <1>  %if %1 = cs
   555                              <1>  mov dx, C_SEG_PROT32
   555                              <1>  %else
   555 00005097 66BA1C00            <1>  mov dx, D1_SEG_PROT
   555                              <1>  %endif
   555                              <1> 
   555                              <1> 
   555                              <1>  %if %1 = cs
   555                              <1>  loadProtModeStack
   555                              <1>  protModeFaultTest EX_UD, 0, mov %1,dx
   555                              <1>  %else
   555 0000509B 8ED2                <1>  mov %1, dx
   555                              <1>  %endif
   555                              <1> 
   555                              <1> 
   555 0000509D 6631C0              <1>  xor ax, ax
   555 000050A0 668CD0              <1>  mov ax, %1
   555 000050A3 6639D0              <1>  cmp ax, dx
   555 000050A6 0F85E3840000        <1>  jne error
   555                              <1> 
   555                              <1> 
   555 000050AC B8FFFFFFFF          <1>  mov eax, -1
   555 000050B1 8CD0                <1>  mov eax, %1
   555                              <1> 
   555                              <1> 
   555 000050B3 6639D0              <1>  cmp ax, dx
   555 000050B6 0F85D3840000        <1>  jne error
   555                              <1> 
   555                              <1> 
   555 000050BC C70500000000FFFFFF- <1>  mov [0], dword -1
   555 000050C5 FF                  <1>
   555 000050C6 8C1500000000        <1>  mov [0], %1
   555 000050CC 391500000000        <1>  cmp [0], edx
   555 000050D2 0F85B7840000        <1>  jne error
   555                              <1> 
   555                              <1> 
   555                              <1>  %if %1 = cs
   555                              <1>  protModeFaultTest EX_UD, 0, mov %1,[0]
   555                              <1>  %else
   555 000050D8 668CD9              <1>  mov cx, ds
   555 000050DB 66B84400            <1>  mov ax, DTEST_SEG_PROT
   555 000050DF 8ED0                <1>  mov %1, ax
   555                              <1>  %if %1 = ds
   555                              <1>  mov es, cx
   555                              <1>  mov %1, [es:0]
   555                              <1>  %else
   555 000050E1 8E1500000000        <1>  mov %1, [0]
   555                              <1>  %endif
   555 000050E7 668CD0              <1>  mov ax, %1
   555 000050EA 6639D0              <1>  cmp ax, dx
   555 000050ED 0F859C840000        <1>  jne error
   555                              <1>  %endif
   555                              <1> 
   555                              <1>  loadProtModeStack
   555 000050F3 2E0FB225[C71B0000]  <2>  lss esp, [cs:ptrSSprot]
   555                              <1>  %if %1 = ss
   555                              <1> 
   555 000050FB 66B80000            <1>  mov ax, NULL
   555                              <1>  protModeFaultTest EX_GP, 0, mov %1,ax
   555                              <2>  setProtModeIntGate %1, %%continue
   555 000050FF 60                  <3>  pushad
   555 00005100 9C                  <3>  pushf
   555 00005101 668CD8              <3>  mov ax, ds
   555 00005104 6650                <3>  push ax
   555 00005106 B80D000000          <3>  mov eax, %1
   555 0000510B BF[59510000]        <3>  mov edi, %2
   555                              <3>  %if %3 != -1
   555                              <3>  mov dx, %3
   555                              <3>  %else
   555 00005110 668CCA              <3>  mov dx, cs
   555 00005113 6683E207            <3>  and dx, 7
   555 00005117 66C1E20D            <3>  shl dx, 13
   555                              <3>  %endif
   555 0000511B 6683FA00            <3>  cmp dx, ACC_DPL_0
   555 0000511F 7507                <3>  jne %%dpl3
   555                              <3> %%dpl0:
   555 00005121 BE10000000          <3>  mov esi, C_SEG_PROT32
   555 00005126 EB05                <3>  jmp %%cont
   555                              <3> %%dpl3:
   555 00005128 BE18000000          <3>  mov esi, CU_SEG_PROT32
   555                              <3> %%cont:
   555 0000512D 668CC9              <3>  mov cx, cs
   555 00005130 66F7C10700          <3>  test cx, 7
   555 00005135 7509                <3>  jnz %%ring3
   555                              <3> %%ring0:
   555 00005137 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   555 0000513E EB07                <3>  jmp %%call
   555                              <3> %%ring3:
   555 00005140 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   555                              <3> %%call:
   555 00005147 E8F8CBFFFF          <3>  call initIntGateProt
   555 0000514C 6658                <3>  pop ax
   555 0000514E 8ED8                <3>  mov ds, ax
   555 00005150 9D                  <3>  popf
   555 00005151 61                  <3>  popad
   555                              <2> %%test:
   555 00005152 8ED0                <2>  %3
   555 00005154 E936840000          <2>  jmp error
   555                              <2> %%continue:
   555                              <2>  protModeExcCheck %1, %2, %%test
   555                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   555                              <3>  %assign exc_errcode 4
   555 00005159 36833C2400          <3>  cmp [ss:esp], dword %2
   555 0000515E 0F852B840000        <3>  jne error
   555                              <3>  %else
   555                              <3>  %assign exc_errcode 0
   555                              <3>  %endif
   555                              <3>  %if %4 != -1
   555                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   555                              <3>  jne error
   555                              <3>  %else
   555 00005164 668CCB              <3>  mov bx, cs
   555 00005167 66F7C30700          <3>  test bx, 7
   555 0000516C 750E                <3>  jnz %%ring3
   555                              <3>  %%ring0:
   555 0000516E 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   555 00005174 0F8515840000        <3>  jne error
   555 0000517A EB0C                <3>  jmp %%continue
   555                              <3>  %%ring3:
   555 0000517C 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   555 00005182 0F8507840000        <3>  jne error
   555                              <3>  %%continue:
   555                              <3>  %endif
   555 00005188 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   555 0000518D [52510000]          <3>
   555 00005191 0F85F8830000        <3>  jne error
   555 00005197 83C410              <3>  add esp, 12+exc_errcode
   555                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   555 0000519A 60                  <3>  pushad
   555 0000519B 9C                  <3>  pushf
   555 0000519C 668CD8              <3>  mov ax, ds
   555 0000519F 6650                <3>  push ax
   555 000051A1 B80D000000          <3>  mov eax, %1
   555 000051A6 BF[8FD50000]        <3>  mov edi, %2
   555                              <3>  %if %3 != -1
   555 000051AB 66BA0000            <3>  mov dx, %3
   555                              <3>  %else
   555                              <3>  mov dx, cs
   555                              <3>  and dx, 7
   555                              <3>  shl dx, 13
   555                              <3>  %endif
   555 000051AF 6683FA00            <3>  cmp dx, ACC_DPL_0
   555 000051B3 7507                <3>  jne %%dpl3
   555                              <3> %%dpl0:
   555 000051B5 BE10000000          <3>  mov esi, C_SEG_PROT32
   555 000051BA EB05                <3>  jmp %%cont
   555                              <3> %%dpl3:
   555 000051BC BE18000000          <3>  mov esi, CU_SEG_PROT32
   555                              <3> %%cont:
   555 000051C1 668CC9              <3>  mov cx, cs
   555 000051C4 66F7C10700          <3>  test cx, 7
   555 000051C9 7509                <3>  jnz %%ring3
   555                              <3> %%ring0:
   555 000051CB 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   555 000051D2 EB07                <3>  jmp %%call
   555                              <3> %%ring3:
   555 000051D4 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   555                              <3> %%call:
   555 000051DB E864CBFFFF          <3>  call initIntGateProt
   555 000051E0 6658                <3>  pop ax
   555 000051E2 8ED8                <3>  mov ds, ax
   555 000051E4 9D                  <3>  popf
   555 000051E5 61                  <3>  popad
   555                              <1> 
   555 000051E6 66B84D00            <1>  mov ax, DPL1_SEG_PROT|1
   555                              <1>  protModeFaultTest EX_GP, DPL1_SEG_PROT, mov %1,ax
   555                              <2>  setProtModeIntGate %1, %%continue
   555 000051EA 60                  <3>  pushad
   555 000051EB 9C                  <3>  pushf
   555 000051EC 668CD8              <3>  mov ax, ds
   555 000051EF 6650                <3>  push ax
   555 000051F1 B80D000000          <3>  mov eax, %1
   555 000051F6 BF[44520000]        <3>  mov edi, %2
   555                              <3>  %if %3 != -1
   555                              <3>  mov dx, %3
   555                              <3>  %else
   555 000051FB 668CCA              <3>  mov dx, cs
   555 000051FE 6683E207            <3>  and dx, 7
   555 00005202 66C1E20D            <3>  shl dx, 13
   555                              <3>  %endif
   555 00005206 6683FA00            <3>  cmp dx, ACC_DPL_0
   555 0000520A 7507                <3>  jne %%dpl3
   555                              <3> %%dpl0:
   555 0000520C BE10000000          <3>  mov esi, C_SEG_PROT32
   555 00005211 EB05                <3>  jmp %%cont
   555                              <3> %%dpl3:
   555 00005213 BE18000000          <3>  mov esi, CU_SEG_PROT32
   555                              <3> %%cont:
   555 00005218 668CC9              <3>  mov cx, cs
   555 0000521B 66F7C10700          <3>  test cx, 7
   555 00005220 7509                <3>  jnz %%ring3
   555                              <3> %%ring0:
   555 00005222 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   555 00005229 EB07                <3>  jmp %%call
   555                              <3> %%ring3:
   555 0000522B 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   555                              <3> %%call:
   555 00005232 E80DCBFFFF          <3>  call initIntGateProt
   555 00005237 6658                <3>  pop ax
   555 00005239 8ED8                <3>  mov ds, ax
   555 0000523B 9D                  <3>  popf
   555 0000523C 61                  <3>  popad
   555                              <2> %%test:
   555 0000523D 8ED0                <2>  %3
   555 0000523F E94B830000          <2>  jmp error
   555                              <2> %%continue:
   555                              <2>  protModeExcCheck %1, %2, %%test
   555                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   555                              <3>  %assign exc_errcode 4
   555 00005244 36833C244C          <3>  cmp [ss:esp], dword %2
   555 00005249 0F8540830000        <3>  jne error
   555                              <3>  %else
   555                              <3>  %assign exc_errcode 0
   555                              <3>  %endif
   555                              <3>  %if %4 != -1
   555                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   555                              <3>  jne error
   555                              <3>  %else
   555 0000524F 668CCB              <3>  mov bx, cs
   555 00005252 66F7C30700          <3>  test bx, 7
   555 00005257 750E                <3>  jnz %%ring3
   555                              <3>  %%ring0:
   555 00005259 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   555 0000525F 0F852A830000        <3>  jne error
   555 00005265 EB0C                <3>  jmp %%continue
   555                              <3>  %%ring3:
   555 00005267 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   555 0000526D 0F851C830000        <3>  jne error
   555                              <3>  %%continue:
   555                              <3>  %endif
   555 00005273 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   555 00005278 [3D520000]          <3>
   555 0000527C 0F850D830000        <3>  jne error
   555 00005282 83C410              <3>  add esp, 12+exc_errcode
   555                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   555 00005285 60                  <3>  pushad
   555 00005286 9C                  <3>  pushf
   555 00005287 668CD8              <3>  mov ax, ds
   555 0000528A 6650                <3>  push ax
   555 0000528C B80D000000          <3>  mov eax, %1
   555 00005291 BF[8FD50000]        <3>  mov edi, %2
   555                              <3>  %if %3 != -1
   555 00005296 66BA0000            <3>  mov dx, %3
   555                              <3>  %else
   555                              <3>  mov dx, cs
   555                              <3>  and dx, 7
   555                              <3>  shl dx, 13
   555                              <3>  %endif
   555 0000529A 6683FA00            <3>  cmp dx, ACC_DPL_0
   555 0000529E 7507                <3>  jne %%dpl3
   555                              <3> %%dpl0:
   555 000052A0 BE10000000          <3>  mov esi, C_SEG_PROT32
   555 000052A5 EB05                <3>  jmp %%cont
   555                              <3> %%dpl3:
   555 000052A7 BE18000000          <3>  mov esi, CU_SEG_PROT32
   555                              <3> %%cont:
   555 000052AC 668CC9              <3>  mov cx, cs
   555 000052AF 66F7C10700          <3>  test cx, 7
   555 000052B4 7509                <3>  jnz %%ring3
   555                              <3> %%ring0:
   555 000052B6 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   555 000052BD EB07                <3>  jmp %%call
   555                              <3> %%ring3:
   555 000052BF 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   555                              <3> %%call:
   555 000052C6 E879CAFFFF          <3>  call initIntGateProt
   555 000052CB 6658                <3>  pop ax
   555 000052CD 8ED8                <3>  mov ds, ax
   555 000052CF 9D                  <3>  popf
   555 000052D0 61                  <3>  popad
   555                              <1> 
   555 000052D1 66B83400            <1>  mov ax, RO_SEG_PROT
   555                              <1>  protModeFaultTest EX_GP, RO_SEG_PROT, mov %1,ax
   555                              <2>  setProtModeIntGate %1, %%continue
   555 000052D5 60                  <3>  pushad
   555 000052D6 9C                  <3>  pushf
   555 000052D7 668CD8              <3>  mov ax, ds
   555 000052DA 6650                <3>  push ax
   555 000052DC B80D000000          <3>  mov eax, %1
   555 000052E1 BF[2F530000]        <3>  mov edi, %2
   555                              <3>  %if %3 != -1
   555                              <3>  mov dx, %3
   555                              <3>  %else
   555 000052E6 668CCA              <3>  mov dx, cs
   555 000052E9 6683E207            <3>  and dx, 7
   555 000052ED 66C1E20D            <3>  shl dx, 13
   555                              <3>  %endif
   555 000052F1 6683FA00            <3>  cmp dx, ACC_DPL_0
   555 000052F5 7507                <3>  jne %%dpl3
   555                              <3> %%dpl0:
   555 000052F7 BE10000000          <3>  mov esi, C_SEG_PROT32
   555 000052FC EB05                <3>  jmp %%cont
   555                              <3> %%dpl3:
   555 000052FE BE18000000          <3>  mov esi, CU_SEG_PROT32
   555                              <3> %%cont:
   555 00005303 668CC9              <3>  mov cx, cs
   555 00005306 66F7C10700          <3>  test cx, 7
   555 0000530B 7509                <3>  jnz %%ring3
   555                              <3> %%ring0:
   555 0000530D 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   555 00005314 EB07                <3>  jmp %%call
   555                              <3> %%ring3:
   555 00005316 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   555                              <3> %%call:
   555 0000531D E822CAFFFF          <3>  call initIntGateProt
   555 00005322 6658                <3>  pop ax
   555 00005324 8ED8                <3>  mov ds, ax
   555 00005326 9D                  <3>  popf
   555 00005327 61                  <3>  popad
   555                              <2> %%test:
   555 00005328 8ED0                <2>  %3
   555 0000532A E960820000          <2>  jmp error
   555                              <2> %%continue:
   555                              <2>  protModeExcCheck %1, %2, %%test
   555                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   555                              <3>  %assign exc_errcode 4
   555 0000532F 36833C2434          <3>  cmp [ss:esp], dword %2
   555 00005334 0F8555820000        <3>  jne error
   555                              <3>  %else
   555                              <3>  %assign exc_errcode 0
   555                              <3>  %endif
   555                              <3>  %if %4 != -1
   555                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   555                              <3>  jne error
   555                              <3>  %else
   555 0000533A 668CCB              <3>  mov bx, cs
   555 0000533D 66F7C30700          <3>  test bx, 7
   555 00005342 750E                <3>  jnz %%ring3
   555                              <3>  %%ring0:
   555 00005344 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   555 0000534A 0F853F820000        <3>  jne error
   555 00005350 EB0C                <3>  jmp %%continue
   555                              <3>  %%ring3:
   555 00005352 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   555 00005358 0F8531820000        <3>  jne error
   555                              <3>  %%continue:
   555                              <3>  %endif
   555 0000535E 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   555 00005363 [28530000]          <3>
   555 00005367 0F8522820000        <3>  jne error
   555 0000536D 83C410              <3>  add esp, 12+exc_errcode
   555                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   555 00005370 60                  <3>  pushad
   555 00005371 9C                  <3>  pushf
   555 00005372 668CD8              <3>  mov ax, ds
   555 00005375 6650                <3>  push ax
   555 00005377 B80D000000          <3>  mov eax, %1
   555 0000537C BF[8FD50000]        <3>  mov edi, %2
   555                              <3>  %if %3 != -1
   555 00005381 66BA0000            <3>  mov dx, %3
   555                              <3>  %else
   555                              <3>  mov dx, cs
   555                              <3>  and dx, 7
   555                              <3>  shl dx, 13
   555                              <3>  %endif
   555 00005385 6683FA00            <3>  cmp dx, ACC_DPL_0
   555 00005389 7507                <3>  jne %%dpl3
   555                              <3> %%dpl0:
   555 0000538B BE10000000          <3>  mov esi, C_SEG_PROT32
   555 00005390 EB05                <3>  jmp %%cont
   555                              <3> %%dpl3:
   555 00005392 BE18000000          <3>  mov esi, CU_SEG_PROT32
   555                              <3> %%cont:
   555 00005397 668CC9              <3>  mov cx, cs
   555 0000539A 66F7C10700          <3>  test cx, 7
   555 0000539F 7509                <3>  jnz %%ring3
   555                              <3> %%ring0:
   555 000053A1 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   555 000053A8 EB07                <3>  jmp %%call
   555                              <3> %%ring3:
   555 000053AA 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   555                              <3> %%call:
   555 000053B1 E88EC9FFFF          <3>  call initIntGateProt
   555 000053B6 6658                <3>  pop ax
   555 000053B8 8ED8                <3>  mov ds, ax
   555 000053BA 9D                  <3>  popf
   555 000053BB 61                  <3>  popad
   555                              <1> 
   555 000053BC 66B85400            <1>  mov ax, NP_SEG_PROT
   555                              <1>  protModeFaultTest EX_SS, NP_SEG_PROT, mov %1,ax
   555                              <2>  setProtModeIntGate %1, %%continue
   555 000053C0 60                  <3>  pushad
   555 000053C1 9C                  <3>  pushf
   555 000053C2 668CD8              <3>  mov ax, ds
   555 000053C5 6650                <3>  push ax
   555 000053C7 B80C000000          <3>  mov eax, %1
   555 000053CC BF[1A540000]        <3>  mov edi, %2
   555                              <3>  %if %3 != -1
   555                              <3>  mov dx, %3
   555                              <3>  %else
   555 000053D1 668CCA              <3>  mov dx, cs
   555 000053D4 6683E207            <3>  and dx, 7
   555 000053D8 66C1E20D            <3>  shl dx, 13
   555                              <3>  %endif
   555 000053DC 6683FA00            <3>  cmp dx, ACC_DPL_0
   555 000053E0 7507                <3>  jne %%dpl3
   555                              <3> %%dpl0:
   555 000053E2 BE10000000          <3>  mov esi, C_SEG_PROT32
   555 000053E7 EB05                <3>  jmp %%cont
   555                              <3> %%dpl3:
   555 000053E9 BE18000000          <3>  mov esi, CU_SEG_PROT32
   555                              <3> %%cont:
   555 000053EE 668CC9              <3>  mov cx, cs
   555 000053F1 66F7C10700          <3>  test cx, 7
   555 000053F6 7509                <3>  jnz %%ring3
   555                              <3> %%ring0:
   555 000053F8 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   555 000053FF EB07                <3>  jmp %%call
   555                              <3> %%ring3:
   555 00005401 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   555                              <3> %%call:
   555 00005408 E837C9FFFF          <3>  call initIntGateProt
   555 0000540D 6658                <3>  pop ax
   555 0000540F 8ED8                <3>  mov ds, ax
   555 00005411 9D                  <3>  popf
   555 00005412 61                  <3>  popad
   555                              <2> %%test:
   555 00005413 8ED0                <2>  %3
   555 00005415 E975810000          <2>  jmp error
   555                              <2> %%continue:
   555                              <2>  protModeExcCheck %1, %2, %%test
   555                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   555                              <3>  %assign exc_errcode 4
   555 0000541A 36833C2454          <3>  cmp [ss:esp], dword %2
   555 0000541F 0F856A810000        <3>  jne error
   555                              <3>  %else
   555                              <3>  %assign exc_errcode 0
   555                              <3>  %endif
   555                              <3>  %if %4 != -1
   555                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   555                              <3>  jne error
   555                              <3>  %else
   555 00005425 668CCB              <3>  mov bx, cs
   555 00005428 66F7C30700          <3>  test bx, 7
   555 0000542D 750E                <3>  jnz %%ring3
   555                              <3>  %%ring0:
   555 0000542F 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   555 00005435 0F8554810000        <3>  jne error
   555 0000543B EB0C                <3>  jmp %%continue
   555                              <3>  %%ring3:
   555 0000543D 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   555 00005443 0F8546810000        <3>  jne error
   555                              <3>  %%continue:
   555                              <3>  %endif
   555 00005449 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   555 0000544E [13540000]          <3>
   555 00005452 0F8537810000        <3>  jne error
   555 00005458 83C410              <3>  add esp, 12+exc_errcode
   555                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   555 0000545B 60                  <3>  pushad
   555 0000545C 9C                  <3>  pushf
   555 0000545D 668CD8              <3>  mov ax, ds
   555 00005460 6650                <3>  push ax
   555 00005462 B80C000000          <3>  mov eax, %1
   555 00005467 BF[8FD50000]        <3>  mov edi, %2
   555                              <3>  %if %3 != -1
   555 0000546C 66BA0000            <3>  mov dx, %3
   555                              <3>  %else
   555                              <3>  mov dx, cs
   555                              <3>  and dx, 7
   555                              <3>  shl dx, 13
   555                              <3>  %endif
   555 00005470 6683FA00            <3>  cmp dx, ACC_DPL_0
   555 00005474 7507                <3>  jne %%dpl3
   555                              <3> %%dpl0:
   555 00005476 BE10000000          <3>  mov esi, C_SEG_PROT32
   555 0000547B EB05                <3>  jmp %%cont
   555                              <3> %%dpl3:
   555 0000547D BE18000000          <3>  mov esi, CU_SEG_PROT32
   555                              <3> %%cont:
   555 00005482 668CC9              <3>  mov cx, cs
   555 00005485 66F7C10700          <3>  test cx, 7
   555 0000548A 7509                <3>  jnz %%ring3
   555                              <3> %%ring0:
   555 0000548C 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   555 00005493 EB07                <3>  jmp %%call
   555                              <3> %%ring3:
   555 00005495 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   555                              <3> %%call:
   555 0000549C E8A3C8FFFF          <3>  call initIntGateProt
   555 000054A1 6658                <3>  pop ax
   555 000054A3 8ED8                <3>  mov ds, ax
   555 000054A5 9D                  <3>  popf
   555 000054A6 61                  <3>  popad
   555                              <1>  %endif
   555                              <1>  %if %1 != cs
   555                              <1> 
   555 000054A7 66B8F8FF            <1>  mov ax, 0xFFF8
   555                              <1>  protModeFaultTest EX_GP, 0xfff8, mov %1,ax
   555                              <2>  setProtModeIntGate %1, %%continue
   555 000054AB 60                  <3>  pushad
   555 000054AC 9C                  <3>  pushf
   555 000054AD 668CD8              <3>  mov ax, ds
   555 000054B0 6650                <3>  push ax
   555 000054B2 B80D000000          <3>  mov eax, %1
   555 000054B7 BF[05550000]        <3>  mov edi, %2
   555                              <3>  %if %3 != -1
   555                              <3>  mov dx, %3
   555                              <3>  %else
   555 000054BC 668CCA              <3>  mov dx, cs
   555 000054BF 6683E207            <3>  and dx, 7
   555 000054C3 66C1E20D            <3>  shl dx, 13
   555                              <3>  %endif
   555 000054C7 6683FA00            <3>  cmp dx, ACC_DPL_0
   555 000054CB 7507                <3>  jne %%dpl3
   555                              <3> %%dpl0:
   555 000054CD BE10000000          <3>  mov esi, C_SEG_PROT32
   555 000054D2 EB05                <3>  jmp %%cont
   555                              <3> %%dpl3:
   555 000054D4 BE18000000          <3>  mov esi, CU_SEG_PROT32
   555                              <3> %%cont:
   555 000054D9 668CC9              <3>  mov cx, cs
   555 000054DC 66F7C10700          <3>  test cx, 7
   555 000054E1 7509                <3>  jnz %%ring3
   555                              <3> %%ring0:
   555 000054E3 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   555 000054EA EB07                <3>  jmp %%call
   555                              <3> %%ring3:
   555 000054EC 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   555                              <3> %%call:
   555 000054F3 E84CC8FFFF          <3>  call initIntGateProt
   555 000054F8 6658                <3>  pop ax
   555 000054FA 8ED8                <3>  mov ds, ax
   555 000054FC 9D                  <3>  popf
   555 000054FD 61                  <3>  popad
   555                              <2> %%test:
   555 000054FE 8ED0                <2>  %3
   555 00005500 E98A800000          <2>  jmp error
   555                              <2> %%continue:
   555                              <2>  protModeExcCheck %1, %2, %%test
   555                              <3>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   555                              <3>  %assign exc_errcode 4
   555 00005505 36813C24F8FF0000    <3>  cmp [ss:esp], dword %2
   555 0000550D 0F857C800000        <3>  jne error
   555                              <3>  %else
   555                              <3>  %assign exc_errcode 0
   555                              <3>  %endif
   555                              <3>  %if %4 != -1
   555                              <3>  cmp [ss:esp+exc_errcode+4], dword %4
   555                              <3>  jne error
   555                              <3>  %else
   555 00005513 668CCB              <3>  mov bx, cs
   555 00005516 66F7C30700          <3>  test bx, 7
   555 0000551B 750E                <3>  jnz %%ring3
   555                              <3>  %%ring0:
   555 0000551D 36837C240810        <3>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   555 00005523 0F8566800000        <3>  jne error
   555 00005529 EB0C                <3>  jmp %%continue
   555                              <3>  %%ring3:
   555 0000552B 36837C24081B        <3>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   555 00005531 0F8558800000        <3>  jne error
   555                              <3>  %%continue:
   555                              <3>  %endif
   555 00005537 36817C2404-         <3>  cmp [ss:esp+exc_errcode], dword %3
   555 0000553C [FE540000]          <3>
   555 00005540 0F8549800000        <3>  jne error
   555 00005546 83C410              <3>  add esp, 12+exc_errcode
   555                              <2>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   555 00005549 60                  <3>  pushad
   555 0000554A 9C                  <3>  pushf
   555 0000554B 668CD8              <3>  mov ax, ds
   555 0000554E 6650                <3>  push ax
   555 00005550 B80D000000          <3>  mov eax, %1
   555 00005555 BF[8FD50000]        <3>  mov edi, %2
   555                              <3>  %if %3 != -1
   555 0000555A 66BA0000            <3>  mov dx, %3
   555                              <3>  %else
   555                              <3>  mov dx, cs
   555                              <3>  and dx, 7
   555                              <3>  shl dx, 13
   555                              <3>  %endif
   555 0000555E 6683FA00            <3>  cmp dx, ACC_DPL_0
   555 00005562 7507                <3>  jne %%dpl3
   555                              <3> %%dpl0:
   555 00005564 BE10000000          <3>  mov esi, C_SEG_PROT32
   555 00005569 EB05                <3>  jmp %%cont
   555                              <3> %%dpl3:
   555 0000556B BE18000000          <3>  mov esi, CU_SEG_PROT32
   555                              <3> %%cont:
   555 00005570 668CC9              <3>  mov cx, cs
   555 00005573 66F7C10700          <3>  test cx, 7
   555 00005578 7509                <3>  jnz %%ring3
   555                              <3> %%ring0:
   555 0000557A 2EC51D[971B0000]    <3>  lds ebx, [cs:ptrIDTprot]
   555 00005581 EB07                <3>  jmp %%call
   555                              <3> %%ring3:
   555 00005583 2EC51D[9D1B0000]    <3>  lds ebx, [cs:ptrIDTUprot]
   555                              <3> %%call:
   555 0000558A E8B5C7FFFF          <3>  call initIntGateProt
   555 0000558F 6658                <3>  pop ax
   555 00005591 8ED8                <3>  mov ds, ax
   555 00005593 9D                  <3>  popf
   555 00005594 61                  <3>  popad
   555                              <1>  %if %1 != ss
   555                              <1> 
   555                              <1>  mov ax, NP_SEG_PROT
   555                              <1>  protModeFaultTest EX_NP, NP_SEG_PROT, mov %1,ax
   555                              <1> 
   555                              <1>  mov ax, SYS_SEG_PROT
   555                              <1>  protModeFaultTest EX_GP, SYS_SEG_PROT, mov %1,ax
   555                              <1> 
   555                              <1> 
   555                              <1>  call switchToRing3
   555                              <1>  mov ax, DTEST_SEG_PROT|3
   555                              <1>  protModeFaultTest EX_GP, DTEST_SEG_PROT, mov %1,ax
   555                              <1>  call switchToRing0
   555                              <1>  %endif
   555                              <1>  %endif
   555                              <1> 
   556                                  
   557                                  	loadProtModeStack
   557 00005595 2E0FB225[C71B0000]  <1>  lss esp, [cs:ptrSSprot]
   558                                  	advTestSegProt
   558                              <1>  advTestBase
   558                              <2>  %assign TEST_BASE1 TEST_BASE1+0x1000
   558                              <2>  %assign TEST_BASE2 TEST_BASE2+0x1000
   558                              <1>  updLDTDescBase D1_SEG_PROT,TEST_BASE1
   558 0000559D 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   558 000055A4 83C318              <2>  add ebx, (%1) & 0xFFF8
   558 000055A7 66C743020060        <2>  mov word [ebx+2], (%2)&0xFFFF
   558 000055AD C6430402            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   558 000055B1 C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   558                              <1>  updLDTDescBase D2_SEG_PROT,TEST_BASE2
   558 000055B5 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   558 000055BC 83C320              <2>  add ebx, (%1) & 0xFFF8
   558 000055BF 66C743020060        <2>  mov word [ebx+2], (%2)&0xFFFF
   558 000055C5 C6430406            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   558 000055C9 C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   558 000055CD 66BA1C00            <1>  mov dx, D1_SEG_PROT
   558 000055D1 8EDA                <1>  mov ds, dx
   558 000055D3 66BA2400            <1>  mov dx, D2_SEG_PROT
   558 000055D7 8EC2                <1>  mov es, dx
   559                                  
   560                                  ;
   561                                  ;   Zero and sign-extension tests
   562                                  ;
   563                                  	POST C
   563 000055D9 B00C                <1>  mov al, 0x%1
   563 000055DB 66BA9001            <1>  mov dx, POST_PORT
   563 000055DF EE                  <1>  out dx, al
   564 000055E0 2E0FBE05[ABD50000]      	movsx  eax, byte [cs:signedByte] ; byte to a 32-bit register with sign-extension
   565 000055E8 83F880                  	cmp    eax, 0xffffff80
   566 000055EB 0F859E7F0000            	jne    error
   567                                  
   568 000055F1 2E0FBF05[AAD50000]      	movsx  eax, word [cs:signedWord] ; word to a 32-bit register with sign-extension
   569 000055F9 3D8080FFFF              	cmp    eax, 0xffff8080
   570 000055FE 0F858B7F0000            	jne    error
   571                                  
   572 00005604 2E0FB605[ABD50000]      	movzx  eax, byte [cs:signedByte] ; byte to a 32-bit register with zero-extension
   573 0000560C 3D80000000              	cmp    eax, 0x00000080
   574 00005611 0F85787F0000            	jne    error
   575                                  
   576 00005617 2E0FB705[AAD50000]      	movzx  eax, word [cs:signedWord] ; word to a 32-bit register with zero-extension
   577 0000561F 3D80800000              	cmp    eax, 0x00008080
   578 00005624 0F85657F0000            	jne    error
   579                                  
   580 0000562A 6A80                    	push   byte -128       ; NASM will not use opcode 0x6A ("PUSH imm8") unless we specify "byte"
   581 0000562C 5B                      	pop    ebx             ; verify EBX == 0xFFFFFF80
   582 0000562D 83FB80                  	cmp    ebx, 0xFFFFFF80
   583 00005630 0F85597F0000            	jne    error
   584                                  
   585 00005636 81E3FF000000            	and    ebx, 0xff       ; verify EBX == 0x00000080
   586 0000563C 81FB80000000            	cmp    ebx, 0x00000080
   587 00005642 0F85477F0000            	jne    error
   588                                  
   589 00005648 660FBEDB                	movsx  bx, bl          ; verify EBX == 0x0000FF80
   590 0000564C 81FB80FF0000            	cmp    ebx, 0x0000FF80
   591 00005652 0F85377F0000            	jne    error
   592                                  
   593 00005658 0FBFDB                  	movsx  ebx, bx         ; verify EBX == 0xFFFFFF80
   594 0000565B 83FB80                  	cmp    ebx, 0xFFFFFF80
   595 0000565E 0F852B7F0000            	jne    error
   596                                  
   597 00005664 660FB6DB                	movzx  bx,  bl         ; verify EBX == 0xFFFF0080
   598 00005668 81FB8000FFFF            	cmp    ebx, 0xFFFF0080
   599 0000566E 0F851B7F0000            	jne    error
   600                                  
   601 00005674 0FB6DB                  	movzx  ebx, bl         ; verify EBX == 0x00000080
   602 00005677 81FB80000000            	cmp    ebx, 0x00000080
   603 0000567D 0F850C7F0000            	jne    error
   604                                  
   605 00005683 F7D3                    	not    ebx             ; verify EBX == 0xFFFFFF7F
   606 00005685 81FB7FFFFFFF            	cmp    ebx,0xFFFFFF7F
   607 0000568B 0F85FE7E0000            	jne    error
   608                                  
   609 00005691 660FBEDB                	movsx  bx, bl          ; verify EBX == 0xFFFF007F
   610 00005695 81FB7F00FFFF            	cmp    ebx, 0xFFFF007F
   611 0000569B 0F85EE7E0000            	jne    error
   612                                  
   613 000056A1 0FBEDB                  	movsx  ebx, bl         ; verify EBX == 0x0000007F
   614 000056A4 83FB7F                  	cmp    ebx, 0x0000007F
   615 000056A7 0F85E27E0000            	jne    error
   616                                  
   617 000056AD F7D3                    	not    ebx             ; verify EBX == 0xFFFFFF80
   618 000056AF 83FB80                  	cmp    ebx, 0xFFFFFF80
   619 000056B2 0F85D77E0000            	jne    error
   620                                  
   621 000056B8 0FB7DB                  	movzx  ebx, bx         ; verify EBX == 0x0000FF80
   622 000056BB 81FB80FF0000            	cmp    ebx, 0x0000FF80
   623 000056C1 0F85C87E0000            	jne    error
   624                                  
   625 000056C7 660FB6DB                	movzx  bx, bl          ; verify EBX == 0x00000080
   626 000056CB 81FB80000000            	cmp    ebx,0x00000080
   627 000056D1 0F85B87E0000            	jne    error
   628                                  
   629 000056D7 660FBEDB                	movsx  bx, bl
   630 000056DB 66F7DB                  	neg    bx
   631 000056DE 66F7DB                  	neg    bx
   632 000056E1 81FB80FF0000            	cmp    ebx, 0x0000FF80
   633 000056E7 0F85A27E0000            	jne    error
   634                                  
   635 000056ED 0FBFDB                  	movsx  ebx, bx
   636 000056F0 F7DB                    	neg    ebx
   637 000056F2 F7DB                    	neg    ebx
   638 000056F4 83FB80                  	cmp    ebx, 0xFFFFFF80
   639 000056F7 0F85927E0000            	jne    error
   640                                  
   641                                  ;
   642                                  ;   Test 16-bit addressing modes
   643                                  ;
   644 000056FD E9590E0000              	jmp postD
   645                                  %include "tests/lea_m.asm"
     1                              <1> ;
     2                              <1> ;   Execs LEA op with 16-bit addressing and compares the result with given value
     3                              <1> ;   %1 address to calculate
     4                              <1> ;   %2 value to compare
     5                              <1> ;   Uses: flags.
     6                              <1> ;
     7                              <1> %macro testLEA16 2
     8                              <1> 	push ax
     9                              <1> 	a16 lea ax, %1
    10                              <1> 	cmp ax, %2
    11                              <1> 	jne error
    12                              <1> 	pop ax
    13                              <1> %endmacro
    14                              <1> 
    15                              <1> ;
    16                              <1> ;   Execs LEA op with 32-bit addressing and compares the result with given value
    17                              <1> ;   %1 address to calculate
    18                              <1> ;   %2 value to compare
    19                              <1> ;   Uses: flags.
    20                              <1> ;
    21                              <1> %macro testLEA32 2
    22                              <1> 	push eax
    23                              <1> 	a32 lea eax, %1
    24                              <1> 	cmp eax, %2
    25                              <1> 	jne error
    26                              <1> 	pop eax
    27                              <1> %endmacro
   646                                  %include "tests/lea_p.asm"
     1                              <1> ; Testing of 32-bit addressing using the LEA instruction.
     2                              <1> ; Every possible combination of ModRM and SIB is tested (6312 valid for LEA).
     3                              <1> ;
     4                              <1> ; I'm using a different approach than the arith-logic tests at POST EEh.
     5                              <1> ; Instead of manually writing every possible instruction to execute and letting
     6                              <1> ; the CPU write the results to the output port, I'll use a self modifying test
     7                              <1> ; routine. The computed EA will be immediately compared with the expected result.
     8                              <1> ;
     9                              <1> ; Is this really necessary? No.
    10                              <1> ; Was it fun to code at least? Somewhat.
    11                              <1> ; Would I do it again? Probably not.
    12                              <1> ; What is a reasonable alternative? Create a binary table with every possible
    13                              <1> ; valid combination of the LEA instruction followed by RET; this is a fairly
    14                              <1> ; easy, 1-time job that is less prone to bugs.
    15                              <1> ; For every entry in the table:
    16                              <1> ; 1. initialize every register with known values
    17                              <1> ; 2. call the LEA+RET code at the current table offset
    18                              <1> ; 3. print the value of every register to the output port
    19                              <1> ; At the end, manually compare the output with a reference.
    20                              <1> ; Don't depend on NASM to assemble the LEA instructions, it tends to use
    21                              <1> ; optimizations.
    22                              <1> 
    23                              <1> 
    24                              <1> ;
    25                              <1> ; This is the routine that will be updated, to be copied in system memory.
    26                              <1> ; A couple of loops in the driver will iterate through every combination of the
    27                              <1> ; ModRM and SIB bytes used in a LEA instruction. A CMP instruction will then be
    28                              <1> ; executed to do a comparison between the computed EA and the expected correct
    29                              <1> ; value. A final MOV r/m32,r32 will move the computed EA in ES:[0] for later use
    30                              <1> ; (debug).
    31                              <1> ;
    32                              <1> addr32TestCode:
    33 00005702 60                  <1> 	pushad ; save current regs values
    34 00005703 26892504000000      <1> 	mov [es:4], esp ; save ESP
    35                              <1> 
    36                              <1> 	; fill in the values to be used for effective address computation
    37 0000570A B801000000          <1> 	mov eax, 0x001
    38 0000570F BB02000000          <1> 	mov ebx, 0x002
    39 00005714 B904000000          <1> 	mov ecx, 0x004
    40 00005719 BA08000000          <1> 	mov edx, 0x008
    41 0000571E BC20000000          <1> 	mov esp, 0x020
    42 00005723 BD40000000          <1> 	mov ebp, 0x040
    43 00005728 BE80000000          <1> 	mov esi, 0x080
    44 0000572D BF00010000          <1> 	mov edi, 0x100
    45                              <1> 
    46                              <1> 	%define disp8value  0x80
    47                              <1> 	%define disp32value 0x80000000
    48                              <1> 
    49 00005732 8D                  <1> 	db 0x8D ; LEA, lenght=2-7
    50 00005733 00                  <1> 	.leaModRM:   db 0x00 ; ModRM byte
    51 00005734 90                  <1> 	.leaSIBDisp: db 0x90 ; SIB byte or disp8/disp32 or NOP
    52 00005735 909090              <1> 	.leaDisp:    db 0x90,0x90,0x90 ; disp8 or disp32, if SIB is used, else NOPs
    53 00005738 90                  <1> 	.leaLastByte:db 0x90 ; the last possible byte, if SIB and disp32 are used, else NOP
    54                              <1> 
    55                              <1> 	;jmp .skipCMP ; DEBUG
    56                              <1> 
    57 00005739 81                  <1> 	db 0x81 ; CMP (81/7), lenght=6
    58 0000573A 00                  <1> 	.cmpModRM: db 0 ; ModRM byte, the register to compare is derived from LEA's ModRM
    59 0000573B 00000000            <1> 	.cmpImm32: dd 0 ; 32-bit immediate value for comparison
    60                              <1> 
    61                              <1> .skipCMP:
    62 0000573F 26                  <1> 	db 0x26 ; ES prefix
    63 00005740 89                  <1> 	db 0x89 ; MOV, lenght=5
    64 00005741 00                  <1> 	.movModRM: db 0 ; ModRM byte, the register to move is the same as LEA's ModRM
    65 00005742 00000000            <1> 	dd 0 ; disp32
    66                              <1> 
    67 00005746 268B2504000000      <1> 	mov esp, [es:4] ; restore ESP
    68 0000574D 7407                <1> 	je .exit
    69 0000574F 9A[8FD50000]1000    <1> 	call C_SEG_PROT32:error
    70                              <1> 
    71                              <1> .exit
    71          ******************  <1>  warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    72 00005756 61                  <1> 	popad ; restore regs
    73 00005757 CB                  <1> 	retf
    74                              <1> .end:
    75                              <1> 
    76                              <1> %assign leaModRMOff    addr32TestCode.leaModRM   - addr32TestCode
    77                              <1> %assign leaSIBDispOff  addr32TestCode.leaSIBDisp - addr32TestCode
    78                              <1> %assign leaDispOff     addr32TestCode.leaDisp    - addr32TestCode
    79                              <1> %assign leaLastByteOff addr32TestCode.leaLastByte- addr32TestCode
    80                              <1> %assign cmpModRMOff    addr32TestCode.cmpModRM   - addr32TestCode
    81                              <1> %assign cmpImm32Off    addr32TestCode.cmpImm32   - addr32TestCode
    82                              <1> %assign movModRMOff    addr32TestCode.movModRM   - addr32TestCode
    83                              <1> 
    84                              <1> 
    85                              <1> ;
    86                              <1> ; This is the testing driver. Two loops, 1 for ModRM and 1 for the current SIB
    87                              <1> ; (when present), will generate the missing parts of the LEA and CMP
    88                              <1> ; instructions of the testing routine.
    89                              <1> ;
    90                              <1> ; x86 addressing is a bit convoluted and has some special cases:
    91                              <1> ; - if Mod=00b and R/M=100b then SIB is present
    92                              <1> ; - if Mod=00b and R/M=100b and Base=101b then SIB+disp32 are present
    93                              <1> ; - if Mod=00b and R/M=101b then disp32 is present
    94                              <1> ; - if Mod=01b then disp8 is present
    95                              <1> ; - if Mod=01b and R/M=100b then SIB+disp8 are present
    96                              <1> ; - if Mod=10b then disp32 is present
    97                              <1> ; - if Mod=10b and R/M=100b then SIB+disp32 are present
    98                              <1> ;
    99                              <1> ; 7      6 5         3 2          0
   100                              <1> ; ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╗
   101                              <1> ; ║  Mod  │    Reg    │    R/M    ║ ModRM
   102                              <1> ; ╚═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╝
   103                              <1> ;
   104                              <1> ; 7      6 5         3 2          0
   105                              <1> ; ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╗
   106                              <1> ; ║ Scale │   Index   │   Base    ║ SIB
   107                              <1> ; ╚═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╝
   108                              <1> ;
   109                              <1> testAddressing32:
   110                              <1> 	; dynamic code segment base = D1_SEG_PROT base
   111                              <1> 	updLDTDescBase DC_SEG_PROT32,TEST_BASE1
   111 00005758 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   111 0000575F 83C328              <2>  add ebx, (%1) & 0xFFF8
   111 00005762 66C743020060        <2>  mov word [ebx+2], (%2)&0xFFFF
   111 00005768 C6430402            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   111 0000576C C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   112                              <1> 
   113                              <1> 	; copy the test routine in RAM
   114 00005770 B956000000          <1> 	mov ecx, addr32TestCode.end - addr32TestCode
   115 00005775 66B81000            <1> 	mov ax, C_SEG_PROT32 ; source = C_SEG_PROT32:addr32TestCode
   116 00005779 8ED8                <1> 	mov ds, ax
   117 0000577B BE[02570000]        <1> 	mov esi, addr32TestCode
   118 00005780 66B81C00            <1> 	mov ax, D1_SEG_PROT  ; dest = D1_SEG_PROT:0
   119 00005784 8EC0                <1> 	mov es, ax
   120 00005786 BF00000000          <1> 	mov edi, 0
   121 0000578B FC                  <1> 	cld
   122 0000578C F3A4                <1> 	rep movsb
   123                              <1> 
   124 0000578E 66B81C00            <1> 	mov ax, D1_SEG_PROT
   125 00005792 8ED8                <1> 	mov ds, ax ; DS = writeable code segment
   126 00005794 66B82400            <1> 	mov ax, D2_SEG_PROT
   127 00005798 8EC0                <1> 	mov es, ax ; ES = scratch pad
   128                              <1> 
   129                              <1> 	; AL = LEA modrm byte
   130                              <1> 	; AH = LEA SIB byte
   131                              <1> 	; EAX16 = LEA SIB present?
   132                              <1> 	; BL = CMP modrm byte
   133                              <1> 	; BH = LEA last byte value
   134                              <1> 	; ECX15-0 = ModRM loop counter
   135                              <1> 	; ECX31-16 = SIB loop counter
   136                              <1> 	; DL = index in the CMP values table
   137                              <1> 	; DH = ModRM of the MOV
   138                              <1> 	; ESI = LEA 8/32-bit displacement
   139                              <1> 	; EDI = LEA displacement value offset
   140                              <1> 
   141 0000579A 31C0                <1> 	xor eax, eax
   142 0000579C B9C0000001          <1> 	mov ecx, 0x010000C0 ; ModRM values C0-FF are not valid for LEA
   143                              <1> .calcModRMValues:
   144 000057A1 E838000000          <1> 	call addr32CalcLEAValues
   145 000057A6 E8BE000000          <1> 	call addr32CalcCMPValues
   146 000057AB E8F8000000          <1> 	call addr32CalcMOVValues
   147 000057B0 E8FC000000          <1> 	call addr32CopyValues
   148                              <1> 	; call addr32PrintStatus ; enable for DEBUG
   149 000057B5 9A000000002C00      <1> 	call DC_SEG_PROT32:0
   150                              <1> 	; call addr32PrintResult ; enable for DEBUG
   151                              <1> 
   152 000057BC A900000100          <1> 	test eax, 0x10000 ; is SIB used?
   153 000057C1 7504                <1> 	jnz .nextSIB
   154                              <1> .nextModRM:
   155 000057C3 FEC0                <1> 	inc al ; next LEA ModRM value
   156 000057C5 EB13                <1> 	jmp .loop
   157                              <1> .nextSIB:
   158 000057C7 FEC4                <1> 	inc ah ; next LEA SIB value
   159 000057C9 67E2D5              <1> 	a16 loop .calcModRMValues
   160                              <1> 	; if we end here then the SIB loop is over
   161 000057CC 25FFFF0000          <1> 	and  eax, 0x0ffff  ; disable SIB byte flag
   162 000057D1 66B90001            <1> 	mov  cx, 0x100     ; reset SIB loop counter
   163 000057D5 C1C110              <1> 	rol  ecx, 16       ; switch SIB loop cnt with ModRM loop cnt
   164 000057D8 EBE9                <1> 	jmp .nextModRM
   165                              <1> .loop:
   166 000057DA 67E2C4              <1> 	a16 loop .calcModRMValues
   167                              <1> 	; outer ModRM loop finished
   168 000057DD C3                  <1> 	ret
   169                              <1> 
   170                              <1> 
   171                              <1> addr32CalcLEAValues:
   172                              <1> 	; handle the SIB byte
   173 000057DE 89C5                <1> 	mov ebp, eax
   174 000057E0 83E507              <1> 	and ebp, 111b ; LEA R/M value
   175 000057E3 83FD04              <1> 	cmp ebp, 100b ; SIB encoding?
   176 000057E6 7516                <1> 	jne .noSIB
   177                              <1> .SIB:
   178 000057E8 BF33000000          <1> 	mov  edi, leaDispOff    ; displacement, if present, is after SIB
   179 000057ED A900000100          <1> 	test eax, 0x10000       ; was prev iteration with SIB?
   180 000057F2 750F                <1> 	jnz .disp
   181 000057F4 0D00000100          <1> 	or   eax, 0x10000       ; enable SIB byte flag
   182 000057F9 C1C110              <1> 	rol  ecx, 16            ; switch ModRM loop with SIB loop
   183 000057FC EB05                <1> 	jmp .disp
   184                              <1> .noSIB:
   185 000057FE BF32000000          <1> 	mov  edi, leaSIBDispOff ; displacement, if present, is after opcode
   186                              <1> 
   187                              <1> 	; handle disp8/disp32
   188                              <1> .disp:
   189 00005803 BE90909090          <1> 	mov  esi, 0x90909090    ; init with NOPs
   190 00005808 89C5                <1> 	mov  ebp, eax
   191 0000580A C1ED06              <1> 	shr  ebp, 6
   192 0000580D 83E503              <1> 	and  ebp, 11b     ; Mod
   193 00005810 83FD01              <1> 	cmp  ebp, 01b     ; Mod=01, disp8
   194 00005813 7428                <1> 	je  .disp8
   195 00005815 83FD02              <1> 	cmp  ebp, 10b     ; Mod=10, disp32
   196 00005818 7430                <1> 	je  .disp32
   197 0000581A 83FD03              <1> 	cmp  ebp, 11b     ; Mod=11 no displacement
   198 0000581D 7432                <1> 	je  .lastByte
   199 0000581F 89C5                <1> 	mov  ebp, eax
   200 00005821 83E507              <1> 	and  ebp, 111b    ; R/M
   201 00005824 83FD05              <1> 	cmp  ebp, 101b    ; Mod=00 and R/M=101, disp32
   202 00005827 7421                <1> 	je  .disp32
   203 00005829 83FD04              <1> 	cmp  ebp, 100b    ; Mod=00 and R/M=100, is SIB Base=101?
   204 0000582C 7523                <1> 	jne .lastByte
   205 0000582E 89C5                <1> 	mov  ebp, eax
   206 00005830 C1ED08              <1> 	shr  ebp, 8
   207 00005833 83E507              <1> 	and  ebp, 111b    ; SIB Base value
   208 00005836 83FD05              <1> 	cmp  ebp, 101b    ; is Base=101?
   209 00005839 740F                <1> 	je  .disp32
   210 0000583B EB14                <1> 	jmp .lastByte
   211                              <1> .disp8:
   212 0000583D BE80000000          <1> 	mov  esi, disp8value
   213 00005842 81CE00909090        <1> 	or   esi, 0x90909000
   214 00005848 EB07                <1> 	jmp .lastByte
   215                              <1> .disp32:
   216 0000584A BE00000080          <1> 	mov  esi, disp32value
   217 0000584F EB00                <1> 	jmp .lastByte
   218                              <1> 
   219                              <1> 	; the last byte of LEA
   220                              <1> .lastByte:
   221 00005851 B790                <1> 	mov  bh, 0x90
   222 00005853 A900000100          <1> 	test eax, 0x10000 ; SIB present?
   223 00005858 740E                <1> 	jz  .return
   224 0000585A 26893500000000      <1> 	mov  [es:0], esi  ; take last byte of displacement dword
   225 00005861 268A3D03000000      <1> 	mov  bh, [es:3]
   226                              <1> 
   227                              <1> .return:
   228 00005868 C3                  <1> 	ret
   229                              <1> 
   230                              <1> 
   231                              <1> addr32CalcCMPValues:
   232 00005869 88C3                <1> 	mov bl, al
   233 0000586B C0EB03              <1> 	shr bl, 3
   234 0000586E 80E307              <1> 	and bl, 00000111b ; CMP R/M value = dest register of LEA
   235 00005871 80CB38              <1> 	or  bl, 00111000b ; CMP Opcode value = /7 (CMP r/m32,imm32 inst.)
   236 00005874 80CBC0              <1> 	or  bl, 11000000b ; CMP Mod value = 11b (dest is register)
   237                              <1> 
   238 00005877 31D2                <1> 	xor edx, edx
   239                              <1> 
   240                              <1> 	; calculate the cmp value address offset in the values tables
   241                              <1> 	; EBP = will be the base address in the values tables
   242                              <1> 	; EDX = will be the index in the values tables (then mult. by 4 bytes)
   243                              <1> 
   244                              <1> 	; take cmp value from the ModRM table
   245                              <1> 	; cmp value at cs:[testModRMValues + al*4]
   246 00005879 88C2                <1> 	mov dl, al
   247 0000587B 80E207              <1> 	and dl, 0x7 ; R/M
   248 0000587E 88C6                <1> 	mov dh, al
   249 00005880 C0EE06              <1> 	shr dh, 6   ; Mod
   250 00005883 C0E603              <1> 	shl dh, 3   ; Mod*8
   251 00005886 00F2                <1> 	add dl, dh  ; DL = Mod*8 + R/M
   252 00005888 BD[FB580000]        <1> 	mov ebp, addr32Values
   253                              <1> 
   254 0000588D A900000100          <1> 	test eax, 0x10000 ; is SIB used?
   255 00005892 7413                <1> 	jz .return
   256                              <1> 
   257                              <1> 	; take cmp value from the SIB tables
   258                              <1> 	; cmp value at cs:[testModRMValuesSIB00 + 1024*SIBtblIdx + ah*4]
   259 00005894 88E2                <1> 	mov dl, ah
   260 00005896 89C5                <1> 	mov ebp, eax
   261 00005898 C1ED06              <1> 	shr ebp, 6
   262 0000589B 83E503              <1> 	and ebp, 11b  ; SIBtblIdx (SIB table index)
   263 0000589E C1E50A              <1> 	shl ebp, 10   ; 256values * 4bytes
   264 000058A1 81C5[5B590000]      <1> 	add ebp, addr32ValuesSIB00 ; SIB tables base
   265                              <1> 
   266                              <1> .return:
   267 000058A7 C3                  <1> 	ret
   268                              <1> 
   269                              <1> 
   270                              <1> addr32CalcMOVValues:
   271 000058A8 88C6                <1> 	mov dh, al
   272 000058AA 80E638              <1> 	and dh, 00111000b ; MOV Reg value = Reg of LEA's ModRM
   273 000058AD 80CE05              <1> 	or  dh, 00000101b ; MOV R/M value = disp32
   274                              <1> 	;or  dh, 00000000b ; MOV Mod value = 00b (dest is memory)
   275 000058B0 C3                  <1> 	ret
   276                              <1> 
   277                              <1> 
   278                              <1> addr32CopyValues:
   279 000058B1 A231000000          <1> 	mov [leaModRMOff],    al
   280 000058B6 882532000000        <1> 	mov [leaSIBDispOff],  ah
   281 000058BC 8937                <1> 	mov [edi],            esi
   282 000058BE 883D36000000        <1> 	mov [leaLastByteOff], bh
   283 000058C4 881D38000000        <1> 	mov [cmpModRMOff],    bl
   284 000058CA 88353F000000        <1> 	mov [movModRMOff],    dh
   285 000058D0 81E2FF000000        <1> 	and edx, 0xFF
   286 000058D6 2E8B549500          <1> 	mov edx, [cs:ebp + edx*4]
   287 000058DB 891539000000        <1> 	mov [cmpImm32Off],    edx
   288 000058E1 C3                  <1> 	ret
   289                              <1> 
   290                              <1> 
   291                              <1> addr32PrintStatus:
   292 000058E2 E8933F0000          <1> 	call printEAX
   293                              <1> 	;xchg ecx, edx
   294                              <1> 	;call printEDX
   295                              <1> 	;xchg ecx, edx
   296                              <1> 	;call printEOL
   297 000058E7 C3                  <1> 	ret
   298                              <1> 
   299                              <1> 
   300                              <1> addr32PrintResult:
   301 000058E8 50                  <1> 	push eax
   302 000058E9 26A100000000        <1> 	mov  eax, [es:0]
   303 000058EF E8863F0000          <1> 	call printEAX
   304 000058F4 E8073F0000          <1> 	call printEOL
   305 000058F9 58                  <1> 	pop  eax
   306 000058FA C3                  <1> 	ret
   307                              <1> 
   308                              <1> 
   309                              <1> addr32Values:
   310 000058FB 01000000            <1> 	dd 0x00000001
   311 000058FF 04000000            <1> 	dd 0x00000004
   312 00005903 08000000            <1> 	dd 0x00000008
   313 00005907 02000000            <1> 	dd 0x00000002
   314 0000590B 00000000            <1> 	dd 0x0 ; SIB table 00
   315 0000590F 00000080            <1> 	dd 0x80000000
   316 00005913 80000000            <1> 	dd 0x00000080
   317 00005917 00010000            <1> 	dd 0x00000100
   318 0000591B 81FFFFFF            <1> 	dd 0xFFFFFF81
   319 0000591F 84FFFFFF            <1> 	dd 0xFFFFFF84
   320 00005923 88FFFFFF            <1> 	dd 0xFFFFFF88
   321 00005927 82FFFFFF            <1> 	dd 0xFFFFFF82
   322 0000592B 00000000            <1> 	dd 0x0 ; SIB table 01
   323 0000592F C0FFFFFF            <1> 	dd 0xFFFFFFC0
   324 00005933 00000000            <1> 	dd 0x00000000
   325 00005937 80000000            <1> 	dd 0x00000080
   326 0000593B 01000080            <1> 	dd 0x80000001
   327 0000593F 04000080            <1> 	dd 0x80000004
   328 00005943 08000080            <1> 	dd 0x80000008
   329 00005947 02000080            <1> 	dd 0x80000002
   330 0000594B 00000000            <1> 	dd 0x0 ; SIB table 10
   331 0000594F 40000080            <1> 	dd 0x80000040
   332 00005953 80000080            <1> 	dd 0x80000080
   333 00005957 00010080            <1> 	dd 0x80000100
   334                              <1> addr32ValuesSIB00:
   335 0000595B 02000000            <1> 	dd 0x00000002
   336 0000595F 05000000            <1> 	dd 0x00000005
   337 00005963 09000000            <1> 	dd 0x00000009
   338 00005967 03000000            <1> 	dd 0x00000003
   339 0000596B 21000000            <1> 	dd 0x00000021
   340 0000596F 01000080            <1> 	dd 0x80000001
   341 00005973 81000000            <1> 	dd 0x00000081
   342 00005977 01010000            <1> 	dd 0x00000101
   343 0000597B 05000000            <1> 	dd 0x00000005
   344 0000597F 08000000            <1> 	dd 0x00000008
   345 00005983 0C000000            <1> 	dd 0x0000000C
   346 00005987 06000000            <1> 	dd 0x00000006
   347 0000598B 24000000            <1> 	dd 0x00000024
   348 0000598F 04000080            <1> 	dd 0x80000004
   349 00005993 84000000            <1> 	dd 0x00000084
   350 00005997 04010000            <1> 	dd 0x00000104
   351 0000599B 09000000            <1> 	dd 0x00000009
   352 0000599F 0C000000            <1> 	dd 0x0000000C
   353 000059A3 10000000            <1> 	dd 0x00000010
   354 000059A7 0A000000            <1> 	dd 0x0000000A
   355 000059AB 28000000            <1> 	dd 0x00000028
   356 000059AF 08000080            <1> 	dd 0x80000008
   357 000059B3 88000000            <1> 	dd 0x00000088
   358 000059B7 08010000            <1> 	dd 0x00000108
   359 000059BB 03000000            <1> 	dd 0x00000003
   360 000059BF 06000000            <1> 	dd 0x00000006
   361 000059C3 0A000000            <1> 	dd 0x0000000A
   362 000059C7 04000000            <1> 	dd 0x00000004
   363 000059CB 22000000            <1> 	dd 0x00000022
   364 000059CF 02000080            <1> 	dd 0x80000002
   365 000059D3 82000000            <1> 	dd 0x00000082
   366 000059D7 02010000            <1> 	dd 0x00000102
   367 000059DB 01000000            <1> 	dd 0x00000001
   368 000059DF 04000000            <1> 	dd 0x00000004
   369 000059E3 08000000            <1> 	dd 0x00000008
   370 000059E7 02000000            <1> 	dd 0x00000002
   371 000059EB 20000000            <1> 	dd 0x00000020
   372 000059EF 00000080            <1> 	dd 0x80000000
   373 000059F3 80000000            <1> 	dd 0x00000080
   374 000059F7 00010000            <1> 	dd 0x00000100
   375 000059FB 41000000            <1> 	dd 0x00000041
   376 000059FF 44000000            <1> 	dd 0x00000044
   377 00005A03 48000000            <1> 	dd 0x00000048
   378 00005A07 42000000            <1> 	dd 0x00000042
   379 00005A0B 60000000            <1> 	dd 0x00000060
   380 00005A0F 40000080            <1> 	dd 0x80000040
   381 00005A13 C0000000            <1> 	dd 0x000000C0
   382 00005A17 40010000            <1> 	dd 0x00000140
   383 00005A1B 81000000            <1> 	dd 0x00000081
   384 00005A1F 84000000            <1> 	dd 0x00000084
   385 00005A23 88000000            <1> 	dd 0x00000088
   386 00005A27 82000000            <1> 	dd 0x00000082
   387 00005A2B A0000000            <1> 	dd 0x000000A0
   388 00005A2F 80000080            <1> 	dd 0x80000080
   389 00005A33 00010000            <1> 	dd 0x00000100
   390 00005A37 80010000            <1> 	dd 0x00000180
   391 00005A3B 01010000            <1> 	dd 0x00000101
   392 00005A3F 04010000            <1> 	dd 0x00000104
   393 00005A43 08010000            <1> 	dd 0x00000108
   394 00005A47 02010000            <1> 	dd 0x00000102
   395 00005A4B 20010000            <1> 	dd 0x00000120
   396 00005A4F 00010080            <1> 	dd 0x80000100
   397 00005A53 80010000            <1> 	dd 0x00000180
   398 00005A57 00020000            <1> 	dd 0x00000200
   399 00005A5B 03000000            <1> 	dd 0x00000003
   400 00005A5F 06000000            <1> 	dd 0x00000006
   401 00005A63 0A000000            <1> 	dd 0x0000000A
   402 00005A67 04000000            <1> 	dd 0x00000004
   403 00005A6B 22000000            <1> 	dd 0x00000022
   404 00005A6F 02000080            <1> 	dd 0x80000002
   405 00005A73 82000000            <1> 	dd 0x00000082
   406 00005A77 02010000            <1> 	dd 0x00000102
   407 00005A7B 09000000            <1> 	dd 0x00000009
   408 00005A7F 0C000000            <1> 	dd 0x0000000C
   409 00005A83 10000000            <1> 	dd 0x00000010
   410 00005A87 0A000000            <1> 	dd 0x0000000A
   411 00005A8B 28000000            <1> 	dd 0x00000028
   412 00005A8F 08000080            <1> 	dd 0x80000008
   413 00005A93 88000000            <1> 	dd 0x00000088
   414 00005A97 08010000            <1> 	dd 0x00000108
   415 00005A9B 11000000            <1> 	dd 0x00000011
   416 00005A9F 14000000            <1> 	dd 0x00000014
   417 00005AA3 18000000            <1> 	dd 0x00000018
   418 00005AA7 12000000            <1> 	dd 0x00000012
   419 00005AAB 30000000            <1> 	dd 0x00000030
   420 00005AAF 10000080            <1> 	dd 0x80000010
   421 00005AB3 90000000            <1> 	dd 0x00000090
   422 00005AB7 10010000            <1> 	dd 0x00000110
   423 00005ABB 05000000            <1> 	dd 0x00000005
   424 00005ABF 08000000            <1> 	dd 0x00000008
   425 00005AC3 0C000000            <1> 	dd 0x0000000C
   426 00005AC7 06000000            <1> 	dd 0x00000006
   427 00005ACB 24000000            <1> 	dd 0x00000024
   428 00005ACF 04000080            <1> 	dd 0x80000004
   429 00005AD3 84000000            <1> 	dd 0x00000084
   430 00005AD7 04010000            <1> 	dd 0x00000104
   431 00005ADB 01000000            <1> 	dd 0x00000001
   432 00005ADF 04000000            <1> 	dd 0x00000004
   433 00005AE3 08000000            <1> 	dd 0x00000008
   434 00005AE7 02000000            <1> 	dd 0x00000002
   435 00005AEB 20000000            <1> 	dd 0x00000020
   436 00005AEF 00000080            <1> 	dd 0x80000000
   437 00005AF3 80000000            <1> 	dd 0x00000080
   438 00005AF7 00010000            <1> 	dd 0x00000100
   439 00005AFB 81000000            <1> 	dd 0x00000081
   440 00005AFF 84000000            <1> 	dd 0x00000084
   441 00005B03 88000000            <1> 	dd 0x00000088
   442 00005B07 82000000            <1> 	dd 0x00000082
   443 00005B0B A0000000            <1> 	dd 0x000000A0
   444 00005B0F 80000080            <1> 	dd 0x80000080
   445 00005B13 00010000            <1> 	dd 0x00000100
   446 00005B17 80010000            <1> 	dd 0x00000180
   447 00005B1B 01010000            <1> 	dd 0x00000101
   448 00005B1F 04010000            <1> 	dd 0x00000104
   449 00005B23 08010000            <1> 	dd 0x00000108
   450 00005B27 02010000            <1> 	dd 0x00000102
   451 00005B2B 20010000            <1> 	dd 0x00000120
   452 00005B2F 00010080            <1> 	dd 0x80000100
   453 00005B33 80010000            <1> 	dd 0x00000180
   454 00005B37 00020000            <1> 	dd 0x00000200
   455 00005B3B 01020000            <1> 	dd 0x00000201
   456 00005B3F 04020000            <1> 	dd 0x00000204
   457 00005B43 08020000            <1> 	dd 0x00000208
   458 00005B47 02020000            <1> 	dd 0x00000202
   459 00005B4B 20020000            <1> 	dd 0x00000220
   460 00005B4F 00020080            <1> 	dd 0x80000200
   461 00005B53 80020000            <1> 	dd 0x00000280
   462 00005B57 00030000            <1> 	dd 0x00000300
   463 00005B5B 05000000            <1> 	dd 0x00000005
   464 00005B5F 08000000            <1> 	dd 0x00000008
   465 00005B63 0C000000            <1> 	dd 0x0000000C
   466 00005B67 06000000            <1> 	dd 0x00000006
   467 00005B6B 24000000            <1> 	dd 0x00000024
   468 00005B6F 04000080            <1> 	dd 0x80000004
   469 00005B73 84000000            <1> 	dd 0x00000084
   470 00005B77 04010000            <1> 	dd 0x00000104
   471 00005B7B 11000000            <1> 	dd 0x00000011
   472 00005B7F 14000000            <1> 	dd 0x00000014
   473 00005B83 18000000            <1> 	dd 0x00000018
   474 00005B87 12000000            <1> 	dd 0x00000012
   475 00005B8B 30000000            <1> 	dd 0x00000030
   476 00005B8F 10000080            <1> 	dd 0x80000010
   477 00005B93 90000000            <1> 	dd 0x00000090
   478 00005B97 10010000            <1> 	dd 0x00000110
   479 00005B9B 21000000            <1> 	dd 0x00000021
   480 00005B9F 24000000            <1> 	dd 0x00000024
   481 00005BA3 28000000            <1> 	dd 0x00000028
   482 00005BA7 22000000            <1> 	dd 0x00000022
   483 00005BAB 40000000            <1> 	dd 0x00000040
   484 00005BAF 20000080            <1> 	dd 0x80000020
   485 00005BB3 A0000000            <1> 	dd 0x000000A0
   486 00005BB7 20010000            <1> 	dd 0x00000120
   487 00005BBB 09000000            <1> 	dd 0x00000009
   488 00005BBF 0C000000            <1> 	dd 0x0000000C
   489 00005BC3 10000000            <1> 	dd 0x00000010
   490 00005BC7 0A000000            <1> 	dd 0x0000000A
   491 00005BCB 28000000            <1> 	dd 0x00000028
   492 00005BCF 08000080            <1> 	dd 0x80000008
   493 00005BD3 88000000            <1> 	dd 0x00000088
   494 00005BD7 08010000            <1> 	dd 0x00000108
   495 00005BDB 01000000            <1> 	dd 0x00000001
   496 00005BDF 04000000            <1> 	dd 0x00000004
   497 00005BE3 08000000            <1> 	dd 0x00000008
   498 00005BE7 02000000            <1> 	dd 0x00000002
   499 00005BEB 20000000            <1> 	dd 0x00000020
   500 00005BEF 00000080            <1> 	dd 0x80000000
   501 00005BF3 80000000            <1> 	dd 0x00000080
   502 00005BF7 00010000            <1> 	dd 0x00000100
   503 00005BFB 01010000            <1> 	dd 0x00000101
   504 00005BFF 04010000            <1> 	dd 0x00000104
   505 00005C03 08010000            <1> 	dd 0x00000108
   506 00005C07 02010000            <1> 	dd 0x00000102
   507 00005C0B 20010000            <1> 	dd 0x00000120
   508 00005C0F 00010080            <1> 	dd 0x80000100
   509 00005C13 80010000            <1> 	dd 0x00000180
   510 00005C17 00020000            <1> 	dd 0x00000200
   511 00005C1B 01020000            <1> 	dd 0x00000201
   512 00005C1F 04020000            <1> 	dd 0x00000204
   513 00005C23 08020000            <1> 	dd 0x00000208
   514 00005C27 02020000            <1> 	dd 0x00000202
   515 00005C2B 20020000            <1> 	dd 0x00000220
   516 00005C2F 00020080            <1> 	dd 0x80000200
   517 00005C33 80020000            <1> 	dd 0x00000280
   518 00005C37 00030000            <1> 	dd 0x00000300
   519 00005C3B 01040000            <1> 	dd 0x00000401
   520 00005C3F 04040000            <1> 	dd 0x00000404
   521 00005C43 08040000            <1> 	dd 0x00000408
   522 00005C47 02040000            <1> 	dd 0x00000402
   523 00005C4B 20040000            <1> 	dd 0x00000420
   524 00005C4F 00040080            <1> 	dd 0x80000400
   525 00005C53 80040000            <1> 	dd 0x00000480
   526 00005C57 00050000            <1> 	dd 0x00000500
   527 00005C5B 09000000            <1> 	dd 0x00000009
   528 00005C5F 0C000000            <1> 	dd 0x0000000C
   529 00005C63 10000000            <1> 	dd 0x00000010
   530 00005C67 0A000000            <1> 	dd 0x0000000A
   531 00005C6B 28000000            <1> 	dd 0x00000028
   532 00005C6F 08000080            <1> 	dd 0x80000008
   533 00005C73 88000000            <1> 	dd 0x00000088
   534 00005C77 08010000            <1> 	dd 0x00000108
   535 00005C7B 21000000            <1> 	dd 0x00000021
   536 00005C7F 24000000            <1> 	dd 0x00000024
   537 00005C83 28000000            <1> 	dd 0x00000028
   538 00005C87 22000000            <1> 	dd 0x00000022
   539 00005C8B 40000000            <1> 	dd 0x00000040
   540 00005C8F 20000080            <1> 	dd 0x80000020
   541 00005C93 A0000000            <1> 	dd 0x000000A0
   542 00005C97 20010000            <1> 	dd 0x00000120
   543 00005C9B 41000000            <1> 	dd 0x00000041
   544 00005C9F 44000000            <1> 	dd 0x00000044
   545 00005CA3 48000000            <1> 	dd 0x00000048
   546 00005CA7 42000000            <1> 	dd 0x00000042
   547 00005CAB 60000000            <1> 	dd 0x00000060
   548 00005CAF 40000080            <1> 	dd 0x80000040
   549 00005CB3 C0000000            <1> 	dd 0x000000C0
   550 00005CB7 40010000            <1> 	dd 0x00000140
   551 00005CBB 11000000            <1> 	dd 0x00000011
   552 00005CBF 14000000            <1> 	dd 0x00000014
   553 00005CC3 18000000            <1> 	dd 0x00000018
   554 00005CC7 12000000            <1> 	dd 0x00000012
   555 00005CCB 30000000            <1> 	dd 0x00000030
   556 00005CCF 10000080            <1> 	dd 0x80000010
   557 00005CD3 90000000            <1> 	dd 0x00000090
   558 00005CD7 10010000            <1> 	dd 0x00000110
   559 00005CDB 01000000            <1> 	dd 0x00000001
   560 00005CDF 04000000            <1> 	dd 0x00000004
   561 00005CE3 08000000            <1> 	dd 0x00000008
   562 00005CE7 02000000            <1> 	dd 0x00000002
   563 00005CEB 20000000            <1> 	dd 0x00000020
   564 00005CEF 00000080            <1> 	dd 0x80000000
   565 00005CF3 80000000            <1> 	dd 0x00000080
   566 00005CF7 00010000            <1> 	dd 0x00000100
   567 00005CFB 01020000            <1> 	dd 0x00000201
   568 00005CFF 04020000            <1> 	dd 0x00000204
   569 00005D03 08020000            <1> 	dd 0x00000208
   570 00005D07 02020000            <1> 	dd 0x00000202
   571 00005D0B 20020000            <1> 	dd 0x00000220
   572 00005D0F 00020080            <1> 	dd 0x80000200
   573 00005D13 80020000            <1> 	dd 0x00000280
   574 00005D17 00030000            <1> 	dd 0x00000300
   575 00005D1B 01040000            <1> 	dd 0x00000401
   576 00005D1F 04040000            <1> 	dd 0x00000404
   577 00005D23 08040000            <1> 	dd 0x00000408
   578 00005D27 02040000            <1> 	dd 0x00000402
   579 00005D2B 20040000            <1> 	dd 0x00000420
   580 00005D2F 00040080            <1> 	dd 0x80000400
   581 00005D33 80040000            <1> 	dd 0x00000480
   582 00005D37 00050000            <1> 	dd 0x00000500
   583 00005D3B 01080000            <1> 	dd 0x00000801
   584 00005D3F 04080000            <1> 	dd 0x00000804
   585 00005D43 08080000            <1> 	dd 0x00000808
   586 00005D47 02080000            <1> 	dd 0x00000802
   587 00005D4B 20080000            <1> 	dd 0x00000820
   588 00005D4F 00080080            <1> 	dd 0x80000800
   589 00005D53 80080000            <1> 	dd 0x00000880
   590 00005D57 00090000            <1> 	dd 0x00000900
   591                              <1> addr32ValuesSIB01:
   592 00005D5B 82FFFFFF            <1> 	dd 0xFFFFFF82
   593 00005D5F 85FFFFFF            <1> 	dd 0xFFFFFF85
   594 00005D63 89FFFFFF            <1> 	dd 0xFFFFFF89
   595 00005D67 83FFFFFF            <1> 	dd 0xFFFFFF83
   596 00005D6B A1FFFFFF            <1> 	dd 0xFFFFFFA1
   597 00005D6F C1FFFFFF            <1> 	dd 0xFFFFFFC1
   598 00005D73 01000000            <1> 	dd 0x00000001
   599 00005D77 81000000            <1> 	dd 0x00000081
   600 00005D7B 85FFFFFF            <1> 	dd 0xFFFFFF85
   601 00005D7F 88FFFFFF            <1> 	dd 0xFFFFFF88
   602 00005D83 8CFFFFFF            <1> 	dd 0xFFFFFF8C
   603 00005D87 86FFFFFF            <1> 	dd 0xFFFFFF86
   604 00005D8B A4FFFFFF            <1> 	dd 0xFFFFFFA4
   605 00005D8F C4FFFFFF            <1> 	dd 0xFFFFFFC4
   606 00005D93 04000000            <1> 	dd 0x00000004
   607 00005D97 84000000            <1> 	dd 0x00000084
   608 00005D9B 89FFFFFF            <1> 	dd 0xFFFFFF89
   609 00005D9F 8CFFFFFF            <1> 	dd 0xFFFFFF8C
   610 00005DA3 90FFFFFF            <1> 	dd 0xFFFFFF90
   611 00005DA7 8AFFFFFF            <1> 	dd 0xFFFFFF8A
   612 00005DAB A8FFFFFF            <1> 	dd 0xFFFFFFA8
   613 00005DAF C8FFFFFF            <1> 	dd 0xFFFFFFC8
   614 00005DB3 08000000            <1> 	dd 0x00000008
   615 00005DB7 88000000            <1> 	dd 0x00000088
   616 00005DBB 83FFFFFF            <1> 	dd 0xFFFFFF83
   617 00005DBF 86FFFFFF            <1> 	dd 0xFFFFFF86
   618 00005DC3 8AFFFFFF            <1> 	dd 0xFFFFFF8A
   619 00005DC7 84FFFFFF            <1> 	dd 0xFFFFFF84
   620 00005DCB A2FFFFFF            <1> 	dd 0xFFFFFFA2
   621 00005DCF C2FFFFFF            <1> 	dd 0xFFFFFFC2
   622 00005DD3 02000000            <1> 	dd 0x00000002
   623 00005DD7 82000000            <1> 	dd 0x00000082
   624 00005DDB 81FFFFFF            <1> 	dd 0xFFFFFF81
   625 00005DDF 84FFFFFF            <1> 	dd 0xFFFFFF84
   626 00005DE3 88FFFFFF            <1> 	dd 0xFFFFFF88
   627 00005DE7 82FFFFFF            <1> 	dd 0xFFFFFF82
   628 00005DEB A0FFFFFF            <1> 	dd 0xFFFFFFA0
   629 00005DEF C0FFFFFF            <1> 	dd 0xFFFFFFC0
   630 00005DF3 00000000            <1> 	dd 0x00000000
   631 00005DF7 80000000            <1> 	dd 0x00000080
   632 00005DFB C1FFFFFF            <1> 	dd 0xFFFFFFC1
   633 00005DFF C4FFFFFF            <1> 	dd 0xFFFFFFC4
   634 00005E03 C8FFFFFF            <1> 	dd 0xFFFFFFC8
   635 00005E07 C2FFFFFF            <1> 	dd 0xFFFFFFC2
   636 00005E0B E0FFFFFF            <1> 	dd 0xFFFFFFE0
   637 00005E0F 00000000            <1> 	dd 0x00000000
   638 00005E13 40000000            <1> 	dd 0x00000040
   639 00005E17 C0000000            <1> 	dd 0x000000C0
   640 00005E1B 01000000            <1> 	dd 0x00000001
   641 00005E1F 04000000            <1> 	dd 0x00000004
   642 00005E23 08000000            <1> 	dd 0x00000008
   643 00005E27 02000000            <1> 	dd 0x00000002
   644 00005E2B 20000000            <1> 	dd 0x00000020
   645 00005E2F 40000000            <1> 	dd 0x00000040
   646 00005E33 80000000            <1> 	dd 0x00000080
   647 00005E37 00010000            <1> 	dd 0x00000100
   648 00005E3B 81000000            <1> 	dd 0x00000081
   649 00005E3F 84000000            <1> 	dd 0x00000084
   650 00005E43 88000000            <1> 	dd 0x00000088
   651 00005E47 82000000            <1> 	dd 0x00000082
   652 00005E4B A0000000            <1> 	dd 0x000000A0
   653 00005E4F C0000000            <1> 	dd 0x000000C0
   654 00005E53 00010000            <1> 	dd 0x00000100
   655 00005E57 80010000            <1> 	dd 0x00000180
   656 00005E5B 83FFFFFF            <1> 	dd 0xFFFFFF83
   657 00005E5F 86FFFFFF            <1> 	dd 0xFFFFFF86
   658 00005E63 8AFFFFFF            <1> 	dd 0xFFFFFF8A
   659 00005E67 84FFFFFF            <1> 	dd 0xFFFFFF84
   660 00005E6B A2FFFFFF            <1> 	dd 0xFFFFFFA2
   661 00005E6F C2FFFFFF            <1> 	dd 0xFFFFFFC2
   662 00005E73 02000000            <1> 	dd 0x00000002
   663 00005E77 82000000            <1> 	dd 0x00000082
   664 00005E7B 89FFFFFF            <1> 	dd 0xFFFFFF89
   665 00005E7F 8CFFFFFF            <1> 	dd 0xFFFFFF8C
   666 00005E83 90FFFFFF            <1> 	dd 0xFFFFFF90
   667 00005E87 8AFFFFFF            <1> 	dd 0xFFFFFF8A
   668 00005E8B A8FFFFFF            <1> 	dd 0xFFFFFFA8
   669 00005E8F C8FFFFFF            <1> 	dd 0xFFFFFFC8
   670 00005E93 08000000            <1> 	dd 0x00000008
   671 00005E97 88000000            <1> 	dd 0x00000088
   672 00005E9B 91FFFFFF            <1> 	dd 0xFFFFFF91
   673 00005E9F 94FFFFFF            <1> 	dd 0xFFFFFF94
   674 00005EA3 98FFFFFF            <1> 	dd 0xFFFFFF98
   675 00005EA7 92FFFFFF            <1> 	dd 0xFFFFFF92
   676 00005EAB B0FFFFFF            <1> 	dd 0xFFFFFFB0
   677 00005EAF D0FFFFFF            <1> 	dd 0xFFFFFFD0
   678 00005EB3 10000000            <1> 	dd 0x00000010
   679 00005EB7 90000000            <1> 	dd 0x00000090
   680 00005EBB 85FFFFFF            <1> 	dd 0xFFFFFF85
   681 00005EBF 88FFFFFF            <1> 	dd 0xFFFFFF88
   682 00005EC3 8CFFFFFF            <1> 	dd 0xFFFFFF8C
   683 00005EC7 86FFFFFF            <1> 	dd 0xFFFFFF86
   684 00005ECB A4FFFFFF            <1> 	dd 0xFFFFFFA4
   685 00005ECF C4FFFFFF            <1> 	dd 0xFFFFFFC4
   686 00005ED3 04000000            <1> 	dd 0x00000004
   687 00005ED7 84000000            <1> 	dd 0x00000084
   688 00005EDB 81FFFFFF            <1> 	dd 0xFFFFFF81
   689 00005EDF 84FFFFFF            <1> 	dd 0xFFFFFF84
   690 00005EE3 88FFFFFF            <1> 	dd 0xFFFFFF88
   691 00005EE7 82FFFFFF            <1> 	dd 0xFFFFFF82
   692 00005EEB A0FFFFFF            <1> 	dd 0xFFFFFFA0
   693 00005EEF C0FFFFFF            <1> 	dd 0xFFFFFFC0
   694 00005EF3 00000000            <1> 	dd 0x00000000
   695 00005EF7 80000000            <1> 	dd 0x00000080
   696 00005EFB 01000000            <1> 	dd 0x00000001
   697 00005EFF 04000000            <1> 	dd 0x00000004
   698 00005F03 08000000            <1> 	dd 0x00000008
   699 00005F07 02000000            <1> 	dd 0x00000002
   700 00005F0B 20000000            <1> 	dd 0x00000020
   701 00005F0F 40000000            <1> 	dd 0x00000040
   702 00005F13 80000000            <1> 	dd 0x00000080
   703 00005F17 00010000            <1> 	dd 0x00000100
   704 00005F1B 81000000            <1> 	dd 0x00000081
   705 00005F1F 84000000            <1> 	dd 0x00000084
   706 00005F23 88000000            <1> 	dd 0x00000088
   707 00005F27 82000000            <1> 	dd 0x00000082
   708 00005F2B A0000000            <1> 	dd 0x000000A0
   709 00005F2F C0000000            <1> 	dd 0x000000C0
   710 00005F33 00010000            <1> 	dd 0x00000100
   711 00005F37 80010000            <1> 	dd 0x00000180
   712 00005F3B 81010000            <1> 	dd 0x00000181
   713 00005F3F 84010000            <1> 	dd 0x00000184
   714 00005F43 88010000            <1> 	dd 0x00000188
   715 00005F47 82010000            <1> 	dd 0x00000182
   716 00005F4B A0010000            <1> 	dd 0x000001A0
   717 00005F4F C0010000            <1> 	dd 0x000001C0
   718 00005F53 00020000            <1> 	dd 0x00000200
   719 00005F57 80020000            <1> 	dd 0x00000280
   720 00005F5B 85FFFFFF            <1> 	dd 0xFFFFFF85
   721 00005F5F 88FFFFFF            <1> 	dd 0xFFFFFF88
   722 00005F63 8CFFFFFF            <1> 	dd 0xFFFFFF8C
   723 00005F67 86FFFFFF            <1> 	dd 0xFFFFFF86
   724 00005F6B A4FFFFFF            <1> 	dd 0xFFFFFFA4
   725 00005F6F C4FFFFFF            <1> 	dd 0xFFFFFFC4
   726 00005F73 04000000            <1> 	dd 0x00000004
   727 00005F77 84000000            <1> 	dd 0x00000084
   728 00005F7B 91FFFFFF            <1> 	dd 0xFFFFFF91
   729 00005F7F 94FFFFFF            <1> 	dd 0xFFFFFF94
   730 00005F83 98FFFFFF            <1> 	dd 0xFFFFFF98
   731 00005F87 92FFFFFF            <1> 	dd 0xFFFFFF92
   732 00005F8B B0FFFFFF            <1> 	dd 0xFFFFFFB0
   733 00005F8F D0FFFFFF            <1> 	dd 0xFFFFFFD0
   734 00005F93 10000000            <1> 	dd 0x00000010
   735 00005F97 90000000            <1> 	dd 0x00000090
   736 00005F9B A1FFFFFF            <1> 	dd 0xFFFFFFA1
   737 00005F9F A4FFFFFF            <1> 	dd 0xFFFFFFA4
   738 00005FA3 A8FFFFFF            <1> 	dd 0xFFFFFFA8
   739 00005FA7 A2FFFFFF            <1> 	dd 0xFFFFFFA2
   740 00005FAB C0FFFFFF            <1> 	dd 0xFFFFFFC0
   741 00005FAF E0FFFFFF            <1> 	dd 0xFFFFFFE0
   742 00005FB3 20000000            <1> 	dd 0x00000020
   743 00005FB7 A0000000            <1> 	dd 0x000000A0
   744 00005FBB 89FFFFFF            <1> 	dd 0xFFFFFF89
   745 00005FBF 8CFFFFFF            <1> 	dd 0xFFFFFF8C
   746 00005FC3 90FFFFFF            <1> 	dd 0xFFFFFF90
   747 00005FC7 8AFFFFFF            <1> 	dd 0xFFFFFF8A
   748 00005FCB A8FFFFFF            <1> 	dd 0xFFFFFFA8
   749 00005FCF C8FFFFFF            <1> 	dd 0xFFFFFFC8
   750 00005FD3 08000000            <1> 	dd 0x00000008
   751 00005FD7 88000000            <1> 	dd 0x00000088
   752 00005FDB 81FFFFFF            <1> 	dd 0xFFFFFF81
   753 00005FDF 84FFFFFF            <1> 	dd 0xFFFFFF84
   754 00005FE3 88FFFFFF            <1> 	dd 0xFFFFFF88
   755 00005FE7 82FFFFFF            <1> 	dd 0xFFFFFF82
   756 00005FEB A0FFFFFF            <1> 	dd 0xFFFFFFA0
   757 00005FEF C0FFFFFF            <1> 	dd 0xFFFFFFC0
   758 00005FF3 00000000            <1> 	dd 0x00000000
   759 00005FF7 80000000            <1> 	dd 0x00000080
   760 00005FFB 81000000            <1> 	dd 0x00000081
   761 00005FFF 84000000            <1> 	dd 0x00000084
   762 00006003 88000000            <1> 	dd 0x00000088
   763 00006007 82000000            <1> 	dd 0x00000082
   764 0000600B A0000000            <1> 	dd 0x000000A0
   765 0000600F C0000000            <1> 	dd 0x000000C0
   766 00006013 00010000            <1> 	dd 0x00000100
   767 00006017 80010000            <1> 	dd 0x00000180
   768 0000601B 81010000            <1> 	dd 0x00000181
   769 0000601F 84010000            <1> 	dd 0x00000184
   770 00006023 88010000            <1> 	dd 0x00000188
   771 00006027 82010000            <1> 	dd 0x00000182
   772 0000602B A0010000            <1> 	dd 0x000001A0
   773 0000602F C0010000            <1> 	dd 0x000001C0
   774 00006033 00020000            <1> 	dd 0x00000200
   775 00006037 80020000            <1> 	dd 0x00000280
   776 0000603B 81030000            <1> 	dd 0x00000381
   777 0000603F 84030000            <1> 	dd 0x00000384
   778 00006043 88030000            <1> 	dd 0x00000388
   779 00006047 82030000            <1> 	dd 0x00000382
   780 0000604B A0030000            <1> 	dd 0x000003A0
   781 0000604F C0030000            <1> 	dd 0x000003C0
   782 00006053 00040000            <1> 	dd 0x00000400
   783 00006057 80040000            <1> 	dd 0x00000480
   784 0000605B 89FFFFFF            <1> 	dd 0xFFFFFF89
   785 0000605F 8CFFFFFF            <1> 	dd 0xFFFFFF8C
   786 00006063 90FFFFFF            <1> 	dd 0xFFFFFF90
   787 00006067 8AFFFFFF            <1> 	dd 0xFFFFFF8A
   788 0000606B A8FFFFFF            <1> 	dd 0xFFFFFFA8
   789 0000606F C8FFFFFF            <1> 	dd 0xFFFFFFC8
   790 00006073 08000000            <1> 	dd 0x00000008
   791 00006077 88000000            <1> 	dd 0x00000088
   792 0000607B A1FFFFFF            <1> 	dd 0xFFFFFFA1
   793 0000607F A4FFFFFF            <1> 	dd 0xFFFFFFA4
   794 00006083 A8FFFFFF            <1> 	dd 0xFFFFFFA8
   795 00006087 A2FFFFFF            <1> 	dd 0xFFFFFFA2
   796 0000608B C0FFFFFF            <1> 	dd 0xFFFFFFC0
   797 0000608F E0FFFFFF            <1> 	dd 0xFFFFFFE0
   798 00006093 20000000            <1> 	dd 0x00000020
   799 00006097 A0000000            <1> 	dd 0x000000A0
   800 0000609B C1FFFFFF            <1> 	dd 0xFFFFFFC1
   801 0000609F C4FFFFFF            <1> 	dd 0xFFFFFFC4
   802 000060A3 C8FFFFFF            <1> 	dd 0xFFFFFFC8
   803 000060A7 C2FFFFFF            <1> 	dd 0xFFFFFFC2
   804 000060AB E0FFFFFF            <1> 	dd 0xFFFFFFE0
   805 000060AF 00000000            <1> 	dd 0x00000000
   806 000060B3 40000000            <1> 	dd 0x00000040
   807 000060B7 C0000000            <1> 	dd 0x000000C0
   808 000060BB 91FFFFFF            <1> 	dd 0xFFFFFF91
   809 000060BF 94FFFFFF            <1> 	dd 0xFFFFFF94
   810 000060C3 98FFFFFF            <1> 	dd 0xFFFFFF98
   811 000060C7 92FFFFFF            <1> 	dd 0xFFFFFF92
   812 000060CB B0FFFFFF            <1> 	dd 0xFFFFFFB0
   813 000060CF D0FFFFFF            <1> 	dd 0xFFFFFFD0
   814 000060D3 10000000            <1> 	dd 0x00000010
   815 000060D7 90000000            <1> 	dd 0x00000090
   816 000060DB 81FFFFFF            <1> 	dd 0xFFFFFF81
   817 000060DF 84FFFFFF            <1> 	dd 0xFFFFFF84
   818 000060E3 88FFFFFF            <1> 	dd 0xFFFFFF88
   819 000060E7 82FFFFFF            <1> 	dd 0xFFFFFF82
   820 000060EB A0FFFFFF            <1> 	dd 0xFFFFFFA0
   821 000060EF C0FFFFFF            <1> 	dd 0xFFFFFFC0
   822 000060F3 00000000            <1> 	dd 0x00000000
   823 000060F7 80000000            <1> 	dd 0x00000080
   824 000060FB 81010000            <1> 	dd 0x00000181
   825 000060FF 84010000            <1> 	dd 0x00000184
   826 00006103 88010000            <1> 	dd 0x00000188
   827 00006107 82010000            <1> 	dd 0x00000182
   828 0000610B A0010000            <1> 	dd 0x000001A0
   829 0000610F C0010000            <1> 	dd 0x000001C0
   830 00006113 00020000            <1> 	dd 0x00000200
   831 00006117 80020000            <1> 	dd 0x00000280
   832 0000611B 81030000            <1> 	dd 0x00000381
   833 0000611F 84030000            <1> 	dd 0x00000384
   834 00006123 88030000            <1> 	dd 0x00000388
   835 00006127 82030000            <1> 	dd 0x00000382
   836 0000612B A0030000            <1> 	dd 0x000003A0
   837 0000612F C0030000            <1> 	dd 0x000003C0
   838 00006133 00040000            <1> 	dd 0x00000400
   839 00006137 80040000            <1> 	dd 0x00000480
   840 0000613B 81070000            <1> 	dd 0x00000781
   841 0000613F 84070000            <1> 	dd 0x00000784
   842 00006143 88070000            <1> 	dd 0x00000788
   843 00006147 82070000            <1> 	dd 0x00000782
   844 0000614B A0070000            <1> 	dd 0x000007A0
   845 0000614F C0070000            <1> 	dd 0x000007C0
   846 00006153 00080000            <1> 	dd 0x00000800
   847 00006157 80080000            <1> 	dd 0x00000880
   848                              <1> addr32ValuesSIB10:
   849 0000615B 02000080            <1> 	dd 0x80000002
   850 0000615F 05000080            <1> 	dd 0x80000005
   851 00006163 09000080            <1> 	dd 0x80000009
   852 00006167 03000080            <1> 	dd 0x80000003
   853 0000616B 21000080            <1> 	dd 0x80000021
   854 0000616F 41000080            <1> 	dd 0x80000041
   855 00006173 81000080            <1> 	dd 0x80000081
   856 00006177 01010080            <1> 	dd 0x80000101
   857 0000617B 05000080            <1> 	dd 0x80000005
   858 0000617F 08000080            <1> 	dd 0x80000008
   859 00006183 0C000080            <1> 	dd 0x8000000C
   860 00006187 06000080            <1> 	dd 0x80000006
   861 0000618B 24000080            <1> 	dd 0x80000024
   862 0000618F 44000080            <1> 	dd 0x80000044
   863 00006193 84000080            <1> 	dd 0x80000084
   864 00006197 04010080            <1> 	dd 0x80000104
   865 0000619B 09000080            <1> 	dd 0x80000009
   866 0000619F 0C000080            <1> 	dd 0x8000000C
   867 000061A3 10000080            <1> 	dd 0x80000010
   868 000061A7 0A000080            <1> 	dd 0x8000000A
   869 000061AB 28000080            <1> 	dd 0x80000028
   870 000061AF 48000080            <1> 	dd 0x80000048
   871 000061B3 88000080            <1> 	dd 0x80000088
   872 000061B7 08010080            <1> 	dd 0x80000108
   873 000061BB 03000080            <1> 	dd 0x80000003
   874 000061BF 06000080            <1> 	dd 0x80000006
   875 000061C3 0A000080            <1> 	dd 0x8000000A
   876 000061C7 04000080            <1> 	dd 0x80000004
   877 000061CB 22000080            <1> 	dd 0x80000022
   878 000061CF 42000080            <1> 	dd 0x80000042
   879 000061D3 82000080            <1> 	dd 0x80000082
   880 000061D7 02010080            <1> 	dd 0x80000102
   881 000061DB 01000080            <1> 	dd 0x80000001
   882 000061DF 04000080            <1> 	dd 0x80000004
   883 000061E3 08000080            <1> 	dd 0x80000008
   884 000061E7 02000080            <1> 	dd 0x80000002
   885 000061EB 20000080            <1> 	dd 0x80000020
   886 000061EF 40000080            <1> 	dd 0x80000040
   887 000061F3 80000080            <1> 	dd 0x80000080
   888 000061F7 00010080            <1> 	dd 0x80000100
   889 000061FB 41000080            <1> 	dd 0x80000041
   890 000061FF 44000080            <1> 	dd 0x80000044
   891 00006203 48000080            <1> 	dd 0x80000048
   892 00006207 42000080            <1> 	dd 0x80000042
   893 0000620B 60000080            <1> 	dd 0x80000060
   894 0000620F 80000080            <1> 	dd 0x80000080
   895 00006213 C0000080            <1> 	dd 0x800000C0
   896 00006217 40010080            <1> 	dd 0x80000140
   897 0000621B 81000080            <1> 	dd 0x80000081
   898 0000621F 84000080            <1> 	dd 0x80000084
   899 00006223 88000080            <1> 	dd 0x80000088
   900 00006227 82000080            <1> 	dd 0x80000082
   901 0000622B A0000080            <1> 	dd 0x800000A0
   902 0000622F C0000080            <1> 	dd 0x800000C0
   903 00006233 00010080            <1> 	dd 0x80000100
   904 00006237 80010080            <1> 	dd 0x80000180
   905 0000623B 01010080            <1> 	dd 0x80000101
   906 0000623F 04010080            <1> 	dd 0x80000104
   907 00006243 08010080            <1> 	dd 0x80000108
   908 00006247 02010080            <1> 	dd 0x80000102
   909 0000624B 20010080            <1> 	dd 0x80000120
   910 0000624F 40010080            <1> 	dd 0x80000140
   911 00006253 80010080            <1> 	dd 0x80000180
   912 00006257 00020080            <1> 	dd 0x80000200
   913 0000625B 03000080            <1> 	dd 0x80000003
   914 0000625F 06000080            <1> 	dd 0x80000006
   915 00006263 0A000080            <1> 	dd 0x8000000A
   916 00006267 04000080            <1> 	dd 0x80000004
   917 0000626B 22000080            <1> 	dd 0x80000022
   918 0000626F 42000080            <1> 	dd 0x80000042
   919 00006273 82000080            <1> 	dd 0x80000082
   920 00006277 02010080            <1> 	dd 0x80000102
   921 0000627B 09000080            <1> 	dd 0x80000009
   922 0000627F 0C000080            <1> 	dd 0x8000000C
   923 00006283 10000080            <1> 	dd 0x80000010
   924 00006287 0A000080            <1> 	dd 0x8000000A
   925 0000628B 28000080            <1> 	dd 0x80000028
   926 0000628F 48000080            <1> 	dd 0x80000048
   927 00006293 88000080            <1> 	dd 0x80000088
   928 00006297 08010080            <1> 	dd 0x80000108
   929 0000629B 11000080            <1> 	dd 0x80000011
   930 0000629F 14000080            <1> 	dd 0x80000014
   931 000062A3 18000080            <1> 	dd 0x80000018
   932 000062A7 12000080            <1> 	dd 0x80000012
   933 000062AB 30000080            <1> 	dd 0x80000030
   934 000062AF 50000080            <1> 	dd 0x80000050
   935 000062B3 90000080            <1> 	dd 0x80000090
   936 000062B7 10010080            <1> 	dd 0x80000110
   937 000062BB 05000080            <1> 	dd 0x80000005
   938 000062BF 08000080            <1> 	dd 0x80000008
   939 000062C3 0C000080            <1> 	dd 0x8000000C
   940 000062C7 06000080            <1> 	dd 0x80000006
   941 000062CB 24000080            <1> 	dd 0x80000024
   942 000062CF 44000080            <1> 	dd 0x80000044
   943 000062D3 84000080            <1> 	dd 0x80000084
   944 000062D7 04010080            <1> 	dd 0x80000104
   945 000062DB 01000080            <1> 	dd 0x80000001
   946 000062DF 04000080            <1> 	dd 0x80000004
   947 000062E3 08000080            <1> 	dd 0x80000008
   948 000062E7 02000080            <1> 	dd 0x80000002
   949 000062EB 20000080            <1> 	dd 0x80000020
   950 000062EF 40000080            <1> 	dd 0x80000040
   951 000062F3 80000080            <1> 	dd 0x80000080
   952 000062F7 00010080            <1> 	dd 0x80000100
   953 000062FB 81000080            <1> 	dd 0x80000081
   954 000062FF 84000080            <1> 	dd 0x80000084
   955 00006303 88000080            <1> 	dd 0x80000088
   956 00006307 82000080            <1> 	dd 0x80000082
   957 0000630B A0000080            <1> 	dd 0x800000A0
   958 0000630F C0000080            <1> 	dd 0x800000C0
   959 00006313 00010080            <1> 	dd 0x80000100
   960 00006317 80010080            <1> 	dd 0x80000180
   961 0000631B 01010080            <1> 	dd 0x80000101
   962 0000631F 04010080            <1> 	dd 0x80000104
   963 00006323 08010080            <1> 	dd 0x80000108
   964 00006327 02010080            <1> 	dd 0x80000102
   965 0000632B 20010080            <1> 	dd 0x80000120
   966 0000632F 40010080            <1> 	dd 0x80000140
   967 00006333 80010080            <1> 	dd 0x80000180
   968 00006337 00020080            <1> 	dd 0x80000200
   969 0000633B 01020080            <1> 	dd 0x80000201
   970 0000633F 04020080            <1> 	dd 0x80000204
   971 00006343 08020080            <1> 	dd 0x80000208
   972 00006347 02020080            <1> 	dd 0x80000202
   973 0000634B 20020080            <1> 	dd 0x80000220
   974 0000634F 40020080            <1> 	dd 0x80000240
   975 00006353 80020080            <1> 	dd 0x80000280
   976 00006357 00030080            <1> 	dd 0x80000300
   977 0000635B 05000080            <1> 	dd 0x80000005
   978 0000635F 08000080            <1> 	dd 0x80000008
   979 00006363 0C000080            <1> 	dd 0x8000000C
   980 00006367 06000080            <1> 	dd 0x80000006
   981 0000636B 24000080            <1> 	dd 0x80000024
   982 0000636F 44000080            <1> 	dd 0x80000044
   983 00006373 84000080            <1> 	dd 0x80000084
   984 00006377 04010080            <1> 	dd 0x80000104
   985 0000637B 11000080            <1> 	dd 0x80000011
   986 0000637F 14000080            <1> 	dd 0x80000014
   987 00006383 18000080            <1> 	dd 0x80000018
   988 00006387 12000080            <1> 	dd 0x80000012
   989 0000638B 30000080            <1> 	dd 0x80000030
   990 0000638F 50000080            <1> 	dd 0x80000050
   991 00006393 90000080            <1> 	dd 0x80000090
   992 00006397 10010080            <1> 	dd 0x80000110
   993 0000639B 21000080            <1> 	dd 0x80000021
   994 0000639F 24000080            <1> 	dd 0x80000024
   995 000063A3 28000080            <1> 	dd 0x80000028
   996 000063A7 22000080            <1> 	dd 0x80000022
   997 000063AB 40000080            <1> 	dd 0x80000040
   998 000063AF 60000080            <1> 	dd 0x80000060
   999 000063B3 A0000080            <1> 	dd 0x800000A0
  1000 000063B7 20010080            <1> 	dd 0x80000120
  1001 000063BB 09000080            <1> 	dd 0x80000009
  1002 000063BF 0C000080            <1> 	dd 0x8000000C
  1003 000063C3 10000080            <1> 	dd 0x80000010
  1004 000063C7 0A000080            <1> 	dd 0x8000000A
  1005 000063CB 28000080            <1> 	dd 0x80000028
  1006 000063CF 48000080            <1> 	dd 0x80000048
  1007 000063D3 88000080            <1> 	dd 0x80000088
  1008 000063D7 08010080            <1> 	dd 0x80000108
  1009 000063DB 01000080            <1> 	dd 0x80000001
  1010 000063DF 04000080            <1> 	dd 0x80000004
  1011 000063E3 08000080            <1> 	dd 0x80000008
  1012 000063E7 02000080            <1> 	dd 0x80000002
  1013 000063EB 20000080            <1> 	dd 0x80000020
  1014 000063EF 40000080            <1> 	dd 0x80000040
  1015 000063F3 80000080            <1> 	dd 0x80000080
  1016 000063F7 00010080            <1> 	dd 0x80000100
  1017 000063FB 01010080            <1> 	dd 0x80000101
  1018 000063FF 04010080            <1> 	dd 0x80000104
  1019 00006403 08010080            <1> 	dd 0x80000108
  1020 00006407 02010080            <1> 	dd 0x80000102
  1021 0000640B 20010080            <1> 	dd 0x80000120
  1022 0000640F 40010080            <1> 	dd 0x80000140
  1023 00006413 80010080            <1> 	dd 0x80000180
  1024 00006417 00020080            <1> 	dd 0x80000200
  1025 0000641B 01020080            <1> 	dd 0x80000201
  1026 0000641F 04020080            <1> 	dd 0x80000204
  1027 00006423 08020080            <1> 	dd 0x80000208
  1028 00006427 02020080            <1> 	dd 0x80000202
  1029 0000642B 20020080            <1> 	dd 0x80000220
  1030 0000642F 40020080            <1> 	dd 0x80000240
  1031 00006433 80020080            <1> 	dd 0x80000280
  1032 00006437 00030080            <1> 	dd 0x80000300
  1033 0000643B 01040080            <1> 	dd 0x80000401
  1034 0000643F 04040080            <1> 	dd 0x80000404
  1035 00006443 08040080            <1> 	dd 0x80000408
  1036 00006447 02040080            <1> 	dd 0x80000402
  1037 0000644B 20040080            <1> 	dd 0x80000420
  1038 0000644F 40040080            <1> 	dd 0x80000440
  1039 00006453 80040080            <1> 	dd 0x80000480
  1040 00006457 00050080            <1> 	dd 0x80000500
  1041 0000645B 09000080            <1> 	dd 0x80000009
  1042 0000645F 0C000080            <1> 	dd 0x8000000C
  1043 00006463 10000080            <1> 	dd 0x80000010
  1044 00006467 0A000080            <1> 	dd 0x8000000A
  1045 0000646B 28000080            <1> 	dd 0x80000028
  1046 0000646F 48000080            <1> 	dd 0x80000048
  1047 00006473 88000080            <1> 	dd 0x80000088
  1048 00006477 08010080            <1> 	dd 0x80000108
  1049 0000647B 21000080            <1> 	dd 0x80000021
  1050 0000647F 24000080            <1> 	dd 0x80000024
  1051 00006483 28000080            <1> 	dd 0x80000028
  1052 00006487 22000080            <1> 	dd 0x80000022
  1053 0000648B 40000080            <1> 	dd 0x80000040
  1054 0000648F 60000080            <1> 	dd 0x80000060
  1055 00006493 A0000080            <1> 	dd 0x800000A0
  1056 00006497 20010080            <1> 	dd 0x80000120
  1057 0000649B 41000080            <1> 	dd 0x80000041
  1058 0000649F 44000080            <1> 	dd 0x80000044
  1059 000064A3 48000080            <1> 	dd 0x80000048
  1060 000064A7 42000080            <1> 	dd 0x80000042
  1061 000064AB 60000080            <1> 	dd 0x80000060
  1062 000064AF 80000080            <1> 	dd 0x80000080
  1063 000064B3 C0000080            <1> 	dd 0x800000C0
  1064 000064B7 40010080            <1> 	dd 0x80000140
  1065 000064BB 11000080            <1> 	dd 0x80000011
  1066 000064BF 14000080            <1> 	dd 0x80000014
  1067 000064C3 18000080            <1> 	dd 0x80000018
  1068 000064C7 12000080            <1> 	dd 0x80000012
  1069 000064CB 30000080            <1> 	dd 0x80000030
  1070 000064CF 50000080            <1> 	dd 0x80000050
  1071 000064D3 90000080            <1> 	dd 0x80000090
  1072 000064D7 10010080            <1> 	dd 0x80000110
  1073 000064DB 01000080            <1> 	dd 0x80000001
  1074 000064DF 04000080            <1> 	dd 0x80000004
  1075 000064E3 08000080            <1> 	dd 0x80000008
  1076 000064E7 02000080            <1> 	dd 0x80000002
  1077 000064EB 20000080            <1> 	dd 0x80000020
  1078 000064EF 40000080            <1> 	dd 0x80000040
  1079 000064F3 80000080            <1> 	dd 0x80000080
  1080 000064F7 00010080            <1> 	dd 0x80000100
  1081 000064FB 01020080            <1> 	dd 0x80000201
  1082 000064FF 04020080            <1> 	dd 0x80000204
  1083 00006503 08020080            <1> 	dd 0x80000208
  1084 00006507 02020080            <1> 	dd 0x80000202
  1085 0000650B 20020080            <1> 	dd 0x80000220
  1086 0000650F 40020080            <1> 	dd 0x80000240
  1087 00006513 80020080            <1> 	dd 0x80000280
  1088 00006517 00030080            <1> 	dd 0x80000300
  1089 0000651B 01040080            <1> 	dd 0x80000401
  1090 0000651F 04040080            <1> 	dd 0x80000404
  1091 00006523 08040080            <1> 	dd 0x80000408
  1092 00006527 02040080            <1> 	dd 0x80000402
  1093 0000652B 20040080            <1> 	dd 0x80000420
  1094 0000652F 40040080            <1> 	dd 0x80000440
  1095 00006533 80040080            <1> 	dd 0x80000480
  1096 00006537 00050080            <1> 	dd 0x80000500
  1097 0000653B 01080080            <1> 	dd 0x80000801
  1098 0000653F 04080080            <1> 	dd 0x80000804
  1099 00006543 08080080            <1> 	dd 0x80000808
  1100 00006547 02080080            <1> 	dd 0x80000802
  1101 0000654B 20080080            <1> 	dd 0x80000820
  1102 0000654F 40080080            <1> 	dd 0x80000840
  1103 00006553 80080080            <1> 	dd 0x80000880
  1104 00006557 00090080            <1> 	dd 0x80000900
   647                                  
   648                                  postD:
   649                                  	POST D
   649 0000655B B00D                <1>  mov al, 0x%1
   649 0000655D 66BA9001            <1>  mov dx, POST_PORT
   649 00006561 EE                  <1>  out dx, al
   650 00006562 66B80100                	mov ax, 0x0001
   651 00006566 66BB0200                	mov bx, 0x0002
   652 0000656A 66B90400                	mov cx, 0x0004
   653 0000656E 66BA0800                	mov dx, 0x0008
   654 00006572 66BE1000                	mov si, 0x0010
   655 00006576 66BF2000                	mov di, 0x0020
   656                                  	testLEA16 [0x4000],0x4000
   656 0000657A 6650                <1>  push ax
   656 0000657C 66678D060040        <1>  a16 lea ax, %1
   656 00006582 663D0040            <1>  cmp ax, %2
   656 00006586 0F8503700000        <1>  jne error
   656 0000658C 6658                <1>  pop ax
   657                                  	testLEA16 [bx], 0x0002
   657 0000658E 6650                <1>  push ax
   657 00006590 66678D07            <1>  a16 lea ax, %1
   657 00006594 6683F802            <1>  cmp ax, %2
   657 00006598 0F85F16F0000        <1>  jne error
   657 0000659E 6658                <1>  pop ax
   658                                  	testLEA16 [si], 0x0010
   658 000065A0 6650                <1>  push ax
   658 000065A2 66678D04            <1>  a16 lea ax, %1
   658 000065A6 6683F810            <1>  cmp ax, %2
   658 000065AA 0F85DF6F0000        <1>  jne error
   658 000065B0 6658                <1>  pop ax
   659                                  	testLEA16 [di], 0x0020
   659 000065B2 6650                <1>  push ax
   659 000065B4 66678D05            <1>  a16 lea ax, %1
   659 000065B8 6683F820            <1>  cmp ax, %2
   659 000065BC 0F85CD6F0000        <1>  jne error
   659 000065C2 6658                <1>  pop ax
   660                                  	testLEA16 [bx + 0x40], 0x0042
   660 000065C4 6650                <1>  push ax
   660 000065C6 66678D4740          <1>  a16 lea ax, %1
   660 000065CB 6683F842            <1>  cmp ax, %2
   660 000065CF 0F85BA6F0000        <1>  jne error
   660 000065D5 6658                <1>  pop ax
   661                                  	testLEA16 [si + 0x40], 0x0050
   661 000065D7 6650                <1>  push ax
   661 000065D9 66678D4440          <1>  a16 lea ax, %1
   661 000065DE 6683F850            <1>  cmp ax, %2
   661 000065E2 0F85A76F0000        <1>  jne error
   661 000065E8 6658                <1>  pop ax
   662                                  	testLEA16 [di + 0x40], 0x0060
   662 000065EA 6650                <1>  push ax
   662 000065EC 66678D4540          <1>  a16 lea ax, %1
   662 000065F1 6683F860            <1>  cmp ax, %2
   662 000065F5 0F85946F0000        <1>  jne error
   662 000065FB 6658                <1>  pop ax
   663                                  	testLEA16 [bx + 0x4000], 0x4002
   663 000065FD 6650                <1>  push ax
   663 000065FF 66678D870040        <1>  a16 lea ax, %1
   663 00006605 663D0240            <1>  cmp ax, %2
   663 00006609 0F85806F0000        <1>  jne error
   663 0000660F 6658                <1>  pop ax
   664                                  	testLEA16 [si + 0x4000], 0x4010
   664 00006611 6650                <1>  push ax
   664 00006613 66678D840040        <1>  a16 lea ax, %1
   664 00006619 663D1040            <1>  cmp ax, %2
   664 0000661D 0F856C6F0000        <1>  jne error
   664 00006623 6658                <1>  pop ax
   665                                  	testLEA16 [bx + si], 0x0012
   665 00006625 6650                <1>  push ax
   665 00006627 66678D00            <1>  a16 lea ax, %1
   665 0000662B 6683F812            <1>  cmp ax, %2
   665 0000662F 0F855A6F0000        <1>  jne error
   665 00006635 6658                <1>  pop ax
   666                                  	testLEA16 [bx + di], 0x0022
   666 00006637 6650                <1>  push ax
   666 00006639 66678D01            <1>  a16 lea ax, %1
   666 0000663D 6683F822            <1>  cmp ax, %2
   666 00006641 0F85486F0000        <1>  jne error
   666 00006647 6658                <1>  pop ax
   667                                  	testLEA16 [bx + 0x40 + si], 0x0052
   667 00006649 6650                <1>  push ax
   667 0000664B 66678D4040          <1>  a16 lea ax, %1
   667 00006650 6683F852            <1>  cmp ax, %2
   667 00006654 0F85356F0000        <1>  jne error
   667 0000665A 6658                <1>  pop ax
   668                                  	testLEA16 [bx + 0x40 + di], 0x0062
   668 0000665C 6650                <1>  push ax
   668 0000665E 66678D4140          <1>  a16 lea ax, %1
   668 00006663 6683F862            <1>  cmp ax, %2
   668 00006667 0F85226F0000        <1>  jne error
   668 0000666D 6658                <1>  pop ax
   669                                  	testLEA16 [bx + 0x4000 + si], 0x4012
   669 0000666F 6650                <1>  push ax
   669 00006671 66678D800040        <1>  a16 lea ax, %1
   669 00006677 663D1240            <1>  cmp ax, %2
   669 0000667B 0F850E6F0000        <1>  jne error
   669 00006681 6658                <1>  pop ax
   670                                  	testLEA16 [bx + 0x4000 + di], 0x4022
   670 00006683 6650                <1>  push ax
   670 00006685 66678D810040        <1>  a16 lea ax, %1
   670 0000668B 663D2240            <1>  cmp ax, %2
   670 0000668F 0F85FA6E0000        <1>  jne error
   670 00006695 6658                <1>  pop ax
   671                                  
   672                                  ;
   673                                  ;   Test 32-bit addressing modes
   674                                  ;
   675                                  	POST E
   675 00006697 B00E                <1>  mov al, 0x%1
   675 00006699 66BA9001            <1>  mov dx, POST_PORT
   675 0000669D EE                  <1>  out dx, al
   676 0000669E E8B5F0FFFF              	call testAddressing32
   677                                  
   678                                  	advTestSegProt
   678                              <1>  advTestBase
   678                              <2>  %assign TEST_BASE1 TEST_BASE1+0x1000
   678                              <2>  %assign TEST_BASE2 TEST_BASE2+0x1000
   678                              <1>  updLDTDescBase D1_SEG_PROT,TEST_BASE1
   678 000066A3 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   678 000066AA 83C318              <2>  add ebx, (%1) & 0xFFF8
   678 000066AD 66C743020070        <2>  mov word [ebx+2], (%2)&0xFFFF
   678 000066B3 C6430402            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   678 000066B7 C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   678                              <1>  updLDTDescBase D2_SEG_PROT,TEST_BASE2
   678 000066BB 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   678 000066C2 83C320              <2>  add ebx, (%1) & 0xFFF8
   678 000066C5 66C743020070        <2>  mov word [ebx+2], (%2)&0xFFFF
   678 000066CB C6430406            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   678 000066CF C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   678 000066D3 66BA1C00            <1>  mov dx, D1_SEG_PROT
   678 000066D7 8EDA                <1>  mov ds, dx
   678 000066D9 66BA2400            <1>  mov dx, D2_SEG_PROT
   678 000066DD 8EC2                <1>  mov es, dx
   679                                  
   680                                  ;
   681                                  ;   Access memory using various addressing modes
   682                                  ;
   683                                  	POST F
   683 000066DF B00F                <1>  mov al, 0x%1
   683 000066E1 66BA9001            <1>  mov dx, POST_PORT
   683 000066E5 EE                  <1>  out dx, al
   684                                  
   685                                  	; store a known word at the scratch address
   686 000066E6 BB44332211              	mov    ebx, 0x11223344
   687 000066EB 891D00000100            	mov    [0x10000], ebx
   688                                  
   689                                  	; now access that scratch address using various addressing modes
   690 000066F1 B900000100              	mov    ecx, 0x10000
   691 000066F6 3919                    	cmp    [ecx], ebx
   692 000066F8 0F85916E0000            	jne    error
   693                                  
   694 000066FE 83C140                  	add    ecx, 64
   695 00006701 3959C0                  	cmp    [ecx-64], ebx
   696 00006704 0F85856E0000            	jne    error
   697                                  
   698 0000670A 83E940                  	sub    ecx, 64
   699 0000670D D1E9                    	shr    ecx, 1
   700 0000670F 399900800000            	cmp    [ecx+0x8000], ebx
   701 00006715 0F85746E0000            	jne    error
   702                                  
   703 0000671B 391C09                  	cmp    [ecx+ecx], ebx
   704 0000671E 0F856B6E0000            	jne    error
   705                                  
   706 00006724 D1E9                    	shr    ecx, 1
   707 00006726 399C4900400000          	cmp    [ecx+ecx*2+0x4000], ebx
   708 0000672D 0F855C6E0000            	jne    error
   709                                  
   710 00006733 391C8D00000000          	cmp    [ecx*4], ebx
   711 0000673A 0F854F6E0000            	jne    error
   712                                  
   713                                  	; test default segment SS
   714 00006740 89CD                    	mov    ebp, ecx
   715 00006742 399C4D00400000          	cmp    [ebp+ecx*2+0x4000], ebx ; EBP is used as base so the default segment is SS
   716 00006749 0F84406E0000            	je     error ; since SS != DS, this better be a mismatch
   717                                  
   718 0000674F 89E0                    	mov    eax, esp ; save ESP
   719 00006751 89CC                    	mov    esp, ecx
   720 00006753 399C4C00400000          	cmp    [esp+ecx*2+0x4000], ebx ; ESP is used as base so the default segment is SS
   721 0000675A 0F842F6E0000            	je     error ; since SS != DS, this better be a mismatch
   722 00006760 89C4                    	mov    esp, eax ; restore ESP
   723                                  
   724 00006762 66B81C00                	mov    ax, D1_SEG_PROT
   725 00006766 66BA2400                	mov    dx, D2_SEG_PROT
   726                                  
   727                                  	; store the known word in a different segment
   728 0000676A 8EDA                    	mov    ds, dx
   729 0000676C 891D00000100            	mov    [0x10000], ebx
   730 00006772 8ED8                    	mov    ds, ax
   731                                  
   732                                  	; test segment overrides
   733 00006774 8EC2                    	mov    es, dx
   734 00006776 26399C4900400000        	cmp    [es:ecx+ecx*2+0x4000], ebx
   735 0000677E 0F850B6E0000            	jne    error
   736 00006784 8EC0                    	mov    es, ax
   737 00006786 8EE2                    	mov    fs, dx
   738 00006788 64399C4900400000        	cmp    [fs:ecx+ecx*2+0x4000], ebx
   739 00006790 0F85F96D0000            	jne    error
   740 00006796 8EE0                    	mov    fs, ax
   741 00006798 8EEA                    	mov    gs, dx
   742 0000679A 65399C4900400000        	cmp    [gs:ecx+ecx*2+0x4000], ebx
   743 000067A2 0F85E76D0000            	jne    error
   744 000067A8 8EE8                    	mov    gs, ax
   745 000067AA 8ED2                    	mov    ss, dx
   746 000067AC 36399C4900400000        	cmp    [ss:ecx+ecx*2+0x4000], ebx
   747 000067B4 0F85D56D0000            	jne    error
   748 000067BA 66BA6000                	mov    dx, S_SEG_PROT32
   749 000067BE 8ED2                    	mov    ss, dx
   750 000067C0 3E399C4D00400000        	cmp    [ds:ebp+ecx*2+0x4000], ebx
   751 000067C8 0F85C16D0000            	jne    error
   752                                  
   753                                  	advTestSegProt
   753                              <1>  advTestBase
   753                              <2>  %assign TEST_BASE1 TEST_BASE1+0x1000
   753                              <2>  %assign TEST_BASE2 TEST_BASE2+0x1000
   753                              <1>  updLDTDescBase D1_SEG_PROT,TEST_BASE1
   753 000067CE 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   753 000067D5 83C318              <2>  add ebx, (%1) & 0xFFF8
   753 000067D8 66C743020080        <2>  mov word [ebx+2], (%2)&0xFFFF
   753 000067DE C6430402            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   753 000067E2 C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   753                              <1>  updLDTDescBase D2_SEG_PROT,TEST_BASE2
   753 000067E6 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   753 000067ED 83C320              <2>  add ebx, (%1) & 0xFFF8
   753 000067F0 66C743020080        <2>  mov word [ebx+2], (%2)&0xFFFF
   753 000067F6 C6430406            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   753 000067FA C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   753 000067FE 66BA1C00            <1>  mov dx, D1_SEG_PROT
   753 00006802 8EDA                <1>  mov ds, dx
   753 00006804 66BA2400            <1>  mov dx, D2_SEG_PROT
   753 00006808 8EC2                <1>  mov es, dx
   754                                  
   755                                  ;
   756                                  ;   Verify string operations
   757                                  ;
   758                                  	POST 10
   758 0000680A B010                <1>  mov al, 0x%1
   758 0000680C 66BA9001            <1>  mov dx, POST_PORT
   758 00006810 EE                  <1>  out dx, al
   759 00006811 60                      	pushad
   760 00006812 9C                      	pushfd
   761                                  	testStringOps b,0,a32
   761                              <1> 
   761                              <1>  %assign value 0x12345678
   761                              <1>  %ifidni %1,b
   761                              <1>  %assign val_size 1
   761                              <1>  %define val_mask 0x000000ff
   761                              <1>  %define sized_eax al
   761                              <1>  %endif
   761                              <1>  %ifidni %1,w
   761                              <1>  %assign val_size 2
   761                              <1>  %define val_mask 0x0000ffff
   761                              <1>  %define sized_eax ax
   761                              <1>  %endif
   761                              <1>  %ifidni %1,d
   761                              <1>  %assign val_size 4
   761                              <1>  %define val_mask 0xffffffff
   761                              <1>  %define sized_eax eax
   761                              <1>  %endif
   761                              <1> 
   761                              <1>  %if %2 == 0
   761 00006813 FC                  <1>  cld
   761                              <1>  %assign off_value 0x0001ffff-(val_size-1)
   761                              <1>  %ifidni %3,a16
   761                              <1> 
   761                              <1>  %assign off_cmp 0x00010000
   761                              <1>  %else
   761                              <1> 
   761                              <1>  %assign off_cmp 0x00020000
   761                              <1>  %endif
   761                              <1>  %else
   761                              <1>  std
   761                              <1>  %assign off_value 0x00010000
   761                              <1>  %ifidni %3,a16
   761                              <1> 
   761                              <1>  %assign off_cmp 0x0001ffff-(val_size-1)
   761                              <1>  %else
   761                              <1> 
   761                              <1>  %assign off_cmp 0x0000ffff-(val_size-1)
   761                              <1>  %endif
   761                              <1>  %endif
   761                              <1> 
   761                              <1>  %ifidni %3,a16
   761                              <1>  %assign off_mask 0x0000ffff
   761                              <1>  %else
   761                              <1>  %assign off_mask 0xffffffff
   761                              <1>  %endif
   761                              <1> 
   761                              <1> 
   761                              <1> 
   761 00006814 BFFFFF0100          <1>  mov edi, off_value
   761 00006819 BBFFFF0100          <1>  mov ebx, off_value & off_mask
   761 0000681E B000                <1>  mov sized_eax, 0
   761 00006820 268803              <1>  mov [es:ebx], sized_eax
   761 00006823 B078                <1>  mov sized_eax, value
   761          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   761 00006825 AA                  <1>  %3 stos%1
   761 00006826 263803              <1>  cmp [es:ebx], sized_eax
   761 00006829 0F85606D0000        <1>  jne error
   761 0000682F 81FF00000200        <1>  cmp edi, off_cmp
   761 00006835 0F85546D0000        <1>  jne error
   761                              <1> 
   761 0000683B BEFFFF0100          <1>  mov esi, off_value
   761 00006840 BFFFFF0100          <1>  mov edi, off_value
   761 00006845 BBFFFF0100          <1>  mov ebx, off_value & off_mask
   761 0000684A 3E8803              <1>  mov [ds:ebx], sized_eax
   761 0000684D 268803              <1>  mov [es:ebx], sized_eax
   761 00006850 3C00                <1>  cmp sized_eax, 0
   761 00006852 0F84376D0000        <1>  je error
   761 00006858 A6                  <1>  %3 cmps%1
   761 00006859 0F85306D0000        <1>  jne error
   761 0000685F 81FF00000200        <1>  cmp edi, off_cmp
   761 00006865 0F85246D0000        <1>  jne error
   761 0000686B 81FE00000200        <1>  cmp esi, off_cmp
   761 00006871 0F85186D0000        <1>  jne error
   761                              <1> 
   761 00006877 BFFFFF0100          <1>  mov edi, off_value
   761 0000687C B078                <1>  mov sized_eax, value
   761          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   761 0000687E 268803              <1>  mov [es:ebx], sized_eax
   761 00006881 3C00                <1>  cmp sized_eax, 0
   761 00006883 AE                  <1>  %3 scas%1
   761 00006884 0F85056D0000        <1>  jne error
   761 0000688A 81FF00000200        <1>  cmp edi, off_cmp
   761 00006890 0F85F96C0000        <1>  jne error
   761                              <1> 
   761 00006896 BEFFFF0100          <1>  mov esi, off_value
   761 0000689B BFFFFF0100          <1>  mov edi, off_value
   761 000068A0 B078                <1>  mov sized_eax, value
   761          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   761 000068A2 3E8803              <1>  mov [ds:ebx], sized_eax
   761 000068A5 B000                <1>  mov sized_eax, 0
   761 000068A7 268803              <1>  mov [es:ebx], sized_eax
   761 000068AA A4                  <1>  %3 movs%1
   761 000068AB B078                <1>  mov sized_eax, value
   761          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   761 000068AD 263803              <1>  cmp [es:ebx], sized_eax
   761 000068B0 0F85D96C0000        <1>  jne error
   761 000068B6 81FF00000200        <1>  cmp edi, off_cmp
   761 000068BC 0F85CD6C0000        <1>  jne error
   761 000068C2 81FE00000200        <1>  cmp esi, off_cmp
   761 000068C8 0F85C16C0000        <1>  jne error
   761                              <1> 
   761 000068CE BEFFFF0100          <1>  mov esi, off_value
   761 000068D3 B078                <1>  mov sized_eax, value
   761          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   761 000068D5 268803              <1>  mov [es:ebx], sized_eax
   761 000068D8 31C0                <1>  xor eax, eax
   761 000068DA AC                  <1>  %3 lods%1
   761 000068DB 3C78                <1>  cmp sized_eax, value & val_mask
   761 000068DD 0F85AC6C0000        <1>  jne error
   761 000068E3 81FE00000200        <1>  cmp esi, off_cmp
   761 000068E9 0F85A06C0000        <1>  jne error
   761                              <1> 
   762                                  	testStringOps w,0,a32
   762                              <1> 
   762                              <1>  %assign value 0x12345678
   762                              <1>  %ifidni %1,b
   762                              <1>  %assign val_size 1
   762                              <1>  %define val_mask 0x000000ff
   762                              <1>  %define sized_eax al
   762                              <1>  %endif
   762                              <1>  %ifidni %1,w
   762                              <1>  %assign val_size 2
   762                              <1>  %define val_mask 0x0000ffff
   762                              <1>  %define sized_eax ax
   762                              <1>  %endif
   762                              <1>  %ifidni %1,d
   762                              <1>  %assign val_size 4
   762                              <1>  %define val_mask 0xffffffff
   762                              <1>  %define sized_eax eax
   762                              <1>  %endif
   762                              <1> 
   762                              <1>  %if %2 == 0
   762 000068EF FC                  <1>  cld
   762                              <1>  %assign off_value 0x0001ffff-(val_size-1)
   762                              <1>  %ifidni %3,a16
   762                              <1> 
   762                              <1>  %assign off_cmp 0x00010000
   762                              <1>  %else
   762                              <1> 
   762                              <1>  %assign off_cmp 0x00020000
   762                              <1>  %endif
   762                              <1>  %else
   762                              <1>  std
   762                              <1>  %assign off_value 0x00010000
   762                              <1>  %ifidni %3,a16
   762                              <1> 
   762                              <1>  %assign off_cmp 0x0001ffff-(val_size-1)
   762                              <1>  %else
   762                              <1> 
   762                              <1>  %assign off_cmp 0x0000ffff-(val_size-1)
   762                              <1>  %endif
   762                              <1>  %endif
   762                              <1> 
   762                              <1>  %ifidni %3,a16
   762                              <1>  %assign off_mask 0x0000ffff
   762                              <1>  %else
   762                              <1>  %assign off_mask 0xffffffff
   762                              <1>  %endif
   762                              <1> 
   762                              <1> 
   762                              <1> 
   762 000068F0 BFFEFF0100          <1>  mov edi, off_value
   762 000068F5 BBFEFF0100          <1>  mov ebx, off_value & off_mask
   762 000068FA 66B80000            <1>  mov sized_eax, 0
   762 000068FE 26668903            <1>  mov [es:ebx], sized_eax
   762 00006902 66B87856            <1>  mov sized_eax, value
   762          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   762 00006906 66AB                <1>  %3 stos%1
   762 00006908 26663903            <1>  cmp [es:ebx], sized_eax
   762 0000690C 0F857D6C0000        <1>  jne error
   762 00006912 81FF00000200        <1>  cmp edi, off_cmp
   762 00006918 0F85716C0000        <1>  jne error
   762                              <1> 
   762 0000691E BEFEFF0100          <1>  mov esi, off_value
   762 00006923 BFFEFF0100          <1>  mov edi, off_value
   762 00006928 BBFEFF0100          <1>  mov ebx, off_value & off_mask
   762 0000692D 3E668903            <1>  mov [ds:ebx], sized_eax
   762 00006931 26668903            <1>  mov [es:ebx], sized_eax
   762 00006935 6683F800            <1>  cmp sized_eax, 0
   762 00006939 0F84506C0000        <1>  je error
   762 0000693F 66A7                <1>  %3 cmps%1
   762 00006941 0F85486C0000        <1>  jne error
   762 00006947 81FF00000200        <1>  cmp edi, off_cmp
   762 0000694D 0F853C6C0000        <1>  jne error
   762 00006953 81FE00000200        <1>  cmp esi, off_cmp
   762 00006959 0F85306C0000        <1>  jne error
   762                              <1> 
   762 0000695F BFFEFF0100          <1>  mov edi, off_value
   762 00006964 66B87856            <1>  mov sized_eax, value
   762          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   762 00006968 26668903            <1>  mov [es:ebx], sized_eax
   762 0000696C 6683F800            <1>  cmp sized_eax, 0
   762 00006970 66AF                <1>  %3 scas%1
   762 00006972 0F85176C0000        <1>  jne error
   762 00006978 81FF00000200        <1>  cmp edi, off_cmp
   762 0000697E 0F850B6C0000        <1>  jne error
   762                              <1> 
   762 00006984 BEFEFF0100          <1>  mov esi, off_value
   762 00006989 BFFEFF0100          <1>  mov edi, off_value
   762 0000698E 66B87856            <1>  mov sized_eax, value
   762          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   762 00006992 3E668903            <1>  mov [ds:ebx], sized_eax
   762 00006996 66B80000            <1>  mov sized_eax, 0
   762 0000699A 26668903            <1>  mov [es:ebx], sized_eax
   762 0000699E 66A5                <1>  %3 movs%1
   762 000069A0 66B87856            <1>  mov sized_eax, value
   762          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   762 000069A4 26663903            <1>  cmp [es:ebx], sized_eax
   762 000069A8 0F85E16B0000        <1>  jne error
   762 000069AE 81FF00000200        <1>  cmp edi, off_cmp
   762 000069B4 0F85D56B0000        <1>  jne error
   762 000069BA 81FE00000200        <1>  cmp esi, off_cmp
   762 000069C0 0F85C96B0000        <1>  jne error
   762                              <1> 
   762 000069C6 BEFEFF0100          <1>  mov esi, off_value
   762 000069CB 66B87856            <1>  mov sized_eax, value
   762          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   762 000069CF 26668903            <1>  mov [es:ebx], sized_eax
   762 000069D3 31C0                <1>  xor eax, eax
   762 000069D5 66AD                <1>  %3 lods%1
   762 000069D7 663D7856            <1>  cmp sized_eax, value & val_mask
   762 000069DB 0F85AE6B0000        <1>  jne error
   762 000069E1 81FE00000200        <1>  cmp esi, off_cmp
   762 000069E7 0F85A26B0000        <1>  jne error
   762                              <1> 
   763                                  	testStringOps d,0,a32
   763                              <1> 
   763                              <1>  %assign value 0x12345678
   763                              <1>  %ifidni %1,b
   763                              <1>  %assign val_size 1
   763                              <1>  %define val_mask 0x000000ff
   763                              <1>  %define sized_eax al
   763                              <1>  %endif
   763                              <1>  %ifidni %1,w
   763                              <1>  %assign val_size 2
   763                              <1>  %define val_mask 0x0000ffff
   763                              <1>  %define sized_eax ax
   763                              <1>  %endif
   763                              <1>  %ifidni %1,d
   763                              <1>  %assign val_size 4
   763                              <1>  %define val_mask 0xffffffff
   763                              <1>  %define sized_eax eax
   763                              <1>  %endif
   763                              <1> 
   763                              <1>  %if %2 == 0
   763 000069ED FC                  <1>  cld
   763                              <1>  %assign off_value 0x0001ffff-(val_size-1)
   763                              <1>  %ifidni %3,a16
   763                              <1> 
   763                              <1>  %assign off_cmp 0x00010000
   763                              <1>  %else
   763                              <1> 
   763                              <1>  %assign off_cmp 0x00020000
   763                              <1>  %endif
   763                              <1>  %else
   763                              <1>  std
   763                              <1>  %assign off_value 0x00010000
   763                              <1>  %ifidni %3,a16
   763                              <1> 
   763                              <1>  %assign off_cmp 0x0001ffff-(val_size-1)
   763                              <1>  %else
   763                              <1> 
   763                              <1>  %assign off_cmp 0x0000ffff-(val_size-1)
   763                              <1>  %endif
   763                              <1>  %endif
   763                              <1> 
   763                              <1>  %ifidni %3,a16
   763                              <1>  %assign off_mask 0x0000ffff
   763                              <1>  %else
   763                              <1>  %assign off_mask 0xffffffff
   763                              <1>  %endif
   763                              <1> 
   763                              <1> 
   763                              <1> 
   763 000069EE BFFCFF0100          <1>  mov edi, off_value
   763 000069F3 BBFCFF0100          <1>  mov ebx, off_value & off_mask
   763 000069F8 B800000000          <1>  mov sized_eax, 0
   763 000069FD 268903              <1>  mov [es:ebx], sized_eax
   763 00006A00 B878563412          <1>  mov sized_eax, value
   763 00006A05 AB                  <1>  %3 stos%1
   763 00006A06 263903              <1>  cmp [es:ebx], sized_eax
   763 00006A09 0F85806B0000        <1>  jne error
   763 00006A0F 81FF00000200        <1>  cmp edi, off_cmp
   763 00006A15 0F85746B0000        <1>  jne error
   763                              <1> 
   763 00006A1B BEFCFF0100          <1>  mov esi, off_value
   763 00006A20 BFFCFF0100          <1>  mov edi, off_value
   763 00006A25 BBFCFF0100          <1>  mov ebx, off_value & off_mask
   763 00006A2A 3E8903              <1>  mov [ds:ebx], sized_eax
   763 00006A2D 268903              <1>  mov [es:ebx], sized_eax
   763 00006A30 83F800              <1>  cmp sized_eax, 0
   763 00006A33 0F84566B0000        <1>  je error
   763 00006A39 A7                  <1>  %3 cmps%1
   763 00006A3A 0F854F6B0000        <1>  jne error
   763 00006A40 81FF00000200        <1>  cmp edi, off_cmp
   763 00006A46 0F85436B0000        <1>  jne error
   763 00006A4C 81FE00000200        <1>  cmp esi, off_cmp
   763 00006A52 0F85376B0000        <1>  jne error
   763                              <1> 
   763 00006A58 BFFCFF0100          <1>  mov edi, off_value
   763 00006A5D B878563412          <1>  mov sized_eax, value
   763 00006A62 268903              <1>  mov [es:ebx], sized_eax
   763 00006A65 83F800              <1>  cmp sized_eax, 0
   763 00006A68 AF                  <1>  %3 scas%1
   763 00006A69 0F85206B0000        <1>  jne error
   763 00006A6F 81FF00000200        <1>  cmp edi, off_cmp
   763 00006A75 0F85146B0000        <1>  jne error
   763                              <1> 
   763 00006A7B BEFCFF0100          <1>  mov esi, off_value
   763 00006A80 BFFCFF0100          <1>  mov edi, off_value
   763 00006A85 B878563412          <1>  mov sized_eax, value
   763 00006A8A 3E8903              <1>  mov [ds:ebx], sized_eax
   763 00006A8D B800000000          <1>  mov sized_eax, 0
   763 00006A92 268903              <1>  mov [es:ebx], sized_eax
   763 00006A95 A5                  <1>  %3 movs%1
   763 00006A96 B878563412          <1>  mov sized_eax, value
   763 00006A9B 263903              <1>  cmp [es:ebx], sized_eax
   763 00006A9E 0F85EB6A0000        <1>  jne error
   763 00006AA4 81FF00000200        <1>  cmp edi, off_cmp
   763 00006AAA 0F85DF6A0000        <1>  jne error
   763 00006AB0 81FE00000200        <1>  cmp esi, off_cmp
   763 00006AB6 0F85D36A0000        <1>  jne error
   763                              <1> 
   763 00006ABC BEFCFF0100          <1>  mov esi, off_value
   763 00006AC1 B878563412          <1>  mov sized_eax, value
   763 00006AC6 268903              <1>  mov [es:ebx], sized_eax
   763 00006AC9 31C0                <1>  xor eax, eax
   763 00006ACB AD                  <1>  %3 lods%1
   763 00006ACC 3D78563412          <1>  cmp sized_eax, value & val_mask
   763 00006AD1 0F85B86A0000        <1>  jne error
   763 00006AD7 81FE00000200        <1>  cmp esi, off_cmp
   763 00006ADD 0F85AC6A0000        <1>  jne error
   763                              <1> 
   764                                  	testStringOps b,1,a32
   764                              <1> 
   764                              <1>  %assign value 0x12345678
   764                              <1>  %ifidni %1,b
   764                              <1>  %assign val_size 1
   764                              <1>  %define val_mask 0x000000ff
   764                              <1>  %define sized_eax al
   764                              <1>  %endif
   764                              <1>  %ifidni %1,w
   764                              <1>  %assign val_size 2
   764                              <1>  %define val_mask 0x0000ffff
   764                              <1>  %define sized_eax ax
   764                              <1>  %endif
   764                              <1>  %ifidni %1,d
   764                              <1>  %assign val_size 4
   764                              <1>  %define val_mask 0xffffffff
   764                              <1>  %define sized_eax eax
   764                              <1>  %endif
   764                              <1> 
   764                              <1>  %if %2 == 0
   764                              <1>  cld
   764                              <1>  %assign off_value 0x0001ffff-(val_size-1)
   764                              <1>  %ifidni %3,a16
   764                              <1> 
   764                              <1>  %assign off_cmp 0x00010000
   764                              <1>  %else
   764                              <1> 
   764                              <1>  %assign off_cmp 0x00020000
   764                              <1>  %endif
   764                              <1>  %else
   764 00006AE3 FD                  <1>  std
   764                              <1>  %assign off_value 0x00010000
   764                              <1>  %ifidni %3,a16
   764                              <1> 
   764                              <1>  %assign off_cmp 0x0001ffff-(val_size-1)
   764                              <1>  %else
   764                              <1> 
   764                              <1>  %assign off_cmp 0x0000ffff-(val_size-1)
   764                              <1>  %endif
   764                              <1>  %endif
   764                              <1> 
   764                              <1>  %ifidni %3,a16
   764                              <1>  %assign off_mask 0x0000ffff
   764                              <1>  %else
   764                              <1>  %assign off_mask 0xffffffff
   764                              <1>  %endif
   764                              <1> 
   764                              <1> 
   764                              <1> 
   764 00006AE4 BF00000100          <1>  mov edi, off_value
   764 00006AE9 BB00000100          <1>  mov ebx, off_value & off_mask
   764 00006AEE B000                <1>  mov sized_eax, 0
   764 00006AF0 268803              <1>  mov [es:ebx], sized_eax
   764 00006AF3 B078                <1>  mov sized_eax, value
   764          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   764 00006AF5 AA                  <1>  %3 stos%1
   764 00006AF6 263803              <1>  cmp [es:ebx], sized_eax
   764 00006AF9 0F85906A0000        <1>  jne error
   764 00006AFF 81FFFFFF0000        <1>  cmp edi, off_cmp
   764 00006B05 0F85846A0000        <1>  jne error
   764                              <1> 
   764 00006B0B BE00000100          <1>  mov esi, off_value
   764 00006B10 BF00000100          <1>  mov edi, off_value
   764 00006B15 BB00000100          <1>  mov ebx, off_value & off_mask
   764 00006B1A 3E8803              <1>  mov [ds:ebx], sized_eax
   764 00006B1D 268803              <1>  mov [es:ebx], sized_eax
   764 00006B20 3C00                <1>  cmp sized_eax, 0
   764 00006B22 0F84676A0000        <1>  je error
   764 00006B28 A6                  <1>  %3 cmps%1
   764 00006B29 0F85606A0000        <1>  jne error
   764 00006B2F 81FFFFFF0000        <1>  cmp edi, off_cmp
   764 00006B35 0F85546A0000        <1>  jne error
   764 00006B3B 81FEFFFF0000        <1>  cmp esi, off_cmp
   764 00006B41 0F85486A0000        <1>  jne error
   764                              <1> 
   764 00006B47 BF00000100          <1>  mov edi, off_value
   764 00006B4C B078                <1>  mov sized_eax, value
   764          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   764 00006B4E 268803              <1>  mov [es:ebx], sized_eax
   764 00006B51 3C00                <1>  cmp sized_eax, 0
   764 00006B53 AE                  <1>  %3 scas%1
   764 00006B54 0F85356A0000        <1>  jne error
   764 00006B5A 81FFFFFF0000        <1>  cmp edi, off_cmp
   764 00006B60 0F85296A0000        <1>  jne error
   764                              <1> 
   764 00006B66 BE00000100          <1>  mov esi, off_value
   764 00006B6B BF00000100          <1>  mov edi, off_value
   764 00006B70 B078                <1>  mov sized_eax, value
   764          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   764 00006B72 3E8803              <1>  mov [ds:ebx], sized_eax
   764 00006B75 B000                <1>  mov sized_eax, 0
   764 00006B77 268803              <1>  mov [es:ebx], sized_eax
   764 00006B7A A4                  <1>  %3 movs%1
   764 00006B7B B078                <1>  mov sized_eax, value
   764          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   764 00006B7D 263803              <1>  cmp [es:ebx], sized_eax
   764 00006B80 0F85096A0000        <1>  jne error
   764 00006B86 81FFFFFF0000        <1>  cmp edi, off_cmp
   764 00006B8C 0F85FD690000        <1>  jne error
   764 00006B92 81FEFFFF0000        <1>  cmp esi, off_cmp
   764 00006B98 0F85F1690000        <1>  jne error
   764                              <1> 
   764 00006B9E BE00000100          <1>  mov esi, off_value
   764 00006BA3 B078                <1>  mov sized_eax, value
   764          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
   764 00006BA5 268803              <1>  mov [es:ebx], sized_eax
   764 00006BA8 31C0                <1>  xor eax, eax
   764 00006BAA AC                  <1>  %3 lods%1
   764 00006BAB 3C78                <1>  cmp sized_eax, value & val_mask
   764 00006BAD 0F85DC690000        <1>  jne error
   764 00006BB3 81FEFFFF0000        <1>  cmp esi, off_cmp
   764 00006BB9 0F85D0690000        <1>  jne error
   764                              <1> 
   765                                  	testStringOps w,1,a32
   765                              <1> 
   765                              <1>  %assign value 0x12345678
   765                              <1>  %ifidni %1,b
   765                              <1>  %assign val_size 1
   765                              <1>  %define val_mask 0x000000ff
   765                              <1>  %define sized_eax al
   765                              <1>  %endif
   765                              <1>  %ifidni %1,w
   765                              <1>  %assign val_size 2
   765                              <1>  %define val_mask 0x0000ffff
   765                              <1>  %define sized_eax ax
   765                              <1>  %endif
   765                              <1>  %ifidni %1,d
   765                              <1>  %assign val_size 4
   765                              <1>  %define val_mask 0xffffffff
   765                              <1>  %define sized_eax eax
   765                              <1>  %endif
   765                              <1> 
   765                              <1>  %if %2 == 0
   765                              <1>  cld
   765                              <1>  %assign off_value 0x0001ffff-(val_size-1)
   765                              <1>  %ifidni %3,a16
   765                              <1> 
   765                              <1>  %assign off_cmp 0x00010000
   765                              <1>  %else
   765                              <1> 
   765                              <1>  %assign off_cmp 0x00020000
   765                              <1>  %endif
   765                              <1>  %else
   765 00006BBF FD                  <1>  std
   765                              <1>  %assign off_value 0x00010000
   765                              <1>  %ifidni %3,a16
   765                              <1> 
   765                              <1>  %assign off_cmp 0x0001ffff-(val_size-1)
   765                              <1>  %else
   765                              <1> 
   765                              <1>  %assign off_cmp 0x0000ffff-(val_size-1)
   765                              <1>  %endif
   765                              <1>  %endif
   765                              <1> 
   765                              <1>  %ifidni %3,a16
   765                              <1>  %assign off_mask 0x0000ffff
   765                              <1>  %else
   765                              <1>  %assign off_mask 0xffffffff
   765                              <1>  %endif
   765                              <1> 
   765                              <1> 
   765                              <1> 
   765 00006BC0 BF00000100          <1>  mov edi, off_value
   765 00006BC5 BB00000100          <1>  mov ebx, off_value & off_mask
   765 00006BCA 66B80000            <1>  mov sized_eax, 0
   765 00006BCE 26668903            <1>  mov [es:ebx], sized_eax
   765 00006BD2 66B87856            <1>  mov sized_eax, value
   765          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   765 00006BD6 66AB                <1>  %3 stos%1
   765 00006BD8 26663903            <1>  cmp [es:ebx], sized_eax
   765 00006BDC 0F85AD690000        <1>  jne error
   765 00006BE2 81FFFEFF0000        <1>  cmp edi, off_cmp
   765 00006BE8 0F85A1690000        <1>  jne error
   765                              <1> 
   765 00006BEE BE00000100          <1>  mov esi, off_value
   765 00006BF3 BF00000100          <1>  mov edi, off_value
   765 00006BF8 BB00000100          <1>  mov ebx, off_value & off_mask
   765 00006BFD 3E668903            <1>  mov [ds:ebx], sized_eax
   765 00006C01 26668903            <1>  mov [es:ebx], sized_eax
   765 00006C05 6683F800            <1>  cmp sized_eax, 0
   765 00006C09 0F8480690000        <1>  je error
   765 00006C0F 66A7                <1>  %3 cmps%1
   765 00006C11 0F8578690000        <1>  jne error
   765 00006C17 81FFFEFF0000        <1>  cmp edi, off_cmp
   765 00006C1D 0F856C690000        <1>  jne error
   765 00006C23 81FEFEFF0000        <1>  cmp esi, off_cmp
   765 00006C29 0F8560690000        <1>  jne error
   765                              <1> 
   765 00006C2F BF00000100          <1>  mov edi, off_value
   765 00006C34 66B87856            <1>  mov sized_eax, value
   765          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   765 00006C38 26668903            <1>  mov [es:ebx], sized_eax
   765 00006C3C 6683F800            <1>  cmp sized_eax, 0
   765 00006C40 66AF                <1>  %3 scas%1
   765 00006C42 0F8547690000        <1>  jne error
   765 00006C48 81FFFEFF0000        <1>  cmp edi, off_cmp
   765 00006C4E 0F853B690000        <1>  jne error
   765                              <1> 
   765 00006C54 BE00000100          <1>  mov esi, off_value
   765 00006C59 BF00000100          <1>  mov edi, off_value
   765 00006C5E 66B87856            <1>  mov sized_eax, value
   765          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   765 00006C62 3E668903            <1>  mov [ds:ebx], sized_eax
   765 00006C66 66B80000            <1>  mov sized_eax, 0
   765 00006C6A 26668903            <1>  mov [es:ebx], sized_eax
   765 00006C6E 66A5                <1>  %3 movs%1
   765 00006C70 66B87856            <1>  mov sized_eax, value
   765          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   765 00006C74 26663903            <1>  cmp [es:ebx], sized_eax
   765 00006C78 0F8511690000        <1>  jne error
   765 00006C7E 81FFFEFF0000        <1>  cmp edi, off_cmp
   765 00006C84 0F8505690000        <1>  jne error
   765 00006C8A 81FEFEFF0000        <1>  cmp esi, off_cmp
   765 00006C90 0F85F9680000        <1>  jne error
   765                              <1> 
   765 00006C96 BE00000100          <1>  mov esi, off_value
   765 00006C9B 66B87856            <1>  mov sized_eax, value
   765          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
   765 00006C9F 26668903            <1>  mov [es:ebx], sized_eax
   765 00006CA3 31C0                <1>  xor eax, eax
   765 00006CA5 66AD                <1>  %3 lods%1
   765 00006CA7 663D7856            <1>  cmp sized_eax, value & val_mask
   765 00006CAB 0F85DE680000        <1>  jne error
   765 00006CB1 81FEFEFF0000        <1>  cmp esi, off_cmp
   765 00006CB7 0F85D2680000        <1>  jne error
   765                              <1> 
   766                                  	testStringOps d,1,a32
   766                              <1> 
   766                              <1>  %assign value 0x12345678
   766                              <1>  %ifidni %1,b
   766                              <1>  %assign val_size 1
   766                              <1>  %define val_mask 0x000000ff
   766                              <1>  %define sized_eax al
   766                              <1>  %endif
   766                              <1>  %ifidni %1,w
   766                              <1>  %assign val_size 2
   766                              <1>  %define val_mask 0x0000ffff
   766                              <1>  %define sized_eax ax
   766                              <1>  %endif
   766                              <1>  %ifidni %1,d
   766                              <1>  %assign val_size 4
   766                              <1>  %define val_mask 0xffffffff
   766                              <1>  %define sized_eax eax
   766                              <1>  %endif
   766                              <1> 
   766                              <1>  %if %2 == 0
   766                              <1>  cld
   766                              <1>  %assign off_value 0x0001ffff-(val_size-1)
   766                              <1>  %ifidni %3,a16
   766                              <1> 
   766                              <1>  %assign off_cmp 0x00010000
   766                              <1>  %else
   766                              <1> 
   766                              <1>  %assign off_cmp 0x00020000
   766                              <1>  %endif
   766                              <1>  %else
   766 00006CBD FD                  <1>  std
   766                              <1>  %assign off_value 0x00010000
   766                              <1>  %ifidni %3,a16
   766                              <1> 
   766                              <1>  %assign off_cmp 0x0001ffff-(val_size-1)
   766                              <1>  %else
   766                              <1> 
   766                              <1>  %assign off_cmp 0x0000ffff-(val_size-1)
   766                              <1>  %endif
   766                              <1>  %endif
   766                              <1> 
   766                              <1>  %ifidni %3,a16
   766                              <1>  %assign off_mask 0x0000ffff
   766                              <1>  %else
   766                              <1>  %assign off_mask 0xffffffff
   766                              <1>  %endif
   766                              <1> 
   766                              <1> 
   766                              <1> 
   766 00006CBE BF00000100          <1>  mov edi, off_value
   766 00006CC3 BB00000100          <1>  mov ebx, off_value & off_mask
   766 00006CC8 B800000000          <1>  mov sized_eax, 0
   766 00006CCD 268903              <1>  mov [es:ebx], sized_eax
   766 00006CD0 B878563412          <1>  mov sized_eax, value
   766 00006CD5 AB                  <1>  %3 stos%1
   766 00006CD6 263903              <1>  cmp [es:ebx], sized_eax
   766 00006CD9 0F85B0680000        <1>  jne error
   766 00006CDF 81FFFCFF0000        <1>  cmp edi, off_cmp
   766 00006CE5 0F85A4680000        <1>  jne error
   766                              <1> 
   766 00006CEB BE00000100          <1>  mov esi, off_value
   766 00006CF0 BF00000100          <1>  mov edi, off_value
   766 00006CF5 BB00000100          <1>  mov ebx, off_value & off_mask
   766 00006CFA 3E8903              <1>  mov [ds:ebx], sized_eax
   766 00006CFD 268903              <1>  mov [es:ebx], sized_eax
   766 00006D00 83F800              <1>  cmp sized_eax, 0
   766 00006D03 0F8486680000        <1>  je error
   766 00006D09 A7                  <1>  %3 cmps%1
   766 00006D0A 0F857F680000        <1>  jne error
   766 00006D10 81FFFCFF0000        <1>  cmp edi, off_cmp
   766 00006D16 0F8573680000        <1>  jne error
   766 00006D1C 81FEFCFF0000        <1>  cmp esi, off_cmp
   766 00006D22 0F8567680000        <1>  jne error
   766                              <1> 
   766 00006D28 BF00000100          <1>  mov edi, off_value
   766 00006D2D B878563412          <1>  mov sized_eax, value
   766 00006D32 268903              <1>  mov [es:ebx], sized_eax
   766 00006D35 83F800              <1>  cmp sized_eax, 0
   766 00006D38 AF                  <1>  %3 scas%1
   766 00006D39 0F8550680000        <1>  jne error
   766 00006D3F 81FFFCFF0000        <1>  cmp edi, off_cmp
   766 00006D45 0F8544680000        <1>  jne error
   766                              <1> 
   766 00006D4B BE00000100          <1>  mov esi, off_value
   766 00006D50 BF00000100          <1>  mov edi, off_value
   766 00006D55 B878563412          <1>  mov sized_eax, value
   766 00006D5A 3E8903              <1>  mov [ds:ebx], sized_eax
   766 00006D5D B800000000          <1>  mov sized_eax, 0
   766 00006D62 268903              <1>  mov [es:ebx], sized_eax
   766 00006D65 A5                  <1>  %3 movs%1
   766 00006D66 B878563412          <1>  mov sized_eax, value
   766 00006D6B 263903              <1>  cmp [es:ebx], sized_eax
   766 00006D6E 0F851B680000        <1>  jne error
   766 00006D74 81FFFCFF0000        <1>  cmp edi, off_cmp
   766 00006D7A 0F850F680000        <1>  jne error
   766 00006D80 81FEFCFF0000        <1>  cmp esi, off_cmp
   766 00006D86 0F8503680000        <1>  jne error
   766                              <1> 
   766 00006D8C BE00000100          <1>  mov esi, off_value
   766 00006D91 B878563412          <1>  mov sized_eax, value
   766 00006D96 268903              <1>  mov [es:ebx], sized_eax
   766 00006D99 31C0                <1>  xor eax, eax
   766 00006D9B AD                  <1>  %3 lods%1
   766 00006D9C 3D78563412          <1>  cmp sized_eax, value & val_mask
   766 00006DA1 0F85E8670000        <1>  jne error
   766 00006DA7 81FEFCFF0000        <1>  cmp esi, off_cmp
   766 00006DAD 0F85DC670000        <1>  jne error
   766                              <1> 
   767                                  	testStringReps b,0,a32
   767                              <1> 
   767                              <1>  %assign bytes 0x100
   767                              <1> 
   767                              <1>  %ifidni %1,b
   767                              <1>  %assign items bytes
   767                              <1>  %endif
   767                              <1>  %ifidni %1,w
   767                              <1>  %assign items bytes/2
   767                              <1>  %endif
   767                              <1>  %ifidni %1,d
   767                              <1>  %assign items bytes/4
   767                              <1>  %endif
   767                              <1> 
   767                              <1>  %if %2 == 0
   767 00006DB3 FC                  <1>  cld
   767                              <1>  %assign off_value 0x0001ff00
   767                              <1>  %ifidni %3,a16
   767                              <1> 
   767                              <1>  %assign off_cmp 0x00010000
   767                              <1>  %else
   767                              <1> 
   767                              <1>  %assign off_cmp 0x00020000
   767                              <1>  %endif
   767                              <1>  %else
   767                              <1>  std
   767                              <1>  %assign off_value 0x000100ff
   767                              <1>  %ifidni %3,a16
   767                              <1> 
   767                              <1>  %assign off_cmp 0x0001ffff
   767                              <1>  %else
   767                              <1> 
   767                              <1>  %assign off_cmp 0x0000ffff
   767                              <1>  %endif
   767                              <1>  %endif
   767                              <1> 
   767 00006DB4 B878563412          <1>  mov eax, 0x12345678
   767 00006DB9 BE00FF0100          <1>  mov esi, off_value
   767 00006DBE BF00FF0100          <1>  mov edi, off_value
   767                              <1> 
   767                              <1> 
   767                              <1> 
   767                              <1> 
   767 00006DC3 B878563412          <1>  mov eax, 0x12345678
   767 00006DC8 BE00FF0100          <1>  mov esi, off_value
   767 00006DCD BF00FF0100          <1>  mov edi, off_value
   767 00006DD2 B900010000          <1>  mov ecx, items
   767 00006DD7 F3AA                <1>  %3 rep stos%1
   767 00006DD9 83F900              <1>  cmp ecx, 0
   767 00006DDC 0F85AD670000        <1>  jnz error
   767 00006DE2 81FF00000200        <1>  cmp edi, off_cmp
   767 00006DE8 0F85A1670000        <1>  jnz error
   767 00006DEE BF00FF0100          <1>  mov edi, off_value
   767                              <1> 
   767 00006DF3 668CC2              <1>  mov dx, es
   767 00006DF6 668CD9              <1>  mov cx, ds
   767 00006DF9 6687D1              <1>  xchg dx, cx
   767 00006DFC 8EC2                <1>  mov es, dx
   767 00006DFE 8ED9                <1>  mov ds, cx
   767 00006E00 87FE                <1>  xchg edi, esi
   767                              <1> 
   767 00006E02 B900010000          <1>  mov ecx, items
   767 00006E07 F3AA                <1>  %3 rep stos%1
   767 00006E09 BF00FF0100          <1>  mov edi, off_value
   767                              <1> 
   767                              <1> 
   767 00006E0E B900010000          <1>  mov ecx, items
   767 00006E13 F3A6                <1>  %3 repe cmps%1
   767 00006E15 83F900              <1>  cmp ecx, 0
   767 00006E18 0F8571670000        <1>  jnz error
   767 00006E1E 81FE00000200        <1>  cmp esi, off_cmp
   767 00006E24 0F8565670000        <1>  jne error
   767 00006E2A 81FF00000200        <1>  cmp edi, off_cmp
   767 00006E30 0F8559670000        <1>  jne error
   767 00006E36 BF00FF0100          <1>  mov edi, off_value
   767 00006E3B BE00FF0100          <1>  mov esi, off_value
   767                              <1> 
   767                              <1> 
   767 00006E40 B900010000          <1>  mov ecx, items
   767 00006E45 F3AE                <1>  %3 repe scas%1
   767 00006E47 83F900              <1>  cmp ecx, 0
   767 00006E4A 0F853F670000        <1>  jne error
   767 00006E50 81FF00000200        <1>  cmp edi, off_cmp
   767 00006E56 0F8533670000        <1>  jne error
   767 00006E5C BF00FF0100          <1>  mov edi, off_value
   767                              <1> 
   767                              <1> 
   767                              <1> 
   767 00006E61 B800000000          <1>  mov eax, 0
   767 00006E66 B900010000          <1>  mov ecx, items
   767 00006E6B F3AA                <1>  %3 rep stos%1
   767 00006E6D BF00FF0100          <1>  mov edi, off_value
   767 00006E72 B900010000          <1>  mov ecx, items
   767 00006E77 F3A4                <1>  %3 rep movs%1
   767 00006E79 83F900              <1>  cmp ecx, 0
   767 00006E7C 0F850D670000        <1>  jne error
   767 00006E82 81FE00000200        <1>  cmp esi, off_cmp
   767 00006E88 0F8501670000        <1>  jne error
   767 00006E8E 81FF00000200        <1>  cmp edi, off_cmp
   767 00006E94 0F85F5660000        <1>  jne error
   767 00006E9A B900010000          <1>  mov ecx, items
   767 00006E9F BF00FF0100          <1>  mov edi, off_value
   767 00006EA4 BE00FF0100          <1>  mov esi, off_value
   767 00006EA9 F3A6                <1>  %3 repe cmps%1
   767 00006EAB 83F900              <1>  cmp ecx, 0
   767 00006EAE 0F85DB660000        <1>  jne error
   767 00006EB4 81FE00000200        <1>  cmp esi, off_cmp
   767 00006EBA 0F85CF660000        <1>  jne error
   767 00006EC0 81FF00000200        <1>  cmp edi, off_cmp
   767 00006EC6 0F85C3660000        <1>  jne error
   768                                  	testStringReps w,0,a32
   768                              <1> 
   768                              <1>  %assign bytes 0x100
   768                              <1> 
   768                              <1>  %ifidni %1,b
   768                              <1>  %assign items bytes
   768                              <1>  %endif
   768                              <1>  %ifidni %1,w
   768                              <1>  %assign items bytes/2
   768                              <1>  %endif
   768                              <1>  %ifidni %1,d
   768                              <1>  %assign items bytes/4
   768                              <1>  %endif
   768                              <1> 
   768                              <1>  %if %2 == 0
   768 00006ECC FC                  <1>  cld
   768                              <1>  %assign off_value 0x0001ff00
   768                              <1>  %ifidni %3,a16
   768                              <1> 
   768                              <1>  %assign off_cmp 0x00010000
   768                              <1>  %else
   768                              <1> 
   768                              <1>  %assign off_cmp 0x00020000
   768                              <1>  %endif
   768                              <1>  %else
   768                              <1>  std
   768                              <1>  %assign off_value 0x000100ff
   768                              <1>  %ifidni %3,a16
   768                              <1> 
   768                              <1>  %assign off_cmp 0x0001ffff
   768                              <1>  %else
   768                              <1> 
   768                              <1>  %assign off_cmp 0x0000ffff
   768                              <1>  %endif
   768                              <1>  %endif
   768                              <1> 
   768 00006ECD B878563412          <1>  mov eax, 0x12345678
   768 00006ED2 BE00FF0100          <1>  mov esi, off_value
   768 00006ED7 BF00FF0100          <1>  mov edi, off_value
   768                              <1> 
   768                              <1> 
   768                              <1> 
   768                              <1> 
   768 00006EDC B878563412          <1>  mov eax, 0x12345678
   768 00006EE1 BE00FF0100          <1>  mov esi, off_value
   768 00006EE6 BF00FF0100          <1>  mov edi, off_value
   768 00006EEB B980000000          <1>  mov ecx, items
   768 00006EF0 F366AB              <1>  %3 rep stos%1
   768 00006EF3 83F900              <1>  cmp ecx, 0
   768 00006EF6 0F8593660000        <1>  jnz error
   768 00006EFC 81FF00000200        <1>  cmp edi, off_cmp
   768 00006F02 0F8587660000        <1>  jnz error
   768 00006F08 BF00FF0100          <1>  mov edi, off_value
   768                              <1> 
   768 00006F0D 668CC2              <1>  mov dx, es
   768 00006F10 668CD9              <1>  mov cx, ds
   768 00006F13 6687D1              <1>  xchg dx, cx
   768 00006F16 8EC2                <1>  mov es, dx
   768 00006F18 8ED9                <1>  mov ds, cx
   768 00006F1A 87FE                <1>  xchg edi, esi
   768                              <1> 
   768 00006F1C B980000000          <1>  mov ecx, items
   768 00006F21 F366AB              <1>  %3 rep stos%1
   768 00006F24 BF00FF0100          <1>  mov edi, off_value
   768                              <1> 
   768                              <1> 
   768 00006F29 B980000000          <1>  mov ecx, items
   768 00006F2E F366A7              <1>  %3 repe cmps%1
   768 00006F31 83F900              <1>  cmp ecx, 0
   768 00006F34 0F8555660000        <1>  jnz error
   768 00006F3A 81FE00000200        <1>  cmp esi, off_cmp
   768 00006F40 0F8549660000        <1>  jne error
   768 00006F46 81FF00000200        <1>  cmp edi, off_cmp
   768 00006F4C 0F853D660000        <1>  jne error
   768 00006F52 BF00FF0100          <1>  mov edi, off_value
   768 00006F57 BE00FF0100          <1>  mov esi, off_value
   768                              <1> 
   768                              <1> 
   768 00006F5C B980000000          <1>  mov ecx, items
   768 00006F61 F366AF              <1>  %3 repe scas%1
   768 00006F64 83F900              <1>  cmp ecx, 0
   768 00006F67 0F8522660000        <1>  jne error
   768 00006F6D 81FF00000200        <1>  cmp edi, off_cmp
   768 00006F73 0F8516660000        <1>  jne error
   768 00006F79 BF00FF0100          <1>  mov edi, off_value
   768                              <1> 
   768                              <1> 
   768                              <1> 
   768 00006F7E B800000000          <1>  mov eax, 0
   768 00006F83 B980000000          <1>  mov ecx, items
   768 00006F88 F366AB              <1>  %3 rep stos%1
   768 00006F8B BF00FF0100          <1>  mov edi, off_value
   768 00006F90 B980000000          <1>  mov ecx, items
   768 00006F95 F366A5              <1>  %3 rep movs%1
   768 00006F98 83F900              <1>  cmp ecx, 0
   768 00006F9B 0F85EE650000        <1>  jne error
   768 00006FA1 81FE00000200        <1>  cmp esi, off_cmp
   768 00006FA7 0F85E2650000        <1>  jne error
   768 00006FAD 81FF00000200        <1>  cmp edi, off_cmp
   768 00006FB3 0F85D6650000        <1>  jne error
   768 00006FB9 B980000000          <1>  mov ecx, items
   768 00006FBE BF00FF0100          <1>  mov edi, off_value
   768 00006FC3 BE00FF0100          <1>  mov esi, off_value
   768 00006FC8 F366A7              <1>  %3 repe cmps%1
   768 00006FCB 83F900              <1>  cmp ecx, 0
   768 00006FCE 0F85BB650000        <1>  jne error
   768 00006FD4 81FE00000200        <1>  cmp esi, off_cmp
   768 00006FDA 0F85AF650000        <1>  jne error
   768 00006FE0 81FF00000200        <1>  cmp edi, off_cmp
   768 00006FE6 0F85A3650000        <1>  jne error
   769                                  	testStringReps d,0,a32
   769                              <1> 
   769                              <1>  %assign bytes 0x100
   769                              <1> 
   769                              <1>  %ifidni %1,b
   769                              <1>  %assign items bytes
   769                              <1>  %endif
   769                              <1>  %ifidni %1,w
   769                              <1>  %assign items bytes/2
   769                              <1>  %endif
   769                              <1>  %ifidni %1,d
   769                              <1>  %assign items bytes/4
   769                              <1>  %endif
   769                              <1> 
   769                              <1>  %if %2 == 0
   769 00006FEC FC                  <1>  cld
   769                              <1>  %assign off_value 0x0001ff00
   769                              <1>  %ifidni %3,a16
   769                              <1> 
   769                              <1>  %assign off_cmp 0x00010000
   769                              <1>  %else
   769                              <1> 
   769                              <1>  %assign off_cmp 0x00020000
   769                              <1>  %endif
   769                              <1>  %else
   769                              <1>  std
   769                              <1>  %assign off_value 0x000100ff
   769                              <1>  %ifidni %3,a16
   769                              <1> 
   769                              <1>  %assign off_cmp 0x0001ffff
   769                              <1>  %else
   769                              <1> 
   769                              <1>  %assign off_cmp 0x0000ffff
   769                              <1>  %endif
   769                              <1>  %endif
   769                              <1> 
   769 00006FED B878563412          <1>  mov eax, 0x12345678
   769 00006FF2 BE00FF0100          <1>  mov esi, off_value
   769 00006FF7 BF00FF0100          <1>  mov edi, off_value
   769                              <1> 
   769                              <1> 
   769                              <1> 
   769                              <1> 
   769 00006FFC B878563412          <1>  mov eax, 0x12345678
   769 00007001 BE00FF0100          <1>  mov esi, off_value
   769 00007006 BF00FF0100          <1>  mov edi, off_value
   769 0000700B B940000000          <1>  mov ecx, items
   769 00007010 F3AB                <1>  %3 rep stos%1
   769 00007012 83F900              <1>  cmp ecx, 0
   769 00007015 0F8574650000        <1>  jnz error
   769 0000701B 81FF00000200        <1>  cmp edi, off_cmp
   769 00007021 0F8568650000        <1>  jnz error
   769 00007027 BF00FF0100          <1>  mov edi, off_value
   769                              <1> 
   769 0000702C 668CC2              <1>  mov dx, es
   769 0000702F 668CD9              <1>  mov cx, ds
   769 00007032 6687D1              <1>  xchg dx, cx
   769 00007035 8EC2                <1>  mov es, dx
   769 00007037 8ED9                <1>  mov ds, cx
   769 00007039 87FE                <1>  xchg edi, esi
   769                              <1> 
   769 0000703B B940000000          <1>  mov ecx, items
   769 00007040 F3AB                <1>  %3 rep stos%1
   769 00007042 BF00FF0100          <1>  mov edi, off_value
   769                              <1> 
   769                              <1> 
   769 00007047 B940000000          <1>  mov ecx, items
   769 0000704C F3A7                <1>  %3 repe cmps%1
   769 0000704E 83F900              <1>  cmp ecx, 0
   769 00007051 0F8538650000        <1>  jnz error
   769 00007057 81FE00000200        <1>  cmp esi, off_cmp
   769 0000705D 0F852C650000        <1>  jne error
   769 00007063 81FF00000200        <1>  cmp edi, off_cmp
   769 00007069 0F8520650000        <1>  jne error
   769 0000706F BF00FF0100          <1>  mov edi, off_value
   769 00007074 BE00FF0100          <1>  mov esi, off_value
   769                              <1> 
   769                              <1> 
   769 00007079 B940000000          <1>  mov ecx, items
   769 0000707E F3AF                <1>  %3 repe scas%1
   769 00007080 83F900              <1>  cmp ecx, 0
   769 00007083 0F8506650000        <1>  jne error
   769 00007089 81FF00000200        <1>  cmp edi, off_cmp
   769 0000708F 0F85FA640000        <1>  jne error
   769 00007095 BF00FF0100          <1>  mov edi, off_value
   769                              <1> 
   769                              <1> 
   769                              <1> 
   769 0000709A B800000000          <1>  mov eax, 0
   769 0000709F B940000000          <1>  mov ecx, items
   769 000070A4 F3AB                <1>  %3 rep stos%1
   769 000070A6 BF00FF0100          <1>  mov edi, off_value
   769 000070AB B940000000          <1>  mov ecx, items
   769 000070B0 F3A5                <1>  %3 rep movs%1
   769 000070B2 83F900              <1>  cmp ecx, 0
   769 000070B5 0F85D4640000        <1>  jne error
   769 000070BB 81FE00000200        <1>  cmp esi, off_cmp
   769 000070C1 0F85C8640000        <1>  jne error
   769 000070C7 81FF00000200        <1>  cmp edi, off_cmp
   769 000070CD 0F85BC640000        <1>  jne error
   769 000070D3 B940000000          <1>  mov ecx, items
   769 000070D8 BF00FF0100          <1>  mov edi, off_value
   769 000070DD BE00FF0100          <1>  mov esi, off_value
   769 000070E2 F3A7                <1>  %3 repe cmps%1
   769 000070E4 83F900              <1>  cmp ecx, 0
   769 000070E7 0F85A2640000        <1>  jne error
   769 000070ED 81FE00000200        <1>  cmp esi, off_cmp
   769 000070F3 0F8596640000        <1>  jne error
   769 000070F9 81FF00000200        <1>  cmp edi, off_cmp
   769 000070FF 0F858A640000        <1>  jne error
   770                                  	testStringReps b,1,a32
   770                              <1> 
   770                              <1>  %assign bytes 0x100
   770                              <1> 
   770                              <1>  %ifidni %1,b
   770                              <1>  %assign items bytes
   770                              <1>  %endif
   770                              <1>  %ifidni %1,w
   770                              <1>  %assign items bytes/2
   770                              <1>  %endif
   770                              <1>  %ifidni %1,d
   770                              <1>  %assign items bytes/4
   770                              <1>  %endif
   770                              <1> 
   770                              <1>  %if %2 == 0
   770                              <1>  cld
   770                              <1>  %assign off_value 0x0001ff00
   770                              <1>  %ifidni %3,a16
   770                              <1> 
   770                              <1>  %assign off_cmp 0x00010000
   770                              <1>  %else
   770                              <1> 
   770                              <1>  %assign off_cmp 0x00020000
   770                              <1>  %endif
   770                              <1>  %else
   770 00007105 FD                  <1>  std
   770                              <1>  %assign off_value 0x000100ff
   770                              <1>  %ifidni %3,a16
   770                              <1> 
   770                              <1>  %assign off_cmp 0x0001ffff
   770                              <1>  %else
   770                              <1> 
   770                              <1>  %assign off_cmp 0x0000ffff
   770                              <1>  %endif
   770                              <1>  %endif
   770                              <1> 
   770 00007106 B878563412          <1>  mov eax, 0x12345678
   770 0000710B BEFF000100          <1>  mov esi, off_value
   770 00007110 BFFF000100          <1>  mov edi, off_value
   770                              <1> 
   770                              <1> 
   770                              <1> 
   770                              <1> 
   770 00007115 B878563412          <1>  mov eax, 0x12345678
   770 0000711A BEFF000100          <1>  mov esi, off_value
   770 0000711F BFFF000100          <1>  mov edi, off_value
   770 00007124 B900010000          <1>  mov ecx, items
   770 00007129 F3AA                <1>  %3 rep stos%1
   770 0000712B 83F900              <1>  cmp ecx, 0
   770 0000712E 0F855B640000        <1>  jnz error
   770 00007134 81FFFFFF0000        <1>  cmp edi, off_cmp
   770 0000713A 0F854F640000        <1>  jnz error
   770 00007140 BFFF000100          <1>  mov edi, off_value
   770                              <1> 
   770 00007145 668CC2              <1>  mov dx, es
   770 00007148 668CD9              <1>  mov cx, ds
   770 0000714B 6687D1              <1>  xchg dx, cx
   770 0000714E 8EC2                <1>  mov es, dx
   770 00007150 8ED9                <1>  mov ds, cx
   770 00007152 87FE                <1>  xchg edi, esi
   770                              <1> 
   770 00007154 B900010000          <1>  mov ecx, items
   770 00007159 F3AA                <1>  %3 rep stos%1
   770 0000715B BFFF000100          <1>  mov edi, off_value
   770                              <1> 
   770                              <1> 
   770 00007160 B900010000          <1>  mov ecx, items
   770 00007165 F3A6                <1>  %3 repe cmps%1
   770 00007167 83F900              <1>  cmp ecx, 0
   770 0000716A 0F851F640000        <1>  jnz error
   770 00007170 81FEFFFF0000        <1>  cmp esi, off_cmp
   770 00007176 0F8513640000        <1>  jne error
   770 0000717C 81FFFFFF0000        <1>  cmp edi, off_cmp
   770 00007182 0F8507640000        <1>  jne error
   770 00007188 BFFF000100          <1>  mov edi, off_value
   770 0000718D BEFF000100          <1>  mov esi, off_value
   770                              <1> 
   770                              <1> 
   770 00007192 B900010000          <1>  mov ecx, items
   770 00007197 F3AE                <1>  %3 repe scas%1
   770 00007199 83F900              <1>  cmp ecx, 0
   770 0000719C 0F85ED630000        <1>  jne error
   770 000071A2 81FFFFFF0000        <1>  cmp edi, off_cmp
   770 000071A8 0F85E1630000        <1>  jne error
   770 000071AE BFFF000100          <1>  mov edi, off_value
   770                              <1> 
   770                              <1> 
   770                              <1> 
   770 000071B3 B800000000          <1>  mov eax, 0
   770 000071B8 B900010000          <1>  mov ecx, items
   770 000071BD F3AA                <1>  %3 rep stos%1
   770 000071BF BFFF000100          <1>  mov edi, off_value
   770 000071C4 B900010000          <1>  mov ecx, items
   770 000071C9 F3A4                <1>  %3 rep movs%1
   770 000071CB 83F900              <1>  cmp ecx, 0
   770 000071CE 0F85BB630000        <1>  jne error
   770 000071D4 81FEFFFF0000        <1>  cmp esi, off_cmp
   770 000071DA 0F85AF630000        <1>  jne error
   770 000071E0 81FFFFFF0000        <1>  cmp edi, off_cmp
   770 000071E6 0F85A3630000        <1>  jne error
   770 000071EC B900010000          <1>  mov ecx, items
   770 000071F1 BFFF000100          <1>  mov edi, off_value
   770 000071F6 BEFF000100          <1>  mov esi, off_value
   770 000071FB F3A6                <1>  %3 repe cmps%1
   770 000071FD 83F900              <1>  cmp ecx, 0
   770 00007200 0F8589630000        <1>  jne error
   770 00007206 81FEFFFF0000        <1>  cmp esi, off_cmp
   770 0000720C 0F857D630000        <1>  jne error
   770 00007212 81FFFFFF0000        <1>  cmp edi, off_cmp
   770 00007218 0F8571630000        <1>  jne error
   771                                  	testStringReps w,1,a32
   771                              <1> 
   771                              <1>  %assign bytes 0x100
   771                              <1> 
   771                              <1>  %ifidni %1,b
   771                              <1>  %assign items bytes
   771                              <1>  %endif
   771                              <1>  %ifidni %1,w
   771                              <1>  %assign items bytes/2
   771                              <1>  %endif
   771                              <1>  %ifidni %1,d
   771                              <1>  %assign items bytes/4
   771                              <1>  %endif
   771                              <1> 
   771                              <1>  %if %2 == 0
   771                              <1>  cld
   771                              <1>  %assign off_value 0x0001ff00
   771                              <1>  %ifidni %3,a16
   771                              <1> 
   771                              <1>  %assign off_cmp 0x00010000
   771                              <1>  %else
   771                              <1> 
   771                              <1>  %assign off_cmp 0x00020000
   771                              <1>  %endif
   771                              <1>  %else
   771 0000721E FD                  <1>  std
   771                              <1>  %assign off_value 0x000100ff
   771                              <1>  %ifidni %3,a16
   771                              <1> 
   771                              <1>  %assign off_cmp 0x0001ffff
   771                              <1>  %else
   771                              <1> 
   771                              <1>  %assign off_cmp 0x0000ffff
   771                              <1>  %endif
   771                              <1>  %endif
   771                              <1> 
   771 0000721F B878563412          <1>  mov eax, 0x12345678
   771 00007224 BEFF000100          <1>  mov esi, off_value
   771 00007229 BFFF000100          <1>  mov edi, off_value
   771                              <1> 
   771                              <1> 
   771                              <1> 
   771                              <1> 
   771 0000722E B878563412          <1>  mov eax, 0x12345678
   771 00007233 BEFF000100          <1>  mov esi, off_value
   771 00007238 BFFF000100          <1>  mov edi, off_value
   771 0000723D B980000000          <1>  mov ecx, items
   771 00007242 F366AB              <1>  %3 rep stos%1
   771 00007245 83F900              <1>  cmp ecx, 0
   771 00007248 0F8541630000        <1>  jnz error
   771 0000724E 81FFFFFF0000        <1>  cmp edi, off_cmp
   771 00007254 0F8535630000        <1>  jnz error
   771 0000725A BFFF000100          <1>  mov edi, off_value
   771                              <1> 
   771 0000725F 668CC2              <1>  mov dx, es
   771 00007262 668CD9              <1>  mov cx, ds
   771 00007265 6687D1              <1>  xchg dx, cx
   771 00007268 8EC2                <1>  mov es, dx
   771 0000726A 8ED9                <1>  mov ds, cx
   771 0000726C 87FE                <1>  xchg edi, esi
   771                              <1> 
   771 0000726E B980000000          <1>  mov ecx, items
   771 00007273 F366AB              <1>  %3 rep stos%1
   771 00007276 BFFF000100          <1>  mov edi, off_value
   771                              <1> 
   771                              <1> 
   771 0000727B B980000000          <1>  mov ecx, items
   771 00007280 F366A7              <1>  %3 repe cmps%1
   771 00007283 83F900              <1>  cmp ecx, 0
   771 00007286 0F8503630000        <1>  jnz error
   771 0000728C 81FEFFFF0000        <1>  cmp esi, off_cmp
   771 00007292 0F85F7620000        <1>  jne error
   771 00007298 81FFFFFF0000        <1>  cmp edi, off_cmp
   771 0000729E 0F85EB620000        <1>  jne error
   771 000072A4 BFFF000100          <1>  mov edi, off_value
   771 000072A9 BEFF000100          <1>  mov esi, off_value
   771                              <1> 
   771                              <1> 
   771 000072AE B980000000          <1>  mov ecx, items
   771 000072B3 F366AF              <1>  %3 repe scas%1
   771 000072B6 83F900              <1>  cmp ecx, 0
   771 000072B9 0F85D0620000        <1>  jne error
   771 000072BF 81FFFFFF0000        <1>  cmp edi, off_cmp
   771 000072C5 0F85C4620000        <1>  jne error
   771 000072CB BFFF000100          <1>  mov edi, off_value
   771                              <1> 
   771                              <1> 
   771                              <1> 
   771 000072D0 B800000000          <1>  mov eax, 0
   771 000072D5 B980000000          <1>  mov ecx, items
   771 000072DA F366AB              <1>  %3 rep stos%1
   771 000072DD BFFF000100          <1>  mov edi, off_value
   771 000072E2 B980000000          <1>  mov ecx, items
   771 000072E7 F366A5              <1>  %3 rep movs%1
   771 000072EA 83F900              <1>  cmp ecx, 0
   771 000072ED 0F859C620000        <1>  jne error
   771 000072F3 81FEFFFF0000        <1>  cmp esi, off_cmp
   771 000072F9 0F8590620000        <1>  jne error
   771 000072FF 81FFFFFF0000        <1>  cmp edi, off_cmp
   771 00007305 0F8584620000        <1>  jne error
   771 0000730B B980000000          <1>  mov ecx, items
   771 00007310 BFFF000100          <1>  mov edi, off_value
   771 00007315 BEFF000100          <1>  mov esi, off_value
   771 0000731A F366A7              <1>  %3 repe cmps%1
   771 0000731D 83F900              <1>  cmp ecx, 0
   771 00007320 0F8569620000        <1>  jne error
   771 00007326 81FEFFFF0000        <1>  cmp esi, off_cmp
   771 0000732C 0F855D620000        <1>  jne error
   771 00007332 81FFFFFF0000        <1>  cmp edi, off_cmp
   771 00007338 0F8551620000        <1>  jne error
   772                                  	testStringReps d,1,a32
   772                              <1> 
   772                              <1>  %assign bytes 0x100
   772                              <1> 
   772                              <1>  %ifidni %1,b
   772                              <1>  %assign items bytes
   772                              <1>  %endif
   772                              <1>  %ifidni %1,w
   772                              <1>  %assign items bytes/2
   772                              <1>  %endif
   772                              <1>  %ifidni %1,d
   772                              <1>  %assign items bytes/4
   772                              <1>  %endif
   772                              <1> 
   772                              <1>  %if %2 == 0
   772                              <1>  cld
   772                              <1>  %assign off_value 0x0001ff00
   772                              <1>  %ifidni %3,a16
   772                              <1> 
   772                              <1>  %assign off_cmp 0x00010000
   772                              <1>  %else
   772                              <1> 
   772                              <1>  %assign off_cmp 0x00020000
   772                              <1>  %endif
   772                              <1>  %else
   772 0000733E FD                  <1>  std
   772                              <1>  %assign off_value 0x000100ff
   772                              <1>  %ifidni %3,a16
   772                              <1> 
   772                              <1>  %assign off_cmp 0x0001ffff
   772                              <1>  %else
   772                              <1> 
   772                              <1>  %assign off_cmp 0x0000ffff
   772                              <1>  %endif
   772                              <1>  %endif
   772                              <1> 
   772 0000733F B878563412          <1>  mov eax, 0x12345678
   772 00007344 BEFF000100          <1>  mov esi, off_value
   772 00007349 BFFF000100          <1>  mov edi, off_value
   772                              <1> 
   772                              <1> 
   772                              <1> 
   772                              <1> 
   772 0000734E B878563412          <1>  mov eax, 0x12345678
   772 00007353 BEFF000100          <1>  mov esi, off_value
   772 00007358 BFFF000100          <1>  mov edi, off_value
   772 0000735D B940000000          <1>  mov ecx, items
   772 00007362 F3AB                <1>  %3 rep stos%1
   772 00007364 83F900              <1>  cmp ecx, 0
   772 00007367 0F8522620000        <1>  jnz error
   772 0000736D 81FFFFFF0000        <1>  cmp edi, off_cmp
   772 00007373 0F8516620000        <1>  jnz error
   772 00007379 BFFF000100          <1>  mov edi, off_value
   772                              <1> 
   772 0000737E 668CC2              <1>  mov dx, es
   772 00007381 668CD9              <1>  mov cx, ds
   772 00007384 6687D1              <1>  xchg dx, cx
   772 00007387 8EC2                <1>  mov es, dx
   772 00007389 8ED9                <1>  mov ds, cx
   772 0000738B 87FE                <1>  xchg edi, esi
   772                              <1> 
   772 0000738D B940000000          <1>  mov ecx, items
   772 00007392 F3AB                <1>  %3 rep stos%1
   772 00007394 BFFF000100          <1>  mov edi, off_value
   772                              <1> 
   772                              <1> 
   772 00007399 B940000000          <1>  mov ecx, items
   772 0000739E F3A7                <1>  %3 repe cmps%1
   772 000073A0 83F900              <1>  cmp ecx, 0
   772 000073A3 0F85E6610000        <1>  jnz error
   772 000073A9 81FEFFFF0000        <1>  cmp esi, off_cmp
   772 000073AF 0F85DA610000        <1>  jne error
   772 000073B5 81FFFFFF0000        <1>  cmp edi, off_cmp
   772 000073BB 0F85CE610000        <1>  jne error
   772 000073C1 BFFF000100          <1>  mov edi, off_value
   772 000073C6 BEFF000100          <1>  mov esi, off_value
   772                              <1> 
   772                              <1> 
   772 000073CB B940000000          <1>  mov ecx, items
   772 000073D0 F3AF                <1>  %3 repe scas%1
   772 000073D2 83F900              <1>  cmp ecx, 0
   772 000073D5 0F85B4610000        <1>  jne error
   772 000073DB 81FFFFFF0000        <1>  cmp edi, off_cmp
   772 000073E1 0F85A8610000        <1>  jne error
   772 000073E7 BFFF000100          <1>  mov edi, off_value
   772                              <1> 
   772                              <1> 
   772                              <1> 
   772 000073EC B800000000          <1>  mov eax, 0
   772 000073F1 B940000000          <1>  mov ecx, items
   772 000073F6 F3AB                <1>  %3 rep stos%1
   772 000073F8 BFFF000100          <1>  mov edi, off_value
   772 000073FD B940000000          <1>  mov ecx, items
   772 00007402 F3A5                <1>  %3 rep movs%1
   772 00007404 83F900              <1>  cmp ecx, 0
   772 00007407 0F8582610000        <1>  jne error
   772 0000740D 81FEFFFF0000        <1>  cmp esi, off_cmp
   772 00007413 0F8576610000        <1>  jne error
   772 00007419 81FFFFFF0000        <1>  cmp edi, off_cmp
   772 0000741F 0F856A610000        <1>  jne error
   772 00007425 B940000000          <1>  mov ecx, items
   772 0000742A BFFF000100          <1>  mov edi, off_value
   772 0000742F BEFF000100          <1>  mov esi, off_value
   772 00007434 F3A7                <1>  %3 repe cmps%1
   772 00007436 83F900              <1>  cmp ecx, 0
   772 00007439 0F8550610000        <1>  jne error
   772 0000743F 81FEFFFF0000        <1>  cmp esi, off_cmp
   772 00007445 0F8544610000        <1>  jne error
   772 0000744B 81FFFFFF0000        <1>  cmp edi, off_cmp
   772 00007451 0F8538610000        <1>  jne error
   773 00007457 9D                      	popfd
   774 00007458 61                      	popad
   775                                  
   776                                  	advTestSegProt
   776                              <1>  advTestBase
   776                              <2>  %assign TEST_BASE1 TEST_BASE1+0x1000
   776                              <2>  %assign TEST_BASE2 TEST_BASE2+0x1000
   776                              <1>  updLDTDescBase D1_SEG_PROT,TEST_BASE1
   776 00007459 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   776 00007460 83C318              <2>  add ebx, (%1) & 0xFFF8
   776 00007463 66C743020090        <2>  mov word [ebx+2], (%2)&0xFFFF
   776 00007469 C6430402            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   776 0000746D C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   776                              <1>  updLDTDescBase D2_SEG_PROT,TEST_BASE2
   776 00007471 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   776 00007478 83C320              <2>  add ebx, (%1) & 0xFFF8
   776 0000747B 66C743020090        <2>  mov word [ebx+2], (%2)&0xFFFF
   776 00007481 C6430406            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   776 00007485 C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   776 00007489 66BA1C00            <1>  mov dx, D1_SEG_PROT
   776 0000748D 8EDA                <1>  mov ds, dx
   776 0000748F 66BA2400            <1>  mov dx, D2_SEG_PROT
   776 00007493 8EC2                <1>  mov es, dx
   777                                  
   778                                  ;
   779                                  ;	Verify page faults and PTE bits
   780                                  ;
   781 00007495 E908040000              	jmp post11
   782                                  %include "tests/paging_m.asm"
     1                              <1> TESTPAGE_LIN equ 0x0049F000 ; linear test address (PDE 1, PTE 9F, offset 0)
     2                              <1> TESTPAGE_PDE equ TESTPAGE_LIN>>22 ; page directory entry
     3                              <1> TESTPAGE_PTE equ 0x2000|((TESTPAGE_LIN>>12)&0x3FF) ; page table 1 entry
     4                              <1> 
     5                              <1> TESTPAGE_OFF equ (TESTPAGE_LIN&0xFFFFF)
     6                              <1> 
     7                              <1> 
     8                              <1> ;
     9                              <1> ; Updates the flags of a PTE
    10                              <1> ;
    11                              <1> ; %1 entry index
    12                              <1> ; %2 new flags (bits 11-0)
    13                              <1> ;
    14                              <1> ; Uses FS
    15                              <1> ;
    16                              <1> %macro updPageFlags 2
    17                              <1> 	pushad
    18                              <1> 	pushf
    19                              <1> 	mov  eax, %1
    20                              <1> 	mov  edx, %2
    21                              <1> 	call updPageFlagsP
    22                              <1> 	popf
    23                              <1> 	popad
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> 
    27                              <1> ;
    28                              <1> ; Given a bitmask, set the value of specific PDE/PTE flags
    29                              <1> ;
    30                              <1> ; %1 entry index
    31                              <1> ; %2 flags mask
    32                              <1> ; %3 new flags value
    33                              <1> ;
    34                              <1> ; Uses FS
    35                              <1> ;
    36                              <1> %macro setPageFlags 3
    37                              <1> 	pushad
    38                              <1> 	pushf
    39                              <1> 	mov  eax, %1
    40                              <1> 	mov  ecx, %2
    41                              <1> 	mov  edx, %3
    42                              <1> 	call setPageFlagsP
    43                              <1> 	popf
    44                              <1> 	popad
    45                              <1> %endmacro
    46                              <1> 
   783                                  %include "tests/paging_p.asm"
     1                              <1> ; Page Directory/Table Entry (PDE, PTE)
     2                              <1> ;
     3                              <1> ; 31                                   12 11          6 5 4 3 2 1 0
     4                              <1> ; ╔══════════════════════════════════════╤═══════╤═══╤═╤═╤═╤═╤═╤═╤═╗
     5                              <1> ; ║                                      │       │   │ │ │P│P│U│R│ ║
     6                              <1> ; ║      PAGE FRAME ADDRESS 31..12       │ AVAIL │0 0│D│A│C│W│/│/│P║
     7                              <1> ; ║                                      │       │   │ │ │D│T│S│W│ ║
     8                              <1> ; ╚══════════════════════════════════════╧═══════╧═══╧═╧═╧═╧═╧═╧═╧═╝
     9                              <1> ; P: PRESENT, R/W: READ/WRITE, U/S: USER/SUPERVISOR,
    10                              <1> ; PWT: PAGE WRITE-THROUGH (486+), PCD: PAGE CACHE DISABLE (486+)
    11                              <1> ; A: ACCESSED, D: DIRTY (PTE only),
    12                              <1> ; AVAIL: AVAILABLE FOR SYSTEMS PROGRAMMER USE, 0: reserved
    13                              <1> ;
    14                              <1> ; Page Translation
    15                              <1> ;                                                               PAGE FRAME
    16                              <1> ;               ╔═══════════╦═══════════╦══════════╗         ╔═══════════════╗
    17                              <1> ;               ║    DIR    ║   PAGE    ║  OFFSET  ║         ║               ║
    18                              <1> ;               ╚═════╤═════╩═════╤═════╩═════╤════╝         ║               ║
    19                              <1> ;                     │           │           │              ║               ║
    20                              <1> ;       ┌──────/──────┘           /10         └──────/──────▶║    PHYSICAL   ║
    21                              <1> ;       │     10                  │                 12       ║    ADDRESS    ║
    22                              <1> ;       *4                        *4                         ║               ║
    23                              <1> ;       │   PAGE DIRECTORY        │      PAGE TABLE          ║               ║
    24                              <1> ;       │  ╔═══════════════╗      │   ╔═══════════════╗      ║               ║
    25                              <1> ;       │  ║               ║      │   ║               ║      ╚═══════════════╝
    26                              <1> ;       │  ║               ║      │   ╠═══════════════╣              ▲
    27                              <1> ;       │  ║               ║      └──▶║      PTE      ╟──────────────┘
    28                              <1> ;       │  ╠═══════════════╣          ╠═══════════════╣   [31:12]
    29                              <1> ;       └─▶║      PDE      ╟──┐       ║               ║
    30                              <1> ;          ╠═══════════════╣  │       ║               ║
    31                              <1> ;          ║               ║  │       ║               ║
    32                              <1> ;          ╚═══════════════╝  │       ╚═══════════════╝
    33                              <1> ;                  ▲          │               ▲
    34                              <1> ; ╔═══════╗ PDBR   │          └───────────────┘
    35                              <1> ; ║  CR3  ╟────────┘               [31:12]
    36                              <1> ; ╚═══════╝ [31:12]
    37                              <1> ;
    38                              <1> 
    39                              <1> ;
    40                              <1> ; Input: EAX = entry index with bits 12-13 as the table index (table 0,1,2)
    41                              <1> ; Returns: FS:EBX pointer to table entry
    42                              <1> ;
    43                              <1> loadTableEntryAddress:
    44 0000749A 52                  <1> 	push edx
    45 0000749B 89C2                <1> 	mov  edx, eax
    46 0000749D 2E0FB41D[B51B0000]  <1> 	lfs  ebx, [cs:ptrPDprot]
    47 000074A5 81E200300000        <1> 	and  edx, 0x3000
    48 000074AB 01D3                <1> 	add  ebx, edx
    49 000074AD 25FF030000          <1> 	and  eax, 0x3FF
    50 000074B2 C1E002              <1> 	shl  eax, 2
    51 000074B5 01C3                <1> 	add  ebx, eax
    52 000074B7 5A                  <1> 	pop  edx
    53 000074B8 C3                  <1> 	ret
    54                              <1> 
    55                              <1> ;
    56                              <1> ; Updates the flags of a PDE/PTE
    57                              <1> ;
    58                              <1> ; EAX = entry index
    59                              <1> ; EDX = new flags (bits 11-0)
    60                              <1> ;
    61                              <1> ; caller-saved
    62                              <1> ; uses FS
    63                              <1> ;
    64                              <1> updPageFlagsP:
    65 000074B9 E8DCFFFFFF          <1> 	call loadTableEntryAddress
    66 000074BE 64812300F0FFFF      <1> 	and  [fs:ebx], dword PTE_FRAME
    67 000074C5 640913              <1> 	or   [fs:ebx], edx
    68 000074C8 B800100000          <1> 	mov  eax, PAGE_DIR_ADDR
    69 000074CD 0F22D8              <1> 	mov  cr3, eax ; flush the page translation cache
    70 000074D0 C3                  <1> 	ret
    71                              <1> 
    72                              <1> ;
    73                              <1> ; Given a bitmask, set the value of specific PTE flags
    74                              <1> ;
    75                              <1> ; EAX = entry index
    76                              <1> ; ECX = flags mask
    77                              <1> ; EDX = new flags value
    78                              <1> ;
    79                              <1> ; caller-saved
    80                              <1> ; uses FS
    81                              <1> ;
    82                              <1> setPageFlagsP:
    83 000074D1 E8C4FFFFFF          <1> 	call loadTableEntryAddress
    84 000074D6 F7D1                <1> 	not  ecx
    85 000074D8 64210B              <1> 	and  [fs:ebx], ecx
    86 000074DB 640913              <1> 	or   [fs:ebx], edx
    87 000074DE B800100000          <1> 	mov  eax, PAGE_DIR_ADDR
    88 000074E3 0F22D8              <1> 	mov  cr3, eax ; flush the page translation cache
    89 000074E6 C3                  <1> 	ret
    90                              <1> 
    91                              <1> ;
    92                              <1> ; Returns a PTE in EAX
    93                              <1> ; EAX = linear address
    94                              <1> ; Uses FS
    95                              <1> ;
    96                              <1> getPTE:
    97 000074E7 53                  <1> 	push ebx
    98 000074E8 50                  <1> 	push eax
    99 000074E9 E81C000000          <1> 	call getPDE
   100 000074EE 2500F0FFFF          <1> 	and  eax, 0xFFFFF000
   101 000074F3 89C3                <1> 	mov  ebx, eax
   102 000074F5 66B88000            <1> 	mov  ax, FLAT_SEG_PROT
   103 000074F9 8EE0                <1> 	mov  fs, ax
   104 000074FB 58                  <1> 	pop  eax
   105 000074FC C1E80C              <1> 	shr  eax, 12
   106 000074FF 25FF030000          <1> 	and  eax, 0x3FF
   107 00007504 648B0483            <1> 	mov  eax, [fs:ebx + eax*4]
   108 00007508 5B                  <1> 	pop  ebx
   109 00007509 C3                  <1> 	ret
   110                              <1> 
   111                              <1> ;
   112                              <1> ; Returns a PDE in EAX
   113                              <1> ; EAX = linear address
   114                              <1> ; Uses FS
   115                              <1> ;
   116                              <1> getPDE:
   117 0000750A 53                  <1> 	push ebx
   118 0000750B 2E0FB41D[B51B0000]  <1> 	lfs  ebx, [cs:ptrPDprot]
   119 00007513 C1E816              <1> 	shr  eax, 22
   120 00007516 25FF030000          <1> 	and  eax, 0x3FF
   121 0000751B 648B0483            <1> 	mov  eax, [fs:ebx + eax*4]
   122 0000751F 5B                  <1> 	pop  ebx
   123 00007520 C3                  <1> 	ret
   124                              <1> 
   125                              <1> 
   126                              <1> ;
   127                              <1> ; Combined Page Directory and Page Table Protection:
   128                              <1> ;
   129                              <1> ; +-----------------+-----------------+----------------+
   130                              <1> ; |  Page Directory |    Page Table   |    Combined    |
   131                              <1> ; | Privilege  Type | Privilege  Type | Privilege  Type|
   132                              <1> ; |-----------------+-----------------+----------------|
   133                              <1> ; | User       R    | User       R    | User       R   |
   134                              <1> ; | User       R    | User       RW   | User       R   |
   135                              <1> ; | User       RW   | User       R    | User       R   |
   136                              <1> ; | User       RW   | User       RW   | User       RW  |
   137                              <1> ; | User       R    | Supervisor R    | Supervisor RW  |*
   138                              <1> ; | User       R    | Supervisor RW   | Supervisor RW  |*
   139                              <1> ; | User       RW   | Supervisor R    | Supervisor RW  |*
   140                              <1> ; | User       RW   | Supervisor RW   | Supervisor RW  |*
   141                              <1> ; | Supervisor R    | User       R    | Supervisor RW  |*
   142                              <1> ; | Supervisor R    | User       RW   | Supervisor RW  |*
   143                              <1> ; | Supervisor RW   | User       R    | Supervisor RW  |*
   144                              <1> ; | Supervisor RW   | User       RW   | Supervisor RW  |*
   145                              <1> ; | Supervisor R    | Supervisor R    | Supervisor RW  |
   146                              <1> ; | Supervisor R    | Supervisor RW   | Supervisor RW  |
   147                              <1> ; | Supervisor RW   | Supervisor R    | Supervisor RW  |
   148                              <1> ; | Supervisor RW   | Supervisor RW   | Supervisor RW  |
   149                              <1> ; +-----------------+-----------------+----------------+
   150                              <1> ;
   151                              <1> ; * Programmer's reference manuals for 386DX and i486 have different results for
   152                              <1> ;   these cases.
   153                              <1> ;   In particular, the following manuals are wrong:
   154                              <1> ;   - 386DX Microprocessor Programmer's Reference Manual 1990
   155                              <1> ;   - i486 Processor Programmer's Reference Manual 1990
   156                              <1> ;
   157                              <1> ;
   158                              <1> ; #PF error code pushed on the stack (386, 486, Pentium):
   159                              <1> ;
   160                              <1> ; 31                3     2     1     0
   161                              <1> ; +-----+-...-+-----+-----+-----+-----+
   162                              <1> ; |     Reserved    | U/S | W/R |  P  |
   163                              <1> ; +-----+-...-+-----+-----+-----+-----+
   164                              <1> ;
   165                              <1> ; P: When set, the fault was caused by a protection violation.
   166                              <1> ;    When not set, it was caused by a non-present page.
   167                              <1> ; W/R: When set, write access caused the fault; otherwise read access.
   168                              <1> ; U/S: When set, the fault occurred in user mode; otherwise in supervisor mode.
   169                              <1> ;
   170                              <1> ; The CR2 register contains the 32-bit linear address that caused the fault.
   171                              <1> ;
   172                              <1> 
   173                              <1> PF_PROT   equ 001b ; page protection error
   174                              <1> PF_WRITE  equ 010b ; write access error
   175                              <1> PF_USER   equ 100b ; fault occurred in user mode
   176                              <1> 
   177                              <1> ; convenience equs
   178                              <1> PF_READ       equ 0
   179                              <1> PF_NOTP       equ 0
   180                              <1> PF_NOFAULT    equ 0x80
   181                              <1> PTE_SUPER_R   equ PTE_PRESENT
   182                              <1> PTE_SUPER_W   equ PTE_PRESENT|PTE_WRITE
   183                              <1> PTE_USER_R    equ PTE_PRESENT|PTE_USER
   184                              <1> PTE_USER_W    equ PTE_PRESENT|PTE_USER|PTE_WRITE
   185                              <1> 
   186                              <1> 
   187                              <1> pagingTests:
   188                              <1> ; not present faults
   189 00007521 030200              <1> db	PTE_PRESENT|         PTE_WRITE,                       PTE_WRITE,  PF_NOTP|PF_READ
   190 00007524 030202              <1> db	PTE_PRESENT|         PTE_WRITE,                       PTE_WRITE,  PF_NOTP|PF_WRITE
   191 00007527 030204              <1> db	PTE_PRESENT|         PTE_WRITE,                       PTE_WRITE,  PF_NOTP|PF_READ |PF_USER
   192 0000752A 030206              <1> db	PTE_PRESENT|         PTE_WRITE,                       PTE_WRITE,  PF_NOTP|PF_WRITE|PF_USER
   193                              <1> 
   194 0000752D 070604              <1> db	PTE_PRESENT|PTE_USER|PTE_WRITE,              PTE_USER|PTE_WRITE,  PF_NOTP|PF_READ |PF_USER
   195 00007530 050406              <1> db	PTE_PRESENT|PTE_USER,                        PTE_USER,            PF_NOTP|PF_WRITE|PF_USER
   196 00007533 020300              <1> db	                     PTE_WRITE,  PTE_PRESENT|         PTE_WRITE,  PF_NOTP|PF_READ
   197 00007536 020302              <1> db	                     PTE_WRITE,  PTE_PRESENT|         PTE_WRITE,  PF_NOTP|PF_WRITE
   198 00007539 020704              <1> db	                     PTE_WRITE,  PTE_PRESENT|PTE_USER|PTE_WRITE,  PF_NOTP|PF_READ |PF_USER
   199 0000753C 020706              <1> db	                     PTE_WRITE,  PTE_PRESENT|PTE_USER|PTE_WRITE,  PF_NOTP|PF_WRITE|PF_USER
   200                              <1> 
   201                              <1> ; protection faults
   202                              <1> ; user-user combinations
   203 0000753F 050584              <1> db	PTE_USER_R,   PTE_USER_R,   PF_NOFAULT|PF_READ |PF_USER
   204 00007542 050507              <1> db	PTE_USER_R,   PTE_USER_R,   PF_PROT   |PF_WRITE|PF_USER
   205 00007545 050784              <1> db	PTE_USER_R,   PTE_USER_W,   PF_NOFAULT|PF_READ |PF_USER
   206 00007548 050707              <1> db	PTE_USER_R,   PTE_USER_W,   PF_PROT   |PF_WRITE|PF_USER
   207 0000754B 070584              <1> db	PTE_USER_W,   PTE_USER_R,   PF_NOFAULT|PF_READ |PF_USER
   208 0000754E 070507              <1> db	PTE_USER_W,   PTE_USER_R,   PF_PROT   |PF_WRITE|PF_USER
   209 00007551 070784              <1> db	PTE_USER_W,   PTE_USER_W,   PF_NOFAULT|PF_READ |PF_USER
   210 00007554 070786              <1> db	PTE_USER_W,   PTE_USER_W,   PF_NOFAULT|PF_WRITE|PF_USER
   211 00007557 050580              <1> db	PTE_USER_R,   PTE_USER_R,   PF_NOFAULT|PF_READ
   212 0000755A 050582              <1> db	PTE_USER_R,   PTE_USER_R,   PF_NOFAULT|PF_WRITE
   213 0000755D 050780              <1> db	PTE_USER_R,   PTE_USER_W,   PF_NOFAULT|PF_READ
   214 00007560 050782              <1> db	PTE_USER_R,   PTE_USER_W,   PF_NOFAULT|PF_WRITE
   215 00007563 070580              <1> db	PTE_USER_W,   PTE_USER_R,   PF_NOFAULT|PF_READ
   216 00007566 070582              <1> db	PTE_USER_W,   PTE_USER_R,   PF_NOFAULT|PF_WRITE
   217 00007569 070780              <1> db	PTE_USER_W,   PTE_USER_W,   PF_NOFAULT|PF_READ
   218 0000756C 070782              <1> db	PTE_USER_W,   PTE_USER_W,   PF_NOFAULT|PF_WRITE
   219                              <1> 
   220                              <1> ; super-super combinations
   221 0000756F 010105              <1> db	PTE_SUPER_R,  PTE_SUPER_R,  PF_PROT|PF_READ |PF_USER
   222 00007572 010107              <1> db	PTE_SUPER_R,  PTE_SUPER_R,  PF_PROT|PF_WRITE|PF_USER
   223 00007575 010305              <1> db	PTE_SUPER_R,  PTE_SUPER_W,  PF_PROT|PF_READ |PF_USER
   224 00007578 010307              <1> db	PTE_SUPER_R,  PTE_SUPER_W,  PF_PROT|PF_WRITE|PF_USER
   225 0000757B 030105              <1> db	PTE_SUPER_W,  PTE_SUPER_R,  PF_PROT|PF_READ |PF_USER
   226 0000757E 030107              <1> db	PTE_SUPER_W,  PTE_SUPER_R,  PF_PROT|PF_WRITE|PF_USER
   227 00007581 030305              <1> db	PTE_SUPER_W,  PTE_SUPER_W,  PF_PROT|PF_READ |PF_USER
   228 00007584 030307              <1> db	PTE_SUPER_W,  PTE_SUPER_W,  PF_PROT|PF_WRITE|PF_USER
   229 00007587 010180              <1> db	PTE_SUPER_R,  PTE_SUPER_R,  PF_NOFAULT|PF_READ
   230 0000758A 010182              <1> db	PTE_SUPER_R,  PTE_SUPER_R,  PF_NOFAULT|PF_WRITE
   231 0000758D 010380              <1> db	PTE_SUPER_R,  PTE_SUPER_W,  PF_NOFAULT|PF_READ
   232 00007590 010382              <1> db	PTE_SUPER_R,  PTE_SUPER_W,  PF_NOFAULT|PF_WRITE
   233 00007593 030180              <1> db	PTE_SUPER_W,  PTE_SUPER_R,  PF_NOFAULT|PF_READ
   234 00007596 030182              <1> db	PTE_SUPER_W,  PTE_SUPER_R,  PF_NOFAULT|PF_WRITE
   235 00007599 030380              <1> db	PTE_SUPER_W,  PTE_SUPER_W,  PF_NOFAULT|PF_READ
   236 0000759C 030382              <1> db	PTE_SUPER_W,  PTE_SUPER_W,  PF_NOFAULT|PF_WRITE
   237                              <1> 
   238                              <1> ; user-super combinations with supervisor access, always no fault
   239 0000759F 050180              <1> db	PTE_USER_R,   PTE_SUPER_R,  PF_NOFAULT|PF_READ
   240 000075A2 050182              <1> db	PTE_USER_R,   PTE_SUPER_R,  PF_NOFAULT|PF_WRITE
   241 000075A5 050380              <1> db	PTE_USER_R,   PTE_SUPER_W,  PF_NOFAULT|PF_READ
   242 000075A8 050382              <1> db	PTE_USER_R,   PTE_SUPER_W,  PF_NOFAULT|PF_WRITE
   243 000075AB 070180              <1> db	PTE_USER_W,   PTE_SUPER_R,  PF_NOFAULT|PF_READ
   244 000075AE 070182              <1> db	PTE_USER_W,   PTE_SUPER_R,  PF_NOFAULT|PF_WRITE
   245 000075B1 070380              <1> db	PTE_USER_W,   PTE_SUPER_W,  PF_NOFAULT|PF_READ
   246 000075B4 070382              <1> db	PTE_USER_W,   PTE_SUPER_W,  PF_NOFAULT|PF_WRITE
   247 000075B7 010580              <1> db	PTE_SUPER_R,  PTE_USER_R,   PF_NOFAULT|PF_READ
   248 000075BA 010582              <1> db	PTE_SUPER_R,  PTE_USER_R,   PF_NOFAULT|PF_WRITE
   249 000075BD 010780              <1> db	PTE_SUPER_R,  PTE_USER_W,   PF_NOFAULT|PF_READ
   250 000075C0 010782              <1> db	PTE_SUPER_R,  PTE_USER_W,   PF_NOFAULT|PF_WRITE
   251 000075C3 030580              <1> db	PTE_SUPER_W,  PTE_USER_R,   PF_NOFAULT|PF_READ
   252 000075C6 030582              <1> db	PTE_SUPER_W,  PTE_USER_R,   PF_NOFAULT|PF_WRITE
   253 000075C9 030780              <1> db	PTE_SUPER_W,  PTE_USER_W,   PF_NOFAULT|PF_READ
   254 000075CC 030782              <1> db	PTE_SUPER_W,  PTE_USER_W,   PF_NOFAULT|PF_WRITE
   255                              <1> 
   256                              <1> ; user-super combinations with user access
   257 000075CF 050105              <1> db	PTE_USER_R,   PTE_SUPER_R,  PF_PROT|PF_READ |PF_USER
   258 000075D2 050107              <1> db	PTE_USER_R,   PTE_SUPER_R,  PF_PROT|PF_WRITE|PF_USER
   259 000075D5 050305              <1> db	PTE_USER_R,   PTE_SUPER_W,  PF_PROT|PF_READ |PF_USER
   260 000075D8 050307              <1> db	PTE_USER_R,   PTE_SUPER_W,  PF_PROT|PF_WRITE|PF_USER
   261 000075DB 070105              <1> db	PTE_USER_W,   PTE_SUPER_R,  PF_PROT|PF_READ |PF_USER
   262 000075DE 070107              <1> db	PTE_USER_W,   PTE_SUPER_R,  PF_PROT|PF_WRITE|PF_USER
   263 000075E1 070305              <1> db	PTE_USER_W,   PTE_SUPER_W,  PF_PROT|PF_READ |PF_USER
   264 000075E4 070307              <1> db	PTE_USER_W,   PTE_SUPER_W,  PF_PROT|PF_WRITE|PF_USER
   265 000075E7 010505              <1> db	PTE_SUPER_R,  PTE_USER_R,   PF_PROT|PF_READ |PF_USER
   266 000075EA 010507              <1> db	PTE_SUPER_R,  PTE_USER_R,   PF_PROT|PF_WRITE|PF_USER
   267 000075ED 010705              <1> db	PTE_SUPER_R,  PTE_USER_W,   PF_PROT|PF_READ |PF_USER
   268 000075F0 010707              <1> db	PTE_SUPER_R,  PTE_USER_W,   PF_PROT|PF_WRITE|PF_USER
   269 000075F3 030505              <1> db	PTE_SUPER_W,  PTE_USER_R,   PF_PROT|PF_READ |PF_USER
   270 000075F6 030507              <1> db	PTE_SUPER_W,  PTE_USER_R,   PF_PROT|PF_WRITE|PF_USER
   271 000075F9 030705              <1> db	PTE_SUPER_W,  PTE_USER_W,   PF_PROT|PF_READ |PF_USER
   272 000075FC 030707              <1> db	PTE_SUPER_W,  PTE_USER_W,   PF_PROT|PF_WRITE|PF_USER
   273                              <1> pagingTestsEnd:
   274                              <1> 
   275                              <1> pageEntryStr:           ; UWP
   276 000075FF 202053555045522052- <1> 	db  "  SUPER R, ",0 ; 000
   276 00007608 2C2000              <1>
   277 0000760B 502053555045522052- <1> 	db  "P SUPER R, ",0 ; 001
   277 00007614 2C2000              <1>
   278 00007617 202053555045522057- <1> 	db  "  SUPER W, ",0 ; 010
   278 00007620 2C2000              <1>
   279 00007623 502053555045522057- <1> 	db  "P SUPER W, ",0 ; 011
   279 0000762C 2C2000              <1>
   280 0000762F 202055534552202052- <1> 	db  "  USER  R, ",0 ; 100
   280 00007638 2C2000              <1>
   281 0000763B 502055534552202052- <1> 	db  "P USER  R, ",0 ; 101
   281 00007644 2C2000              <1>
   282 00007647 202055534552202057- <1> 	db  "  USER  W, ",0 ; 110
   282 00007650 2C2000              <1>
   283 00007653 502055534552202057- <1> 	db  "P USER  W, ",0 ; 111
   283 0000765C 2C2000              <1>
   284                              <1> noFaultStr:
   285 0000765F 6E6F206661756C7420- <1> 	db  "no fault ",0
   285 00007668 00                  <1>
   286                              <1> strPF:
   287 00007669 2350462000          <1> 	db  "#PF ",0
   288                              <1> 
   289                              <1> ;
   290                              <1> ; Tests if the CPU throws a page fault under the specified conditions.
   291                              <1> ;
   292                              <1> ; EAX = PDE flags to use
   293                              <1> ; EBX = PTE flags to use
   294                              <1> ; EDX = expected error code value
   295                              <1> ;
   296                              <1> ;
   297                              <1> testPageFault:
   298                              <1> 	%if DEBUG
   299                              <1> 	pushad
   300                              <1> 	mov  cl, 12
   301                              <1> 	mul  cl
   302                              <1> 	mov  esi, pageEntryStr
   303                              <1> 	add  esi, eax
   304                              <1> 	call printStr
   305                              <1> 	mov  eax, ebx
   306                              <1> 	mul  cl
   307                              <1> 	mov  esi, pageEntryStr
   308                              <1> 	add  esi, eax
   309                              <1> 	call printStr
   310                              <1> 	test edx, PF_NOFAULT
   311                              <1> 	jnz  .printNoFault
   312                              <1> 	jmp  .printErrCode
   313                              <1> .printNoFault:
   314                              <1> 	mov  esi, noFaultStr
   315                              <1> 	call printStr
   316                              <1> .printErrCode:
   317                              <1> 	and  edx, 7
   318                              <1> 	mov  eax, edx
   319                              <1> 	mul  cl
   320                              <1> 	mov  esi, pageEntryStr
   321                              <1> 	add  esi, eax
   322                              <1> 	call printStr
   323                              <1> 	popad
   324                              <1> 	%endif
   325                              <1> 
   326                              <1> 	; update PDE
   327 0000766E 60                  <1> 	pushad
   328 0000766F 89C2                <1> 	mov  edx, eax ; new flags
   329 00007671 B801000000          <1> 	mov  eax, TESTPAGE_PDE
   330 00007676 E83EFEFFFF          <1> 	call updPageFlagsP
   331 0000767B 61                  <1> 	popad
   332                              <1> 	; update PTE
   333 0000767C 60                  <1> 	pushad
   334 0000767D 89DA                <1> 	mov  edx, ebx ; new flags
   335 0000767F B89F200000          <1> 	mov  eax, TESTPAGE_PTE
   336 00007684 E830FEFFFF          <1> 	call updPageFlagsP
   337 00007689 61                  <1> 	popad
   338                              <1> 
   339                              <1> 	; reset CR2 to test its value in the page faults handler
   340 0000768A 31C0                <1> 	xor   eax, eax
   341 0000768C 0F22D0              <1> 	mov   cr2, eax
   342                              <1> 
   343                              <1> 	; if the fault should happen in user mode switch to ring3
   344 0000768F F7C204000000        <1> 	test  edx, PF_USER
   345 00007695 7414                <1> 	jz   .start_test
   346                              <1> 	; before switching to user mode I need to save ESI,ECX,EDX for ring0 and EDX for ring3
   347 00007697 56                  <1> 	push  esi  ; save esi for ring0
   348 00007698 51                  <1> 	push  ecx  ; save ecx for ring0
   349 00007699 52                  <1> 	push  edx  ; save edx for ring0
   350 0000769A 94                  <1> 	xchg  eax, esp
   351 0000769B BCFF7F0000          <1> 	mov   esp, ESP_R3_PROT
   352 000076A0 52                  <1> 	push  edx  ; save edx for ring3
   353 000076A1 94                  <1> 	xchg  eax, esp
   354 000076A2 E89EAAFFFF          <1> 	call  switchToRing3
   355 000076A7 83EC04              <1> 	sub   esp, 4
   356 000076AA 5A                  <1> 	pop   edx  ; restore edx for ring3
   357                              <1> 
   358                              <1> .start_test:
   359 000076AB 66B84400            <1> 	mov   ax, DTEST_SEG_PROT
   360 000076AF 8ED8                <1> 	mov   ds, ax
   361                              <1> 	; switch to the appropriate test
   362 000076B1 F7C280000000        <1> 	test  edx, PF_NOFAULT
   363 000076B7 7541                <1> 	jnz  .no_fault
   364 000076B9 F7C202000000        <1> 	test  edx, PF_WRITE
   365 000076BF 7512                <1> 	jnz  .write_fault
   366                              <1> .read_fault:
   367 000076C1 A100F04900          <1> 	mov   eax, [TESTPAGE_LIN]
   368 000076C6 3D46504650          <1> 	cmp   eax, PF_HANDLER_SIG  ; the page fault handler should have put its signature in memory
   369 000076CB 0F85BE5E0000        <1> 	jne   error
   370 000076D1 EB42                <1> 	jmp  .continue
   371                              <1> .write_fault:
   372 000076D3 C70500F04900EFBEAD- <1> 	mov   [TESTPAGE_LIN], dword 0xdeadbeef
   372 000076DC DE                  <1>
   373 000076DD 3D46504650          <1> 	cmp   eax, PF_HANDLER_SIG  ; the page fault handler should have put its signature in EAX
   374 000076E2 0F85A75E0000        <1> 	jne   error
   375 000076E8 813D00F00900EFBEAD- <1> 	cmp   [TESTPAGE_OFF], dword 0xdeadbeef
   375 000076F1 DE                  <1>
   376 000076F2 0F85975E0000        <1> 	jne   error
   377 000076F8 EB1B                <1> 	jmp  .continue
   378                              <1> .no_fault:
   379 000076FA F7C202000000        <1> 	test  edx, PF_WRITE
   380 00007700 7507                <1> 	jnz  .write_nofault
   381                              <1> .read_nofault:
   382 00007702 A100F04900          <1> 	mov   eax, [TESTPAGE_LIN]
   383 00007707 EB0C                <1> 	jmp  .continue
   384                              <1> .write_nofault:
   385 00007709 C70500F04900EFBEAD- <1> 	mov   [TESTPAGE_LIN], dword 0xdeadbeef
   385 00007712 DE                  <1>
   386 00007713 EB00                <1> 	jmp  .continue
   387                              <1> 
   388                              <1> .continue:
   389                              <1> 
   390                              <1> 	; if the fault happened in user mode switch back to ring0
   391 00007715 F7C204000000        <1> 	test  edx, PF_USER
   392 0000771B 7408                <1> 	jz   .verify_bits
   393 0000771D E876AAFFFF          <1> 	call  switchToRing0
   394 00007722 5A                  <1> 	pop   edx ; restore edx
   395 00007723 59                  <1> 	pop   ecx ; restore ecx
   396 00007724 5E                  <1> 	pop   esi ; restore esi
   397                              <1> 
   398                              <1> .verify_bits:
   399                              <1> 	; verify Accessed and Dirty bits
   400 00007725 B800F04900          <1> 	mov   eax, TESTPAGE_LIN
   401 0000772A E8B8FDFFFF          <1> 	call  getPTE
   402 0000772F 93                  <1> 	xchg  eax, ebx
   403 00007730 B800F04900          <1> 	mov   eax, TESTPAGE_LIN
   404 00007735 E8D0FDFFFF          <1> 	call  getPDE
   405                              <1> 	; EAX = PDE, EBX = PTE
   406                              <1> 	; both PDE's and PTE's Accessed bits should be set
   407 0000773A A920000000          <1> 	test  eax, PTE_ACCESSED
   408 0000773F 0F844A5E0000        <1> 	jz    error
   409 00007745 F7C320000000        <1> 	test  ebx, PTE_ACCESSED
   410 0000774B 0F843E5E0000        <1> 	jz    error
   411                              <1> 	; if write operation then PTE's Dirty bit should be set otherwise 0
   412 00007751 F7C202000000        <1> 	test  edx, PF_WRITE
   413 00007757 740E                <1> 	jz   .read
   414 00007759 F7C340000000        <1> 	test  ebx, PTE_DIRTY
   415 0000775F 0F842A5E0000        <1> 	jz    error
   416 00007765 EB0C                <1> 	jmp  .exit
   417                              <1> .read:
   418 00007767 F7C340000000        <1> 	test  ebx, PTE_DIRTY
   419 0000776D 0F851C5E0000        <1> 	jnz   error
   420                              <1> 
   421                              <1> .exit:
   422                              <1>  	; reset memory location used for testing
   423 00007773 C70500F00900000000- <1> 	mov [TESTPAGE_OFF], dword 0
   423 0000777C 00                  <1>
   424                              <1> 
   425                              <1> 	%if DEBUG
   426                              <1> 	call printEOL
   427                              <1> 	%endif
   428 0000777D C3                  <1> 	ret
   429                              <1> 
   430                              <1> ;
   431                              <1> ; Page Fault handler
   432                              <1> ;
   433                              <1> PF_HANDLER_SIG equ 0x50465046
   434                              <1> PageFaultHandler:
   435                              <1> 	%if DEBUG
   436                              <1> 	push esi
   437                              <1> 	mov  esi, strPF
   438                              <1> 	call printStr
   439                              <1> 	pop  esi
   440                              <1> 	%endif
   441                              <1> 
   442                              <1> 	; if expected error code has PF_NOFAULT bit, then this fault is an error
   443 0000777E F7C280000000        <1> 	test  edx, PF_NOFAULT
   444 00007784 0F85055E0000        <1> 	jnz   error
   445                              <1> 	; compare the expected error code in EDX with the one pushed on the stack
   446 0000778A 5B                  <1> 	pop   ebx
   447 0000778B 39DA                <1> 	cmp   edx, ebx
   448 0000778D 0F85FC5D0000        <1> 	jne   error
   449                              <1> 	; this handler is expected to run in ring 0
   450                              <1> 	testCPL 0
   450 00007793 668CC8              <2>  mov ax, cs
   450 00007796 6683E003            <2>  and ax, 3
   450 0000779A 6683F800            <2>  cmp ax, %1
   450 0000779E 0F85EB5D0000        <2>  jne error
   451                              <1> 	; check CR2 register, it must contain the linear address TESTPAGE_LIN
   452 000077A4 0F20D0              <1> 	mov   eax, cr2
   453 000077A7 3D00F04900          <1> 	cmp   eax, TESTPAGE_LIN
   454 000077AC 0F85DD5D0000        <1> 	jne   error
   455                              <1> 	; check the PDE flags
   456 000077B2 E853FDFFFF          <1> 	call  getPDE
   457 000077B7 A920000000          <1> 	test  eax, PTE_ACCESSED ; PDE's A bit should be 0
   458 000077BC 0F85CD5D0000        <1> 	jnz   error
   459                              <1> 	; check the PTE flags
   460 000077C2 B800F04900          <1> 	mov   eax, TESTPAGE_LIN
   461 000077C7 E81BFDFFFF          <1> 	call  getPTE
   462 000077CC A960000000          <1> 	test  eax, PTE_ACCESSED|PTE_DIRTY ; PTE's A and D bits should be 0
   463 000077D1 0F85B85D0000        <1> 	jnz   error
   464                              <1> 	; update PDE and PTE, put handler's result in memory or register
   465 000077D7 F7C201000000        <1> 	test  edx, PF_PROT
   466 000077DD 740D                <1> 	jz   .not_present
   467 000077DF F7C204000000        <1> 	test  edx, PF_USER
   468 000077E5 753F                <1> 	jnz  .user
   469 000077E7 E9A35D0000          <1> 	jmp   error ; protection errors in supervisor mode can't happen
   470                              <1> .not_present:
   471                              <1> 	; mark both PDE and PTE as present
   472                              <1> 	setPageFlags  TESTPAGE_PDE, PTE_PRESENT_BIT, PTE_PRESENT
   472 000077EC 60                  <2>  pushad
   472 000077ED 9C                  <2>  pushf
   472 000077EE B801000000          <2>  mov eax, %1
   472 000077F3 B901000000          <2>  mov ecx, %2
   472 000077F8 BA01000000          <2>  mov edx, %3
   472 000077FD E8CFFCFFFF          <2>  call setPageFlagsP
   472 00007802 9D                  <2>  popf
   472 00007803 61                  <2>  popad
   473                              <1> 	setPageFlags  TESTPAGE_PTE, PTE_PRESENT_BIT, PTE_PRESENT
   473 00007804 60                  <2>  pushad
   473 00007805 9C                  <2>  pushf
   473 00007806 B89F200000          <2>  mov eax, %1
   473 0000780B B901000000          <2>  mov ecx, %2
   473 00007810 BA01000000          <2>  mov edx, %3
   473 00007815 E8B7FCFFFF          <2>  call setPageFlagsP
   473 0000781A 9D                  <2>  popf
   473 0000781B 61                  <2>  popad
   474 0000781C F7C204000000        <1> 	test  edx, PF_USER
   475 00007822 7502                <1> 	jnz  .user
   476 00007824 EB30                <1> 	jmp  .check_rw
   477                              <1> .user:
   478                              <1> 	; mark both PDE and PTE for user access
   479                              <1> 	setPageFlags  TESTPAGE_PDE, PTE_USER_BIT, PTE_USER
   479 00007826 60                  <2>  pushad
   479 00007827 9C                  <2>  pushf
   479 00007828 B801000000          <2>  mov eax, %1
   479 0000782D B904000000          <2>  mov ecx, %2
   479 00007832 BA04000000          <2>  mov edx, %3
   479 00007837 E895FCFFFF          <2>  call setPageFlagsP
   479 0000783C 9D                  <2>  popf
   479 0000783D 61                  <2>  popad
   480                              <1> 	setPageFlags  TESTPAGE_PTE, PTE_USER_BIT, PTE_USER
   480 0000783E 60                  <2>  pushad
   480 0000783F 9C                  <2>  pushf
   480 00007840 B89F200000          <2>  mov eax, %1
   480 00007845 B904000000          <2>  mov ecx, %2
   480 0000784A BA04000000          <2>  mov edx, %3
   480 0000784F E87DFCFFFF          <2>  call setPageFlagsP
   480 00007854 9D                  <2>  popf
   480 00007855 61                  <2>  popad
   481                              <1> .check_rw:
   482 00007856 F7C202000000        <1> 	test  edx, PF_WRITE
   483 0000785C 750E                <1> 	jnz  .write
   484                              <1> .read:
   485                              <1> 	; put the handler's signature in memory (use page table 0)
   486 0000785E C70500F00900465046- <1> 	mov   [TESTPAGE_OFF], dword PF_HANDLER_SIG
   486 00007867 50                  <1>
   487 00007868 31C0                <1> 	xor   eax, eax
   488 0000786A EB35                <1> 	jmp  .exit
   489                              <1> .write:
   490                              <1> 	; put the handler's signature in EAX
   491                              <1> 	setPageFlags  TESTPAGE_PDE, PTE_WRITE_BIT, PTE_WRITE ; mark the PTE for write
   491 0000786C 60                  <2>  pushad
   491 0000786D 9C                  <2>  pushf
   491 0000786E B801000000          <2>  mov eax, %1
   491 00007873 B902000000          <2>  mov ecx, %2
   491 00007878 BA02000000          <2>  mov edx, %3
   491 0000787D E84FFCFFFF          <2>  call setPageFlagsP
   491 00007882 9D                  <2>  popf
   491 00007883 61                  <2>  popad
   492                              <1> 	setPageFlags  TESTPAGE_PTE, PTE_WRITE_BIT, PTE_WRITE ; mark the PTE for write
   492 00007884 60                  <2>  pushad
   492 00007885 9C                  <2>  pushf
   492 00007886 B89F200000          <2>  mov eax, %1
   492 0000788B B902000000          <2>  mov ecx, %2
   492 00007890 BA02000000          <2>  mov edx, %3
   492 00007895 E837FCFFFF          <2>  call setPageFlagsP
   492 0000789A 9D                  <2>  popf
   492 0000789B 61                  <2>  popad
   493 0000789C B846504650          <1> 	mov   eax, PF_HANDLER_SIG
   494                              <1> .exit:
   495 000078A1 CF                  <1> 	iretd
   784                                  
   785                                  post11:
   786                                  	POST 11
   786 000078A2 B011                <1>  mov al, 0x%1
   786 000078A4 66BA9001            <1>  mov dx, POST_PORT
   786 000078A8 EE                  <1>  out dx, al
   787                                  	setProtModeIntGate EX_PF, PageFaultHandler
   787 000078A9 60                  <1>  pushad
   787 000078AA 9C                  <1>  pushf
   787 000078AB 668CD8              <1>  mov ax, ds
   787 000078AE 6650                <1>  push ax
   787 000078B0 B80E000000          <1>  mov eax, %1
   787 000078B5 BF[7E770000]        <1>  mov edi, %2
   787                              <1>  %if %3 != -1
   787                              <1>  mov dx, %3
   787                              <1>  %else
   787 000078BA 668CCA              <1>  mov dx, cs
   787 000078BD 6683E207            <1>  and dx, 7
   787 000078C1 66C1E20D            <1>  shl dx, 13
   787                              <1>  %endif
   787 000078C5 6683FA00            <1>  cmp dx, ACC_DPL_0
   787 000078C9 7507                <1>  jne %%dpl3
   787                              <1> %%dpl0:
   787 000078CB BE10000000          <1>  mov esi, C_SEG_PROT32
   787 000078D0 EB05                <1>  jmp %%cont
   787                              <1> %%dpl3:
   787 000078D2 BE18000000          <1>  mov esi, CU_SEG_PROT32
   787                              <1> %%cont:
   787 000078D7 668CC9              <1>  mov cx, cs
   787 000078DA 66F7C10700          <1>  test cx, 7
   787 000078DF 7509                <1>  jnz %%ring3
   787                              <1> %%ring0:
   787 000078E1 2EC51D[971B0000]    <1>  lds ebx, [cs:ptrIDTprot]
   787 000078E8 EB07                <1>  jmp %%call
   787                              <1> %%ring3:
   787 000078EA 2EC51D[9D1B0000]    <1>  lds ebx, [cs:ptrIDTUprot]
   787                              <1> %%call:
   787 000078F1 E84EA4FFFF          <1>  call initIntGateProt
   787 000078F6 6658                <1>  pop ax
   787 000078F8 8ED8                <1>  mov ds, ax
   787 000078FA 9D                  <1>  popf
   787 000078FB 61                  <1>  popad
   788                                  	; set test data segment to DPL 3 R/W flat
   789                                  	updLDTDesc DTEST_SEG_PROT, 0x0000000, 0x000fffff, ACC_TYPE_DATA_W|ACC_PRESENT|ACC_DPL_3, EXT_PAGE
   789 000078FC 60                  <1>  pushad
   789 000078FD 668CD8              <1>  mov ax, ds
   789 00007900 6650                <1>  push ax
   789 00007902 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   789 00007909 B844000000          <1>  mov eax, %1
   789 0000790E BE00000000          <1>  mov esi, %2
   789 00007913 BFFFFF0F00          <1>  mov edi, %3
   789 00007918 66BA80F2            <1>  mov dx, %4|%5
   789 0000791C E840A4FFFF          <1>  call initDescriptorProt
   789 00007921 6658                <1>  pop ax
   789 00007923 8ED8                <1>  mov ds, ax
   789 00007925 61                  <1>  popad
   790                                  	; setup page table 1
   791 00007926 FC                      	cld
   792 00007927 2EC41D[B51B0000]        	les   ebx, [cs:ptrPDprot]
   793 0000792E 26C7430400300000        	mov   [es:ebx + 4], dword PAGE_TBL1_ADDR ; PDE 1 -> page table 1
   794 00007936 2EC41D[C11B0000]        	les   ebx, [cs:ptrPT1prot]
   795 0000793D 89DF                    	mov   edi, ebx
   796 0000793F 31C0                    	xor   eax, eax
   797 00007941 B900040000              	mov   ecx, 1024
   798 00007946 F3AB                    	rep   stosd
   799 00007948 26C7837C02000000F0-     	mov   [es:ebx + (TESTPAGE_PTE&0x3FF)*4], dword TESTPAGE_OFF
   799 00007951 0900               
   800                                  
   801 00007953 B8DE000000              	mov   eax, pagingTestsEnd-pagingTests
   802 00007958 BE[21750000]            	mov   esi, pagingTests
   803 0000795D BA00000000              	mov   edx, 0
   804 00007962 B903000000              	mov   ecx, 3
   805 00007967 F7F1                    	div   ecx
   806 00007969 89C1                    	mov   ecx, eax
   807                                  .nextTest:
   808 0000796B 2E0FB606                	movzx eax, byte [cs:esi + 0]
   809 0000796F 2E0FB65E01              	movzx ebx, byte [cs:esi + 1]
   810 00007974 2E0FB65602              	movzx edx, byte [cs:esi + 2]
   811 00007979 E8F0FCFFFF              	call  testPageFault
   812 0000797E 83C603                  	add   esi, 3
   813 00007981 E2E8                    	loop .nextTest
   814                                  
   815                                  	setProtModeIntGate EX_PF, DefaultExcHandler
   815 00007983 60                  <1>  pushad
   815 00007984 9C                  <1>  pushf
   815 00007985 668CD8              <1>  mov ax, ds
   815 00007988 6650                <1>  push ax
   815 0000798A B80E000000          <1>  mov eax, %1
   815 0000798F BF[8FD50000]        <1>  mov edi, %2
   815                              <1>  %if %3 != -1
   815                              <1>  mov dx, %3
   815                              <1>  %else
   815 00007994 668CCA              <1>  mov dx, cs
   815 00007997 6683E207            <1>  and dx, 7
   815 0000799B 66C1E20D            <1>  shl dx, 13
   815                              <1>  %endif
   815 0000799F 6683FA00            <1>  cmp dx, ACC_DPL_0
   815 000079A3 7507                <1>  jne %%dpl3
   815                              <1> %%dpl0:
   815 000079A5 BE10000000          <1>  mov esi, C_SEG_PROT32
   815 000079AA EB05                <1>  jmp %%cont
   815                              <1> %%dpl3:
   815 000079AC BE18000000          <1>  mov esi, CU_SEG_PROT32
   815                              <1> %%cont:
   815 000079B1 668CC9              <1>  mov cx, cs
   815 000079B4 66F7C10700          <1>  test cx, 7
   815 000079B9 7509                <1>  jnz %%ring3
   815                              <1> %%ring0:
   815 000079BB 2EC51D[971B0000]    <1>  lds ebx, [cs:ptrIDTprot]
   815 000079C2 EB07                <1>  jmp %%call
   815                              <1> %%ring3:
   815 000079C4 2EC51D[9D1B0000]    <1>  lds ebx, [cs:ptrIDTUprot]
   815                              <1> %%call:
   815 000079CB E874A3FFFF          <1>  call initIntGateProt
   815 000079D0 6658                <1>  pop ax
   815 000079D2 8ED8                <1>  mov ds, ax
   815 000079D4 9D                  <1>  popf
   815 000079D5 61                  <1>  popad
   816                                  
   817                                  	; test if the Dirty bit is updated after a read
   818                                  	updPageFlags TESTPAGE_PDE, PTE_SUPER_W
   818 000079D6 60                  <1>  pushad
   818 000079D7 9C                  <1>  pushf
   818 000079D8 B801000000          <1>  mov eax, %1
   818 000079DD BA03000000          <1>  mov edx, %2
   818 000079E2 E8D2FAFFFF          <1>  call updPageFlagsP
   818 000079E7 9D                  <1>  popf
   818 000079E8 61                  <1>  popad
   819                                  	updPageFlags TESTPAGE_PTE, PTE_SUPER_W
   819 000079E9 60                  <1>  pushad
   819 000079EA 9C                  <1>  pushf
   819 000079EB B89F200000          <1>  mov eax, %1
   819 000079F0 BA03000000          <1>  mov edx, %2
   819 000079F5 E8BFFAFFFF          <1>  call updPageFlagsP
   819 000079FA 9D                  <1>  popf
   819 000079FB 61                  <1>  popad
   820 000079FC 66B84400                	mov   ax, DTEST_SEG_PROT
   821 00007A00 8ED8                    	mov   ds, ax
   822 00007A02 A100F04900              	mov   eax, [TESTPAGE_LIN]
   823 00007A07 A300F04900              	mov   [TESTPAGE_LIN], eax
   824 00007A0C B800F04900              	mov   eax, TESTPAGE_LIN
   825 00007A11 E8D1FAFFFF              	call  getPTE
   826 00007A16 A940000000              	test  eax, PTE_DIRTY
   827 00007A1B 0F846E5B0000            	jz    error
   828                                  
   829 00007A21 66B81C00                	mov ax, D1_SEG_PROT
   830 00007A25 8ED8                    	mov ds, ax
   831                                  ;
   832                                  ;   Verify other memory access faults
   833                                  ;
   834                                  	POST 12
   834 00007A27 B012                <1>  mov al, 0x%1
   834 00007A29 66BA9001            <1>  mov dx, POST_PORT
   834 00007A2D EE                  <1>  out dx, al
   835                                  	; #GP(0) If the destination operand is in a non-writable segment.
   836 00007A2E 66B83400                	mov ax, RO_SEG_PROT ; write protect DS
   837 00007A32 8ED8                    	mov ds, ax
   838                                  	protModeFaultTest EX_GP, 0, mov [0],eax
   838                              <1>  setProtModeIntGate %1, %%continue
   838 00007A34 60                  <2>  pushad
   838 00007A35 9C                  <2>  pushf
   838 00007A36 668CD8              <2>  mov ax, ds
   838 00007A39 6650                <2>  push ax
   838 00007A3B B80D000000          <2>  mov eax, %1
   838 00007A40 BF[917A0000]        <2>  mov edi, %2
   838                              <2>  %if %3 != -1
   838                              <2>  mov dx, %3
   838                              <2>  %else
   838 00007A45 668CCA              <2>  mov dx, cs
   838 00007A48 6683E207            <2>  and dx, 7
   838 00007A4C 66C1E20D            <2>  shl dx, 13
   838                              <2>  %endif
   838 00007A50 6683FA00            <2>  cmp dx, ACC_DPL_0
   838 00007A54 7507                <2>  jne %%dpl3
   838                              <2> %%dpl0:
   838 00007A56 BE10000000          <2>  mov esi, C_SEG_PROT32
   838 00007A5B EB05                <2>  jmp %%cont
   838                              <2> %%dpl3:
   838 00007A5D BE18000000          <2>  mov esi, CU_SEG_PROT32
   838                              <2> %%cont:
   838 00007A62 668CC9              <2>  mov cx, cs
   838 00007A65 66F7C10700          <2>  test cx, 7
   838 00007A6A 7509                <2>  jnz %%ring3
   838                              <2> %%ring0:
   838 00007A6C 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   838 00007A73 EB07                <2>  jmp %%call
   838                              <2> %%ring3:
   838 00007A75 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   838                              <2> %%call:
   838 00007A7C E8C3A2FFFF          <2>  call initIntGateProt
   838 00007A81 6658                <2>  pop ax
   838 00007A83 8ED8                <2>  mov ds, ax
   838 00007A85 9D                  <2>  popf
   838 00007A86 61                  <2>  popad
   838                              <1> %%test:
   838 00007A87 A300000000          <1>  %3
   838 00007A8C E9FE5A0000          <1>  jmp error
   838                              <1> %%continue:
   838                              <1>  protModeExcCheck %1, %2, %%test
   838                              <2>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   838                              <2>  %assign exc_errcode 4
   838 00007A91 36833C2400          <2>  cmp [ss:esp], dword %2
   838 00007A96 0F85F35A0000        <2>  jne error
   838                              <2>  %else
   838                              <2>  %assign exc_errcode 0
   838                              <2>  %endif
   838                              <2>  %if %4 != -1
   838                              <2>  cmp [ss:esp+exc_errcode+4], dword %4
   838                              <2>  jne error
   838                              <2>  %else
   838 00007A9C 668CCB              <2>  mov bx, cs
   838 00007A9F 66F7C30700          <2>  test bx, 7
   838 00007AA4 750E                <2>  jnz %%ring3
   838                              <2>  %%ring0:
   838 00007AA6 36837C240810        <2>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   838 00007AAC 0F85DD5A0000        <2>  jne error
   838 00007AB2 EB0C                <2>  jmp %%continue
   838                              <2>  %%ring3:
   838 00007AB4 36837C24081B        <2>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   838 00007ABA 0F85CF5A0000        <2>  jne error
   838                              <2>  %%continue:
   838                              <2>  %endif
   838 00007AC0 36817C2404-         <2>  cmp [ss:esp+exc_errcode], dword %3
   838 00007AC5 [877A0000]          <2>
   838 00007AC9 0F85C05A0000        <2>  jne error
   838 00007ACF 83C410              <2>  add esp, 12+exc_errcode
   838                              <1>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   838 00007AD2 60                  <2>  pushad
   838 00007AD3 9C                  <2>  pushf
   838 00007AD4 668CD8              <2>  mov ax, ds
   838 00007AD7 6650                <2>  push ax
   838 00007AD9 B80D000000          <2>  mov eax, %1
   838 00007ADE BF[8FD50000]        <2>  mov edi, %2
   838                              <2>  %if %3 != -1
   838 00007AE3 66BA0000            <2>  mov dx, %3
   838                              <2>  %else
   838                              <2>  mov dx, cs
   838                              <2>  and dx, 7
   838                              <2>  shl dx, 13
   838                              <2>  %endif
   838 00007AE7 6683FA00            <2>  cmp dx, ACC_DPL_0
   838 00007AEB 7507                <2>  jne %%dpl3
   838                              <2> %%dpl0:
   838 00007AED BE10000000          <2>  mov esi, C_SEG_PROT32
   838 00007AF2 EB05                <2>  jmp %%cont
   838                              <2> %%dpl3:
   838 00007AF4 BE18000000          <2>  mov esi, CU_SEG_PROT32
   838                              <2> %%cont:
   838 00007AF9 668CC9              <2>  mov cx, cs
   838 00007AFC 66F7C10700          <2>  test cx, 7
   838 00007B01 7509                <2>  jnz %%ring3
   838                              <2> %%ring0:
   838 00007B03 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   838 00007B0A EB07                <2>  jmp %%call
   838                              <2> %%ring3:
   838 00007B0C 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   838                              <2> %%call:
   838 00007B13 E82CA2FFFF          <2>  call initIntGateProt
   838 00007B18 6658                <2>  pop ax
   838 00007B1A 8ED8                <2>  mov ds, ax
   838 00007B1C 9D                  <2>  popf
   838 00007B1D 61                  <2>  popad
   839                                  	; #GP(0) If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
   840                                  	; use byte granular DS
   841                                  	updLDTDesc DTEST_SEG_PROT, 0x0000000, 0x0009ffff, ACC_TYPE_DATA_W|ACC_PRESENT
   841 00007B1E 60                  <1>  pushad
   841 00007B1F 668CD8              <1>  mov ax, ds
   841 00007B22 6650                <1>  push ax
   841 00007B24 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   841 00007B2B B844000000          <1>  mov eax, %1
   841 00007B30 BE00000000          <1>  mov esi, %2
   841 00007B35 BFFFFF0900          <1>  mov edi, %3
   841 00007B3A 66BA0092            <1>  mov dx, %4|%5
   841 00007B3E E81EA2FFFF          <1>  call initDescriptorProt
   841 00007B43 6658                <1>  pop ax
   841 00007B45 8ED8                <1>  mov ds, ax
   841 00007B47 61                  <1>  popad
   842 00007B48 66B84400                	mov ax, DTEST_SEG_PROT
   843 00007B4C 8ED8                    	mov ds, ax
   844                                  	protModeFaultTest EX_GP, 0, mov eax,[0x9fffd] ; check on read
   844                              <1>  setProtModeIntGate %1, %%continue
   844 00007B4E 60                  <2>  pushad
   844 00007B4F 9C                  <2>  pushf
   844 00007B50 668CD8              <2>  mov ax, ds
   844 00007B53 6650                <2>  push ax
   844 00007B55 B80D000000          <2>  mov eax, %1
   844 00007B5A BF[AB7B0000]        <2>  mov edi, %2
   844                              <2>  %if %3 != -1
   844                              <2>  mov dx, %3
   844                              <2>  %else
   844 00007B5F 668CCA              <2>  mov dx, cs
   844 00007B62 6683E207            <2>  and dx, 7
   844 00007B66 66C1E20D            <2>  shl dx, 13
   844                              <2>  %endif
   844 00007B6A 6683FA00            <2>  cmp dx, ACC_DPL_0
   844 00007B6E 7507                <2>  jne %%dpl3
   844                              <2> %%dpl0:
   844 00007B70 BE10000000          <2>  mov esi, C_SEG_PROT32
   844 00007B75 EB05                <2>  jmp %%cont
   844                              <2> %%dpl3:
   844 00007B77 BE18000000          <2>  mov esi, CU_SEG_PROT32
   844                              <2> %%cont:
   844 00007B7C 668CC9              <2>  mov cx, cs
   844 00007B7F 66F7C10700          <2>  test cx, 7
   844 00007B84 7509                <2>  jnz %%ring3
   844                              <2> %%ring0:
   844 00007B86 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   844 00007B8D EB07                <2>  jmp %%call
   844                              <2> %%ring3:
   844 00007B8F 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   844                              <2> %%call:
   844 00007B96 E8A9A1FFFF          <2>  call initIntGateProt
   844 00007B9B 6658                <2>  pop ax
   844 00007B9D 8ED8                <2>  mov ds, ax
   844 00007B9F 9D                  <2>  popf
   844 00007BA0 61                  <2>  popad
   844                              <1> %%test:
   844 00007BA1 A1FDFF0900          <1>  %3
   844 00007BA6 E9E4590000          <1>  jmp error
   844                              <1> %%continue:
   844                              <1>  protModeExcCheck %1, %2, %%test
   844                              <2>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   844                              <2>  %assign exc_errcode 4
   844 00007BAB 36833C2400          <2>  cmp [ss:esp], dword %2
   844 00007BB0 0F85D9590000        <2>  jne error
   844                              <2>  %else
   844                              <2>  %assign exc_errcode 0
   844                              <2>  %endif
   844                              <2>  %if %4 != -1
   844                              <2>  cmp [ss:esp+exc_errcode+4], dword %4
   844                              <2>  jne error
   844                              <2>  %else
   844 00007BB6 668CCB              <2>  mov bx, cs
   844 00007BB9 66F7C30700          <2>  test bx, 7
   844 00007BBE 750E                <2>  jnz %%ring3
   844                              <2>  %%ring0:
   844 00007BC0 36837C240810        <2>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   844 00007BC6 0F85C3590000        <2>  jne error
   844 00007BCC EB0C                <2>  jmp %%continue
   844                              <2>  %%ring3:
   844 00007BCE 36837C24081B        <2>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   844 00007BD4 0F85B5590000        <2>  jne error
   844                              <2>  %%continue:
   844                              <2>  %endif
   844 00007BDA 36817C2404-         <2>  cmp [ss:esp+exc_errcode], dword %3
   844 00007BDF [A17B0000]          <2>
   844 00007BE3 0F85A6590000        <2>  jne error
   844 00007BE9 83C410              <2>  add esp, 12+exc_errcode
   844                              <1>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   844 00007BEC 60                  <2>  pushad
   844 00007BED 9C                  <2>  pushf
   844 00007BEE 668CD8              <2>  mov ax, ds
   844 00007BF1 6650                <2>  push ax
   844 00007BF3 B80D000000          <2>  mov eax, %1
   844 00007BF8 BF[8FD50000]        <2>  mov edi, %2
   844                              <2>  %if %3 != -1
   844 00007BFD 66BA0000            <2>  mov dx, %3
   844                              <2>  %else
   844                              <2>  mov dx, cs
   844                              <2>  and dx, 7
   844                              <2>  shl dx, 13
   844                              <2>  %endif
   844 00007C01 6683FA00            <2>  cmp dx, ACC_DPL_0
   844 00007C05 7507                <2>  jne %%dpl3
   844                              <2> %%dpl0:
   844 00007C07 BE10000000          <2>  mov esi, C_SEG_PROT32
   844 00007C0C EB05                <2>  jmp %%cont
   844                              <2> %%dpl3:
   844 00007C0E BE18000000          <2>  mov esi, CU_SEG_PROT32
   844                              <2> %%cont:
   844 00007C13 668CC9              <2>  mov cx, cs
   844 00007C16 66F7C10700          <2>  test cx, 7
   844 00007C1B 7509                <2>  jnz %%ring3
   844                              <2> %%ring0:
   844 00007C1D 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   844 00007C24 EB07                <2>  jmp %%call
   844                              <2> %%ring3:
   844 00007C26 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   844                              <2> %%call:
   844 00007C2D E812A1FFFF          <2>  call initIntGateProt
   844 00007C32 6658                <2>  pop ax
   844 00007C34 8ED8                <2>  mov ds, ax
   844 00007C36 9D                  <2>  popf
   844 00007C37 61                  <2>  popad
   845                                  	protModeFaultTest EX_GP, 0, mov [0x9fffd],eax ; check on write
   845                              <1>  setProtModeIntGate %1, %%continue
   845 00007C38 60                  <2>  pushad
   845 00007C39 9C                  <2>  pushf
   845 00007C3A 668CD8              <2>  mov ax, ds
   845 00007C3D 6650                <2>  push ax
   845 00007C3F B80D000000          <2>  mov eax, %1
   845 00007C44 BF[957C0000]        <2>  mov edi, %2
   845                              <2>  %if %3 != -1
   845                              <2>  mov dx, %3
   845                              <2>  %else
   845 00007C49 668CCA              <2>  mov dx, cs
   845 00007C4C 6683E207            <2>  and dx, 7
   845 00007C50 66C1E20D            <2>  shl dx, 13
   845                              <2>  %endif
   845 00007C54 6683FA00            <2>  cmp dx, ACC_DPL_0
   845 00007C58 7507                <2>  jne %%dpl3
   845                              <2> %%dpl0:
   845 00007C5A BE10000000          <2>  mov esi, C_SEG_PROT32
   845 00007C5F EB05                <2>  jmp %%cont
   845                              <2> %%dpl3:
   845 00007C61 BE18000000          <2>  mov esi, CU_SEG_PROT32
   845                              <2> %%cont:
   845 00007C66 668CC9              <2>  mov cx, cs
   845 00007C69 66F7C10700          <2>  test cx, 7
   845 00007C6E 7509                <2>  jnz %%ring3
   845                              <2> %%ring0:
   845 00007C70 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   845 00007C77 EB07                <2>  jmp %%call
   845                              <2> %%ring3:
   845 00007C79 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   845                              <2> %%call:
   845 00007C80 E8BFA0FFFF          <2>  call initIntGateProt
   845 00007C85 6658                <2>  pop ax
   845 00007C87 8ED8                <2>  mov ds, ax
   845 00007C89 9D                  <2>  popf
   845 00007C8A 61                  <2>  popad
   845                              <1> %%test:
   845 00007C8B A3FDFF0900          <1>  %3
   845 00007C90 E9FA580000          <1>  jmp error
   845                              <1> %%continue:
   845                              <1>  protModeExcCheck %1, %2, %%test
   845                              <2>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   845                              <2>  %assign exc_errcode 4
   845 00007C95 36833C2400          <2>  cmp [ss:esp], dword %2
   845 00007C9A 0F85EF580000        <2>  jne error
   845                              <2>  %else
   845                              <2>  %assign exc_errcode 0
   845                              <2>  %endif
   845                              <2>  %if %4 != -1
   845                              <2>  cmp [ss:esp+exc_errcode+4], dword %4
   845                              <2>  jne error
   845                              <2>  %else
   845 00007CA0 668CCB              <2>  mov bx, cs
   845 00007CA3 66F7C30700          <2>  test bx, 7
   845 00007CA8 750E                <2>  jnz %%ring3
   845                              <2>  %%ring0:
   845 00007CAA 36837C240810        <2>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   845 00007CB0 0F85D9580000        <2>  jne error
   845 00007CB6 EB0C                <2>  jmp %%continue
   845                              <2>  %%ring3:
   845 00007CB8 36837C24081B        <2>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   845 00007CBE 0F85CB580000        <2>  jne error
   845                              <2>  %%continue:
   845                              <2>  %endif
   845 00007CC4 36817C2404-         <2>  cmp [ss:esp+exc_errcode], dword %3
   845 00007CC9 [8B7C0000]          <2>
   845 00007CCD 0F85BC580000        <2>  jne error
   845 00007CD3 83C410              <2>  add esp, 12+exc_errcode
   845                              <1>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   845 00007CD6 60                  <2>  pushad
   845 00007CD7 9C                  <2>  pushf
   845 00007CD8 668CD8              <2>  mov ax, ds
   845 00007CDB 6650                <2>  push ax
   845 00007CDD B80D000000          <2>  mov eax, %1
   845 00007CE2 BF[8FD50000]        <2>  mov edi, %2
   845                              <2>  %if %3 != -1
   845 00007CE7 66BA0000            <2>  mov dx, %3
   845                              <2>  %else
   845                              <2>  mov dx, cs
   845                              <2>  and dx, 7
   845                              <2>  shl dx, 13
   845                              <2>  %endif
   845 00007CEB 6683FA00            <2>  cmp dx, ACC_DPL_0
   845 00007CEF 7507                <2>  jne %%dpl3
   845                              <2> %%dpl0:
   845 00007CF1 BE10000000          <2>  mov esi, C_SEG_PROT32
   845 00007CF6 EB05                <2>  jmp %%cont
   845                              <2> %%dpl3:
   845 00007CF8 BE18000000          <2>  mov esi, CU_SEG_PROT32
   845                              <2> %%cont:
   845 00007CFD 668CC9              <2>  mov cx, cs
   845 00007D00 66F7C10700          <2>  test cx, 7
   845 00007D05 7509                <2>  jnz %%ring3
   845                              <2> %%ring0:
   845 00007D07 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   845 00007D0E EB07                <2>  jmp %%call
   845                              <2> %%ring3:
   845 00007D10 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   845                              <2> %%call:
   845 00007D17 E828A0FFFF          <2>  call initIntGateProt
   845 00007D1C 6658                <2>  pop ax
   845 00007D1E 8ED8                <2>  mov ds, ax
   845 00007D20 9D                  <2>  popf
   845 00007D21 61                  <2>  popad
   846 00007D22 A1FCFF0900              	mov eax,[0x9fffc] ; this should be ok
   847 00007D27 A3FCFF0900              	mov [0x9fffc],eax ; this should be ok
   848                                  	protModeFaultTest EX_GP, 0, mov eax,[-1] ; check on read (test for overflows)
   848                              <1>  setProtModeIntGate %1, %%continue
   848 00007D2C 60                  <2>  pushad
   848 00007D2D 9C                  <2>  pushf
   848 00007D2E 668CD8              <2>  mov ax, ds
   848 00007D31 6650                <2>  push ax
   848 00007D33 B80D000000          <2>  mov eax, %1
   848 00007D38 BF[897D0000]        <2>  mov edi, %2
   848                              <2>  %if %3 != -1
   848                              <2>  mov dx, %3
   848                              <2>  %else
   848 00007D3D 668CCA              <2>  mov dx, cs
   848 00007D40 6683E207            <2>  and dx, 7
   848 00007D44 66C1E20D            <2>  shl dx, 13
   848                              <2>  %endif
   848 00007D48 6683FA00            <2>  cmp dx, ACC_DPL_0
   848 00007D4C 7507                <2>  jne %%dpl3
   848                              <2> %%dpl0:
   848 00007D4E BE10000000          <2>  mov esi, C_SEG_PROT32
   848 00007D53 EB05                <2>  jmp %%cont
   848                              <2> %%dpl3:
   848 00007D55 BE18000000          <2>  mov esi, CU_SEG_PROT32
   848                              <2> %%cont:
   848 00007D5A 668CC9              <2>  mov cx, cs
   848 00007D5D 66F7C10700          <2>  test cx, 7
   848 00007D62 7509                <2>  jnz %%ring3
   848                              <2> %%ring0:
   848 00007D64 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   848 00007D6B EB07                <2>  jmp %%call
   848                              <2> %%ring3:
   848 00007D6D 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   848                              <2> %%call:
   848 00007D74 E8CB9FFFFF          <2>  call initIntGateProt
   848 00007D79 6658                <2>  pop ax
   848 00007D7B 8ED8                <2>  mov ds, ax
   848 00007D7D 9D                  <2>  popf
   848 00007D7E 61                  <2>  popad
   848                              <1> %%test:
   848 00007D7F A1FFFFFFFF          <1>  %3
   848 00007D84 E906580000          <1>  jmp error
   848                              <1> %%continue:
   848                              <1>  protModeExcCheck %1, %2, %%test
   848                              <2>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   848                              <2>  %assign exc_errcode 4
   848 00007D89 36833C2400          <2>  cmp [ss:esp], dword %2
   848 00007D8E 0F85FB570000        <2>  jne error
   848                              <2>  %else
   848                              <2>  %assign exc_errcode 0
   848                              <2>  %endif
   848                              <2>  %if %4 != -1
   848                              <2>  cmp [ss:esp+exc_errcode+4], dword %4
   848                              <2>  jne error
   848                              <2>  %else
   848 00007D94 668CCB              <2>  mov bx, cs
   848 00007D97 66F7C30700          <2>  test bx, 7
   848 00007D9C 750E                <2>  jnz %%ring3
   848                              <2>  %%ring0:
   848 00007D9E 36837C240810        <2>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   848 00007DA4 0F85E5570000        <2>  jne error
   848 00007DAA EB0C                <2>  jmp %%continue
   848                              <2>  %%ring3:
   848 00007DAC 36837C24081B        <2>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   848 00007DB2 0F85D7570000        <2>  jne error
   848                              <2>  %%continue:
   848                              <2>  %endif
   848 00007DB8 36817C2404-         <2>  cmp [ss:esp+exc_errcode], dword %3
   848 00007DBD [7F7D0000]          <2>
   848 00007DC1 0F85C8570000        <2>  jne error
   848 00007DC7 83C410              <2>  add esp, 12+exc_errcode
   848                              <1>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   848 00007DCA 60                  <2>  pushad
   848 00007DCB 9C                  <2>  pushf
   848 00007DCC 668CD8              <2>  mov ax, ds
   848 00007DCF 6650                <2>  push ax
   848 00007DD1 B80D000000          <2>  mov eax, %1
   848 00007DD6 BF[8FD50000]        <2>  mov edi, %2
   848                              <2>  %if %3 != -1
   848 00007DDB 66BA0000            <2>  mov dx, %3
   848                              <2>  %else
   848                              <2>  mov dx, cs
   848                              <2>  and dx, 7
   848                              <2>  shl dx, 13
   848                              <2>  %endif
   848 00007DDF 6683FA00            <2>  cmp dx, ACC_DPL_0
   848 00007DE3 7507                <2>  jne %%dpl3
   848                              <2> %%dpl0:
   848 00007DE5 BE10000000          <2>  mov esi, C_SEG_PROT32
   848 00007DEA EB05                <2>  jmp %%cont
   848                              <2> %%dpl3:
   848 00007DEC BE18000000          <2>  mov esi, CU_SEG_PROT32
   848                              <2> %%cont:
   848 00007DF1 668CC9              <2>  mov cx, cs
   848 00007DF4 66F7C10700          <2>  test cx, 7
   848 00007DF9 7509                <2>  jnz %%ring3
   848                              <2> %%ring0:
   848 00007DFB 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   848 00007E02 EB07                <2>  jmp %%call
   848                              <2> %%ring3:
   848 00007E04 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   848                              <2> %%call:
   848 00007E0B E8349FFFFF          <2>  call initIntGateProt
   848 00007E10 6658                <2>  pop ax
   848 00007E12 8ED8                <2>  mov ds, ax
   848 00007E14 9D                  <2>  popf
   848 00007E15 61                  <2>  popad
   849                                  	protModeFaultTest EX_GP, 0, mov [-1],eax ; check on write (test for overflows)
   849                              <1>  setProtModeIntGate %1, %%continue
   849 00007E16 60                  <2>  pushad
   849 00007E17 9C                  <2>  pushf
   849 00007E18 668CD8              <2>  mov ax, ds
   849 00007E1B 6650                <2>  push ax
   849 00007E1D B80D000000          <2>  mov eax, %1
   849 00007E22 BF[737E0000]        <2>  mov edi, %2
   849                              <2>  %if %3 != -1
   849                              <2>  mov dx, %3
   849                              <2>  %else
   849 00007E27 668CCA              <2>  mov dx, cs
   849 00007E2A 6683E207            <2>  and dx, 7
   849 00007E2E 66C1E20D            <2>  shl dx, 13
   849                              <2>  %endif
   849 00007E32 6683FA00            <2>  cmp dx, ACC_DPL_0
   849 00007E36 7507                <2>  jne %%dpl3
   849                              <2> %%dpl0:
   849 00007E38 BE10000000          <2>  mov esi, C_SEG_PROT32
   849 00007E3D EB05                <2>  jmp %%cont
   849                              <2> %%dpl3:
   849 00007E3F BE18000000          <2>  mov esi, CU_SEG_PROT32
   849                              <2> %%cont:
   849 00007E44 668CC9              <2>  mov cx, cs
   849 00007E47 66F7C10700          <2>  test cx, 7
   849 00007E4C 7509                <2>  jnz %%ring3
   849                              <2> %%ring0:
   849 00007E4E 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   849 00007E55 EB07                <2>  jmp %%call
   849                              <2> %%ring3:
   849 00007E57 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   849                              <2> %%call:
   849 00007E5E E8E19EFFFF          <2>  call initIntGateProt
   849 00007E63 6658                <2>  pop ax
   849 00007E65 8ED8                <2>  mov ds, ax
   849 00007E67 9D                  <2>  popf
   849 00007E68 61                  <2>  popad
   849                              <1> %%test:
   849 00007E69 A3FFFFFFFF          <1>  %3
   849 00007E6E E91C570000          <1>  jmp error
   849                              <1> %%continue:
   849                              <1>  protModeExcCheck %1, %2, %%test
   849                              <2>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   849                              <2>  %assign exc_errcode 4
   849 00007E73 36833C2400          <2>  cmp [ss:esp], dword %2
   849 00007E78 0F8511570000        <2>  jne error
   849                              <2>  %else
   849                              <2>  %assign exc_errcode 0
   849                              <2>  %endif
   849                              <2>  %if %4 != -1
   849                              <2>  cmp [ss:esp+exc_errcode+4], dword %4
   849                              <2>  jne error
   849                              <2>  %else
   849 00007E7E 668CCB              <2>  mov bx, cs
   849 00007E81 66F7C30700          <2>  test bx, 7
   849 00007E86 750E                <2>  jnz %%ring3
   849                              <2>  %%ring0:
   849 00007E88 36837C240810        <2>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   849 00007E8E 0F85FB560000        <2>  jne error
   849 00007E94 EB0C                <2>  jmp %%continue
   849                              <2>  %%ring3:
   849 00007E96 36837C24081B        <2>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   849 00007E9C 0F85ED560000        <2>  jne error
   849                              <2>  %%continue:
   849                              <2>  %endif
   849 00007EA2 36817C2404-         <2>  cmp [ss:esp+exc_errcode], dword %3
   849 00007EA7 [697E0000]          <2>
   849 00007EAB 0F85DE560000        <2>  jne error
   849 00007EB1 83C410              <2>  add esp, 12+exc_errcode
   849                              <1>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   849 00007EB4 60                  <2>  pushad
   849 00007EB5 9C                  <2>  pushf
   849 00007EB6 668CD8              <2>  mov ax, ds
   849 00007EB9 6650                <2>  push ax
   849 00007EBB B80D000000          <2>  mov eax, %1
   849 00007EC0 BF[8FD50000]        <2>  mov edi, %2
   849                              <2>  %if %3 != -1
   849 00007EC5 66BA0000            <2>  mov dx, %3
   849                              <2>  %else
   849                              <2>  mov dx, cs
   849                              <2>  and dx, 7
   849                              <2>  shl dx, 13
   849                              <2>  %endif
   849 00007EC9 6683FA00            <2>  cmp dx, ACC_DPL_0
   849 00007ECD 7507                <2>  jne %%dpl3
   849                              <2> %%dpl0:
   849 00007ECF BE10000000          <2>  mov esi, C_SEG_PROT32
   849 00007ED4 EB05                <2>  jmp %%cont
   849                              <2> %%dpl3:
   849 00007ED6 BE18000000          <2>  mov esi, CU_SEG_PROT32
   849                              <2> %%cont:
   849 00007EDB 668CC9              <2>  mov cx, cs
   849 00007EDE 66F7C10700          <2>  test cx, 7
   849 00007EE3 7509                <2>  jnz %%ring3
   849                              <2> %%ring0:
   849 00007EE5 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   849 00007EEC EB07                <2>  jmp %%call
   849                              <2> %%ring3:
   849 00007EEE 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   849                              <2> %%call:
   849 00007EF5 E84A9EFFFF          <2>  call initIntGateProt
   849 00007EFA 6658                <2>  pop ax
   849 00007EFC 8ED8                <2>  mov ds, ax
   849 00007EFE 9D                  <2>  popf
   849 00007EFF 61                  <2>  popad
   850                                  	; use page granular DS
   851                                  	updLDTDesc DTEST_SEG_PROT, 0x0000000, 0x0000009f, ACC_TYPE_DATA_W|ACC_PRESENT, EXT_PAGE
   851 00007F00 60                  <1>  pushad
   851 00007F01 668CD8              <1>  mov ax, ds
   851 00007F04 6650                <1>  push ax
   851 00007F06 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   851 00007F0D B844000000          <1>  mov eax, %1
   851 00007F12 BE00000000          <1>  mov esi, %2
   851 00007F17 BF9F000000          <1>  mov edi, %3
   851 00007F1C 66BA8092            <1>  mov dx, %4|%5
   851 00007F20 E83C9EFFFF          <1>  call initDescriptorProt
   851 00007F25 6658                <1>  pop ax
   851 00007F27 8ED8                <1>  mov ds, ax
   851 00007F29 61                  <1>  popad
   852 00007F2A 66B84400                	mov ax, DTEST_SEG_PROT
   853 00007F2E 8ED8                    	mov ds, ax
   854                                  	protModeFaultTest EX_GP, 0, mov eax,[0x9fffd] ; check on read
   854                              <1>  setProtModeIntGate %1, %%continue
   854 00007F30 60                  <2>  pushad
   854 00007F31 9C                  <2>  pushf
   854 00007F32 668CD8              <2>  mov ax, ds
   854 00007F35 6650                <2>  push ax
   854 00007F37 B80D000000          <2>  mov eax, %1
   854 00007F3C BF[8D7F0000]        <2>  mov edi, %2
   854                              <2>  %if %3 != -1
   854                              <2>  mov dx, %3
   854                              <2>  %else
   854 00007F41 668CCA              <2>  mov dx, cs
   854 00007F44 6683E207            <2>  and dx, 7
   854 00007F48 66C1E20D            <2>  shl dx, 13
   854                              <2>  %endif
   854 00007F4C 6683FA00            <2>  cmp dx, ACC_DPL_0
   854 00007F50 7507                <2>  jne %%dpl3
   854                              <2> %%dpl0:
   854 00007F52 BE10000000          <2>  mov esi, C_SEG_PROT32
   854 00007F57 EB05                <2>  jmp %%cont
   854                              <2> %%dpl3:
   854 00007F59 BE18000000          <2>  mov esi, CU_SEG_PROT32
   854                              <2> %%cont:
   854 00007F5E 668CC9              <2>  mov cx, cs
   854 00007F61 66F7C10700          <2>  test cx, 7
   854 00007F66 7509                <2>  jnz %%ring3
   854                              <2> %%ring0:
   854 00007F68 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   854 00007F6F EB07                <2>  jmp %%call
   854                              <2> %%ring3:
   854 00007F71 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   854                              <2> %%call:
   854 00007F78 E8C79DFFFF          <2>  call initIntGateProt
   854 00007F7D 6658                <2>  pop ax
   854 00007F7F 8ED8                <2>  mov ds, ax
   854 00007F81 9D                  <2>  popf
   854 00007F82 61                  <2>  popad
   854                              <1> %%test:
   854 00007F83 A1FDFF0900          <1>  %3
   854 00007F88 E902560000          <1>  jmp error
   854                              <1> %%continue:
   854                              <1>  protModeExcCheck %1, %2, %%test
   854                              <2>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   854                              <2>  %assign exc_errcode 4
   854 00007F8D 36833C2400          <2>  cmp [ss:esp], dword %2
   854 00007F92 0F85F7550000        <2>  jne error
   854                              <2>  %else
   854                              <2>  %assign exc_errcode 0
   854                              <2>  %endif
   854                              <2>  %if %4 != -1
   854                              <2>  cmp [ss:esp+exc_errcode+4], dword %4
   854                              <2>  jne error
   854                              <2>  %else
   854 00007F98 668CCB              <2>  mov bx, cs
   854 00007F9B 66F7C30700          <2>  test bx, 7
   854 00007FA0 750E                <2>  jnz %%ring3
   854                              <2>  %%ring0:
   854 00007FA2 36837C240810        <2>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   854 00007FA8 0F85E1550000        <2>  jne error
   854 00007FAE EB0C                <2>  jmp %%continue
   854                              <2>  %%ring3:
   854 00007FB0 36837C24081B        <2>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   854 00007FB6 0F85D3550000        <2>  jne error
   854                              <2>  %%continue:
   854                              <2>  %endif
   854 00007FBC 36817C2404-         <2>  cmp [ss:esp+exc_errcode], dword %3
   854 00007FC1 [837F0000]          <2>
   854 00007FC5 0F85C4550000        <2>  jne error
   854 00007FCB 83C410              <2>  add esp, 12+exc_errcode
   854                              <1>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   854 00007FCE 60                  <2>  pushad
   854 00007FCF 9C                  <2>  pushf
   854 00007FD0 668CD8              <2>  mov ax, ds
   854 00007FD3 6650                <2>  push ax
   854 00007FD5 B80D000000          <2>  mov eax, %1
   854 00007FDA BF[8FD50000]        <2>  mov edi, %2
   854                              <2>  %if %3 != -1
   854 00007FDF 66BA0000            <2>  mov dx, %3
   854                              <2>  %else
   854                              <2>  mov dx, cs
   854                              <2>  and dx, 7
   854                              <2>  shl dx, 13
   854                              <2>  %endif
   854 00007FE3 6683FA00            <2>  cmp dx, ACC_DPL_0
   854 00007FE7 7507                <2>  jne %%dpl3
   854                              <2> %%dpl0:
   854 00007FE9 BE10000000          <2>  mov esi, C_SEG_PROT32
   854 00007FEE EB05                <2>  jmp %%cont
   854                              <2> %%dpl3:
   854 00007FF0 BE18000000          <2>  mov esi, CU_SEG_PROT32
   854                              <2> %%cont:
   854 00007FF5 668CC9              <2>  mov cx, cs
   854 00007FF8 66F7C10700          <2>  test cx, 7
   854 00007FFD 7509                <2>  jnz %%ring3
   854                              <2> %%ring0:
   854 00007FFF 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   854 00008006 EB07                <2>  jmp %%call
   854                              <2> %%ring3:
   854 00008008 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   854                              <2> %%call:
   854 0000800F E8309DFFFF          <2>  call initIntGateProt
   854 00008014 6658                <2>  pop ax
   854 00008016 8ED8                <2>  mov ds, ax
   854 00008018 9D                  <2>  popf
   854 00008019 61                  <2>  popad
   855                                  	protModeFaultTest EX_GP, 0, mov [0x9fffd],eax ; check on write
   855                              <1>  setProtModeIntGate %1, %%continue
   855 0000801A 60                  <2>  pushad
   855 0000801B 9C                  <2>  pushf
   855 0000801C 668CD8              <2>  mov ax, ds
   855 0000801F 6650                <2>  push ax
   855 00008021 B80D000000          <2>  mov eax, %1
   855 00008026 BF[77800000]        <2>  mov edi, %2
   855                              <2>  %if %3 != -1
   855                              <2>  mov dx, %3
   855                              <2>  %else
   855 0000802B 668CCA              <2>  mov dx, cs
   855 0000802E 6683E207            <2>  and dx, 7
   855 00008032 66C1E20D            <2>  shl dx, 13
   855                              <2>  %endif
   855 00008036 6683FA00            <2>  cmp dx, ACC_DPL_0
   855 0000803A 7507                <2>  jne %%dpl3
   855                              <2> %%dpl0:
   855 0000803C BE10000000          <2>  mov esi, C_SEG_PROT32
   855 00008041 EB05                <2>  jmp %%cont
   855                              <2> %%dpl3:
   855 00008043 BE18000000          <2>  mov esi, CU_SEG_PROT32
   855                              <2> %%cont:
   855 00008048 668CC9              <2>  mov cx, cs
   855 0000804B 66F7C10700          <2>  test cx, 7
   855 00008050 7509                <2>  jnz %%ring3
   855                              <2> %%ring0:
   855 00008052 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   855 00008059 EB07                <2>  jmp %%call
   855                              <2> %%ring3:
   855 0000805B 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   855                              <2> %%call:
   855 00008062 E8DD9CFFFF          <2>  call initIntGateProt
   855 00008067 6658                <2>  pop ax
   855 00008069 8ED8                <2>  mov ds, ax
   855 0000806B 9D                  <2>  popf
   855 0000806C 61                  <2>  popad
   855                              <1> %%test:
   855 0000806D A3FDFF0900          <1>  %3
   855 00008072 E918550000          <1>  jmp error
   855                              <1> %%continue:
   855                              <1>  protModeExcCheck %1, %2, %%test
   855                              <2>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   855                              <2>  %assign exc_errcode 4
   855 00008077 36833C2400          <2>  cmp [ss:esp], dword %2
   855 0000807C 0F850D550000        <2>  jne error
   855                              <2>  %else
   855                              <2>  %assign exc_errcode 0
   855                              <2>  %endif
   855                              <2>  %if %4 != -1
   855                              <2>  cmp [ss:esp+exc_errcode+4], dword %4
   855                              <2>  jne error
   855                              <2>  %else
   855 00008082 668CCB              <2>  mov bx, cs
   855 00008085 66F7C30700          <2>  test bx, 7
   855 0000808A 750E                <2>  jnz %%ring3
   855                              <2>  %%ring0:
   855 0000808C 36837C240810        <2>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   855 00008092 0F85F7540000        <2>  jne error
   855 00008098 EB0C                <2>  jmp %%continue
   855                              <2>  %%ring3:
   855 0000809A 36837C24081B        <2>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   855 000080A0 0F85E9540000        <2>  jne error
   855                              <2>  %%continue:
   855                              <2>  %endif
   855 000080A6 36817C2404-         <2>  cmp [ss:esp+exc_errcode], dword %3
   855 000080AB [6D800000]          <2>
   855 000080AF 0F85DA540000        <2>  jne error
   855 000080B5 83C410              <2>  add esp, 12+exc_errcode
   855                              <1>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   855 000080B8 60                  <2>  pushad
   855 000080B9 9C                  <2>  pushf
   855 000080BA 668CD8              <2>  mov ax, ds
   855 000080BD 6650                <2>  push ax
   855 000080BF B80D000000          <2>  mov eax, %1
   855 000080C4 BF[8FD50000]        <2>  mov edi, %2
   855                              <2>  %if %3 != -1
   855 000080C9 66BA0000            <2>  mov dx, %3
   855                              <2>  %else
   855                              <2>  mov dx, cs
   855                              <2>  and dx, 7
   855                              <2>  shl dx, 13
   855                              <2>  %endif
   855 000080CD 6683FA00            <2>  cmp dx, ACC_DPL_0
   855 000080D1 7507                <2>  jne %%dpl3
   855                              <2> %%dpl0:
   855 000080D3 BE10000000          <2>  mov esi, C_SEG_PROT32
   855 000080D8 EB05                <2>  jmp %%cont
   855                              <2> %%dpl3:
   855 000080DA BE18000000          <2>  mov esi, CU_SEG_PROT32
   855                              <2> %%cont:
   855 000080DF 668CC9              <2>  mov cx, cs
   855 000080E2 66F7C10700          <2>  test cx, 7
   855 000080E7 7509                <2>  jnz %%ring3
   855                              <2> %%ring0:
   855 000080E9 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   855 000080F0 EB07                <2>  jmp %%call
   855                              <2> %%ring3:
   855 000080F2 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   855                              <2> %%call:
   855 000080F9 E8469CFFFF          <2>  call initIntGateProt
   855 000080FE 6658                <2>  pop ax
   855 00008100 8ED8                <2>  mov ds, ax
   855 00008102 9D                  <2>  popf
   855 00008103 61                  <2>  popad
   856 00008104 A1FCFF0900              	mov eax,[0x9fffc] ; this should be ok
   857 00008109 A3FCFF0900              	mov [0x9fffc],eax ; this should be ok
   858                                  	; #SS(0) If a memory operand effective address is outside the SS segment limit.
   859                                  	protModeFaultTest EX_SS, 0, mov eax,[ss:-1] ; check on read
   859                              <1>  setProtModeIntGate %1, %%continue
   859 0000810E 60                  <2>  pushad
   859 0000810F 9C                  <2>  pushf
   859 00008110 668CD8              <2>  mov ax, ds
   859 00008113 6650                <2>  push ax
   859 00008115 B80C000000          <2>  mov eax, %1
   859 0000811A BF[6C810000]        <2>  mov edi, %2
   859                              <2>  %if %3 != -1
   859                              <2>  mov dx, %3
   859                              <2>  %else
   859 0000811F 668CCA              <2>  mov dx, cs
   859 00008122 6683E207            <2>  and dx, 7
   859 00008126 66C1E20D            <2>  shl dx, 13
   859                              <2>  %endif
   859 0000812A 6683FA00            <2>  cmp dx, ACC_DPL_0
   859 0000812E 7507                <2>  jne %%dpl3
   859                              <2> %%dpl0:
   859 00008130 BE10000000          <2>  mov esi, C_SEG_PROT32
   859 00008135 EB05                <2>  jmp %%cont
   859                              <2> %%dpl3:
   859 00008137 BE18000000          <2>  mov esi, CU_SEG_PROT32
   859                              <2> %%cont:
   859 0000813C 668CC9              <2>  mov cx, cs
   859 0000813F 66F7C10700          <2>  test cx, 7
   859 00008144 7509                <2>  jnz %%ring3
   859                              <2> %%ring0:
   859 00008146 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   859 0000814D EB07                <2>  jmp %%call
   859                              <2> %%ring3:
   859 0000814F 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   859                              <2> %%call:
   859 00008156 E8E99BFFFF          <2>  call initIntGateProt
   859 0000815B 6658                <2>  pop ax
   859 0000815D 8ED8                <2>  mov ds, ax
   859 0000815F 9D                  <2>  popf
   859 00008160 61                  <2>  popad
   859                              <1> %%test:
   859 00008161 36A1FFFFFFFF        <1>  %3
   859 00008167 E923540000          <1>  jmp error
   859                              <1> %%continue:
   859                              <1>  protModeExcCheck %1, %2, %%test
   859                              <2>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   859                              <2>  %assign exc_errcode 4
   859 0000816C 36833C2400          <2>  cmp [ss:esp], dword %2
   859 00008171 0F8518540000        <2>  jne error
   859                              <2>  %else
   859                              <2>  %assign exc_errcode 0
   859                              <2>  %endif
   859                              <2>  %if %4 != -1
   859                              <2>  cmp [ss:esp+exc_errcode+4], dword %4
   859                              <2>  jne error
   859                              <2>  %else
   859 00008177 668CCB              <2>  mov bx, cs
   859 0000817A 66F7C30700          <2>  test bx, 7
   859 0000817F 750E                <2>  jnz %%ring3
   859                              <2>  %%ring0:
   859 00008181 36837C240810        <2>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   859 00008187 0F8502540000        <2>  jne error
   859 0000818D EB0C                <2>  jmp %%continue
   859                              <2>  %%ring3:
   859 0000818F 36837C24081B        <2>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   859 00008195 0F85F4530000        <2>  jne error
   859                              <2>  %%continue:
   859                              <2>  %endif
   859 0000819B 36817C2404-         <2>  cmp [ss:esp+exc_errcode], dword %3
   859 000081A0 [61810000]          <2>
   859 000081A4 0F85E5530000        <2>  jne error
   859 000081AA 83C410              <2>  add esp, 12+exc_errcode
   859                              <1>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   859 000081AD 60                  <2>  pushad
   859 000081AE 9C                  <2>  pushf
   859 000081AF 668CD8              <2>  mov ax, ds
   859 000081B2 6650                <2>  push ax
   859 000081B4 B80C000000          <2>  mov eax, %1
   859 000081B9 BF[8FD50000]        <2>  mov edi, %2
   859                              <2>  %if %3 != -1
   859 000081BE 66BA0000            <2>  mov dx, %3
   859                              <2>  %else
   859                              <2>  mov dx, cs
   859                              <2>  and dx, 7
   859                              <2>  shl dx, 13
   859                              <2>  %endif
   859 000081C2 6683FA00            <2>  cmp dx, ACC_DPL_0
   859 000081C6 7507                <2>  jne %%dpl3
   859                              <2> %%dpl0:
   859 000081C8 BE10000000          <2>  mov esi, C_SEG_PROT32
   859 000081CD EB05                <2>  jmp %%cont
   859                              <2> %%dpl3:
   859 000081CF BE18000000          <2>  mov esi, CU_SEG_PROT32
   859                              <2> %%cont:
   859 000081D4 668CC9              <2>  mov cx, cs
   859 000081D7 66F7C10700          <2>  test cx, 7
   859 000081DC 7509                <2>  jnz %%ring3
   859                              <2> %%ring0:
   859 000081DE 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   859 000081E5 EB07                <2>  jmp %%call
   859                              <2> %%ring3:
   859 000081E7 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   859                              <2> %%call:
   859 000081EE E8519BFFFF          <2>  call initIntGateProt
   859 000081F3 6658                <2>  pop ax
   859 000081F5 8ED8                <2>  mov ds, ax
   859 000081F7 9D                  <2>  popf
   859 000081F8 61                  <2>  popad
   860                                  	protModeFaultTest EX_SS, 0, mov [ss:-1],eax ; check on write
   860                              <1>  setProtModeIntGate %1, %%continue
   860 000081F9 60                  <2>  pushad
   860 000081FA 9C                  <2>  pushf
   860 000081FB 668CD8              <2>  mov ax, ds
   860 000081FE 6650                <2>  push ax
   860 00008200 B80C000000          <2>  mov eax, %1
   860 00008205 BF[57820000]        <2>  mov edi, %2
   860                              <2>  %if %3 != -1
   860                              <2>  mov dx, %3
   860                              <2>  %else
   860 0000820A 668CCA              <2>  mov dx, cs
   860 0000820D 6683E207            <2>  and dx, 7
   860 00008211 66C1E20D            <2>  shl dx, 13
   860                              <2>  %endif
   860 00008215 6683FA00            <2>  cmp dx, ACC_DPL_0
   860 00008219 7507                <2>  jne %%dpl3
   860                              <2> %%dpl0:
   860 0000821B BE10000000          <2>  mov esi, C_SEG_PROT32
   860 00008220 EB05                <2>  jmp %%cont
   860                              <2> %%dpl3:
   860 00008222 BE18000000          <2>  mov esi, CU_SEG_PROT32
   860                              <2> %%cont:
   860 00008227 668CC9              <2>  mov cx, cs
   860 0000822A 66F7C10700          <2>  test cx, 7
   860 0000822F 7509                <2>  jnz %%ring3
   860                              <2> %%ring0:
   860 00008231 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   860 00008238 EB07                <2>  jmp %%call
   860                              <2> %%ring3:
   860 0000823A 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   860                              <2> %%call:
   860 00008241 E8FE9AFFFF          <2>  call initIntGateProt
   860 00008246 6658                <2>  pop ax
   860 00008248 8ED8                <2>  mov ds, ax
   860 0000824A 9D                  <2>  popf
   860 0000824B 61                  <2>  popad
   860                              <1> %%test:
   860 0000824C 36A3FFFFFFFF        <1>  %3
   860 00008252 E938530000          <1>  jmp error
   860                              <1> %%continue:
   860                              <1>  protModeExcCheck %1, %2, %%test
   860                              <2>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   860                              <2>  %assign exc_errcode 4
   860 00008257 36833C2400          <2>  cmp [ss:esp], dword %2
   860 0000825C 0F852D530000        <2>  jne error
   860                              <2>  %else
   860                              <2>  %assign exc_errcode 0
   860                              <2>  %endif
   860                              <2>  %if %4 != -1
   860                              <2>  cmp [ss:esp+exc_errcode+4], dword %4
   860                              <2>  jne error
   860                              <2>  %else
   860 00008262 668CCB              <2>  mov bx, cs
   860 00008265 66F7C30700          <2>  test bx, 7
   860 0000826A 750E                <2>  jnz %%ring3
   860                              <2>  %%ring0:
   860 0000826C 36837C240810        <2>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   860 00008272 0F8517530000        <2>  jne error
   860 00008278 EB0C                <2>  jmp %%continue
   860                              <2>  %%ring3:
   860 0000827A 36837C24081B        <2>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   860 00008280 0F8509530000        <2>  jne error
   860                              <2>  %%continue:
   860                              <2>  %endif
   860 00008286 36817C2404-         <2>  cmp [ss:esp+exc_errcode], dword %3
   860 0000828B [4C820000]          <2>
   860 0000828F 0F85FA520000        <2>  jne error
   860 00008295 83C410              <2>  add esp, 12+exc_errcode
   860                              <1>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   860 00008298 60                  <2>  pushad
   860 00008299 9C                  <2>  pushf
   860 0000829A 668CD8              <2>  mov ax, ds
   860 0000829D 6650                <2>  push ax
   860 0000829F B80C000000          <2>  mov eax, %1
   860 000082A4 BF[8FD50000]        <2>  mov edi, %2
   860                              <2>  %if %3 != -1
   860 000082A9 66BA0000            <2>  mov dx, %3
   860                              <2>  %else
   860                              <2>  mov dx, cs
   860                              <2>  and dx, 7
   860                              <2>  shl dx, 13
   860                              <2>  %endif
   860 000082AD 6683FA00            <2>  cmp dx, ACC_DPL_0
   860 000082B1 7507                <2>  jne %%dpl3
   860                              <2> %%dpl0:
   860 000082B3 BE10000000          <2>  mov esi, C_SEG_PROT32
   860 000082B8 EB05                <2>  jmp %%cont
   860                              <2> %%dpl3:
   860 000082BA BE18000000          <2>  mov esi, CU_SEG_PROT32
   860                              <2> %%cont:
   860 000082BF 668CC9              <2>  mov cx, cs
   860 000082C2 66F7C10700          <2>  test cx, 7
   860 000082C7 7509                <2>  jnz %%ring3
   860                              <2> %%ring0:
   860 000082C9 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   860 000082D0 EB07                <2>  jmp %%call
   860                              <2> %%ring3:
   860 000082D2 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   860                              <2> %%call:
   860 000082D9 E8669AFFFF          <2>  call initIntGateProt
   860 000082DE 6658                <2>  pop ax
   860 000082E0 8ED8                <2>  mov ds, ax
   860 000082E2 9D                  <2>  popf
   860 000082E3 61                  <2>  popad
   861                                  	; #UD If the LOCK prefix is used.
   862                                  	protModeFaultTest EX_UD, 0, lock mov [0],eax
   862                              <1>  setProtModeIntGate %1, %%continue
   862 000082E4 60                  <2>  pushad
   862 000082E5 9C                  <2>  pushf
   862 000082E6 668CD8              <2>  mov ax, ds
   862 000082E9 6650                <2>  push ax
   862 000082EB B806000000          <2>  mov eax, %1
   862 000082F0 BF[42830000]        <2>  mov edi, %2
   862                              <2>  %if %3 != -1
   862                              <2>  mov dx, %3
   862                              <2>  %else
   862 000082F5 668CCA              <2>  mov dx, cs
   862 000082F8 6683E207            <2>  and dx, 7
   862 000082FC 66C1E20D            <2>  shl dx, 13
   862                              <2>  %endif
   862 00008300 6683FA00            <2>  cmp dx, ACC_DPL_0
   862 00008304 7507                <2>  jne %%dpl3
   862                              <2> %%dpl0:
   862 00008306 BE10000000          <2>  mov esi, C_SEG_PROT32
   862 0000830B EB05                <2>  jmp %%cont
   862                              <2> %%dpl3:
   862 0000830D BE18000000          <2>  mov esi, CU_SEG_PROT32
   862                              <2> %%cont:
   862 00008312 668CC9              <2>  mov cx, cs
   862 00008315 66F7C10700          <2>  test cx, 7
   862 0000831A 7509                <2>  jnz %%ring3
   862                              <2> %%ring0:
   862 0000831C 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   862 00008323 EB07                <2>  jmp %%call
   862                              <2> %%ring3:
   862 00008325 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   862                              <2> %%call:
   862 0000832C E8139AFFFF          <2>  call initIntGateProt
   862 00008331 6658                <2>  pop ax
   862 00008333 8ED8                <2>  mov ds, ax
   862 00008335 9D                  <2>  popf
   862 00008336 61                  <2>  popad
   862                              <1> %%test:
   862 00008337 F0A300000000        <1>  %3
   862          ******************  <1>  warning: instruction is not lockable [-w+lock]
   862 0000833D E94D520000          <1>  jmp error
   862                              <1> %%continue:
   862                              <1>  protModeExcCheck %1, %2, %%test
   862                              <2>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
   862                              <2>  %assign exc_errcode 4
   862                              <2>  cmp [ss:esp], dword %2
   862                              <2>  jne error
   862                              <2>  %else
   862                              <2>  %assign exc_errcode 0
   862                              <2>  %endif
   862                              <2>  %if %4 != -1
   862                              <2>  cmp [ss:esp+exc_errcode+4], dword %4
   862                              <2>  jne error
   862                              <2>  %else
   862 00008342 668CCB              <2>  mov bx, cs
   862 00008345 66F7C30700          <2>  test bx, 7
   862 0000834A 750E                <2>  jnz %%ring3
   862                              <2>  %%ring0:
   862 0000834C 36837C240410        <2>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
   862 00008352 0F8537520000        <2>  jne error
   862 00008358 EB0C                <2>  jmp %%continue
   862                              <2>  %%ring3:
   862 0000835A 36837C24041B        <2>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
   862 00008360 0F8529520000        <2>  jne error
   862                              <2>  %%continue:
   862                              <2>  %endif
   862 00008366 36813C24[37830000]  <2>  cmp [ss:esp+exc_errcode], dword %3
   862 0000836E 0F851B520000        <2>  jne error
   862 00008374 83C40C              <2>  add esp, 12+exc_errcode
   862                              <1>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
   862 00008377 60                  <2>  pushad
   862 00008378 9C                  <2>  pushf
   862 00008379 668CD8              <2>  mov ax, ds
   862 0000837C 6650                <2>  push ax
   862 0000837E B806000000          <2>  mov eax, %1
   862 00008383 BF[8FD50000]        <2>  mov edi, %2
   862                              <2>  %if %3 != -1
   862 00008388 66BA0000            <2>  mov dx, %3
   862                              <2>  %else
   862                              <2>  mov dx, cs
   862                              <2>  and dx, 7
   862                              <2>  shl dx, 13
   862                              <2>  %endif
   862 0000838C 6683FA00            <2>  cmp dx, ACC_DPL_0
   862 00008390 7507                <2>  jne %%dpl3
   862                              <2> %%dpl0:
   862 00008392 BE10000000          <2>  mov esi, C_SEG_PROT32
   862 00008397 EB05                <2>  jmp %%cont
   862                              <2> %%dpl3:
   862 00008399 BE18000000          <2>  mov esi, CU_SEG_PROT32
   862                              <2> %%cont:
   862 0000839E 668CC9              <2>  mov cx, cs
   862 000083A1 66F7C10700          <2>  test cx, 7
   862 000083A6 7509                <2>  jnz %%ring3
   862                              <2> %%ring0:
   862 000083A8 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
   862 000083AF EB07                <2>  jmp %%call
   862                              <2> %%ring3:
   862 000083B1 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
   862                              <2> %%call:
   862 000083B8 E88799FFFF          <2>  call initIntGateProt
   862 000083BD 6658                <2>  pop ax
   862 000083BF 8ED8                <2>  mov ds, ax
   862 000083C1 9D                  <2>  popf
   862 000083C2 61                  <2>  popad
   863                                  
   864 000083C3 66B81C00                	mov ax, D1_SEG_PROT
   865 000083C7 8ED8                    	mov ds, ax
   866                                  
   867                                  ;
   868                                  ;   Verify Bit Scan operations
   869                                  ;
   870                                  %include "tests/bit_m.asm"
     1                              <1> %macro testBitscan 1
     2                              <1> 	mov edx, 1
     3                              <1> 	shl edx, 31
     4                              <1> 	mov ecx, 31
     5                              <1> %%loop32:
     6                              <1> 	o32 %1  ebx, edx
     7                              <1> 	shr edx, 1
     8                              <1> 	lahf
     9                              <1> 	cmp ebx, ecx
    10                              <1> 	jne error
    11                              <1> 	sahf
    12                              <1> 	loopne %%loop32 ; if CX>0 ZF must be 0
    13                              <1> 	cmp ecx, 0
    14                              <1> 	jne error ; CX must be 0
    15                              <1> 
    16                              <1> 	mov dx, 1
    17                              <1> 	shl dx, 15
    18                              <1> 	mov cx, 15
    19                              <1> %%loop16:
    20                              <1> 	o16 %1  bx, dx
    21                              <1> 	shr dx, 1
    22                              <1> 	lahf
    23                              <1> 	cmp bx, cx
    24                              <1> 	jne error
    25                              <1> 	sahf
    26                              <1> 	loopne %%loop16 ; if CX>0 ZF must be 0
    27                              <1> 	cmp cx, 0
    28                              <1> 	jne error ; CX must be 0
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> 
    32                              <1> %macro testBittest16 1
    33                              <1> 	mov edx, 0x0000aaaa
    34                              <1> 	mov cx, 15
    35                              <1> %%loop:
    36                              <1> 	o16 %1 dx, cx
    37                              <1> 	lahf ; save CF
    38                              <1> 	test cx, 1
    39                              <1> 	jz %%zero
    40                              <1> %%one:
    41                              <1> 	sahf ; bit in CF must be 1
    42                              <1> 	jnb error
    43                              <1> 	jmp %%next
    44                              <1> %%zero:
    45                              <1> 	sahf ; bit in CF must be 0
    46                              <1> 	jb error
    47                              <1> %%next:
    48                              <1> 	dec cx
    49                              <1> 	jns %%loop
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro testBittest32 1
    53                              <1> 	mov edx, 0xaaaaaaaa
    54                              <1> 	mov ecx, 31
    55                              <1> %%loop:
    56                              <1> 	o32 %1 edx, ecx
    57                              <1> 	lahf ; save CF
    58                              <1> 	test ecx, 1
    59                              <1> 	jz %%zero
    60                              <1> %%one:
    61                              <1> 	sahf ; bit in CF must be 1
    62                              <1> 	jnb error
    63                              <1> 	jmp %%next
    64                              <1> %%zero:
    65                              <1> 	sahf ; bit in CF must be 0
    66                              <1> 	jb error
    67                              <1> %%next:
    68                              <1> 	dec ecx
    69                              <1> 	jns %%loop
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> ;
    73                              <1> ;   Executes a bit test operation and checks the resulting flags.
    74                              <1> ;
    75                              <1> ;   %1 ax: word operand
    76                              <1> ;   %2 imm8: bit index
    77                              <1> ;   %3 flags: value of flags before op execution
    78                              <1> ;   %4 flags: expected value of flags after op execution (cmp with PS_ARITH mask)
    79                              <1> ;
    80                              <1> ;   Uses: EAX, ECX, Flags
    81                              <1> ;
    82                              <1> %macro testBittestFlags 4
    83                              <1> 	testBittestWFlags bt,  %1, %2, %3, %4
    84                              <1> 	testBittestWFlags btc, %1, %2, %3, %4
    85                              <1> 	testBittestWFlags btr, %1, %2, %3, %4
    86                              <1> 	testBittestWFlags bts, %1, %2, %3, %4
    87                              <1> 
    88                              <1> 	testBittestDFlags bt,  %1, %2, %3, %4
    89                              <1> 	testBittestDFlags btc, %1, %2, %3, %4
    90                              <1> 	testBittestDFlags btr, %1, %2, %3, %4
    91                              <1> 	testBittestDFlags bts, %1, %2, %3, %4
    92                              <1> %endmacro
    93                              <1> 
    94                              <1> %macro testBittestWFlags 5
    95                              <1> 	; bt ax, imm8
    96                              <1> 	mov ax, %4
    97                              <1> 	push ax
    98                              <1> 	popf
    99                              <1> 	mov ax, %2
   100                              <1> 	o16 %1 ax, %3
   101                              <1> 	pushf
   102                              <1> 	pop ax
   103                              <1> 	and ax, PS_ARITH
   104                              <1> 	cmp ax, %5
   105                              <1> 	jne error
   106                              <1> 
   107                              <1> 	; bt ax, cx
   108                              <1> 	mov ax, %4
   109                              <1> 	push ax
   110                              <1> 	popf
   111                              <1> 	mov ax, %2
   112                              <1> 	mov cx, %3
   113                              <1> 	o16 %1 ax, cx
   114                              <1> 	pushf
   115                              <1> 	pop ax
   116                              <1> 	and ax, PS_ARITH
   117                              <1> 	cmp ax, %5
   118                              <1> 	jne error
   119                              <1> %endmacro
   120                              <1> 
   121                              <1> %macro testBittestDFlags 5
   122                              <1> 	; bt eax, imm8
   123                              <1> 	mov ax, %4
   124                              <1> 	push ax
   125                              <1> 	popf
   126                              <1> 	mov eax, %2
   127                              <1> 	o32 %1 eax, %3
   128                              <1> 	pushf
   129                              <1> 	pop ax
   130                              <1> 	and ax, PS_ARITH
   131                              <1> 	cmp ax, %5
   132                              <1> 	jne error
   133                              <1> 
   134                              <1> 	; bt eax, ecx
   135                              <1> 	mov ax, %4
   136                              <1> 	push ax
   137                              <1> 	popf
   138                              <1> 	mov eax, %2
   139                              <1> 	mov ecx, %3
   140                              <1> 	o32 %1 eax, ecx
   141                              <1> 	pushf
   142                              <1> 	pop ax
   143                              <1> 	and ax, PS_ARITH
   144                              <1> 	cmp ax, %5
   145                              <1> 	jne error
   146                              <1> %endmacro
   871                                  
   872                                  	POST 13
   872 000083C9 B013                <1>  mov al, 0x%1
   872 000083CB 66BA9001            <1>  mov dx, POST_PORT
   872 000083CF EE                  <1>  out dx, al
   873                                  	testBitscan bsf
   873 000083D0 BA01000000          <1>  mov edx, 1
   873 000083D5 C1E21F              <1>  shl edx, 31
   873 000083D8 B91F000000          <1>  mov ecx, 31
   873                              <1> %%loop32:
   873 000083DD 0FBCDA              <1>  o32 %1 ebx, edx
   873 000083E0 D1EA                <1>  shr edx, 1
   873 000083E2 9F                  <1>  lahf
   873 000083E3 39CB                <1>  cmp ebx, ecx
   873 000083E5 0F85A4510000        <1>  jne error
   873 000083EB 9E                  <1>  sahf
   873 000083EC E0EF                <1>  loopne %%loop32
   873 000083EE 83F900              <1>  cmp ecx, 0
   873 000083F1 0F8598510000        <1>  jne error
   873                              <1> 
   873 000083F7 66BA0100            <1>  mov dx, 1
   873 000083FB 66C1E20F            <1>  shl dx, 15
   873 000083FF 66B90F00            <1>  mov cx, 15
   873                              <1> %%loop16:
   873 00008403 660FBCDA            <1>  o16 %1 bx, dx
   873 00008407 66D1EA              <1>  shr dx, 1
   873 0000840A 9F                  <1>  lahf
   873 0000840B 6639CB              <1>  cmp bx, cx
   873 0000840E 0F857B510000        <1>  jne error
   873 00008414 9E                  <1>  sahf
   873 00008415 E0EC                <1>  loopne %%loop16
   873 00008417 6683F900            <1>  cmp cx, 0
   873 0000841B 0F856E510000        <1>  jne error
   874                                  	testBitscan bsr
   874 00008421 BA01000000          <1>  mov edx, 1
   874 00008426 C1E21F              <1>  shl edx, 31
   874 00008429 B91F000000          <1>  mov ecx, 31
   874                              <1> %%loop32:
   874 0000842E 0FBDDA              <1>  o32 %1 ebx, edx
   874 00008431 D1EA                <1>  shr edx, 1
   874 00008433 9F                  <1>  lahf
   874 00008434 39CB                <1>  cmp ebx, ecx
   874 00008436 0F8553510000        <1>  jne error
   874 0000843C 9E                  <1>  sahf
   874 0000843D E0EF                <1>  loopne %%loop32
   874 0000843F 83F900              <1>  cmp ecx, 0
   874 00008442 0F8547510000        <1>  jne error
   874                              <1> 
   874 00008448 66BA0100            <1>  mov dx, 1
   874 0000844C 66C1E20F            <1>  shl dx, 15
   874 00008450 66B90F00            <1>  mov cx, 15
   874                              <1> %%loop16:
   874 00008454 660FBDDA            <1>  o16 %1 bx, dx
   874 00008458 66D1EA              <1>  shr dx, 1
   874 0000845B 9F                  <1>  lahf
   874 0000845C 6639CB              <1>  cmp bx, cx
   874 0000845F 0F852A510000        <1>  jne error
   874 00008465 9E                  <1>  sahf
   874 00008466 E0EC                <1>  loopne %%loop16
   874 00008468 6683F900            <1>  cmp cx, 0
   874 0000846C 0F851D510000        <1>  jne error
   875                                  
   876                                  ;
   877                                  ;   Verify Bit Test operations
   878                                  ;
   879                                  	POST 14
   879 00008472 B014                <1>  mov al, 0x%1
   879 00008474 66BA9001            <1>  mov dx, POST_PORT
   879 00008478 EE                  <1>  out dx, al
   880                                  	testBittest16 bt
   880 00008479 BAAAAA0000          <1>  mov edx, 0x0000aaaa
   880 0000847E 66B90F00            <1>  mov cx, 15
   880                              <1> %%loop:
   880 00008482 660FA3CA            <1>  o16 %1 dx, cx
   880 00008486 9F                  <1>  lahf
   880 00008487 66F7C10100          <1>  test cx, 1
   880 0000848C 7409                <1>  jz %%zero
   880                              <1> %%one:
   880 0000848E 9E                  <1>  sahf
   880 0000848F 0F83FA500000        <1>  jnb error
   880 00008495 EB07                <1>  jmp %%next
   880                              <1> %%zero:
   880 00008497 9E                  <1>  sahf
   880 00008498 0F82F1500000        <1>  jb error
   880                              <1> %%next:
   880 0000849E 6649                <1>  dec cx
   880 000084A0 79E0                <1>  jns %%loop
   881                                  	testBittest16 btc
   881 000084A2 BAAAAA0000          <1>  mov edx, 0x0000aaaa
   881 000084A7 66B90F00            <1>  mov cx, 15
   881                              <1> %%loop:
   881 000084AB 660FBBCA            <1>  o16 %1 dx, cx
   881 000084AF 9F                  <1>  lahf
   881 000084B0 66F7C10100          <1>  test cx, 1
   881 000084B5 7409                <1>  jz %%zero
   881                              <1> %%one:
   881 000084B7 9E                  <1>  sahf
   881 000084B8 0F83D1500000        <1>  jnb error
   881 000084BE EB07                <1>  jmp %%next
   881                              <1> %%zero:
   881 000084C0 9E                  <1>  sahf
   881 000084C1 0F82C8500000        <1>  jb error
   881                              <1> %%next:
   881 000084C7 6649                <1>  dec cx
   881 000084C9 79E0                <1>  jns %%loop
   882 000084CB 81FA55550000            	cmp edx, 0x00005555
   883 000084D1 0F85B8500000            	jne error
   884                                  	testBittest16 btr
   884 000084D7 BAAAAA0000          <1>  mov edx, 0x0000aaaa
   884 000084DC 66B90F00            <1>  mov cx, 15
   884                              <1> %%loop:
   884 000084E0 660FB3CA            <1>  o16 %1 dx, cx
   884 000084E4 9F                  <1>  lahf
   884 000084E5 66F7C10100          <1>  test cx, 1
   884 000084EA 7409                <1>  jz %%zero
   884                              <1> %%one:
   884 000084EC 9E                  <1>  sahf
   884 000084ED 0F839C500000        <1>  jnb error
   884 000084F3 EB07                <1>  jmp %%next
   884                              <1> %%zero:
   884 000084F5 9E                  <1>  sahf
   884 000084F6 0F8293500000        <1>  jb error
   884                              <1> %%next:
   884 000084FC 6649                <1>  dec cx
   884 000084FE 79E0                <1>  jns %%loop
   885 00008500 83FA00                  	cmp edx, 0
   886 00008503 0F8586500000            	jne error
   887                                  	testBittest16 bts
   887 00008509 BAAAAA0000          <1>  mov edx, 0x0000aaaa
   887 0000850E 66B90F00            <1>  mov cx, 15
   887                              <1> %%loop:
   887 00008512 660FABCA            <1>  o16 %1 dx, cx
   887 00008516 9F                  <1>  lahf
   887 00008517 66F7C10100          <1>  test cx, 1
   887 0000851C 7409                <1>  jz %%zero
   887                              <1> %%one:
   887 0000851E 9E                  <1>  sahf
   887 0000851F 0F836A500000        <1>  jnb error
   887 00008525 EB07                <1>  jmp %%next
   887                              <1> %%zero:
   887 00008527 9E                  <1>  sahf
   887 00008528 0F8261500000        <1>  jb error
   887                              <1> %%next:
   887 0000852E 6649                <1>  dec cx
   887 00008530 79E0                <1>  jns %%loop
   888 00008532 81FAFFFF0000            	cmp edx, 0x0000ffff
   889 00008538 0F8551500000            	jne error
   890                                  
   891                                  	testBittest32 bt
   891 0000853E BAAAAAAAAA          <1>  mov edx, 0xaaaaaaaa
   891 00008543 B91F000000          <1>  mov ecx, 31
   891                              <1> %%loop:
   891 00008548 0FA3CA              <1>  o32 %1 edx, ecx
   891 0000854B 9F                  <1>  lahf
   891 0000854C F7C101000000        <1>  test ecx, 1
   891 00008552 7409                <1>  jz %%zero
   891                              <1> %%one:
   891 00008554 9E                  <1>  sahf
   891 00008555 0F8334500000        <1>  jnb error
   891 0000855B EB07                <1>  jmp %%next
   891                              <1> %%zero:
   891 0000855D 9E                  <1>  sahf
   891 0000855E 0F822B500000        <1>  jb error
   891                              <1> %%next:
   891 00008564 49                  <1>  dec ecx
   891 00008565 79E1                <1>  jns %%loop
   892                                  	testBittest32 btc
   892 00008567 BAAAAAAAAA          <1>  mov edx, 0xaaaaaaaa
   892 0000856C B91F000000          <1>  mov ecx, 31
   892                              <1> %%loop:
   892 00008571 0FBBCA              <1>  o32 %1 edx, ecx
   892 00008574 9F                  <1>  lahf
   892 00008575 F7C101000000        <1>  test ecx, 1
   892 0000857B 7409                <1>  jz %%zero
   892                              <1> %%one:
   892 0000857D 9E                  <1>  sahf
   892 0000857E 0F830B500000        <1>  jnb error
   892 00008584 EB07                <1>  jmp %%next
   892                              <1> %%zero:
   892 00008586 9E                  <1>  sahf
   892 00008587 0F8202500000        <1>  jb error
   892                              <1> %%next:
   892 0000858D 49                  <1>  dec ecx
   892 0000858E 79E1                <1>  jns %%loop
   893 00008590 81FA55555555            	cmp edx, 0x55555555
   894 00008596 0F85F34F0000            	jne error
   895                                  	testBittest32 btr
   895 0000859C BAAAAAAAAA          <1>  mov edx, 0xaaaaaaaa
   895 000085A1 B91F000000          <1>  mov ecx, 31
   895                              <1> %%loop:
   895 000085A6 0FB3CA              <1>  o32 %1 edx, ecx
   895 000085A9 9F                  <1>  lahf
   895 000085AA F7C101000000        <1>  test ecx, 1
   895 000085B0 7409                <1>  jz %%zero
   895                              <1> %%one:
   895 000085B2 9E                  <1>  sahf
   895 000085B3 0F83D64F0000        <1>  jnb error
   895 000085B9 EB07                <1>  jmp %%next
   895                              <1> %%zero:
   895 000085BB 9E                  <1>  sahf
   895 000085BC 0F82CD4F0000        <1>  jb error
   895                              <1> %%next:
   895 000085C2 49                  <1>  dec ecx
   895 000085C3 79E1                <1>  jns %%loop
   896 000085C5 83FA00                  	cmp edx, 0
   897 000085C8 0F85C14F0000            	jne error
   898                                  	testBittest32 bts
   898 000085CE BAAAAAAAAA          <1>  mov edx, 0xaaaaaaaa
   898 000085D3 B91F000000          <1>  mov ecx, 31
   898                              <1> %%loop:
   898 000085D8 0FABCA              <1>  o32 %1 edx, ecx
   898 000085DB 9F                  <1>  lahf
   898 000085DC F7C101000000        <1>  test ecx, 1
   898 000085E2 7409                <1>  jz %%zero
   898                              <1> %%one:
   898 000085E4 9E                  <1>  sahf
   898 000085E5 0F83A44F0000        <1>  jnb error
   898 000085EB EB07                <1>  jmp %%next
   898                              <1> %%zero:
   898 000085ED 9E                  <1>  sahf
   898 000085EE 0F829B4F0000        <1>  jb error
   898                              <1> %%next:
   898 000085F4 49                  <1>  dec ecx
   898 000085F5 79E1                <1>  jns %%loop
   899 000085F7 83FAFF                  	cmp edx, 0xffffffff
   900 000085FA 0F858F4F0000            	jne error
   901                                  
   902                                  ;
   903                                  ;   SETcc - Byte set on condition
   904                                  ;
   905                                  %include "tests/setcc_m.asm"
     1                              <1> ;
     2                              <1> ; Tests byte set on condition
     3                              <1> ; %1 destination operand of setcc op
     4                              <1> ; Needs the stack
     5                              <1> ; Uses: AX, Flags
     6                              <1> ;
     7                              <1> ; Opcodes tested:
     8                              <1> ; opcode mnemonic condition
     9                              <1> ; OF90   SETO     OF=1
    10                              <1> ; OF91   SETNO    OF=O
    11                              <1> ; OF92   SETC     CF=1
    12                              <1> ; OF93   SETNC    CF=O
    13                              <1> ; OF94   SETZ     ZF=1
    14                              <1> ; OF95   SETNZ    ZF=O
    15                              <1> ; OF96   SETBE    CF=1 || ZF=1
    16                              <1> ; OF97   SETA     CF=O && ZF=O
    17                              <1> ; OF98   SETS     SF=1
    18                              <1> ; OF99   SETNS    SF=O
    19                              <1> ; OF9A   SETP     PF=1
    20                              <1> ; OF9B   SETNP    PF=0
    21                              <1> ; OF9C   SETL     SF!=OF
    22                              <1> ; OF9D   SETNL    SF=OF
    23                              <1> ; OF9E   SETLE    ZF=1 || SF!=OF
    24                              <1> ; OF9F   SETNLE   ZF=O && SF=OF
    25                              <1> ;
    26                              <1> %macro SETcc 3
    27                              <1> 	%1 %2
    28                              <1> 	pushf
    29                              <1> 	cmp %2, %3
    30                              <1> 	jne error
    31                              <1> 	popf
    32                              <1> %endmacro
    33                              <1> 
    34                              <1> %macro testSetcc 1
    35                              <1> 	mov    ah, PS_CF|PS_ZF|PS_SF|PS_PF
    36                              <1> 	sahf
    37                              <1> 	SETcc  setc, %1,1  ; OF92   SETC     CF=1
    38                              <1> 	SETcc  setnc,%1,0  ; OF93   SETNC    CF=O
    39                              <1> 	SETcc  setz, %1,1  ; OF94   SETZ     ZF=1
    40                              <1> 	SETcc  setnz,%1,0  ; OF95   SETNZ    ZF=O
    41                              <1> 	SETcc  sets, %1,1  ; OF98   SETS     SF=1
    42                              <1> 	SETcc  setns,%1,0  ; OF99   SETNS    SF=O
    43                              <1> 	SETcc  setp, %1,1  ; OF9A   SETP     PF=1
    44                              <1> 	SETcc  setnp,%1,0  ; OF9B   SETNP    PF=0
    45                              <1> 	SETcc  setbe,%1,1  ; OF96   SETBE    CF=1 || ZF=1
    46                              <1> 	SETcc  seta, %1,0  ; OF97   SETA     CF=O && ZF=O
    47                              <1> 
    48                              <1> 	mov    ax, 0
    49                              <1> 	sahf
    50                              <1> 	SETcc  setc, %1,0  ; OF92   SETC     CF=1
    51                              <1> 	SETcc  setnc,%1,1  ; OF93   SETNC    CF=O
    52                              <1> 	SETcc  setz, %1,0  ; OF94   SETZ     ZF=1
    53                              <1> 	SETcc  setnz,%1,1  ; OF95   SETNZ    ZF=O
    54                              <1> 	SETcc  sets, %1,0  ; OF98   SETS     SF=1
    55                              <1> 	SETcc  setns,%1,1  ; OF99   SETNS    SF=O
    56                              <1> 	SETcc  setp, %1,0  ; OF9A   SETP     PF=1
    57                              <1> 	SETcc  setnp,%1,1  ; OF9B   SETNP    PF=0
    58                              <1> 	SETcc  setbe,%1,0  ; OF96   SETBE    CF=1 || ZF=1
    59                              <1> 	SETcc  seta, %1,1  ; OF97   SETA     CF=O && ZF=O
    60                              <1> 
    61                              <1> 	mov   al, 1000000b
    62                              <1> 	shl   al, 1          ; OF = high-order bit of AL <> (CF), ZF=0,SF=1,OF=1
    63                              <1> 	SETcc seto,   %1, 1  ; OF90   SETO     OF=1
    64                              <1> 	SETcc setno,  %1, 0  ; OF91   SETNO    OF=O
    65                              <1> 	SETcc setl,   %1, 0  ; OF9C   SETL     SF!=OF
    66                              <1> 	SETcc setnl,  %1, 1  ; OF9D   SETNL    SF=OF
    67                              <1> 	SETcc setle,  %1, 0  ; OF9E   SETLE    ZF=1 || SF!=OF
    68                              <1> 	SETcc setnle, %1, 1  ; OF9F   SETNLE   ZF=O && SF=OF
    69                              <1> 
    70                              <1> 	mov ah, PS_ZF
    71                              <1> 	sahf                 ; ZF=1,SF=0,OF=1
    72                              <1> 	SETcc setl,   %1, 1  ; OF9C   SETL     SF!=OF
    73                              <1> 	SETcc setnl,  %1, 0  ; OF9D   SETNL    SF=OF
    74                              <1> 	SETcc setle,  %1, 1  ; OF9E   SETLE    ZF=1 || SF!=OF
    75                              <1> 	SETcc setnle, %1, 0  ; OF9F   SETNLE   ZF=O && SF=OF
    76                              <1> %endmacro
   906                                  
   907                                  	POST 15
   907 00008600 B015                <1>  mov al, 0x%1
   907 00008602 66BA9001            <1>  mov dx, POST_PORT
   907 00008606 EE                  <1>  out dx, al
   908                                  	testSetcc bl
   908 00008607 B4C5                <1>  mov ah, PS_CF|PS_ZF|PS_SF|PS_PF
   908 00008609 9E                  <1>  sahf
   908                              <1>  SETcc setc, %1,1
   908 0000860A 0F92C3              <2>  %1 %2
   908 0000860D 9C                  <2>  pushf
   908 0000860E 80FB01              <2>  cmp %2, %3
   908 00008611 0F85784F0000        <2>  jne error
   908 00008617 9D                  <2>  popf
   908                              <1>  SETcc setnc,%1,0
   908 00008618 0F93C3              <2>  %1 %2
   908 0000861B 9C                  <2>  pushf
   908 0000861C 80FB00              <2>  cmp %2, %3
   908 0000861F 0F856A4F0000        <2>  jne error
   908 00008625 9D                  <2>  popf
   908                              <1>  SETcc setz, %1,1
   908 00008626 0F94C3              <2>  %1 %2
   908 00008629 9C                  <2>  pushf
   908 0000862A 80FB01              <2>  cmp %2, %3
   908 0000862D 0F855C4F0000        <2>  jne error
   908 00008633 9D                  <2>  popf
   908                              <1>  SETcc setnz,%1,0
   908 00008634 0F95C3              <2>  %1 %2
   908 00008637 9C                  <2>  pushf
   908 00008638 80FB00              <2>  cmp %2, %3
   908 0000863B 0F854E4F0000        <2>  jne error
   908 00008641 9D                  <2>  popf
   908                              <1>  SETcc sets, %1,1
   908 00008642 0F98C3              <2>  %1 %2
   908 00008645 9C                  <2>  pushf
   908 00008646 80FB01              <2>  cmp %2, %3
   908 00008649 0F85404F0000        <2>  jne error
   908 0000864F 9D                  <2>  popf
   908                              <1>  SETcc setns,%1,0
   908 00008650 0F99C3              <2>  %1 %2
   908 00008653 9C                  <2>  pushf
   908 00008654 80FB00              <2>  cmp %2, %3
   908 00008657 0F85324F0000        <2>  jne error
   908 0000865D 9D                  <2>  popf
   908                              <1>  SETcc setp, %1,1
   908 0000865E 0F9AC3              <2>  %1 %2
   908 00008661 9C                  <2>  pushf
   908 00008662 80FB01              <2>  cmp %2, %3
   908 00008665 0F85244F0000        <2>  jne error
   908 0000866B 9D                  <2>  popf
   908                              <1>  SETcc setnp,%1,0
   908 0000866C 0F9BC3              <2>  %1 %2
   908 0000866F 9C                  <2>  pushf
   908 00008670 80FB00              <2>  cmp %2, %3
   908 00008673 0F85164F0000        <2>  jne error
   908 00008679 9D                  <2>  popf
   908                              <1>  SETcc setbe,%1,1
   908 0000867A 0F96C3              <2>  %1 %2
   908 0000867D 9C                  <2>  pushf
   908 0000867E 80FB01              <2>  cmp %2, %3
   908 00008681 0F85084F0000        <2>  jne error
   908 00008687 9D                  <2>  popf
   908                              <1>  SETcc seta, %1,0
   908 00008688 0F97C3              <2>  %1 %2
   908 0000868B 9C                  <2>  pushf
   908 0000868C 80FB00              <2>  cmp %2, %3
   908 0000868F 0F85FA4E0000        <2>  jne error
   908 00008695 9D                  <2>  popf
   908                              <1> 
   908 00008696 66B80000            <1>  mov ax, 0
   908 0000869A 9E                  <1>  sahf
   908                              <1>  SETcc setc, %1,0
   908 0000869B 0F92C3              <2>  %1 %2
   908 0000869E 9C                  <2>  pushf
   908 0000869F 80FB00              <2>  cmp %2, %3
   908 000086A2 0F85E74E0000        <2>  jne error
   908 000086A8 9D                  <2>  popf
   908                              <1>  SETcc setnc,%1,1
   908 000086A9 0F93C3              <2>  %1 %2
   908 000086AC 9C                  <2>  pushf
   908 000086AD 80FB01              <2>  cmp %2, %3
   908 000086B0 0F85D94E0000        <2>  jne error
   908 000086B6 9D                  <2>  popf
   908                              <1>  SETcc setz, %1,0
   908 000086B7 0F94C3              <2>  %1 %2
   908 000086BA 9C                  <2>  pushf
   908 000086BB 80FB00              <2>  cmp %2, %3
   908 000086BE 0F85CB4E0000        <2>  jne error
   908 000086C4 9D                  <2>  popf
   908                              <1>  SETcc setnz,%1,1
   908 000086C5 0F95C3              <2>  %1 %2
   908 000086C8 9C                  <2>  pushf
   908 000086C9 80FB01              <2>  cmp %2, %3
   908 000086CC 0F85BD4E0000        <2>  jne error
   908 000086D2 9D                  <2>  popf
   908                              <1>  SETcc sets, %1,0
   908 000086D3 0F98C3              <2>  %1 %2
   908 000086D6 9C                  <2>  pushf
   908 000086D7 80FB00              <2>  cmp %2, %3
   908 000086DA 0F85AF4E0000        <2>  jne error
   908 000086E0 9D                  <2>  popf
   908                              <1>  SETcc setns,%1,1
   908 000086E1 0F99C3              <2>  %1 %2
   908 000086E4 9C                  <2>  pushf
   908 000086E5 80FB01              <2>  cmp %2, %3
   908 000086E8 0F85A14E0000        <2>  jne error
   908 000086EE 9D                  <2>  popf
   908                              <1>  SETcc setp, %1,0
   908 000086EF 0F9AC3              <2>  %1 %2
   908 000086F2 9C                  <2>  pushf
   908 000086F3 80FB00              <2>  cmp %2, %3
   908 000086F6 0F85934E0000        <2>  jne error
   908 000086FC 9D                  <2>  popf
   908                              <1>  SETcc setnp,%1,1
   908 000086FD 0F9BC3              <2>  %1 %2
   908 00008700 9C                  <2>  pushf
   908 00008701 80FB01              <2>  cmp %2, %3
   908 00008704 0F85854E0000        <2>  jne error
   908 0000870A 9D                  <2>  popf
   908                              <1>  SETcc setbe,%1,0
   908 0000870B 0F96C3              <2>  %1 %2
   908 0000870E 9C                  <2>  pushf
   908 0000870F 80FB00              <2>  cmp %2, %3
   908 00008712 0F85774E0000        <2>  jne error
   908 00008718 9D                  <2>  popf
   908                              <1>  SETcc seta, %1,1
   908 00008719 0F97C3              <2>  %1 %2
   908 0000871C 9C                  <2>  pushf
   908 0000871D 80FB01              <2>  cmp %2, %3
   908 00008720 0F85694E0000        <2>  jne error
   908 00008726 9D                  <2>  popf
   908                              <1> 
   908 00008727 B040                <1>  mov al, 1000000b
   908 00008729 D0E0                <1>  shl al, 1
   908                              <1>  SETcc seto, %1, 1
   908 0000872B 0F90C3              <2>  %1 %2
   908 0000872E 9C                  <2>  pushf
   908 0000872F 80FB01              <2>  cmp %2, %3
   908 00008732 0F85574E0000        <2>  jne error
   908 00008738 9D                  <2>  popf
   908                              <1>  SETcc setno, %1, 0
   908 00008739 0F91C3              <2>  %1 %2
   908 0000873C 9C                  <2>  pushf
   908 0000873D 80FB00              <2>  cmp %2, %3
   908 00008740 0F85494E0000        <2>  jne error
   908 00008746 9D                  <2>  popf
   908                              <1>  SETcc setl, %1, 0
   908 00008747 0F9CC3              <2>  %1 %2
   908 0000874A 9C                  <2>  pushf
   908 0000874B 80FB00              <2>  cmp %2, %3
   908 0000874E 0F853B4E0000        <2>  jne error
   908 00008754 9D                  <2>  popf
   908                              <1>  SETcc setnl, %1, 1
   908 00008755 0F9DC3              <2>  %1 %2
   908 00008758 9C                  <2>  pushf
   908 00008759 80FB01              <2>  cmp %2, %3
   908 0000875C 0F852D4E0000        <2>  jne error
   908 00008762 9D                  <2>  popf
   908                              <1>  SETcc setle, %1, 0
   908 00008763 0F9EC3              <2>  %1 %2
   908 00008766 9C                  <2>  pushf
   908 00008767 80FB00              <2>  cmp %2, %3
   908 0000876A 0F851F4E0000        <2>  jne error
   908 00008770 9D                  <2>  popf
   908                              <1>  SETcc setnle, %1, 1
   908 00008771 0F9FC3              <2>  %1 %2
   908 00008774 9C                  <2>  pushf
   908 00008775 80FB01              <2>  cmp %2, %3
   908 00008778 0F85114E0000        <2>  jne error
   908 0000877E 9D                  <2>  popf
   908                              <1> 
   908 0000877F B440                <1>  mov ah, PS_ZF
   908 00008781 9E                  <1>  sahf
   908                              <1>  SETcc setl, %1, 1
   908 00008782 0F9CC3              <2>  %1 %2
   908 00008785 9C                  <2>  pushf
   908 00008786 80FB01              <2>  cmp %2, %3
   908 00008789 0F85004E0000        <2>  jne error
   908 0000878F 9D                  <2>  popf
   908                              <1>  SETcc setnl, %1, 0
   908 00008790 0F9DC3              <2>  %1 %2
   908 00008793 9C                  <2>  pushf
   908 00008794 80FB00              <2>  cmp %2, %3
   908 00008797 0F85F24D0000        <2>  jne error
   908 0000879D 9D                  <2>  popf
   908                              <1>  SETcc setle, %1, 1
   908 0000879E 0F9EC3              <2>  %1 %2
   908 000087A1 9C                  <2>  pushf
   908 000087A2 80FB01              <2>  cmp %2, %3
   908 000087A5 0F85E44D0000        <2>  jne error
   908 000087AB 9D                  <2>  popf
   908                              <1>  SETcc setnle, %1, 0
   908 000087AC 0F9FC3              <2>  %1 %2
   908 000087AF 9C                  <2>  pushf
   908 000087B0 80FB00              <2>  cmp %2, %3
   908 000087B3 0F85D64D0000        <2>  jne error
   908 000087B9 9D                  <2>  popf
   909                                  	testSetcc byte [0x10000]
   909 000087BA B4C5                <1>  mov ah, PS_CF|PS_ZF|PS_SF|PS_PF
   909 000087BC 9E                  <1>  sahf
   909                              <1>  SETcc setc, %1,1
   909 000087BD 0F920500000100      <2>  %1 %2
   909 000087C4 9C                  <2>  pushf
   909 000087C5 803D0000010001      <2>  cmp %2, %3
   909 000087CC 0F85BD4D0000        <2>  jne error
   909 000087D2 9D                  <2>  popf
   909                              <1>  SETcc setnc,%1,0
   909 000087D3 0F930500000100      <2>  %1 %2
   909 000087DA 9C                  <2>  pushf
   909 000087DB 803D0000010000      <2>  cmp %2, %3
   909 000087E2 0F85A74D0000        <2>  jne error
   909 000087E8 9D                  <2>  popf
   909                              <1>  SETcc setz, %1,1
   909 000087E9 0F940500000100      <2>  %1 %2
   909 000087F0 9C                  <2>  pushf
   909 000087F1 803D0000010001      <2>  cmp %2, %3
   909 000087F8 0F85914D0000        <2>  jne error
   909 000087FE 9D                  <2>  popf
   909                              <1>  SETcc setnz,%1,0
   909 000087FF 0F950500000100      <2>  %1 %2
   909 00008806 9C                  <2>  pushf
   909 00008807 803D0000010000      <2>  cmp %2, %3
   909 0000880E 0F857B4D0000        <2>  jne error
   909 00008814 9D                  <2>  popf
   909                              <1>  SETcc sets, %1,1
   909 00008815 0F980500000100      <2>  %1 %2
   909 0000881C 9C                  <2>  pushf
   909 0000881D 803D0000010001      <2>  cmp %2, %3
   909 00008824 0F85654D0000        <2>  jne error
   909 0000882A 9D                  <2>  popf
   909                              <1>  SETcc setns,%1,0
   909 0000882B 0F990500000100      <2>  %1 %2
   909 00008832 9C                  <2>  pushf
   909 00008833 803D0000010000      <2>  cmp %2, %3
   909 0000883A 0F854F4D0000        <2>  jne error
   909 00008840 9D                  <2>  popf
   909                              <1>  SETcc setp, %1,1
   909 00008841 0F9A0500000100      <2>  %1 %2
   909 00008848 9C                  <2>  pushf
   909 00008849 803D0000010001      <2>  cmp %2, %3
   909 00008850 0F85394D0000        <2>  jne error
   909 00008856 9D                  <2>  popf
   909                              <1>  SETcc setnp,%1,0
   909 00008857 0F9B0500000100      <2>  %1 %2
   909 0000885E 9C                  <2>  pushf
   909 0000885F 803D0000010000      <2>  cmp %2, %3
   909 00008866 0F85234D0000        <2>  jne error
   909 0000886C 9D                  <2>  popf
   909                              <1>  SETcc setbe,%1,1
   909 0000886D 0F960500000100      <2>  %1 %2
   909 00008874 9C                  <2>  pushf
   909 00008875 803D0000010001      <2>  cmp %2, %3
   909 0000887C 0F850D4D0000        <2>  jne error
   909 00008882 9D                  <2>  popf
   909                              <1>  SETcc seta, %1,0
   909 00008883 0F970500000100      <2>  %1 %2
   909 0000888A 9C                  <2>  pushf
   909 0000888B 803D0000010000      <2>  cmp %2, %3
   909 00008892 0F85F74C0000        <2>  jne error
   909 00008898 9D                  <2>  popf
   909                              <1> 
   909 00008899 66B80000            <1>  mov ax, 0
   909 0000889D 9E                  <1>  sahf
   909                              <1>  SETcc setc, %1,0
   909 0000889E 0F920500000100      <2>  %1 %2
   909 000088A5 9C                  <2>  pushf
   909 000088A6 803D0000010000      <2>  cmp %2, %3
   909 000088AD 0F85DC4C0000        <2>  jne error
   909 000088B3 9D                  <2>  popf
   909                              <1>  SETcc setnc,%1,1
   909 000088B4 0F930500000100      <2>  %1 %2
   909 000088BB 9C                  <2>  pushf
   909 000088BC 803D0000010001      <2>  cmp %2, %3
   909 000088C3 0F85C64C0000        <2>  jne error
   909 000088C9 9D                  <2>  popf
   909                              <1>  SETcc setz, %1,0
   909 000088CA 0F940500000100      <2>  %1 %2
   909 000088D1 9C                  <2>  pushf
   909 000088D2 803D0000010000      <2>  cmp %2, %3
   909 000088D9 0F85B04C0000        <2>  jne error
   909 000088DF 9D                  <2>  popf
   909                              <1>  SETcc setnz,%1,1
   909 000088E0 0F950500000100      <2>  %1 %2
   909 000088E7 9C                  <2>  pushf
   909 000088E8 803D0000010001      <2>  cmp %2, %3
   909 000088EF 0F859A4C0000        <2>  jne error
   909 000088F5 9D                  <2>  popf
   909                              <1>  SETcc sets, %1,0
   909 000088F6 0F980500000100      <2>  %1 %2
   909 000088FD 9C                  <2>  pushf
   909 000088FE 803D0000010000      <2>  cmp %2, %3
   909 00008905 0F85844C0000        <2>  jne error
   909 0000890B 9D                  <2>  popf
   909                              <1>  SETcc setns,%1,1
   909 0000890C 0F990500000100      <2>  %1 %2
   909 00008913 9C                  <2>  pushf
   909 00008914 803D0000010001      <2>  cmp %2, %3
   909 0000891B 0F856E4C0000        <2>  jne error
   909 00008921 9D                  <2>  popf
   909                              <1>  SETcc setp, %1,0
   909 00008922 0F9A0500000100      <2>  %1 %2
   909 00008929 9C                  <2>  pushf
   909 0000892A 803D0000010000      <2>  cmp %2, %3
   909 00008931 0F85584C0000        <2>  jne error
   909 00008937 9D                  <2>  popf
   909                              <1>  SETcc setnp,%1,1
   909 00008938 0F9B0500000100      <2>  %1 %2
   909 0000893F 9C                  <2>  pushf
   909 00008940 803D0000010001      <2>  cmp %2, %3
   909 00008947 0F85424C0000        <2>  jne error
   909 0000894D 9D                  <2>  popf
   909                              <1>  SETcc setbe,%1,0
   909 0000894E 0F960500000100      <2>  %1 %2
   909 00008955 9C                  <2>  pushf
   909 00008956 803D0000010000      <2>  cmp %2, %3
   909 0000895D 0F852C4C0000        <2>  jne error
   909 00008963 9D                  <2>  popf
   909                              <1>  SETcc seta, %1,1
   909 00008964 0F970500000100      <2>  %1 %2
   909 0000896B 9C                  <2>  pushf
   909 0000896C 803D0000010001      <2>  cmp %2, %3
   909 00008973 0F85164C0000        <2>  jne error
   909 00008979 9D                  <2>  popf
   909                              <1> 
   909 0000897A B040                <1>  mov al, 1000000b
   909 0000897C D0E0                <1>  shl al, 1
   909                              <1>  SETcc seto, %1, 1
   909 0000897E 0F900500000100      <2>  %1 %2
   909 00008985 9C                  <2>  pushf
   909 00008986 803D0000010001      <2>  cmp %2, %3
   909 0000898D 0F85FC4B0000        <2>  jne error
   909 00008993 9D                  <2>  popf
   909                              <1>  SETcc setno, %1, 0
   909 00008994 0F910500000100      <2>  %1 %2
   909 0000899B 9C                  <2>  pushf
   909 0000899C 803D0000010000      <2>  cmp %2, %3
   909 000089A3 0F85E64B0000        <2>  jne error
   909 000089A9 9D                  <2>  popf
   909                              <1>  SETcc setl, %1, 0
   909 000089AA 0F9C0500000100      <2>  %1 %2
   909 000089B1 9C                  <2>  pushf
   909 000089B2 803D0000010000      <2>  cmp %2, %3
   909 000089B9 0F85D04B0000        <2>  jne error
   909 000089BF 9D                  <2>  popf
   909                              <1>  SETcc setnl, %1, 1
   909 000089C0 0F9D0500000100      <2>  %1 %2
   909 000089C7 9C                  <2>  pushf
   909 000089C8 803D0000010001      <2>  cmp %2, %3
   909 000089CF 0F85BA4B0000        <2>  jne error
   909 000089D5 9D                  <2>  popf
   909                              <1>  SETcc setle, %1, 0
   909 000089D6 0F9E0500000100      <2>  %1 %2
   909 000089DD 9C                  <2>  pushf
   909 000089DE 803D0000010000      <2>  cmp %2, %3
   909 000089E5 0F85A44B0000        <2>  jne error
   909 000089EB 9D                  <2>  popf
   909                              <1>  SETcc setnle, %1, 1
   909 000089EC 0F9F0500000100      <2>  %1 %2
   909 000089F3 9C                  <2>  pushf
   909 000089F4 803D0000010001      <2>  cmp %2, %3
   909 000089FB 0F858E4B0000        <2>  jne error
   909 00008A01 9D                  <2>  popf
   909                              <1> 
   909 00008A02 B440                <1>  mov ah, PS_ZF
   909 00008A04 9E                  <1>  sahf
   909                              <1>  SETcc setl, %1, 1
   909 00008A05 0F9C0500000100      <2>  %1 %2
   909 00008A0C 9C                  <2>  pushf
   909 00008A0D 803D0000010001      <2>  cmp %2, %3
   909 00008A14 0F85754B0000        <2>  jne error
   909 00008A1A 9D                  <2>  popf
   909                              <1>  SETcc setnl, %1, 0
   909 00008A1B 0F9D0500000100      <2>  %1 %2
   909 00008A22 9C                  <2>  pushf
   909 00008A23 803D0000010000      <2>  cmp %2, %3
   909 00008A2A 0F855F4B0000        <2>  jne error
   909 00008A30 9D                  <2>  popf
   909                              <1>  SETcc setle, %1, 1
   909 00008A31 0F9E0500000100      <2>  %1 %2
   909 00008A38 9C                  <2>  pushf
   909 00008A39 803D0000010001      <2>  cmp %2, %3
   909 00008A40 0F85494B0000        <2>  jne error
   909 00008A46 9D                  <2>  popf
   909                              <1>  SETcc setnle, %1, 0
   909 00008A47 0F9F0500000100      <2>  %1 %2
   909 00008A4E 9C                  <2>  pushf
   909 00008A4F 803D0000010000      <2>  cmp %2, %3
   909 00008A56 0F85334B0000        <2>  jne error
   909 00008A5C 9D                  <2>  popf
   910                                  
   911                                  	advTestSegProt
   911                              <1>  advTestBase
   911                              <2>  %assign TEST_BASE1 TEST_BASE1+0x1000
   911                              <2>  %assign TEST_BASE2 TEST_BASE2+0x1000
   911                              <1>  updLDTDescBase D1_SEG_PROT,TEST_BASE1
   911 00008A5D 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   911 00008A64 83C318              <2>  add ebx, (%1) & 0xFFF8
   911 00008A67 66C7430200A0        <2>  mov word [ebx+2], (%2)&0xFFFF
   911 00008A6D C6430402            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   911 00008A71 C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   911                              <1>  updLDTDescBase D2_SEG_PROT,TEST_BASE2
   911 00008A75 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   911 00008A7C 83C320              <2>  add ebx, (%1) & 0xFFF8
   911 00008A7F 66C7430200A0        <2>  mov word [ebx+2], (%2)&0xFFFF
   911 00008A85 C6430406            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   911 00008A89 C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   911 00008A8D 66BA1C00            <1>  mov dx, D1_SEG_PROT
   911 00008A91 8EDA                <1>  mov ds, dx
   911 00008A93 66BA2400            <1>  mov dx, D2_SEG_PROT
   911 00008A97 8EC2                <1>  mov es, dx
   912                                  
   913                                  ;
   914                                  ;	Call protected mode
   915                                  ;
   916                                  	POST 16
   916 00008A99 B016                <1>  mov al, 0x%1
   916 00008A9B 66BA9001            <1>  mov dx, POST_PORT
   916 00008A9F EE                  <1>  out dx, al
   917 00008AA0 66BE0000                	mov si, 0
   918                                  	testCallNear esp
   918                              <1>  %ifidni %1,sp
   918                              <1>  %define spcmp ax
   918                              <1>  %else
   918                              <1>  %define spcmp eax
   918                              <1>  %endif
   918 00008AA4 89E0                <1>  mov spcmp, %1
   918                              <1> 
   918                              <1> %%rel16:
   918 00008AA6 F8                  <1>  clc
   918 00008AA7 66E80800            <1>  o16 call word %%nearfn16
   918 00008AAB 0F83DE4A0000        <1>  jnc error
   918 00008AB1 EB16                <1>  jmp %%rel32
   918                              <1> %%nearfn16:
   918 00008AB3 83E802              <1>  sub spcmp, 2
   918 00008AB6 39C4                <1>  cmp %1, spcmp
   918 00008AB8 0F85D14A0000        <1>  jne error
   918 00008ABE 83C002              <1>  add spcmp, 2
   918 00008AC1 F9                  <1>  stc
   918 00008AC2 66C3                <1>  o16 ret
   918 00008AC4 E9C64A0000          <1>  jmp error
   918                              <1> 
   918                              <1> %%rel32:
   918 00008AC9 F8                  <1>  clc
   918 00008ACA E808000000          <1>  o32 call dword %%nearfn32
   918 00008ACF 0F83BA4A0000        <1>  jnc error
   918 00008AD5 EB15                <1>  jmp %%rm16
   918                              <1> %%nearfn32:
   918 00008AD7 83E804              <1>  sub spcmp, 4
   918 00008ADA 39C4                <1>  cmp %1, spcmp
   918 00008ADC 0F85AD4A0000        <1>  jne error
   918 00008AE2 83C004              <1>  add spcmp, 4
   918 00008AE5 F9                  <1>  stc
   918 00008AE6 C3                  <1>  o32 ret
   918 00008AE7 E9A34A0000          <1>  jmp error
   918                              <1> 
   918                              <1> %%rm16:
   918 00008AEC F8                  <1>  clc
   918 00008AED 66BB[B38A]          <1>  mov bx, %%nearfn16
   918 00008AF1 66FFD3              <1>  o16 call bx
   918 00008AF4 0F83954A0000        <1>  jnc error
   918                              <1> %%rm32:
   918 00008AFA F8                  <1>  clc
   918 00008AFB BB[D78A0000]        <1>  mov ebx, %%nearfn32
   918 00008B00 FFD3                <1>  o32 call ebx
   918 00008B02 0F83874A0000        <1>  jnc error
   919                                  	testCallFar C_SEG_PROT32
   919 00008B08 6689E0              <1>  mov ax, sp
   919                              <1> 
   919 00008B0B F8                  <1>  clc
   919 00008B0C 669A[1A8B]1000      <1>  o16 call word %1:%%farfn16
   919 00008B12 0F83774A0000        <1>  jnc error
   919 00008B18 EB19                <1>  jmp %%o32
   919                              <1> %%farfn16:
   919 00008B1A 6683E804            <1>  sub ax, 4
   919 00008B1E 6639C4              <1>  cmp sp, ax
   919 00008B21 0F85684A0000        <1>  jne error
   919 00008B27 6683C004            <1>  add ax, 4
   919 00008B2B F9                  <1>  stc
   919 00008B2C 66CB                <1>  o16 retf
   919 00008B2E E95C4A0000          <1>  jmp error
   919                              <1> 
   919                              <1> %%o32:
   919 00008B33 F8                  <1>  clc
   919 00008B34 9A[438B0000]1000    <1>  o32 call dword %1:%%farfn32
   919 00008B3B 0F834E4A0000        <1>  jnc error
   919 00008B41 EB18                <1>  jmp %%m1616
   919                              <1> %%farfn32:
   919 00008B43 6683E808            <1>  sub ax, 8
   919 00008B47 6639C4              <1>  cmp sp, ax
   919 00008B4A 0F853F4A0000        <1>  jne error
   919 00008B50 6683C008            <1>  add ax, 8
   919 00008B54 F9                  <1>  stc
   919 00008B55 CB                  <1>  o32 retf
   919 00008B56 E9344A0000          <1>  jmp error
   919                              <1> 
   919                              <1> %%m1616:
   919 00008B5B F8                  <1>  clc
   919 00008B5C 6667C704[1A8B]      <1>  mov [si], word %%farfn16
   919 00008B62 6667C744021000      <1>  mov [si+2], word %1
   919 00008B69 6667FF1C            <1>  o16 call far [si]
   919 00008B6D 0F831C4A0000        <1>  jnc error
   919                              <1> %%m1632:
   919 00008B73 F8                  <1>  clc
   919 00008B74 67C704[438B0000]    <1>  mov [si], dword %%farfn32
   919 00008B7B 6667C744041000      <1>  mov [si+4], word %1
   919 00008B82 67FF1C              <1>  o32 call far [si]
   919 00008B85 0F83044A0000        <1>  jnc error
   919                              <1> %%exit:
   920                                  
   921                                  	advTestSegProt
   921                              <1>  advTestBase
   921                              <2>  %assign TEST_BASE1 TEST_BASE1+0x1000
   921                              <2>  %assign TEST_BASE2 TEST_BASE2+0x1000
   921                              <1>  updLDTDescBase D1_SEG_PROT,TEST_BASE1
   921 00008B8B 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   921 00008B92 83C318              <2>  add ebx, (%1) & 0xFFF8
   921 00008B95 66C7430200B0        <2>  mov word [ebx+2], (%2)&0xFFFF
   921 00008B9B C6430402            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   921 00008B9F C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   921                              <1>  updLDTDescBase D2_SEG_PROT,TEST_BASE2
   921 00008BA3 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   921 00008BAA 83C320              <2>  add ebx, (%1) & 0xFFF8
   921 00008BAD 66C7430200B0        <2>  mov word [ebx+2], (%2)&0xFFFF
   921 00008BB3 C6430406            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   921 00008BB7 C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   921 00008BBB 66BA1C00            <1>  mov dx, D1_SEG_PROT
   921 00008BBF 8EDA                <1>  mov ds, dx
   921 00008BC1 66BA2400            <1>  mov dx, D2_SEG_PROT
   921 00008BC5 8EC2                <1>  mov es, dx
   922                                  
   923                                  ;
   924                                  ;	ARPL
   925                                  ;
   926                                  	POST 17
   926 00008BC7 B017                <1>  mov al, 0x%1
   926 00008BC9 66BA9001            <1>  mov dx, POST_PORT
   926 00008BCD EE                  <1>  out dx, al
   927                                  	; test on register destination
   928 00008BCE 6631C0                  	xor ax, ax       ; ZF = 0
   929 00008BD1 66B8F0FF                	mov ax, 0xfff0
   930 00008BD5 66BB0200                	mov bx, 0x0002
   931 00008BD9 63D8                    	arpl ax, bx      ; RPL ax < RPL bx
   932 00008BDB 0F85AE490000            	jnz error        ; must be ZF = 1
   933 00008BE1 6683F8F2                	cmp ax, 0xfff2
   934 00008BE5 0F85A4490000            	jne error
   935                                  	; test on memory destination
   936 00008BEB 6631C0                  	xor ax, ax       ; ZF = 0
   937 00008BEE 66C70500000200F0FF      	mov word [0x20000], 0xfff0
   938 00008BF7 631D00000200            	arpl [0x20000], bx
   939 00008BFD 0F858C490000            	jnz error
   940 00008C03 66833D00000200F2        	cmp word [0x20000], 0xfff2
   941 00008C0B 0F857E490000            	jne error
   942                                  	%if BOCHS = 0
   943                                  	; test unexpected memory write
   944                                  	;
   945                                  	; This test fails with Bochs, which does not write to memory (correctly),
   946                                  	; but throws a #GP fault before that, during the reading of the memory
   947                                  	; operand. Bochs checks that the destination segment is writeable before the
   948                                  	; execution of ARPL.
   949                                  	;
   950                                  	; make DS read only
   951                                  	updLDTDescAcc D1_SEG_PROT,ACC_TYPE_DATA_R|ACC_PRESENT
   951 00008C11 60                  <1>  pushad
   951 00008C12 9C                  <1>  pushf
   951 00008C13 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   951 00008C1A 83C318              <1>  add ebx, (%1) & 0xFFF8
   951 00008C1D C6430590            <1>  mov byte [ebx+5], (%2)>>8
   951 00008C21 9D                  <1>  popf
   951 00008C22 61                  <1>  popad
   952 00008C23 66B81C00                	mov ax, D1_SEG_PROT
   953 00008C27 8ED8                    	mov ds, ax
   954 00008C29 31C0                    	xor eax, eax
   955 00008C2B 631D00000200            	arpl [0x20000], bx ; value has not changed, arpl should not write to memory
   956                                  	; make DS writeable again
   957                                  	updLDTDescAcc D1_SEG_PROT,ACC_TYPE_DATA_W|ACC_PRESENT
   957 00008C31 60                  <1>  pushad
   957 00008C32 9C                  <1>  pushf
   957 00008C33 2EC51D[AF1B0000]    <1>  lds ebx, [cs:ptrLDTprot]
   957 00008C3A 83C318              <1>  add ebx, (%1) & 0xFFF8
   957 00008C3D C6430592            <1>  mov byte [ebx+5], (%2)>>8
   957 00008C41 9D                  <1>  popf
   957 00008C42 61                  <1>  popad
   958 00008C43 66B81C00                	mov ax, D1_SEG_PROT
   959 00008C47 8ED8                    	mov ds, ax
   960                                  	%endif
   961                                  	; test with RPL dest > RPL src
   962 00008C49 6631C0                  	xor ax, ax       ; ZF = 0
   963 00008C4C 66B8F3FF                	mov ax, 0xfff3
   964 00008C50 63D8                    	arpl ax, bx
   965 00008C52 0F8437490000            	jz error
   966 00008C58 6683F8F3                	cmp ax, 0xfff3
   967 00008C5C 0F852D490000            	jne error
   968                                  
   969                                  	advTestSegProt
   969                              <1>  advTestBase
   969                              <2>  %assign TEST_BASE1 TEST_BASE1+0x1000
   969                              <2>  %assign TEST_BASE2 TEST_BASE2+0x1000
   969                              <1>  updLDTDescBase D1_SEG_PROT,TEST_BASE1
   969 00008C62 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   969 00008C69 83C318              <2>  add ebx, (%1) & 0xFFF8
   969 00008C6C 66C7430200C0        <2>  mov word [ebx+2], (%2)&0xFFFF
   969 00008C72 C6430402            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   969 00008C76 C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   969                              <1>  updLDTDescBase D2_SEG_PROT,TEST_BASE2
   969 00008C7A 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   969 00008C81 83C320              <2>  add ebx, (%1) & 0xFFF8
   969 00008C84 66C7430200C0        <2>  mov word [ebx+2], (%2)&0xFFFF
   969 00008C8A C6430406            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   969 00008C8E C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   969 00008C92 66BA1C00            <1>  mov dx, D1_SEG_PROT
   969 00008C96 8EDA                <1>  mov ds, dx
   969 00008C98 66BA2400            <1>  mov dx, D2_SEG_PROT
   969 00008C9C 8EC2                <1>  mov es, dx
   970                                  
   971                                  ;
   972                                  ;	BOUND
   973                                  ;
   974                                  	POST 18
   974 00008C9E B018                <1>  mov al, 0x%1
   974 00008CA0 66BA9001            <1>  mov dx, POST_PORT
   974 00008CA4 EE                  <1>  out dx, al
   975                                  	setProtModeIntGate EX_BR, BoundExcHandler
   975 00008CA5 60                  <1>  pushad
   975 00008CA6 9C                  <1>  pushf
   975 00008CA7 668CD8              <1>  mov ax, ds
   975 00008CAA 6650                <1>  push ax
   975 00008CAC B805000000          <1>  mov eax, %1
   975 00008CB1 BF[118E0000]        <1>  mov edi, %2
   975                              <1>  %if %3 != -1
   975                              <1>  mov dx, %3
   975                              <1>  %else
   975 00008CB6 668CCA              <1>  mov dx, cs
   975 00008CB9 6683E207            <1>  and dx, 7
   975 00008CBD 66C1E20D            <1>  shl dx, 13
   975                              <1>  %endif
   975 00008CC1 6683FA00            <1>  cmp dx, ACC_DPL_0
   975 00008CC5 7507                <1>  jne %%dpl3
   975                              <1> %%dpl0:
   975 00008CC7 BE10000000          <1>  mov esi, C_SEG_PROT32
   975 00008CCC EB05                <1>  jmp %%cont
   975                              <1> %%dpl3:
   975 00008CCE BE18000000          <1>  mov esi, CU_SEG_PROT32
   975                              <1> %%cont:
   975 00008CD3 668CC9              <1>  mov cx, cs
   975 00008CD6 66F7C10700          <1>  test cx, 7
   975 00008CDB 7509                <1>  jnz %%ring3
   975                              <1> %%ring0:
   975 00008CDD 2EC51D[971B0000]    <1>  lds ebx, [cs:ptrIDTprot]
   975 00008CE4 EB07                <1>  jmp %%call
   975                              <1> %%ring3:
   975 00008CE6 2EC51D[9D1B0000]    <1>  lds ebx, [cs:ptrIDTUprot]
   975                              <1> %%call:
   975 00008CED E85290FFFF          <1>  call initIntGateProt
   975 00008CF2 6658                <1>  pop ax
   975 00008CF4 8ED8                <1>  mov ds, ax
   975 00008CF6 9D                  <1>  popf
   975 00008CF7 61                  <1>  popad
   976 00008CF8 31C0                    	xor eax, eax
   977 00008CFA BB00010100              	mov ebx, 0x10100
   978 00008CFF 66C705000002001000      	mov word [0x20000], 0x0010
   979 00008D08 66C705020002000201      	mov word [0x20002], 0x0102
   980 00008D11 66621D00000200          	o16 bound bx, [0x20000]
   981 00008D18 3D6E756F62              	cmp eax, BOUND_HANDLER_SIG
   982 00008D1D 0F846C480000            	je error
   983 00008D23 66C70502000200FF00      	mov word [0x20002], 0x00FF
   984 00008D2C 66621D00000200          	o16 bound bx, [0x20000]
   985 00008D33 3D6E756F62              	cmp eax, BOUND_HANDLER_SIG
   986 00008D38 0F8551480000            	jne error
   987 00008D3E 31C0                    	xor eax, eax
   988 00008D40 C70504000200100001-     	mov dword [0x20004], 0x10010
   988 00008D49 00                 
   989 00008D4A C70508000200020101-     	mov dword [0x20008], 0x10102
   989 00008D53 00                 
   990 00008D54 621D04000200            	o32 bound ebx, [0x20004]
   991 00008D5A 3D6E756F62              	cmp eax, BOUND_HANDLER_SIG
   992 00008D5F 0F842A480000            	je error
   993 00008D65 C70508000200FF0001-     	mov dword [0x20008], 0x100FF
   993 00008D6E 00                 
   994 00008D6F 621D04000200            	o32 bound ebx, [0x20004]
   995 00008D75 3D6E756F62              	cmp eax, BOUND_HANDLER_SIG
   996 00008D7A 0F850F480000            	jne error
   997                                  	setProtModeIntGate EX_BR, DefaultExcHandler
   997 00008D80 60                  <1>  pushad
   997 00008D81 9C                  <1>  pushf
   997 00008D82 668CD8              <1>  mov ax, ds
   997 00008D85 6650                <1>  push ax
   997 00008D87 B805000000          <1>  mov eax, %1
   997 00008D8C BF[8FD50000]        <1>  mov edi, %2
   997                              <1>  %if %3 != -1
   997                              <1>  mov dx, %3
   997                              <1>  %else
   997 00008D91 668CCA              <1>  mov dx, cs
   997 00008D94 6683E207            <1>  and dx, 7
   997 00008D98 66C1E20D            <1>  shl dx, 13
   997                              <1>  %endif
   997 00008D9C 6683FA00            <1>  cmp dx, ACC_DPL_0
   997 00008DA0 7507                <1>  jne %%dpl3
   997                              <1> %%dpl0:
   997 00008DA2 BE10000000          <1>  mov esi, C_SEG_PROT32
   997 00008DA7 EB05                <1>  jmp %%cont
   997                              <1> %%dpl3:
   997 00008DA9 BE18000000          <1>  mov esi, CU_SEG_PROT32
   997                              <1> %%cont:
   997 00008DAE 668CC9              <1>  mov cx, cs
   997 00008DB1 66F7C10700          <1>  test cx, 7
   997 00008DB6 7509                <1>  jnz %%ring3
   997                              <1> %%ring0:
   997 00008DB8 2EC51D[971B0000]    <1>  lds ebx, [cs:ptrIDTprot]
   997 00008DBF EB07                <1>  jmp %%call
   997                              <1> %%ring3:
   997 00008DC1 2EC51D[9D1B0000]    <1>  lds ebx, [cs:ptrIDTUprot]
   997                              <1> %%call:
   997 00008DC8 E8778FFFFF          <1>  call initIntGateProt
   997 00008DCD 6658                <1>  pop ax
   997 00008DCF 8ED8                <1>  mov ds, ax
   997 00008DD1 9D                  <1>  popf
   997 00008DD2 61                  <1>  popad
   998                                  
   999                                  	advTestSegProt
   999                              <1>  advTestBase
   999                              <2>  %assign TEST_BASE1 TEST_BASE1+0x1000
   999                              <2>  %assign TEST_BASE2 TEST_BASE2+0x1000
   999                              <1>  updLDTDescBase D1_SEG_PROT,TEST_BASE1
   999 00008DD3 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   999 00008DDA 83C318              <2>  add ebx, (%1) & 0xFFF8
   999 00008DDD 66C7430200D0        <2>  mov word [ebx+2], (%2)&0xFFFF
   999 00008DE3 C6430402            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   999 00008DE7 C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   999                              <1>  updLDTDescBase D2_SEG_PROT,TEST_BASE2
   999 00008DEB 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
   999 00008DF2 83C320              <2>  add ebx, (%1) & 0xFFF8
   999 00008DF5 66C7430200D0        <2>  mov word [ebx+2], (%2)&0xFFFF
   999 00008DFB C6430406            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
   999 00008DFF C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
   999 00008E03 66BA1C00            <1>  mov dx, D1_SEG_PROT
   999 00008E07 8EDA                <1>  mov ds, dx
   999 00008E09 66BA2400            <1>  mov dx, D2_SEG_PROT
   999 00008E0D 8EC2                <1>  mov es, dx
  1000 00008E0F EB19                    	jmp post19
  1001                                  
  1002                                  BoundExcHandler:
  1003 00008E11 66C705020002000001      	mov word [0x20002], 0x0100
  1004 00008E1A C70508000200000101-     	mov dword [0x20008], 0x10100
  1004 00008E23 00                 
  1005                                  	BOUND_HANDLER_SIG equ 0x626f756e
  1006 00008E24 B86E756F62              	mov eax, BOUND_HANDLER_SIG
  1007 00008E29 CF                      	iretd
  1008                                  
  1009                                  ;
  1010                                  ;   XCHG
  1011                                  ;
  1012                                  %include "tests/xchg_m.asm"
     1                              <1> ;
     2                              <1> ; Tests XCHG operation
     3                              <1> ; %1 dst operand
     4                              <1> ; %2 src operand
     5                              <1> ;
     6                              <1> ; Both dst and src will be overwritten.
     7                              <1> ;
     8                              <1> %macro testXchg 2
     9                              <1> 	%assign dst_value 0xA5A5A5A5
    10                              <1> 	%assign src_value 0x5A5A5A5A
    11                              <1> 	mov %1,dst_value
    12                              <1> 	mov %2,src_value
    13                              <1> 	xchg %1,%2
    14                              <1> 	cmp %1,src_value
    15                              <1> 	jne error
    16                              <1> 	cmp %2,dst_value
    17                              <1> 	jne error
    18                              <1> %endmacro
  1013                                  post19:
  1014                                  	POST 19
  1014 00008E2A B019                <1>  mov al, 0x%1
  1014 00008E2C 66BA9001            <1>  mov dx, POST_PORT
  1014 00008E30 EE                  <1>  out dx, al
  1015                                  
  1016                                  	testXchg ax,cx ; 66 91
  1016                              <1>  %assign dst_value 0xA5A5A5A5
  1016                              <1>  %assign src_value 0x5A5A5A5A
  1016 00008E31 66B8A5A5            <1>  mov %1,dst_value
  1016          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1016 00008E35 66B95A5A            <1>  mov %2,src_value
  1016          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1016 00008E39 6691                <1>  xchg %1,%2
  1016 00008E3B 663D5A5A            <1>  cmp %1,src_value
  1016          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1016 00008E3F 0F854A470000        <1>  jne error
  1016 00008E45 6681F9A5A5          <1>  cmp %2,dst_value
  1016          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1016 00008E4A 0F853F470000        <1>  jne error
  1017                                  	testXchg ax,dx ; 66 92
  1017                              <1>  %assign dst_value 0xA5A5A5A5
  1017                              <1>  %assign src_value 0x5A5A5A5A
  1017 00008E50 66B8A5A5            <1>  mov %1,dst_value
  1017          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1017 00008E54 66BA5A5A            <1>  mov %2,src_value
  1017          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1017 00008E58 6692                <1>  xchg %1,%2
  1017 00008E5A 663D5A5A            <1>  cmp %1,src_value
  1017          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1017 00008E5E 0F852B470000        <1>  jne error
  1017 00008E64 6681FAA5A5          <1>  cmp %2,dst_value
  1017          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1017 00008E69 0F8520470000        <1>  jne error
  1018                                  	testXchg ax,bx ; 66 93
  1018                              <1>  %assign dst_value 0xA5A5A5A5
  1018                              <1>  %assign src_value 0x5A5A5A5A
  1018 00008E6F 66B8A5A5            <1>  mov %1,dst_value
  1018          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1018 00008E73 66BB5A5A            <1>  mov %2,src_value
  1018          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1018 00008E77 6693                <1>  xchg %1,%2
  1018 00008E79 663D5A5A            <1>  cmp %1,src_value
  1018          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1018 00008E7D 0F850C470000        <1>  jne error
  1018 00008E83 6681FBA5A5          <1>  cmp %2,dst_value
  1018          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1018 00008E88 0F8501470000        <1>  jne error
  1019 00008E8E 6689E5                  	mov bp,sp
  1020                                  	testXchg ax,sp ; 66 94
  1020                              <1>  %assign dst_value 0xA5A5A5A5
  1020                              <1>  %assign src_value 0x5A5A5A5A
  1020 00008E91 66B8A5A5            <1>  mov %1,dst_value
  1020          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1020 00008E95 66BC5A5A            <1>  mov %2,src_value
  1020          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1020 00008E99 6694                <1>  xchg %1,%2
  1020 00008E9B 663D5A5A            <1>  cmp %1,src_value
  1020          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1020 00008E9F 0F85EA460000        <1>  jne error
  1020 00008EA5 6681FCA5A5          <1>  cmp %2,dst_value
  1020          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1020 00008EAA 0F85DF460000        <1>  jne error
  1021 00008EB0 6689EC                  	mov sp,bp
  1022                                  	testXchg ax,bp ; 66 95
  1022                              <1>  %assign dst_value 0xA5A5A5A5
  1022                              <1>  %assign src_value 0x5A5A5A5A
  1022 00008EB3 66B8A5A5            <1>  mov %1,dst_value
  1022          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1022 00008EB7 66BD5A5A            <1>  mov %2,src_value
  1022          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1022 00008EBB 6695                <1>  xchg %1,%2
  1022 00008EBD 663D5A5A            <1>  cmp %1,src_value
  1022          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1022 00008EC1 0F85C8460000        <1>  jne error
  1022 00008EC7 6681FDA5A5          <1>  cmp %2,dst_value
  1022          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1022 00008ECC 0F85BD460000        <1>  jne error
  1023                                  	testXchg ax,si ; 66 96
  1023                              <1>  %assign dst_value 0xA5A5A5A5
  1023                              <1>  %assign src_value 0x5A5A5A5A
  1023 00008ED2 66B8A5A5            <1>  mov %1,dst_value
  1023          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1023 00008ED6 66BE5A5A            <1>  mov %2,src_value
  1023          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1023 00008EDA 6696                <1>  xchg %1,%2
  1023 00008EDC 663D5A5A            <1>  cmp %1,src_value
  1023          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1023 00008EE0 0F85A9460000        <1>  jne error
  1023 00008EE6 6681FEA5A5          <1>  cmp %2,dst_value
  1023          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1023 00008EEB 0F859E460000        <1>  jne error
  1024                                  	testXchg ax,di ; 66 97
  1024                              <1>  %assign dst_value 0xA5A5A5A5
  1024                              <1>  %assign src_value 0x5A5A5A5A
  1024 00008EF1 66B8A5A5            <1>  mov %1,dst_value
  1024          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1024 00008EF5 66BF5A5A            <1>  mov %2,src_value
  1024          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1024 00008EF9 6697                <1>  xchg %1,%2
  1024 00008EFB 663D5A5A            <1>  cmp %1,src_value
  1024          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1024 00008EFF 0F858A460000        <1>  jne error
  1024 00008F05 6681FFA5A5          <1>  cmp %2,dst_value
  1024          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1024 00008F0A 0F857F460000        <1>  jne error
  1025                                  
  1026                                  	testXchg eax,ecx ; 91
  1026                              <1>  %assign dst_value 0xA5A5A5A5
  1026                              <1>  %assign src_value 0x5A5A5A5A
  1026 00008F10 B8A5A5A5A5          <1>  mov %1,dst_value
  1026 00008F15 B95A5A5A5A          <1>  mov %2,src_value
  1026 00008F1A 91                  <1>  xchg %1,%2
  1026 00008F1B 3D5A5A5A5A          <1>  cmp %1,src_value
  1026 00008F20 0F8569460000        <1>  jne error
  1026 00008F26 81F9A5A5A5A5        <1>  cmp %2,dst_value
  1026 00008F2C 0F855D460000        <1>  jne error
  1027                                  	testXchg eax,edx ; 92
  1027                              <1>  %assign dst_value 0xA5A5A5A5
  1027                              <1>  %assign src_value 0x5A5A5A5A
  1027 00008F32 B8A5A5A5A5          <1>  mov %1,dst_value
  1027 00008F37 BA5A5A5A5A          <1>  mov %2,src_value
  1027 00008F3C 92                  <1>  xchg %1,%2
  1027 00008F3D 3D5A5A5A5A          <1>  cmp %1,src_value
  1027 00008F42 0F8547460000        <1>  jne error
  1027 00008F48 81FAA5A5A5A5        <1>  cmp %2,dst_value
  1027 00008F4E 0F853B460000        <1>  jne error
  1028                                  	testXchg eax,ebx ; 93
  1028                              <1>  %assign dst_value 0xA5A5A5A5
  1028                              <1>  %assign src_value 0x5A5A5A5A
  1028 00008F54 B8A5A5A5A5          <1>  mov %1,dst_value
  1028 00008F59 BB5A5A5A5A          <1>  mov %2,src_value
  1028 00008F5E 93                  <1>  xchg %1,%2
  1028 00008F5F 3D5A5A5A5A          <1>  cmp %1,src_value
  1028 00008F64 0F8525460000        <1>  jne error
  1028 00008F6A 81FBA5A5A5A5        <1>  cmp %2,dst_value
  1028 00008F70 0F8519460000        <1>  jne error
  1029 00008F76 89E5                    	mov ebp,esp
  1030                                  	testXchg eax,esp ; 94
  1030                              <1>  %assign dst_value 0xA5A5A5A5
  1030                              <1>  %assign src_value 0x5A5A5A5A
  1030 00008F78 B8A5A5A5A5          <1>  mov %1,dst_value
  1030 00008F7D BC5A5A5A5A          <1>  mov %2,src_value
  1030 00008F82 94                  <1>  xchg %1,%2
  1030 00008F83 3D5A5A5A5A          <1>  cmp %1,src_value
  1030 00008F88 0F8501460000        <1>  jne error
  1030 00008F8E 81FCA5A5A5A5        <1>  cmp %2,dst_value
  1030 00008F94 0F85F5450000        <1>  jne error
  1031 00008F9A 89EC                    	mov esp,ebp
  1032                                  	testXchg eax,ebp ; 95
  1032                              <1>  %assign dst_value 0xA5A5A5A5
  1032                              <1>  %assign src_value 0x5A5A5A5A
  1032 00008F9C B8A5A5A5A5          <1>  mov %1,dst_value
  1032 00008FA1 BD5A5A5A5A          <1>  mov %2,src_value
  1032 00008FA6 95                  <1>  xchg %1,%2
  1032 00008FA7 3D5A5A5A5A          <1>  cmp %1,src_value
  1032 00008FAC 0F85DD450000        <1>  jne error
  1032 00008FB2 81FDA5A5A5A5        <1>  cmp %2,dst_value
  1032 00008FB8 0F85D1450000        <1>  jne error
  1033                                  	testXchg eax,esi ; 96
  1033                              <1>  %assign dst_value 0xA5A5A5A5
  1033                              <1>  %assign src_value 0x5A5A5A5A
  1033 00008FBE B8A5A5A5A5          <1>  mov %1,dst_value
  1033 00008FC3 BE5A5A5A5A          <1>  mov %2,src_value
  1033 00008FC8 96                  <1>  xchg %1,%2
  1033 00008FC9 3D5A5A5A5A          <1>  cmp %1,src_value
  1033 00008FCE 0F85BB450000        <1>  jne error
  1033 00008FD4 81FEA5A5A5A5        <1>  cmp %2,dst_value
  1033 00008FDA 0F85AF450000        <1>  jne error
  1034                                  	testXchg eax,edi ; 97
  1034                              <1>  %assign dst_value 0xA5A5A5A5
  1034                              <1>  %assign src_value 0x5A5A5A5A
  1034 00008FE0 B8A5A5A5A5          <1>  mov %1,dst_value
  1034 00008FE5 BF5A5A5A5A          <1>  mov %2,src_value
  1034 00008FEA 97                  <1>  xchg %1,%2
  1034 00008FEB 3D5A5A5A5A          <1>  cmp %1,src_value
  1034 00008FF0 0F8599450000        <1>  jne error
  1034 00008FF6 81FFA5A5A5A5        <1>  cmp %2,dst_value
  1034 00008FFC 0F858D450000        <1>  jne error
  1035                                  
  1036                                  	testXchg bl,cl         ; 86 D9
  1036                              <1>  %assign dst_value 0xA5A5A5A5
  1036                              <1>  %assign src_value 0x5A5A5A5A
  1036 00009002 B3A5                <1>  mov %1,dst_value
  1036          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
  1036 00009004 B15A                <1>  mov %2,src_value
  1036          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
  1036 00009006 86D9                <1>  xchg %1,%2
  1036 00009008 80FB5A              <1>  cmp %1,src_value
  1036          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
  1036 0000900B 0F857E450000        <1>  jne error
  1036 00009011 80F9A5              <1>  cmp %2,dst_value
  1036          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
  1036 00009014 0F8575450000        <1>  jne error
  1037                                  	testXchg byte [0],cl   ; 86 0D 00000000
  1037                              <1>  %assign dst_value 0xA5A5A5A5
  1037                              <1>  %assign src_value 0x5A5A5A5A
  1037 0000901A C60500000000A5      <1>  mov %1,dst_value
  1037          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
  1037 00009021 B15A                <1>  mov %2,src_value
  1037          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
  1037 00009023 860D00000000        <1>  xchg %1,%2
  1037 00009029 803D000000005A      <1>  cmp %1,src_value
  1037          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
  1037 00009030 0F8559450000        <1>  jne error
  1037 00009036 80F9A5              <1>  cmp %2,dst_value
  1037          ******************  <1>  warning: byte data exceeds bounds [-w+number-overflow]
  1037 00009039 0F8550450000        <1>  jne error
  1038                                  	testXchg bx,cx         ; 66 87 D9
  1038                              <1>  %assign dst_value 0xA5A5A5A5
  1038                              <1>  %assign src_value 0x5A5A5A5A
  1038 0000903F 66BBA5A5            <1>  mov %1,dst_value
  1038          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1038 00009043 66B95A5A            <1>  mov %2,src_value
  1038          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1038 00009047 6687D9              <1>  xchg %1,%2
  1038 0000904A 6681FB5A5A          <1>  cmp %1,src_value
  1038          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1038 0000904F 0F853A450000        <1>  jne error
  1038 00009055 6681F9A5A5          <1>  cmp %2,dst_value
  1038          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1038 0000905A 0F852F450000        <1>  jne error
  1039                                  	testXchg word [0],cx   ; 66 87 0D 00000000
  1039                              <1>  %assign dst_value 0xA5A5A5A5
  1039                              <1>  %assign src_value 0x5A5A5A5A
  1039 00009060 66C70500000000A5A5  <1>  mov %1,dst_value
  1039          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1039 00009069 66B95A5A            <1>  mov %2,src_value
  1039          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1039 0000906D 66870D00000000      <1>  xchg %1,%2
  1039 00009074 66813D000000005A5A  <1>  cmp %1,src_value
  1039          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1039 0000907D 0F850C450000        <1>  jne error
  1039 00009083 6681F9A5A5          <1>  cmp %2,dst_value
  1039          ******************  <1>  warning: word data exceeds bounds [-w+number-overflow]
  1039 00009088 0F8501450000        <1>  jne error
  1040                                  	testXchg ebx,ecx       ; 87 D9
  1040                              <1>  %assign dst_value 0xA5A5A5A5
  1040                              <1>  %assign src_value 0x5A5A5A5A
  1040 0000908E BBA5A5A5A5          <1>  mov %1,dst_value
  1040 00009093 B95A5A5A5A          <1>  mov %2,src_value
  1040 00009098 87D9                <1>  xchg %1,%2
  1040 0000909A 81FB5A5A5A5A        <1>  cmp %1,src_value
  1040 000090A0 0F85E9440000        <1>  jne error
  1040 000090A6 81F9A5A5A5A5        <1>  cmp %2,dst_value
  1040 000090AC 0F85DD440000        <1>  jne error
  1041                                  	testXchg dword [0],ecx ; 87 0D 00000000
  1041                              <1>  %assign dst_value 0xA5A5A5A5
  1041                              <1>  %assign src_value 0x5A5A5A5A
  1041 000090B2 C70500000000A5A5A5- <1>  mov %1,dst_value
  1041 000090BB A5                  <1>
  1041 000090BC B95A5A5A5A          <1>  mov %2,src_value
  1041 000090C1 870D00000000        <1>  xchg %1,%2
  1041 000090C7 813D000000005A5A5A- <1>  cmp %1,src_value
  1041 000090D0 5A                  <1>
  1041 000090D1 0F85B8440000        <1>  jne error
  1041 000090D7 81F9A5A5A5A5        <1>  cmp %2,dst_value
  1041 000090DD 0F85AC440000        <1>  jne error
  1042                                  
  1043                                  	advTestSegProt
  1043                              <1>  advTestBase
  1043                              <2>  %assign TEST_BASE1 TEST_BASE1+0x1000
  1043                              <2>  %assign TEST_BASE2 TEST_BASE2+0x1000
  1043                              <1>  updLDTDescBase D1_SEG_PROT,TEST_BASE1
  1043 000090E3 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
  1043 000090EA 83C318              <2>  add ebx, (%1) & 0xFFF8
  1043 000090ED 66C7430200E0        <2>  mov word [ebx+2], (%2)&0xFFFF
  1043 000090F3 C6430402            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
  1043 000090F7 C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
  1043                              <1>  updLDTDescBase D2_SEG_PROT,TEST_BASE2
  1043 000090FB 2EC51D[AF1B0000]    <2>  lds ebx, [cs:ptrLDTprot]
  1043 00009102 83C320              <2>  add ebx, (%1) & 0xFFF8
  1043 00009105 66C7430200E0        <2>  mov word [ebx+2], (%2)&0xFFFF
  1043 0000910B C6430406            <2>  mov byte [ebx+4], ((%2)>>16)&0xFF
  1043 0000910F C6430700            <2>  mov byte [ebx+7], ((%2)>>24)&0xFF
  1043 00009113 66BA1C00            <1>  mov dx, D1_SEG_PROT
  1043 00009117 8EDA                <1>  mov ds, dx
  1043 00009119 66BA2400            <1>  mov dx, D2_SEG_PROT
  1043 0000911D 8EC2                <1>  mov es, dx
  1044                                  
  1045                                  ;
  1046                                  ;   ENTER
  1047                                  ;
  1048                                  %include "tests/enter_m.asm"
     1                              <1> ; ENTER imm16, imm8
     2                              <1> 
     3                              <1> ; OperandSize = 16
     4                              <1> ; ****************
     5                              <1> ;
     6                              <1> ; 01 AllocSize ← imm16;
     7                              <1> ; 02 NestingLevel ← imm8 MOD 32;
     8                              <1> ;
     9                              <1> ; 03 Push16(BP);
    10                              <1> ; 04 FrameTemp ← SP;
    11                              <1> ;
    12                              <1> ; 05 IF NestingLevel = 0 THEN
    13                              <1> ; 06 	GOTO CONTINUE;
    14                              <1> ; 07 FI;
    15                              <1> ;
    16                              <1> ; 08 IF (NestingLevel > 1) THEN
    17                              <1> ; 09 	FOR i ← 1 to (NestingLevel - 1) DO
    18                              <1> ; 10		IF StackSize = 32 THEN
    19                              <1> ; 11			EBP ← EBP - 2;
    20                              <1> ; 12			Push16([EBP]);
    21                              <1> ; 13		ELSE (* StackSize = 16 *)
    22                              <1> ; 14			BP ← BP - 2;
    23                              <1> ; 15			Push16([BP]);
    24                              <1> ; 16		FI;
    25                              <1> ; 17	OD;
    26                              <1> ; 18 FI;
    27                              <1> ;
    28                              <1> ; 19 Push16(FrameTemp);
    29                              <1> ;
    30                              <1> ; 20 CONTINUE:
    31                              <1> ; 21 BP ← FrameTemp;
    32                              <1> ; 22 SP ← SP − AllocSize;
    33                              <1> 
    34                              <1> ; %1=AllocSize
    35                              <1> ; %2=NestingLevel
    36                              <1> ; %3=StackSize
    37                              <1> %macro testENTER16 3
    38                              <1> 	%assign NestingLevel (%2 % 32)
    39                              <1> 	%assign stackWords 1 ; 03
    40                              <1> 	%if NestingLevel>0
    41                              <1> 		%if NestingLevel>1
    42                              <1> 			%assign stackWords stackWords+(NestingLevel-1) ; 12/15
    43                              <1> 		%endif
    44                              <1> 		%assign stackWords stackWords+1 ; 19
    45                              <1> 	%endif
    46                              <1> 	%assign stackBytes stackWords*2
    47                              <1> 	%if %3=16
    48                              <1> 		%assign val32 0x10000
    49                              <1> 		mov   ax, D_SEG_PROT16
    50                              <1> 	%else
    51                              <1> 		%assign val32 0
    52                              <1> 		mov   ax, D_SEG_PROT32
    53                              <1> 	%endif
    54                              <1> 	%assign ebpVal    val32|(0xfffe-(stackBytes-2))
    55                              <1> 	%assign ebpResult val32| 0xfffe
    56                              <1> 	%assign espResult val32|(0xfffe-%1-(stackBytes-2))
    57                              <1> 
    58                              <1> 	mov   ss, ax
    59                              <1> 	mov   es, ax
    60                              <1> 
    61                              <1> 	; clear stack memory
    62                              <1> 	mov   ecx, stackWords
    63                              <1> 	xor   edi, edi
    64                              <1> 	sub   di, stackBytes
    65                              <1> 	xor   ax, ax
    66                              <1> 	rep stosw
    67                              <1> 
    68                              <1> 	mov   ebp, ebpVal
    69                              <1> 	%if NestingLevel>1
    70                              <1> 		mov   ecx, (NestingLevel-1)
    71                              <1> 		%%initbp:
    72                              <1> 		%if %3=16
    73                              <1> 		sub   bp, 2
    74                              <1> 		mov   [bp], cx
    75                              <1> 		%else
    76                              <1> 		sub   ebp, 2
    77                              <1> 		mov   [ebp], cx
    78                              <1> 		%endif
    79                              <1> 		loop %%initbp
    80                              <1> 		mov   ebp, ebpVal
    81                              <1> 	%endif
    82                              <1> 
    83                              <1> 	mov   esp, 0x10000
    84                              <1> 	o16 enter %1, %2
    85                              <1> 	cmp   esp, espResult
    86                              <1> 	jne   error
    87                              <1> 	cmp   ebp, ebpResult
    88                              <1> 	jne   error
    89                              <1> 	cmp   [bp], word (ebpVal&0xffff)
    90                              <1> 	jne   error
    91                              <1> 	%if NestingLevel>0
    92                              <1> 		add   esp, %1
    93                              <1> 		mov   bx, sp
    94                              <1> 		cmp   [es:bx], bp
    95                              <1> 		jne   error
    96                              <1> 		%if NestingLevel>1
    97                              <1> 			mov   ecx, (NestingLevel-1)
    98                              <1> 			add   bx, 2+(NestingLevel-1)*2
    99                              <1> 			%%testNesting:
   100                              <1> 			sub   bx, 2
   101                              <1> 			cmp   [es:bx], cx
   102                              <1> 			jne   error
   103                              <1> 			loop %%testNesting
   104                              <1> 		%endif
   105                              <1> 	%endif
   106                              <1> %endmacro
   107                              <1> 
   108                              <1> 
   109                              <1> ; OperandSize = 32
   110                              <1> ; ****************
   111                              <1> ;
   112                              <1> ; AllocSize ← imm16;
   113                              <1> ; NestingLevel ← imm8 MOD 32;
   114                              <1> ;
   115                              <1> ; Push32(EBP);
   116                              <1> ; FrameTemp ← ESP;
   117                              <1> ;
   118                              <1> ; IF NestingLevel = 0 THEN
   119                              <1> ; 	GOTO CONTINUE;
   120                              <1> ; FI;
   121                              <1> ;
   122                              <1> ; IF (NestingLevel > 1) THEN
   123                              <1> ; 	FOR i ← 1 to (NestingLevel - 1) DO
   124                              <1> ; 		IF StackSize = 32
   125                              <1> ; 			EBP ← EBP - 4;
   126                              <1> ; 			Push32([EBP]);
   127                              <1> ; 		ELSE (* StackSize = 16 *)
   128                              <1> ; 			BP ← BP - 4;
   129                              <1> ; 			Push32([BP]);
   130                              <1> ; 		FI;
   131                              <1> ; 	OD;
   132                              <1> ; FI;
   133                              <1> ;
   134                              <1> ; Push32(FrameTemp);
   135                              <1> ;
   136                              <1> ; CONTINUE:
   137                              <1> ; EBP ← FrameTemp;
   138                              <1> ; ESP ← ESP − AllocSize;
   139                              <1> ;
   140                              <1> %macro testENTER32 3
   141                              <1> 	%assign NestingLevel (%2 % 32)
   142                              <1> 	%assign stackDoubles 1
   143                              <1> 	%if NestingLevel>0
   144                              <1> 		%if NestingLevel>1
   145                              <1> 			%assign stackDoubles stackDoubles+(NestingLevel-1)
   146                              <1> 		%endif
   147                              <1> 		%assign stackDoubles stackDoubles+1
   148                              <1> 	%endif
   149                              <1> 	%assign stackBytes stackDoubles*4
   150                              <1> 	%if %3=16
   151                              <1> 		%assign val32 0x10000
   152                              <1> 		mov   ax, D_SEG_PROT16
   153                              <1> 	%else
   154                              <1> 		%assign val32 0
   155                              <1> 		mov   ax, D_SEG_PROT32
   156                              <1> 	%endif
   157                              <1> 	%assign ebpVal    val32|(0xfffc-(stackBytes-4))
   158                              <1> 	%assign ebpResult val32| 0xfffc
   159                              <1> 	%assign espResult val32|(0xfffc-%1-(stackBytes-4))
   160                              <1> 
   161                              <1> 	mov   ss, ax
   162                              <1> 	mov   es, ax
   163                              <1> 
   164                              <1> 	; clear stack memory
   165                              <1> 	mov   ecx, stackDoubles
   166                              <1> 	xor   edi, edi
   167                              <1> 	sub   di, stackBytes
   168                              <1> 	xor   eax, eax
   169                              <1> 	rep stosd
   170                              <1> 
   171                              <1> 	mov   ebp, ebpVal
   172                              <1> 	%if NestingLevel>1
   173                              <1> 		mov   ecx, (NestingLevel-1)
   174                              <1> 		%%initbp:
   175                              <1> 		%if %3=16
   176                              <1> 		sub   bp, 4
   177                              <1> 		mov   [bp], ecx
   178                              <1> 		%else
   179                              <1> 		sub   ebp, 4
   180                              <1> 		mov   [ebp], ecx
   181                              <1> 		%endif
   182                              <1> 		loop %%initbp
   183                              <1> 		mov   ebp, ebpVal
   184                              <1> 	%endif
   185                              <1> 
   186                              <1> 	mov   esp, 0x10000
   187                              <1> 	o32 enter %1, %2
   188                              <1> 	cmp   esp, espResult
   189                              <1> 	jne   error
   190                              <1> 	cmp   ebp, ebpResult
   191                              <1> 	jne   error
   192                              <1> 	cmp   [bp], dword ebpVal
   193                              <1> 	jne   error
   194                              <1> 	%if NestingLevel>0
   195                              <1> 		add   esp, %1
   196                              <1> 		mov   ebx, esp
   197                              <1> 		cmp   [es:bx], ebp
   198                              <1> 		jne   error
   199                              <1> 		%if NestingLevel>1
   200                              <1> 			mov   ecx, (NestingLevel-1)
   201                              <1> 			add   ebx, 4+(NestingLevel-1)*4
   202                              <1> 			%%testNesting:
   203                              <1> 			sub   ebx, 4
   204                              <1> 			cmp   [es:bx], ecx
   205                              <1> 			jne   error
   206                              <1> 			loop %%testNesting
   207                              <1> 		%endif
   208                              <1> 	%endif
   209                              <1> %endmacro
  1049                                  post1A:
  1050                                  	POST 1A
  1050 0000911F B01A                <1>  mov al, 0x%1
  1050 00009121 66BA9001            <1>  mov dx, POST_PORT
  1050 00009125 EE                  <1>  out dx, al
  1051                                  	testENTER16 1, 0,16
  1051                              <1>  %assign NestingLevel (%2 % 32)
  1051                              <1>  %assign stackWords 1
  1051                              <1>  %if NestingLevel>0
  1051                              <1>  %if NestingLevel>1
  1051                              <1>  %assign stackWords stackWords+(NestingLevel-1)
  1051                              <1>  %endif
  1051                              <1>  %assign stackWords stackWords+1
  1051                              <1>  %endif
  1051                              <1>  %assign stackBytes stackWords*2
  1051                              <1>  %if %3=16
  1051                              <1>  %assign val32 0x10000
  1051 00009126 66B80400            <1>  mov ax, D_SEG_PROT16
  1051                              <1>  %else
  1051                              <1>  %assign val32 0
  1051                              <1>  mov ax, D_SEG_PROT32
  1051                              <1>  %endif
  1051                              <1>  %assign ebpVal val32|(0xfffe-(stackBytes-2))
  1051                              <1>  %assign ebpResult val32| 0xfffe
  1051                              <1>  %assign espResult val32|(0xfffe-%1-(stackBytes-2))
  1051                              <1> 
  1051 0000912A 8ED0                <1>  mov ss, ax
  1051 0000912C 8EC0                <1>  mov es, ax
  1051                              <1> 
  1051                              <1> 
  1051 0000912E B901000000          <1>  mov ecx, stackWords
  1051 00009133 31FF                <1>  xor edi, edi
  1051 00009135 6683EF02            <1>  sub di, stackBytes
  1051 00009139 6631C0              <1>  xor ax, ax
  1051 0000913C F366AB              <1>  rep stosw
  1051                              <1> 
  1051 0000913F BDFEFF0100          <1>  mov ebp, ebpVal
  1051                              <1>  %if NestingLevel>1
  1051                              <1>  mov ecx, (NestingLevel-1)
  1051                              <1>  %%initbp:
  1051                              <1>  %if %3=16
  1051                              <1>  sub bp, 2
  1051                              <1>  mov [bp], cx
  1051                              <1>  %else
  1051                              <1>  sub ebp, 2
  1051                              <1>  mov [ebp], cx
  1051                              <1>  %endif
  1051                              <1>  loop %%initbp
  1051                              <1>  mov ebp, ebpVal
  1051                              <1>  %endif
  1051                              <1> 
  1051 00009144 BC00000100          <1>  mov esp, 0x10000
  1051 00009149 66C8010000          <1>  o16 enter %1, %2
  1051 0000914E 81FCFDFF0100        <1>  cmp esp, espResult
  1051 00009154 0F8535440000        <1>  jne error
  1051 0000915A 81FDFEFF0100        <1>  cmp ebp, ebpResult
  1051 00009160 0F8529440000        <1>  jne error
  1051 00009166 6667837E00FE        <1>  cmp [bp], word (ebpVal&0xffff)
  1051 0000916C 0F851D440000        <1>  jne error
  1051                              <1>  %if NestingLevel>0
  1051                              <1>  add esp, %1
  1051                              <1>  mov bx, sp
  1051                              <1>  cmp [es:bx], bp
  1051                              <1>  jne error
  1051                              <1>  %if NestingLevel>1
  1051                              <1>  mov ecx, (NestingLevel-1)
  1051                              <1>  add bx, 2+(NestingLevel-1)*2
  1051                              <1>  %%testNesting:
  1051                              <1>  sub bx, 2
  1051                              <1>  cmp [es:bx], cx
  1051                              <1>  jne error
  1051                              <1>  loop %%testNesting
  1051                              <1>  %endif
  1051                              <1>  %endif
  1052                                  	testENTER16 2, 1,16
  1052                              <1>  %assign NestingLevel (%2 % 32)
  1052                              <1>  %assign stackWords 1
  1052                              <1>  %if NestingLevel>0
  1052                              <1>  %if NestingLevel>1
  1052                              <1>  %assign stackWords stackWords+(NestingLevel-1)
  1052                              <1>  %endif
  1052                              <1>  %assign stackWords stackWords+1
  1052                              <1>  %endif
  1052                              <1>  %assign stackBytes stackWords*2
  1052                              <1>  %if %3=16
  1052                              <1>  %assign val32 0x10000
  1052 00009172 66B80400            <1>  mov ax, D_SEG_PROT16
  1052                              <1>  %else
  1052                              <1>  %assign val32 0
  1052                              <1>  mov ax, D_SEG_PROT32
  1052                              <1>  %endif
  1052                              <1>  %assign ebpVal val32|(0xfffe-(stackBytes-2))
  1052                              <1>  %assign ebpResult val32| 0xfffe
  1052                              <1>  %assign espResult val32|(0xfffe-%1-(stackBytes-2))
  1052                              <1> 
  1052 00009176 8ED0                <1>  mov ss, ax
  1052 00009178 8EC0                <1>  mov es, ax
  1052                              <1> 
  1052                              <1> 
  1052 0000917A B902000000          <1>  mov ecx, stackWords
  1052 0000917F 31FF                <1>  xor edi, edi
  1052 00009181 6683EF04            <1>  sub di, stackBytes
  1052 00009185 6631C0              <1>  xor ax, ax
  1052 00009188 F366AB              <1>  rep stosw
  1052                              <1> 
  1052 0000918B BDFCFF0100          <1>  mov ebp, ebpVal
  1052                              <1>  %if NestingLevel>1
  1052                              <1>  mov ecx, (NestingLevel-1)
  1052                              <1>  %%initbp:
  1052                              <1>  %if %3=16
  1052                              <1>  sub bp, 2
  1052                              <1>  mov [bp], cx
  1052                              <1>  %else
  1052                              <1>  sub ebp, 2
  1052                              <1>  mov [ebp], cx
  1052                              <1>  %endif
  1052                              <1>  loop %%initbp
  1052                              <1>  mov ebp, ebpVal
  1052                              <1>  %endif
  1052                              <1> 
  1052 00009190 BC00000100          <1>  mov esp, 0x10000
  1052 00009195 66C8020001          <1>  o16 enter %1, %2
  1052 0000919A 81FCFAFF0100        <1>  cmp esp, espResult
  1052 000091A0 0F85E9430000        <1>  jne error
  1052 000091A6 81FDFEFF0100        <1>  cmp ebp, ebpResult
  1052 000091AC 0F85DD430000        <1>  jne error
  1052 000091B2 6667837E00FC        <1>  cmp [bp], word (ebpVal&0xffff)
  1052 000091B8 0F85D1430000        <1>  jne error
  1052                              <1>  %if NestingLevel>0
  1052 000091BE 83C402              <1>  add esp, %1
  1052 000091C1 6689E3              <1>  mov bx, sp
  1052 000091C4 266667392F          <1>  cmp [es:bx], bp
  1052 000091C9 0F85C0430000        <1>  jne error
  1052                              <1>  %if NestingLevel>1
  1052                              <1>  mov ecx, (NestingLevel-1)
  1052                              <1>  add bx, 2+(NestingLevel-1)*2
  1052                              <1>  %%testNesting:
  1052                              <1>  sub bx, 2
  1052                              <1>  cmp [es:bx], cx
  1052                              <1>  jne error
  1052                              <1>  loop %%testNesting
  1052                              <1>  %endif
  1052                              <1>  %endif
  1053                                  	testENTER16 3, 4,16
  1053                              <1>  %assign NestingLevel (%2 % 32)
  1053                              <1>  %assign stackWords 1
  1053                              <1>  %if NestingLevel>0
  1053                              <1>  %if NestingLevel>1
  1053                              <1>  %assign stackWords stackWords+(NestingLevel-1)
  1053                              <1>  %endif
  1053                              <1>  %assign stackWords stackWords+1
  1053                              <1>  %endif
  1053                              <1>  %assign stackBytes stackWords*2
  1053                              <1>  %if %3=16
  1053                              <1>  %assign val32 0x10000
  1053 000091CF 66B80400            <1>  mov ax, D_SEG_PROT16
  1053                              <1>  %else
  1053                              <1>  %assign val32 0
  1053                              <1>  mov ax, D_SEG_PROT32
  1053                              <1>  %endif
  1053                              <1>  %assign ebpVal val32|(0xfffe-(stackBytes-2))
  1053                              <1>  %assign ebpResult val32| 0xfffe
  1053                              <1>  %assign espResult val32|(0xfffe-%1-(stackBytes-2))
  1053                              <1> 
  1053 000091D3 8ED0                <1>  mov ss, ax
  1053 000091D5 8EC0                <1>  mov es, ax
  1053                              <1> 
  1053                              <1> 
  1053 000091D7 B905000000          <1>  mov ecx, stackWords
  1053 000091DC 31FF                <1>  xor edi, edi
  1053 000091DE 6683EF0A            <1>  sub di, stackBytes
  1053 000091E2 6631C0              <1>  xor ax, ax
  1053 000091E5 F366AB              <1>  rep stosw
  1053                              <1> 
  1053 000091E8 BDF6FF0100          <1>  mov ebp, ebpVal
  1053                              <1>  %if NestingLevel>1
  1053 000091ED B903000000          <1>  mov ecx, (NestingLevel-1)
  1053                              <1>  %%initbp:
  1053                              <1>  %if %3=16
  1053 000091F2 6683ED02            <1>  sub bp, 2
  1053 000091F6 6667894E00          <1>  mov [bp], cx
  1053                              <1>  %else
  1053                              <1>  sub ebp, 2
  1053                              <1>  mov [ebp], cx
  1053                              <1>  %endif
  1053 000091FB E2F5                <1>  loop %%initbp
  1053 000091FD BDF6FF0100          <1>  mov ebp, ebpVal
  1053                              <1>  %endif
  1053                              <1> 
  1053 00009202 BC00000100          <1>  mov esp, 0x10000
  1053 00009207 66C8030004          <1>  o16 enter %1, %2
  1053 0000920C 81FCF3FF0100        <1>  cmp esp, espResult
  1053 00009212 0F8577430000        <1>  jne error
  1053 00009218 81FDFEFF0100        <1>  cmp ebp, ebpResult
  1053 0000921E 0F856B430000        <1>  jne error
  1053 00009224 6667837E00F6        <1>  cmp [bp], word (ebpVal&0xffff)
  1053 0000922A 0F855F430000        <1>  jne error
  1053                              <1>  %if NestingLevel>0
  1053 00009230 83C403              <1>  add esp, %1
  1053 00009233 6689E3              <1>  mov bx, sp
  1053 00009236 266667392F          <1>  cmp [es:bx], bp
  1053 0000923B 0F854E430000        <1>  jne error
  1053                              <1>  %if NestingLevel>1
  1053 00009241 B903000000          <1>  mov ecx, (NestingLevel-1)
  1053 00009246 6683C308            <1>  add bx, 2+(NestingLevel-1)*2
  1053                              <1>  %%testNesting:
  1053 0000924A 6683EB02            <1>  sub bx, 2
  1053 0000924E 266667390F          <1>  cmp [es:bx], cx
  1053 00009253 0F8536430000        <1>  jne error
  1053 00009259 E2EF                <1>  loop %%testNesting
  1053                              <1>  %endif
  1053                              <1>  %endif
  1054                                  	testENTER16 4,36,32
  1054                              <1>  %assign NestingLevel (%2 % 32)
  1054                              <1>  %assign stackWords 1
  1054                              <1>  %if NestingLevel>0
  1054                              <1>  %if NestingLevel>1
  1054                              <1>  %assign stackWords stackWords+(NestingLevel-1)
  1054                              <1>  %endif
  1054                              <1>  %assign stackWords stackWords+1
  1054                              <1>  %endif
  1054                              <1>  %assign stackBytes stackWords*2
  1054                              <1>  %if %3=16
  1054                              <1>  %assign val32 0x10000
  1054                              <1>  mov ax, D_SEG_PROT16
  1054                              <1>  %else
  1054                              <1>  %assign val32 0
  1054 0000925B 66B80C00            <1>  mov ax, D_SEG_PROT32
  1054                              <1>  %endif
  1054                              <1>  %assign ebpVal val32|(0xfffe-(stackBytes-2))
  1054                              <1>  %assign ebpResult val32| 0xfffe
  1054                              <1>  %assign espResult val32|(0xfffe-%1-(stackBytes-2))
  1054                              <1> 
  1054 0000925F 8ED0                <1>  mov ss, ax
  1054 00009261 8EC0                <1>  mov es, ax
  1054                              <1> 
  1054                              <1> 
  1054 00009263 B905000000          <1>  mov ecx, stackWords
  1054 00009268 31FF                <1>  xor edi, edi
  1054 0000926A 6683EF0A            <1>  sub di, stackBytes
  1054 0000926E 6631C0              <1>  xor ax, ax
  1054 00009271 F366AB              <1>  rep stosw
  1054                              <1> 
  1054 00009274 BDF6FF0000          <1>  mov ebp, ebpVal
  1054                              <1>  %if NestingLevel>1
  1054 00009279 B903000000          <1>  mov ecx, (NestingLevel-1)
  1054                              <1>  %%initbp:
  1054                              <1>  %if %3=16
  1054                              <1>  sub bp, 2
  1054                              <1>  mov [bp], cx
  1054                              <1>  %else
  1054 0000927E 83ED02              <1>  sub ebp, 2
  1054 00009281 66894D00            <1>  mov [ebp], cx
  1054                              <1>  %endif
  1054 00009285 E2F7                <1>  loop %%initbp
  1054 00009287 BDF6FF0000          <1>  mov ebp, ebpVal
  1054                              <1>  %endif
  1054                              <1> 
  1054 0000928C BC00000100          <1>  mov esp, 0x10000
  1054 00009291 66C8040024          <1>  o16 enter %1, %2
  1054 00009296 81FCF2FF0000        <1>  cmp esp, espResult
  1054 0000929C 0F85ED420000        <1>  jne error
  1054 000092A2 81FDFEFF0000        <1>  cmp ebp, ebpResult
  1054 000092A8 0F85E1420000        <1>  jne error
  1054 000092AE 6667837E00F6        <1>  cmp [bp], word (ebpVal&0xffff)
  1054 000092B4 0F85D5420000        <1>  jne error
  1054                              <1>  %if NestingLevel>0
  1054 000092BA 83C404              <1>  add esp, %1
  1054 000092BD 6689E3              <1>  mov bx, sp
  1054 000092C0 266667392F          <1>  cmp [es:bx], bp
  1054 000092C5 0F85C4420000        <1>  jne error
  1054                              <1>  %if NestingLevel>1
  1054 000092CB B903000000          <1>  mov ecx, (NestingLevel-1)
  1054 000092D0 6683C308            <1>  add bx, 2+(NestingLevel-1)*2
  1054                              <1>  %%testNesting:
  1054 000092D4 6683EB02            <1>  sub bx, 2
  1054 000092D8 266667390F          <1>  cmp [es:bx], cx
  1054 000092DD 0F85AC420000        <1>  jne error
  1054 000092E3 E2EF                <1>  loop %%testNesting
  1054                              <1>  %endif
  1054                              <1>  %endif
  1055                                  	testENTER32 5, 0,32
  1055                              <1>  %assign NestingLevel (%2 % 32)
  1055                              <1>  %assign stackDoubles 1
  1055                              <1>  %if NestingLevel>0
  1055                              <1>  %if NestingLevel>1
  1055                              <1>  %assign stackDoubles stackDoubles+(NestingLevel-1)
  1055                              <1>  %endif
  1055                              <1>  %assign stackDoubles stackDoubles+1
  1055                              <1>  %endif
  1055                              <1>  %assign stackBytes stackDoubles*4
  1055                              <1>  %if %3=16
  1055                              <1>  %assign val32 0x10000
  1055                              <1>  mov ax, D_SEG_PROT16
  1055                              <1>  %else
  1055                              <1>  %assign val32 0
  1055 000092E5 66B80C00            <1>  mov ax, D_SEG_PROT32
  1055                              <1>  %endif
  1055                              <1>  %assign ebpVal val32|(0xfffc-(stackBytes-4))
  1055                              <1>  %assign ebpResult val32| 0xfffc
  1055                              <1>  %assign espResult val32|(0xfffc-%1-(stackBytes-4))
  1055                              <1> 
  1055 000092E9 8ED0                <1>  mov ss, ax
  1055 000092EB 8EC0                <1>  mov es, ax
  1055                              <1> 
  1055                              <1> 
  1055 000092ED B901000000          <1>  mov ecx, stackDoubles
  1055 000092F2 31FF                <1>  xor edi, edi
  1055 000092F4 6683EF04            <1>  sub di, stackBytes
  1055 000092F8 31C0                <1>  xor eax, eax
  1055 000092FA F3AB                <1>  rep stosd
  1055                              <1> 
  1055 000092FC BDFCFF0000          <1>  mov ebp, ebpVal
  1055                              <1>  %if NestingLevel>1
  1055                              <1>  mov ecx, (NestingLevel-1)
  1055                              <1>  %%initbp:
  1055                              <1>  %if %3=16
  1055                              <1>  sub bp, 4
  1055                              <1>  mov [bp], ecx
  1055                              <1>  %else
  1055                              <1>  sub ebp, 4
  1055                              <1>  mov [ebp], ecx
  1055                              <1>  %endif
  1055                              <1>  loop %%initbp
  1055                              <1>  mov ebp, ebpVal
  1055                              <1>  %endif
  1055                              <1> 
  1055 00009301 BC00000100          <1>  mov esp, 0x10000
  1055 00009306 C8050000            <1>  o32 enter %1, %2
  1055 0000930A 81FCF7FF0000        <1>  cmp esp, espResult
  1055 00009310 0F8579420000        <1>  jne error
  1055 00009316 81FDFCFF0000        <1>  cmp ebp, ebpResult
  1055 0000931C 0F856D420000        <1>  jne error
  1055 00009322 67817E00FCFF0000    <1>  cmp [bp], dword ebpVal
  1055 0000932A 0F855F420000        <1>  jne error
  1055                              <1>  %if NestingLevel>0
  1055                              <1>  add esp, %1
  1055                              <1>  mov ebx, esp
  1055                              <1>  cmp [es:bx], ebp
  1055                              <1>  jne error
  1055                              <1>  %if NestingLevel>1
  1055                              <1>  mov ecx, (NestingLevel-1)
  1055                              <1>  add ebx, 4+(NestingLevel-1)*4
  1055                              <1>  %%testNesting:
  1055                              <1>  sub ebx, 4
  1055                              <1>  cmp [es:bx], ecx
  1055                              <1>  jne error
  1055                              <1>  loop %%testNesting
  1055                              <1>  %endif
  1055                              <1>  %endif
  1056                                  	testENTER32 6, 1,32
  1056                              <1>  %assign NestingLevel (%2 % 32)
  1056                              <1>  %assign stackDoubles 1
  1056                              <1>  %if NestingLevel>0
  1056                              <1>  %if NestingLevel>1
  1056                              <1>  %assign stackDoubles stackDoubles+(NestingLevel-1)
  1056                              <1>  %endif
  1056                              <1>  %assign stackDoubles stackDoubles+1
  1056                              <1>  %endif
  1056                              <1>  %assign stackBytes stackDoubles*4
  1056                              <1>  %if %3=16
  1056                              <1>  %assign val32 0x10000
  1056                              <1>  mov ax, D_SEG_PROT16
  1056                              <1>  %else
  1056                              <1>  %assign val32 0
  1056 00009330 66B80C00            <1>  mov ax, D_SEG_PROT32
  1056                              <1>  %endif
  1056                              <1>  %assign ebpVal val32|(0xfffc-(stackBytes-4))
  1056                              <1>  %assign ebpResult val32| 0xfffc
  1056                              <1>  %assign espResult val32|(0xfffc-%1-(stackBytes-4))
  1056                              <1> 
  1056 00009334 8ED0                <1>  mov ss, ax
  1056 00009336 8EC0                <1>  mov es, ax
  1056                              <1> 
  1056                              <1> 
  1056 00009338 B902000000          <1>  mov ecx, stackDoubles
  1056 0000933D 31FF                <1>  xor edi, edi
  1056 0000933F 6683EF08            <1>  sub di, stackBytes
  1056 00009343 31C0                <1>  xor eax, eax
  1056 00009345 F3AB                <1>  rep stosd
  1056                              <1> 
  1056 00009347 BDF8FF0000          <1>  mov ebp, ebpVal
  1056                              <1>  %if NestingLevel>1
  1056                              <1>  mov ecx, (NestingLevel-1)
  1056                              <1>  %%initbp:
  1056                              <1>  %if %3=16
  1056                              <1>  sub bp, 4
  1056                              <1>  mov [bp], ecx
  1056                              <1>  %else
  1056                              <1>  sub ebp, 4
  1056                              <1>  mov [ebp], ecx
  1056                              <1>  %endif
  1056                              <1>  loop %%initbp
  1056                              <1>  mov ebp, ebpVal
  1056                              <1>  %endif
  1056                              <1> 
  1056 0000934C BC00000100          <1>  mov esp, 0x10000
  1056 00009351 C8060001            <1>  o32 enter %1, %2
  1056 00009355 81FCF2FF0000        <1>  cmp esp, espResult
  1056 0000935B 0F852E420000        <1>  jne error
  1056 00009361 81FDFCFF0000        <1>  cmp ebp, ebpResult
  1056 00009367 0F8522420000        <1>  jne error
  1056 0000936D 67817E00F8FF0000    <1>  cmp [bp], dword ebpVal
  1056 00009375 0F8514420000        <1>  jne error
  1056                              <1>  %if NestingLevel>0
  1056 0000937B 83C406              <1>  add esp, %1
  1056 0000937E 89E3                <1>  mov ebx, esp
  1056 00009380 2667392F            <1>  cmp [es:bx], ebp
  1056 00009384 0F8505420000        <1>  jne error
  1056                              <1>  %if NestingLevel>1
  1056                              <1>  mov ecx, (NestingLevel-1)
  1056                              <1>  add ebx, 4+(NestingLevel-1)*4
  1056                              <1>  %%testNesting:
  1056                              <1>  sub ebx, 4
  1056                              <1>  cmp [es:bx], ecx
  1056                              <1>  jne error
  1056                              <1>  loop %%testNesting
  1056                              <1>  %endif
  1056                              <1>  %endif
  1057                                  	testENTER32 7, 4,32
  1057                              <1>  %assign NestingLevel (%2 % 32)
  1057                              <1>  %assign stackDoubles 1
  1057                              <1>  %if NestingLevel>0
  1057                              <1>  %if NestingLevel>1
  1057                              <1>  %assign stackDoubles stackDoubles+(NestingLevel-1)
  1057                              <1>  %endif
  1057                              <1>  %assign stackDoubles stackDoubles+1
  1057                              <1>  %endif
  1057                              <1>  %assign stackBytes stackDoubles*4
  1057                              <1>  %if %3=16
  1057                              <1>  %assign val32 0x10000
  1057                              <1>  mov ax, D_SEG_PROT16
  1057                              <1>  %else
  1057                              <1>  %assign val32 0
  1057 0000938A 66B80C00            <1>  mov ax, D_SEG_PROT32
  1057                              <1>  %endif
  1057                              <1>  %assign ebpVal val32|(0xfffc-(stackBytes-4))
  1057                              <1>  %assign ebpResult val32| 0xfffc
  1057                              <1>  %assign espResult val32|(0xfffc-%1-(stackBytes-4))
  1057                              <1> 
  1057 0000938E 8ED0                <1>  mov ss, ax
  1057 00009390 8EC0                <1>  mov es, ax
  1057                              <1> 
  1057                              <1> 
  1057 00009392 B905000000          <1>  mov ecx, stackDoubles
  1057 00009397 31FF                <1>  xor edi, edi
  1057 00009399 6683EF14            <1>  sub di, stackBytes
  1057 0000939D 31C0                <1>  xor eax, eax
  1057 0000939F F3AB                <1>  rep stosd
  1057                              <1> 
  1057 000093A1 BDECFF0000          <1>  mov ebp, ebpVal
  1057                              <1>  %if NestingLevel>1
  1057 000093A6 B903000000          <1>  mov ecx, (NestingLevel-1)
  1057                              <1>  %%initbp:
  1057                              <1>  %if %3=16
  1057                              <1>  sub bp, 4
  1057                              <1>  mov [bp], ecx
  1057                              <1>  %else
  1057 000093AB 83ED04              <1>  sub ebp, 4
  1057 000093AE 894D00              <1>  mov [ebp], ecx
  1057                              <1>  %endif
  1057 000093B1 E2F8                <1>  loop %%initbp
  1057 000093B3 BDECFF0000          <1>  mov ebp, ebpVal
  1057                              <1>  %endif
  1057                              <1> 
  1057 000093B8 BC00000100          <1>  mov esp, 0x10000
  1057 000093BD C8070004            <1>  o32 enter %1, %2
  1057 000093C1 81FCE5FF0000        <1>  cmp esp, espResult
  1057 000093C7 0F85C2410000        <1>  jne error
  1057 000093CD 81FDFCFF0000        <1>  cmp ebp, ebpResult
  1057 000093D3 0F85B6410000        <1>  jne error
  1057 000093D9 67817E00ECFF0000    <1>  cmp [bp], dword ebpVal
  1057 000093E1 0F85A8410000        <1>  jne error
  1057                              <1>  %if NestingLevel>0
  1057 000093E7 83C407              <1>  add esp, %1
  1057 000093EA 89E3                <1>  mov ebx, esp
  1057 000093EC 2667392F            <1>  cmp [es:bx], ebp
  1057 000093F0 0F8599410000        <1>  jne error
  1057                              <1>  %if NestingLevel>1
  1057 000093F6 B903000000          <1>  mov ecx, (NestingLevel-1)
  1057 000093FB 83C310              <1>  add ebx, 4+(NestingLevel-1)*4
  1057                              <1>  %%testNesting:
  1057 000093FE 83EB04              <1>  sub ebx, 4
  1057 00009401 2667390F            <1>  cmp [es:bx], ecx
  1057 00009405 0F8584410000        <1>  jne error
  1057 0000940B E2F1                <1>  loop %%testNesting
  1057                              <1>  %endif
  1057                              <1>  %endif
  1058                                  	testENTER32 8,36,16
  1058                              <1>  %assign NestingLevel (%2 % 32)
  1058                              <1>  %assign stackDoubles 1
  1058                              <1>  %if NestingLevel>0
  1058                              <1>  %if NestingLevel>1
  1058                              <1>  %assign stackDoubles stackDoubles+(NestingLevel-1)
  1058                              <1>  %endif
  1058                              <1>  %assign stackDoubles stackDoubles+1
  1058                              <1>  %endif
  1058                              <1>  %assign stackBytes stackDoubles*4
  1058                              <1>  %if %3=16
  1058                              <1>  %assign val32 0x10000
  1058 0000940D 66B80400            <1>  mov ax, D_SEG_PROT16
  1058                              <1>  %else
  1058                              <1>  %assign val32 0
  1058                              <1>  mov ax, D_SEG_PROT32
  1058                              <1>  %endif
  1058                              <1>  %assign ebpVal val32|(0xfffc-(stackBytes-4))
  1058                              <1>  %assign ebpResult val32| 0xfffc
  1058                              <1>  %assign espResult val32|(0xfffc-%1-(stackBytes-4))
  1058                              <1> 
  1058 00009411 8ED0                <1>  mov ss, ax
  1058 00009413 8EC0                <1>  mov es, ax
  1058                              <1> 
  1058                              <1> 
  1058 00009415 B905000000          <1>  mov ecx, stackDoubles
  1058 0000941A 31FF                <1>  xor edi, edi
  1058 0000941C 6683EF14            <1>  sub di, stackBytes
  1058 00009420 31C0                <1>  xor eax, eax
  1058 00009422 F3AB                <1>  rep stosd
  1058                              <1> 
  1058 00009424 BDECFF0100          <1>  mov ebp, ebpVal
  1058                              <1>  %if NestingLevel>1
  1058 00009429 B903000000          <1>  mov ecx, (NestingLevel-1)
  1058                              <1>  %%initbp:
  1058                              <1>  %if %3=16
  1058 0000942E 6683ED04            <1>  sub bp, 4
  1058 00009432 67894E00            <1>  mov [bp], ecx
  1058                              <1>  %else
  1058                              <1>  sub ebp, 4
  1058                              <1>  mov [ebp], ecx
  1058                              <1>  %endif
  1058 00009436 E2F6                <1>  loop %%initbp
  1058 00009438 BDECFF0100          <1>  mov ebp, ebpVal
  1058                              <1>  %endif
  1058                              <1> 
  1058 0000943D BC00000100          <1>  mov esp, 0x10000
  1058 00009442 C8080024            <1>  o32 enter %1, %2
  1058 00009446 81FCE4FF0100        <1>  cmp esp, espResult
  1058 0000944C 0F853D410000        <1>  jne error
  1058 00009452 81FDFCFF0100        <1>  cmp ebp, ebpResult
  1058 00009458 0F8531410000        <1>  jne error
  1058 0000945E 67817E00ECFF0100    <1>  cmp [bp], dword ebpVal
  1058 00009466 0F8523410000        <1>  jne error
  1058                              <1>  %if NestingLevel>0
  1058 0000946C 83C408              <1>  add esp, %1
  1058 0000946F 89E3                <1>  mov ebx, esp
  1058 00009471 2667392F            <1>  cmp [es:bx], ebp
  1058 00009475 0F8514410000        <1>  jne error
  1058                              <1>  %if NestingLevel>1
  1058 0000947B B903000000          <1>  mov ecx, (NestingLevel-1)
  1058 00009480 83C310              <1>  add ebx, 4+(NestingLevel-1)*4
  1058                              <1>  %%testNesting:
  1058 00009483 83EB04              <1>  sub ebx, 4
  1058 00009486 2667390F            <1>  cmp [es:bx], ecx
  1058 0000948A 0F85FF400000        <1>  jne error
  1058 00009490 E2F1                <1>  loop %%testNesting
  1058                              <1>  %endif
  1058                              <1>  %endif
  1059                                  	; The ENTER instruction causes a page fault whenever a write using the final
  1060                                  	; value of the stack pointer (within the current stack segment) would do so.
  1061 00009492 EB19                    	jmp .pageFaultTest
  1062                                  .pageFaultProc:
  1063 00009494 E8AC8CFFFF              	call  switchToRing3
  1064 00009499 66B81700                	mov   ax, DU_SEG_PROT|3
  1065 0000949D 8ED0                    	mov   ss, ax
  1066 0000949F BC04100000              	mov   esp, 0x1004
  1067                                  .pageFaultEIP:
  1068 000094A4 C8010000                	enter 1,0
  1069 000094A8 E9E2400000              	jmp   error
  1070                                  .pageFaultTest:
  1071                                  	loadProtModeStack
  1071 000094AD 2E0FB225[C71B0000]  <1>  lss esp, [cs:ptrSSprot]
  1072                                  	updPageFlags 0x1000|(TEST_BASE>>12), PTE_SUPER_W
  1072 000094B5 60                  <1>  pushad
  1072 000094B6 9C                  <1>  pushf
  1072 000094B7 B820100000          <1>  mov eax, %1
  1072 000094BC BA03000000          <1>  mov edx, %2
  1072 000094C1 E8F3DFFFFF          <1>  call updPageFlagsP
  1072 000094C6 9D                  <1>  popf
  1072 000094C7 61                  <1>  popad
  1073                                  	protModeFaultTestEx EX_PF, PF_PROT|PF_WRITE|PF_USER, 3, .pageFaultEIP, call .pageFaultProc
  1073                              <1>  setProtModeIntGate %1, %%continue, ACC_DPL_0
  1073 000094C8 60                  <2>  pushad
  1073 000094C9 9C                  <2>  pushf
  1073 000094CA 668CD8              <2>  mov ax, ds
  1073 000094CD 6650                <2>  push ax
  1073 000094CF B80E000000          <2>  mov eax, %1
  1073 000094D4 BF[1E950000]        <2>  mov edi, %2
  1073                              <2>  %if %3 != -1
  1073 000094D9 66BA0000            <2>  mov dx, %3
  1073                              <2>  %else
  1073                              <2>  mov dx, cs
  1073                              <2>  and dx, 7
  1073                              <2>  shl dx, 13
  1073                              <2>  %endif
  1073 000094DD 6683FA00            <2>  cmp dx, ACC_DPL_0
  1073 000094E1 7507                <2>  jne %%dpl3
  1073                              <2> %%dpl0:
  1073 000094E3 BE10000000          <2>  mov esi, C_SEG_PROT32
  1073 000094E8 EB05                <2>  jmp %%cont
  1073                              <2> %%dpl3:
  1073 000094EA BE18000000          <2>  mov esi, CU_SEG_PROT32
  1073                              <2> %%cont:
  1073 000094EF 668CC9              <2>  mov cx, cs
  1073 000094F2 66F7C10700          <2>  test cx, 7
  1073 000094F7 7509                <2>  jnz %%ring3
  1073                              <2> %%ring0:
  1073 000094F9 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
  1073 00009500 EB07                <2>  jmp %%call
  1073                              <2> %%ring3:
  1073 00009502 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
  1073                              <2> %%call:
  1073 00009509 E83688FFFF          <2>  call initIntGateProt
  1073 0000950E 6658                <2>  pop ax
  1073 00009510 8ED8                <2>  mov ds, ax
  1073 00009512 9D                  <2>  popf
  1073 00009513 61                  <2>  popad
  1073                              <1> %%test:
  1073 00009514 E87BFFFFFF          <1>  %5
  1073 00009519 E971400000          <1>  jmp error
  1073                              <1> %%continue:
  1073                              <1>  %if %3 = 0
  1073                              <1>  %assign expectedCS C_SEG_PROT32
  1073                              <1>  %else
  1073                              <1>  %assign expectedCS CU_SEG_PROT32|3
  1073                              <1>  %endif
  1073                              <1>  %if %4 = -1
  1073                              <1>  protModeExcCheck %1, %2, %%test, expectedCS
  1073                              <1>  %else
  1073                              <1>  protModeExcCheck %1, %2, %4, expectedCS
  1073                              <2>  %if %1 == 8 || (%1 > 10 && %1 <= 14)
  1073                              <2>  %assign exc_errcode 4
  1073 0000951E 36833C2407          <2>  cmp [ss:esp], dword %2
  1073 00009523 0F8566400000        <2>  jne error
  1073                              <2>  %else
  1073                              <2>  %assign exc_errcode 0
  1073                              <2>  %endif
  1073                              <2>  %if %4 != -1
  1073 00009529 36837C24081B        <2>  cmp [ss:esp+exc_errcode+4], dword %4
  1073 0000952F 0F855A400000        <2>  jne error
  1073                              <2>  %else
  1073                              <2>  mov bx, cs
  1073                              <2>  test bx, 7
  1073                              <2>  jnz %%ring3
  1073                              <2>  %%ring0:
  1073                              <2>  cmp [ss:esp+exc_errcode+4], dword C_SEG_PROT32
  1073                              <2>  jne error
  1073                              <2>  jmp %%continue
  1073                              <2>  %%ring3:
  1073                              <2>  cmp [ss:esp+exc_errcode+4], dword CU_SEG_PROT32|3
  1073                              <2>  jne error
  1073                              <2>  %%continue:
  1073                              <2>  %endif
  1073 00009535 36817C2404-         <2>  cmp [ss:esp+exc_errcode], dword %3
  1073 0000953A [A4940000]          <2>
  1073 0000953E 0F854B400000        <2>  jne error
  1073 00009544 83C410              <2>  add esp, 12+exc_errcode
  1073                              <1>  %endif
  1073                              <1>  setProtModeIntGate %1, DefaultExcHandler, ACC_DPL_0
  1073 00009547 60                  <2>  pushad
  1073 00009548 9C                  <2>  pushf
  1073 00009549 668CD8              <2>  mov ax, ds
  1073 0000954C 6650                <2>  push ax
  1073 0000954E B80E000000          <2>  mov eax, %1
  1073 00009553 BF[8FD50000]        <2>  mov edi, %2
  1073                              <2>  %if %3 != -1
  1073 00009558 66BA0000            <2>  mov dx, %3
  1073                              <2>  %else
  1073                              <2>  mov dx, cs
  1073                              <2>  and dx, 7
  1073                              <2>  shl dx, 13
  1073                              <2>  %endif
  1073 0000955C 6683FA00            <2>  cmp dx, ACC_DPL_0
  1073 00009560 7507                <2>  jne %%dpl3
  1073                              <2> %%dpl0:
  1073 00009562 BE10000000          <2>  mov esi, C_SEG_PROT32
  1073 00009567 EB05                <2>  jmp %%cont
  1073                              <2> %%dpl3:
  1073 00009569 BE18000000          <2>  mov esi, CU_SEG_PROT32
  1073                              <2> %%cont:
  1073 0000956E 668CC9              <2>  mov cx, cs
  1073 00009571 66F7C10700          <2>  test cx, 7
  1073 00009576 7509                <2>  jnz %%ring3
  1073                              <2> %%ring0:
  1073 00009578 2EC51D[971B0000]    <2>  lds ebx, [cs:ptrIDTprot]
  1073 0000957F EB07                <2>  jmp %%call
  1073                              <2> %%ring3:
  1073 00009581 2EC51D[9D1B0000]    <2>  lds ebx, [cs:ptrIDTUprot]
  1073                              <2> %%call:
  1073 00009588 E8B787FFFF          <2>  call initIntGateProt
  1073 0000958D 6658                <2>  pop ax
  1073 0000958F 8ED8                <2>  mov ds, ax
  1073 00009591 9D                  <2>  popf
  1073 00009592 61                  <2>  popad
  1074                                  	testCPL 0
  1074 00009593 668CC8              <1>  mov ax, cs
  1074 00009596 6683E003            <1>  and ax, 3
  1074 0000959A 6683F800            <1>  cmp ax, %1
  1074 0000959E 0F85EB3F0000        <1>  jne error
  1075 000095A4 66B81C00                	mov   ax, D1_SEG_PROT
  1076 000095A8 8ED8                    	mov   ds, ax
  1077 000095AA 66B82400                	mov   ax, D2_SEG_PROT
  1078 000095AE 8EC0                    	mov   es, ax
  1079                                  
  1080                                  ;
  1081                                  ;   LEAVE
  1082                                  ;
  1083                                  %include "tests/leave_m.asm"
     1                              <1> ;
     2                              <1> ; IF StackAddressSize = 32
     3                              <1> ; THEN
     4                              <1> ;  ESP ← EBP
     5                              <1> ; ELSE
     6                              <1> ;  SP ← BP
     7                              <1> ; FI
     8                              <1> ;
     9                              <1> ; IF OperandSize = 32
    10                              <1> ;  EBP ← Pop32()
    11                              <1> ; ELSE
    12                              <1> ;  BP ← Pop16()
    13                              <1> ; FI
    14                              <1> ;
    15                              <1> ; %1 operand size (o16,o32)
    16                              <1> ; %2 stack size (16,32)
    17                              <1> %macro testLEAVE 2
    18                              <1> 	%if %2 = 16
    19                              <1> 		mov  ax, D_SEG_PROT16
    20                              <1> 		%ifidni %1,o16
    21                              <1> 			%assign espResult 0x00000006
    22                              <1> 			%assign ebpResult 0x00015678
    23                              <1> 		%else
    24                              <1> 			%assign espResult 0x00000008
    25                              <1> 			%assign ebpResult 0x12345678
    26                              <1> 		%endif
    27                              <1> 	%else
    28                              <1> 		mov  ax, D_SEG_PROT32
    29                              <1> 		%ifidni %1,o16
    30                              <1> 			%assign espResult 0x00010006
    31                              <1> 			%assign ebpResult 0x00015678
    32                              <1> 		%else
    33                              <1> 			%assign espResult 0x00010008
    34                              <1> 			%assign ebpResult 0x12345678
    35                              <1> 		%endif
    36                              <1> 	%endif
    37                              <1> 	mov  ss, ax
    38                              <1> 	mov  esp, 0x10008
    39                              <1> 	push dword 0x12345678
    40                              <1> 	mov  ebp, esp
    41                              <1> 	mov  esp, 0
    42                              <1> 	%1 leave
    43                              <1> 	cmp  esp, espResult
    44                              <1> 	jne  error
    45                              <1> 	cmp  ebp, ebpResult
    46                              <1> 	jne  error
    47                              <1> %endmacro
    48                              <1> 
  1084                                  post1B:
  1085                                  	POST 1B
  1085 000095B0 B01B                <1>  mov al, 0x%1
  1085 000095B2 66BA9001            <1>  mov dx, POST_PORT
  1085 000095B6 EE                  <1>  out dx, al
  1086                                  	testLEAVE o16,16
  1086                              <1>  %if %2 = 16
  1086 000095B7 66B80400            <1>  mov ax, D_SEG_PROT16
  1086                              <1>  %ifidni %1,o16
  1086                              <1>  %assign espResult 0x00000006
  1086                              <1>  %assign ebpResult 0x00015678
  1086                              <1>  %else
  1086                              <1>  %assign espResult 0x00000008
  1086                              <1>  %assign ebpResult 0x12345678
  1086                              <1>  %endif
  1086                              <1>  %else
  1086                              <1>  mov ax, D_SEG_PROT32
  1086                              <1>  %ifidni %1,o16
  1086                              <1>  %assign espResult 0x00010006
  1086                              <1>  %assign ebpResult 0x00015678
  1086                              <1>  %else
  1086                              <1>  %assign espResult 0x00010008
  1086                              <1>  %assign ebpResult 0x12345678
  1086                              <1>  %endif
  1086                              <1>  %endif
  1086 000095BB 8ED0                <1>  mov ss, ax
  1086 000095BD BC08000100          <1>  mov esp, 0x10008
  1086 000095C2 6878563412          <1>  push dword 0x12345678
  1086 000095C7 89E5                <1>  mov ebp, esp
  1086 000095C9 BC00000000          <1>  mov esp, 0
  1086 000095CE 66C9                <1>  %1 leave
  1086 000095D0 83FC06              <1>  cmp esp, espResult
  1086 000095D3 0F85B63F0000        <1>  jne error
  1086 000095D9 81FD78560100        <1>  cmp ebp, ebpResult
  1086 000095DF 0F85AA3F0000        <1>  jne error
  1087                                  	testLEAVE o16,32
  1087                              <1>  %if %2 = 16
  1087                              <1>  mov ax, D_SEG_PROT16
  1087                              <1>  %ifidni %1,o16
  1087                              <1>  %assign espResult 0x00000006
  1087                              <1>  %assign ebpResult 0x00015678
  1087                              <1>  %else
  1087                              <1>  %assign espResult 0x00000008
  1087                              <1>  %assign ebpResult 0x12345678
  1087                              <1>  %endif
  1087                              <1>  %else
  1087 000095E5 66B80C00            <1>  mov ax, D_SEG_PROT32
  1087                              <1>  %ifidni %1,o16
  1087                              <1>  %assign espResult 0x00010006
  1087                              <1>  %assign ebpResult 0x00015678
  1087                              <1>  %else
  1087                              <1>  %assign espResult 0x00010008
  1087                              <1>  %assign ebpResult 0x12345678
  1087                              <1>  %endif
  1087                              <1>  %endif
  1087 000095E9 8ED0                <1>  mov ss, ax
  1087 000095EB BC08000100          <1>  mov esp, 0x10008
  1087 000095F0 6878563412          <1>  push dword 0x12345678
  1087 000095F5 89E5                <1>  mov ebp, esp
  1087 000095F7 BC00000000          <1>  mov esp, 0
  1087 000095FC 66C9                <1>  %1 leave
  1087 000095FE 81FC06000100        <1>  cmp esp, espResult
  1087 00009604 0F85853F0000        <1>  jne error
  1087 0000960A 81FD78560100        <1>  cmp ebp, ebpResult
  1087 00009610 0F85793F0000        <1>  jne error
  1088                                  	testLEAVE o32,16
  1088                              <1>  %if %2 = 16
  1088 00009616 66B80400            <1>  mov ax, D_SEG_PROT16
  1088                              <1>  %ifidni %1,o16
  1088                              <1>  %assign espResult 0x00000006
  1088                              <1>  %assign ebpResult 0x00015678
  1088                              <1>  %else
  1088                              <1>  %assign espResult 0x00000008
  1088                              <1>  %assign ebpResult 0x12345678
  1088                              <1>  %endif
  1088                              <1>  %else
  1088                              <1>  mov ax, D_SEG_PROT32
  1088                              <1>  %ifidni %1,o16
  1088                              <1>  %assign espResult 0x00010006
  1088                              <1>  %assign ebpResult 0x00015678
  1088                              <1>  %else
  1088                              <1>  %assign espResult 0x00010008
  1088                              <1>  %assign ebpResult 0x12345678
  1088                              <1>  %endif
  1088                              <1>  %endif
  1088 0000961A 8ED0                <1>  mov ss, ax
  1088 0000961C BC08000100          <1>  mov esp, 0x10008
  1088 00009621 6878563412          <1>  push dword 0x12345678
  1088 00009626 89E5                <1>  mov ebp, esp
  1088 00009628 BC00000000          <1>  mov esp, 0
  1088 0000962D C9                  <1>  %1 leave
  1088 0000962E 83FC08              <1>  cmp esp, espResult
  1088 00009631 0F85583F0000        <1>  jne error
  1088 00009637 81FD78563412        <1>  cmp ebp, ebpResult
  1088 0000963D 0F854C3F0000        <1>  jne error
  1089                                  	testLEAVE o32,32
  1089                              <1>  %if %2 = 16
  1089                              <1>  mov ax, D_SEG_PROT16
  1089                              <1>  %ifidni %1,o16
  1089                              <1>  %assign espResult 0x00000006
  1089                              <1>  %assign ebpResult 0x00015678
  1089                              <1>  %else
  1089                              <1>  %assign espResult 0x00000008
  1089                              <1>  %assign ebpResult 0x12345678
  1089                              <1>  %endif
  1089                              <1>  %else
  1089 00009643 66B80C00            <1>  mov ax, D_SEG_PROT32
  1089                              <1>  %ifidni %1,o16
  1089                              <1>  %assign espResult 0x00010006
  1089                              <1>  %assign ebpResult 0x00015678
  1089                              <1>  %else
  1089                              <1>  %assign espResult 0x00010008
  1089                              <1>  %assign ebpResult 0x12345678
  1089                              <1>  %endif
  1089                              <1>  %endif
  1089 00009647 8ED0                <1>  mov ss, ax
  1089 00009649 BC08000100          <1>  mov esp, 0x10008
  1089 0000964E 6878563412          <1>  push dword 0x12345678
  1089 00009653 89E5                <1>  mov ebp, esp
  1089 00009655 BC00000000          <1>  mov esp, 0
  1089 0000965A C9                  <1>  %1 leave
  1089 0000965B 81FC08000100        <1>  cmp esp, espResult
  1089 00009661 0F85283F0000        <1>  jne error
  1089 00009667 81FD78563412        <1>  cmp ebp, ebpResult
  1089 0000966D 0F851C3F0000        <1>  jne error
  1090                                  
  1091                                  	loadProtModeStack
  1091 00009673 2E0FB225[C71B0000]  <1>  lss esp, [cs:ptrSSprot]
  1092 0000967B EB1F                    	jmp post1C
  1093                                  
  1094                                  ;
  1095                                  ;   VERR/VERW
  1096                                  ;
  1097                                  %include "tests/ver_p.asm"
     1                              <1> ;
     2                              <1> ; Tests for VERR and VERW instructions
     3                              <1> ;
     4                              <1> ; DX = segment selector
     5                              <1> ; BL = expected ZF value on bit 6, other bits to 0
     6                              <1> ;
     7                              <1> testVERRp:
     8 0000967D 88DC                <1> 	mov ah, bl
     9 0000967F F6D4                <1> 	not ah
    10 00009681 9E                  <1> 	sahf
    11 00009682 0F00E2              <1> 	verr dx
    12 00009685 EB08                <1> 	jmp testVERresult
    13                              <1> testVERWp:
    14 00009687 88DC                <1> 	mov ah, bl
    15 00009689 F6D4                <1> 	not ah
    16 0000968B 9E                  <1> 	sahf
    17 0000968C 0F00EA              <1> 	verw dx
    18                              <1> testVERresult:
    19 0000968F 9F                  <1> 	lahf
    20 00009690 80E440              <1> 	and ah, 0x40
    21 00009693 38E3                <1> 	cmp bl, ah
    22 00009695 0F85F43E0000        <1> 	jne error
    23 0000969B C3                  <1> 	ret
    24                              <1> 
    25                              <1> ;
    26                              <1> ; %1 = segment selector
    27                              <1> ; %2 = 0 or 1 (expected ZF result)
    28                              <1> ;
    29                              <1> %macro testVERR 2
    30                              <1> 	mov dx, %1
    31                              <1> 	mov bl, ((%2 & 1) << 6)
    32                              <1> 	call testVERRp
    33                              <1> %endmacro
    34                              <1> %macro testVERW 2
    35                              <1> 	mov dx, %1
    36                              <1> 	mov bx, ((%2 & 1) << 6)
    37                              <1> 	call testVERWp
    38                              <1> %endmacro
  1098                                  post1C:
  1099                                  	POST 1C
  1099 0000969C B01C                <1>  mov al, 0x%1
  1099 0000969E 66BA9001            <1>  mov dx, POST_PORT
  1099 000096A2 EE                  <1>  out dx, al
  1100                                  	; null segment
  1101                                  	testVERR NULL,0
  1101 000096A3 66BA0000            <1>  mov dx, %1
  1101 000096A7 B300                <1>  mov bl, ((%2 & 1) << 6)
  1101 000096A9 E8CFFFFFFF          <1>  call testVERRp
  1102                                  	testVERW NULL,0
  1102 000096AE 66BA0000            <1>  mov dx, %1
  1102 000096B2 66BB0000            <1>  mov bx, ((%2 & 1) << 6)
  1102 000096B6 E8CCFFFFFF          <1>  call testVERWp
  1103                                  	; out of bounds descriptor
  1104                                  	testVERR GDT_SEG_LIMIT+1,0
  1104 000096BB 66BA0003            <1>  mov dx, %1
  1104 000096BF B300                <1>  mov bl, ((%2 & 1) << 6)
  1104 000096C1 E8B7FFFFFF          <1>  call testVERRp
  1105                                  	testVERW GDT_SEG_LIMIT+1,0
  1105 000096C6 66BA0003            <1>  mov dx, %1
  1105 000096CA 66BB0000            <1>  mov bx, ((%2 & 1) << 6)
  1105 000096CE E8B4FFFFFF          <1>  call testVERWp
  1106                                  	; system segment
  1107                                  	testVERR LDT_SEG_PROT,0
  1107 000096D3 66BA4800            <1>  mov dx, %1
  1107 000096D7 B300                <1>  mov bl, ((%2 & 1) << 6)
  1107 000096D9 E89FFFFFFF          <1>  call testVERRp
  1108                                  	testVERW LDT_SEG_PROT,0
  1108 000096DE 66BA4800            <1>  mov dx, %1
  1108 000096E2 66BB0000            <1>  mov bx, ((%2 & 1) << 6)
  1108 000096E6 E89CFFFFFF          <1>  call testVERWp
  1109                                  
  1110                                  	; CPL 0
  1111                                  	; code segment
  1112                                  	testVERR C_SEG_PROT32,1
  1112 000096EB 66BA1000            <1>  mov dx, %1
  1112 000096EF B340                <1>  mov bl, ((%2 & 1) << 6)
  1112 000096F1 E887FFFFFF          <1>  call testVERRp
  1113                                  	testVERW C_SEG_PROT32,0
  1113 000096F6 66BA1000            <1>  mov dx, %1
  1113 000096FA 66BB0000            <1>  mov bx, ((%2 & 1) << 6)
  1113 000096FE E884FFFFFF          <1>  call testVERWp
  1114                                  	; data segment
  1115                                  	testVERR S_SEG_PROT32,1
  1115 00009703 66BA6000            <1>  mov dx, %1
  1115 00009707 B340                <1>  mov bl, ((%2 & 1) << 6)
  1115 00009709 E86FFFFFFF          <1>  call testVERRp
  1116                                  	testVERW S_SEG_PROT32,1
  1116 0000970E 66BA6000            <1>  mov dx, %1
  1116 00009712 66BB4000            <1>  mov bx, ((%2 & 1) << 6)
  1116 00009716 E86CFFFFFF          <1>  call testVERWp
  1117                                  
  1118                                  	; CPL 3
  1119 0000971B E8258AFFFF              	call  switchToRing3
  1120                                  	; non-conforming code segment
  1121                                  	testVERR C_SEG_PROT32,0  ; DPL0 code segment
  1121 00009720 66BA1000            <1>  mov dx, %1
  1121 00009724 B300                <1>  mov bl, ((%2 & 1) << 6)
  1121 00009726 E852FFFFFF          <1>  call testVERRp
  1122                                  	testVERW C_SEG_PROT32,0
  1122 0000972B 66BA1000            <1>  mov dx, %1
  1122 0000972F 66BB0000            <1>  mov bx, ((%2 & 1) << 6)
  1122 00009733 E84FFFFFFF          <1>  call testVERWp
  1123                                  	testVERR CU_SEG_PROT32,1 ; DPL3 code segment
  1123 00009738 66BA1800            <1>  mov dx, %1
  1123 0000973C B340                <1>  mov bl, ((%2 & 1) << 6)
  1123 0000973E E83AFFFFFF          <1>  call testVERRp
  1124                                  	testVERW CU_SEG_PROT32,0
  1124 00009743 66BA1800            <1>  mov dx, %1
  1124 00009747 66BB0000            <1>  mov bx, ((%2 & 1) << 6)
  1124 0000974B E837FFFFFF          <1>  call testVERWp
  1125                                  	; conforming code segment
  1126                                  	testVERR CC_SEG_PROT32,1
  1126 00009750 66BA2000            <1>  mov dx, %1
  1126 00009754 B340                <1>  mov bl, ((%2 & 1) << 6)
  1126 00009756 E822FFFFFF          <1>  call testVERRp
  1127                                  	testVERW CC_SEG_PROT32,0
  1127 0000975B 66BA2000            <1>  mov dx, %1
  1127 0000975F 66BB0000            <1>  mov bx, ((%2 & 1) << 6)
  1127 00009763 E81FFFFFFF          <1>  call testVERWp
  1128                                  	; data segment
  1129                                  	testVERR S_SEG_PROT32,0  ; DPL0 stack segment
  1129 00009768 66BA6000            <1>  mov dx, %1
  1129 0000976C B300                <1>  mov bl, ((%2 & 1) << 6)
  1129 0000976E E80AFFFFFF          <1>  call testVERRp
  1130                                  	testVERW S_SEG_PROT32,0
  1130 00009773 66BA6000            <1>  mov dx, %1
  1130 00009777 66BB0000            <1>  mov bx, ((%2 & 1) << 6)
  1130 0000977B E807FFFFFF          <1>  call testVERWp
  1131                                  	testVERR SU_SEG_PROT32,1 ; DPL3 stack segment
  1131 00009780 66BA6800            <1>  mov dx, %1
  1131 00009784 B340                <1>  mov bl, ((%2 & 1) << 6)
  1131 00009786 E8F2FEFFFF          <1>  call testVERRp
  1132                                  	testVERW SU_SEG_PROT32,1
  1132 0000978B 66BA6800            <1>  mov dx, %1
  1132 0000978F 66BB4000            <1>  mov bx, ((%2 & 1) << 6)
  1132 00009793 E8EFFEFFFF          <1>  call testVERWp
  1133                                  	testVERR ROU_SEG_PROT,1  ; DPL3 read-only data segment
  1133 00009798 66BA3C00            <1>  mov dx, %1
  1133 0000979C B340                <1>  mov bl, ((%2 & 1) << 6)
  1133 0000979E E8DAFEFFFF          <1>  call testVERRp
  1134                                  	testVERW ROU_SEG_PROT,0
  1134 000097A3 66BA3C00            <1>  mov dx, %1
  1134 000097A7 66BB0000            <1>  mov bx, ((%2 & 1) << 6)
  1134 000097AB E8D7FEFFFF          <1>  call testVERWp
  1135 000097B0 E8E389FFFF              	call  switchToRing0
  1136                                  
  1137                                  
  1138                                  %include "print_init.asm"
     1                              <1> 	%if LPT_PORT && IBM_PS1
     2                              <1> 	; Enable output to the configured LPT port
     3                              <1> 	mov    ax, 0xff7f  ; bit 7 = 0  setup functions
     4                              <1> 	out    94h, al     ; system board enable/setup register
     5                              <1> 	mov    dx, 102h
     6                              <1> 	in     al, dx      ; al = p[102h] POS register 2
     7                              <1> 	or     al, 0x91    ; enable LPT1 on port 3BCh, normal mode
     8                              <1> 	out    dx, al
     9                              <1> 	mov    al, ah
    10                              <1> 	out    94h, al     ; bit 7 = 1  enable functions
    11                              <1> 	%endif
  1139                                  
  1140 000097B5 E93A010000              	jmp undefTests
  1141                                  
  1142                                  %include "print_p.asm"
     1 000097BA 4541583D00          <1> strEAX:    db  "EAX=",0
     2 000097BF 4544583D00          <1> strEDX:    db  "EDX=",0
     3 000097C4 50533D00            <1> strPS:     db  "PS=",0
     4 000097C8 2344452000          <1> strDE:     db  "#DE ",0 ; when this is displayed, it indicates a Divide Error exception
     5 000097CD 425744              <1> achSize    db  "BWD"
     6 000097D0 556E737570706F7274- <1> strUnkCPU: db  "Unsupported CPU family: ",0
     6 000097D9 656420435055206661- <1>
     6 000097E2 6D696C793A2000      <1>
     7                              <1> 
     8                              <1> ;
     9                              <1> ;   printUnkCPU()
    10                              <1> ;
    11                              <1> ;   Uses: ESI, EAX, CL
    12                              <1> ;
    13                              <1> printUnkCPU:
    14 000097E9 BE[D0970000]        <1> 	mov esi, strUnkCPU
    15 000097EE E827000000          <1> 	call printStr
    16 000097F3 B803000000          <1> 	mov eax, CPU_FAMILY
    17 000097F8 B101                <1> 	mov cl, 1
    18 000097FA E82B000000          <1> 	call printVal
    19 000097FF C3                  <1> 	ret
    20                              <1> 
    21                              <1> ;
    22                              <1> ;   printEOL()
    23                              <1> ;
    24                              <1> ;   Uses: None
    25                              <1> ;
    26                              <1> printEOL:
    27 00009800 50                  <1> 	push    eax
    28                              <1> ;	mov     al,0x0d
    29                              <1> ;	call    printChar
    30 00009801 B00A                <1> 	mov     al,0x0a
    31 00009803 E802000000          <1> 	call    printChar
    32 00009808 58                  <1> 	pop     eax
    33 00009809 C3                  <1> 	ret
    34                              <1> 
    35                              <1> ;
    36                              <1> ;   printChar(AL)
    37                              <1> ;
    38                              <1> ;   Uses: None
    39                              <1> ;
    40                              <1> printChar:
    41 0000980A 9C                  <1> 	pushfd
    42 0000980B 52                  <1> 	push   edx
    43                              <1> 	%if COM_PORT
    44                              <1> 	push   eax
    45                              <1> 	mov    dx, [cs:COMLSRports+(COM_PORT-1)*2]   ; EDX == COM LSR (Line Status Register)
    46                              <1> .loop:
    47                              <1> 	in     al, dx
    48                              <1> 	test   al, 0x20    ; THR (Transmitter Holding Register) empty?
    49                              <1> 	jz     .loop       ; no
    50                              <1> 	pop    eax
    51                              <1> 	mov    dx, [cs:COMTHRports+(COM_PORT-1)*2]   ; EDX -> COM2 THR (Transmitter Holding Register)
    52                              <1> 	out    dx, al
    53                              <1> 	jmp    $+2
    54                              <1> 	%endif
    55                              <1> 	%if LPT_PORT
    56 0000980C 2E668B15[9CD50000]  <1> 	mov    dx, [cs:LPTports+(LPT_PORT-1)*2]
    57 00009814 EE                  <1> 	out    dx, al
    58 00009815 EB00                <1> 	jmp    $+2
    59                              <1> 	%endif
    60                              <1> 	%if OUT_PORT
    61                              <1> 	out    OUT_PORT, al
    62                              <1> 	%endif
    63 00009817 5A                  <1> 	pop    edx
    64 00009818 9D                  <1> 	popfd
    65 00009819 C3                  <1> 	ret
    66                              <1> 
    67                              <1> ;
    68                              <1> ;   printStr(ESI -> zero-terminated string)
    69                              <1> ;
    70                              <1> ;   Uses: ESI, Flags
    71                              <1> ;
    72                              <1> printStr:
    73 0000981A 50                  <1> 	push    eax
    74                              <1> .loop:
    75 0000981B 2EAC                <1> 	cs lodsb
    76 0000981D 84C0                <1> 	test    al, al
    77 0000981F 7407                <1> 	jz      .done
    78 00009821 E8E4FFFFFF          <1> 	call    printChar
    79 00009826 EBF3                <1> 	jmp     .loop
    80                              <1> .done:
    81 00009828 58                  <1> 	pop     eax
    82 00009829 C3                  <1> 	ret
    83                              <1> 
    84                              <1> ;
    85                              <1> ;   printVal(EAX == value, CL == number of hex digits)
    86                              <1> ;
    87                              <1> ;   Uses: EAX, ECX, Flags
    88                              <1> ;
    89                              <1> printVal:
    90 0000982A C0E102              <1> 	shl    cl, 2  ; CL == number of bits (4 times the number of hex digits)
    91 0000982D 741A                <1> 	jz     .done
    92                              <1> .loop:
    93 0000982F 80E904              <1> 	sub    cl, 4
    94 00009832 50                  <1> 	push   eax
    95 00009833 D3E8                <1> 	shr    eax, cl
    96 00009835 240F                <1> 	and    al, 0x0f
    97 00009837 0430                <1> 	add    al, '0'
    98 00009839 3C39                <1> 	cmp    al, '9'
    99 0000983B 7602                <1> 	jbe    .digit
   100 0000983D 0407                <1> 	add    al, 'A'-'0'-10
   101                              <1> .digit:
   102 0000983F E8C6FFFFFF          <1> 	call   printChar
   103 00009844 58                  <1> 	pop    eax
   104 00009845 84C9                <1> 	test   cl, cl
   105 00009847 75E6                <1> 	jnz    .loop
   106                              <1> .done:
   107 00009849 B020                <1> 	mov    al, ' '
   108 0000984B E8BAFFFFFF          <1> 	call   printChar
   109 00009850 C3                  <1> 	ret
   110                              <1> 
   111                              <1> ;
   112                              <1> ;   printOp(ESI -> instruction sequence)
   113                              <1> ;
   114                              <1> ;   Rewinds ESI to the start of the mnemonic preceding the instruction sequence and prints the mnemonic
   115                              <1> ;
   116                              <1> ;   Uses: None
   117                              <1> ;
   118                              <1> printOp:
   119 00009851 9C                  <1> 	pushfd
   120 00009852 60                  <1> 	pushad
   121                              <1> .findSize:
   122 00009853 4E                  <1> 	dec    esi
   123 00009854 2E8A46FF            <1> 	mov    al, [cs:esi-1]
   124 00009858 3C20                <1> 	cmp    al, 32
   125 0000985A 73F7                <1> 	jae    .findSize
   126 0000985C E8B9FFFFFF          <1> 	call   printStr
   127 00009861 0FB6C0              <1> 	movzx  eax, al
   128 00009864 2E8A80[CD970000]    <1> 	mov    al, [cs:achSize+eax]
   129 0000986B E89AFFFFFF          <1> 	call   printChar
   130 00009870 B020                <1> 	mov    al, ' '
   131 00009872 E893FFFFFF          <1> 	call   printChar
   132 00009877 61                  <1> 	popad
   133 00009878 9D                  <1> 	popfd
   134 00009879 C3                  <1> 	ret
   135                              <1> 
   136                              <1> ;
   137                              <1> ;   printEAX()
   138                              <1> ;
   139                              <1> ;   Uses: None
   140                              <1> ;
   141                              <1> printEAX:
   142 0000987A 9C                  <1> 	pushfd
   143 0000987B 60                  <1> 	pushad
   144 0000987C BE[BA970000]        <1> 	mov     esi, strEAX
   145 00009881 E894FFFFFF          <1> 	call    printStr
   146 00009886 B108                <1> 	mov     cl, 8
   147 00009888 E89DFFFFFF          <1> 	call    printVal
   148 0000988D 61                  <1> 	popad
   149 0000988E 9D                  <1> 	popfd
   150 0000988F C3                  <1> 	ret
   151                              <1> 
   152                              <1> ;
   153                              <1> ;   printEDX()
   154                              <1> ;
   155                              <1> ;   Uses: None
   156                              <1> ;
   157                              <1> printEDX:
   158 00009890 9C                  <1> 	pushfd
   159 00009891 60                  <1> 	pushad
   160 00009892 BE[BF970000]        <1> 	mov    esi, strEDX
   161 00009897 E87EFFFFFF          <1> 	call   printStr
   162 0000989C B108                <1> 	mov    cl, 8
   163 0000989E 89D0                <1> 	mov    eax, edx
   164 000098A0 E885FFFFFF          <1> 	call   printVal
   165 000098A5 61                  <1> 	popad
   166 000098A6 9D                  <1> 	popfd
   167 000098A7 C3                  <1> 	ret
   168                              <1> 
   169                              <1> ;
   170                              <1> ;   printPS(ESI -> instruction sequence)
   171                              <1> ;
   172                              <1> ;   Uses: None
   173                              <1> ;
   174                              <1> printPS:
   175 000098A8 9C                  <1> 	pushfd
   176 000098A9 60                  <1> 	pushad
   177 000098AA 9C                  <1> 	pushfd
   178 000098AB 5A                  <1> 	pop    edx
   179                              <1> .findType:
   180 000098AC 4E                  <1> 	dec    esi
   181 000098AD 2E8A46FF            <1> 	mov    al, [cs:esi-1]
   182 000098B1 3C20                <1> 	cmp    al, 32
   183 000098B3 73F7                <1> 	jae    .findType
   184 000098B5 2E0FB646FE          <1> 	movzx  eax, byte [cs:esi-2]
   185 000098BA 2E231485[ECD00000]  <1> 	and    edx, [cs:typeMasks+eax*4]
   186 000098C2 BE[C4970000]        <1> 	mov    esi, strPS
   187 000098C7 E84EFFFFFF          <1> 	call   printStr
   188 000098CC B104                <1> 	mov    cl, 4
   189 000098CE 89D0                <1> 	mov    eax, edx
   190 000098D0 E855FFFFFF          <1> 	call   printVal
   191 000098D5 61                  <1> 	popad
   192 000098D6 9D                  <1> 	popfd
   193 000098D7 C3                  <1> 	ret
   194                              <1> 
   195                              <1> ;
   196                              <1> ;	printPS2
   197                              <1> ;	EAX -> mask
   198                              <1> ;
   199                              <1> ;	Uses: None
   200                              <1> ;
   201                              <1> printPS2:
   202 000098D8 9C                  <1> 	pushfd
   203 000098D9 60                  <1> 	pushad
   204 000098DA 9C                  <1> 	pushfd
   205 000098DB 5A                  <1> 	pop edx
   206 000098DC 21C2                <1> 	and edx, eax
   207 000098DE BE[C4970000]        <1> 	mov esi, strPS
   208 000098E3 E832FFFFFF          <1> 	call printStr
   209 000098E8 B104                <1> 	mov  cl, 4
   210 000098EA 89D0                <1> 	mov  eax, edx
   211 000098EC E839FFFFFF          <1> 	call printVal
   212 000098F1 61                  <1> 	popad
   213 000098F2 9D                  <1> 	popfd
   214 000098F3 C3                  <1> 	ret
  1143                                  
  1144                                  ;
  1145                                  ;   Undefined behaviours and bugs
  1146                                  ;   Results have been validated against 386SX hardware.
  1147                                  ;
  1148                                  undefTests:
  1149                                  
  1150                                  	POST E0
  1150 000098F4 B0E0                <1>  mov al, 0x%1
  1150 000098F6 66BA9001            <1>  mov dx, POST_PORT
  1150 000098FA EE                  <1>  out dx, al
  1151                                  
  1152 000098FB B000                    	mov al, 0
  1153 000098FD 3C00                    	cmp al, TEST_UNDEF
  1154 000098FF 0F8490180000            	je arithLogicTests
  1155                                  
  1156 00009905 B003                    	mov al, CPU_FAMILY
  1157 00009907 3C03                    	cmp al, 3
  1158 00009909 740A                    	je bcd386FlagsTest
  1159 0000990B E8D9FEFFFF              	call printUnkCPU
  1160 00009910 E97A3C0000              	jmp error
  1161                                  
  1162                                  	%include "tests/bcd_m.asm"
     1                              <1> ;
     2                              <1> ;   Executes and prints the results of a BCD operation.
     3                              <1> ;   No checks are performed.
     4                              <1> ;
     5                              <1> ;	%1 operation
     6                              <1> ;   %2 eax: the operand
     7                              <1> ;   %3 flags: value of flags before %1 execution
     8                              <1> ;   %4 flags mask: print only the resulting flags that are defined by this mask
     9                              <1> ;
    10                              <1> ;   Uses: EAX, Flags
    11                              <1> ;
    12                              <1> %define quot "
    12          ******************  <1>  warning: unterminated string [-w+other]
    13                              <1> %macro testBCD 4
    14                              <1> 	mov esi, %%name
    15                              <1> 	call printStr
    16                              <1> 	mov eax, %2
    17                              <1> 	call printEAX ; print the operand
    18                              <1> 	mov eax, %3   ; print only the flags that have been set
    19                              <1> 	push %3
    20                              <1> 	popf
    21                              <1> 	call printPS2 ; print the Processor Status (flags) before execution
    22                              <1> 
    23                              <1> 	mov eax, %2
    24                              <1> 	push %3
    25                              <1> 	popf
    26                              <1> 	%1
    27                              <1> 	pushfd
    28                              <1> 
    29                              <1> 	jmp %%printres
    30                              <1> 
    31                              <1> %%name:
    32                              <1> 	db quot %+ %1 %+ quot,' ',0
    33                              <1> 
    34                              <1> %%printres:
    35                              <1> 	call  printEAX ; print the result
    36                              <1> 	mov eax, %4
    37                              <1> 	popf
    38                              <1> 	call  printPS2 ; print the Processor Status (flags) after execution
    39                              <1> 	call  printEOL
    40                              <1> %endmacro
    41                              <1> 
    42                              <1> 
    43                              <1> ;
    44                              <1> ;   Executes a BCD operation and checks the resulting flags.
    45                              <1> ;
    46                              <1> ;	%1 operation
    47                              <1> ;   %2 ax: the operand
    48                              <1> ;   %3 flags: value of flags before %1 execution
    49                              <1> ;   %4 flags: expected value of flags after %1 execution (cmp with PS_ARITH mask)
    50                              <1> ;
    51                              <1> ;   Uses: AX, Flags
    52                              <1> ;
    53                              <1> %macro testBCDflags 4
    54                              <1> 	mov ax, %3
    55                              <1> 	push ax
    56                              <1> 	popf
    57                              <1> 	mov ax, %2
    58                              <1> 	%1
    59                              <1> 	pushf
    60                              <1> 	pop ax
    61                              <1> 	and ax, PS_ARITH
    62                              <1> 	cmp ax, %4
    63                              <1> 	jne error
    64                              <1> %endmacro
  1163                                  
  1164                                  bcd386FlagsTest:
  1165                                  	PS_CAO  equ PS_CF|PS_AF|PS_OF
  1166                                  	PS_PZSO equ PS_PF|PS_ZF|PS_SF|PS_OF
  1167                                  
  1168                                  	; AAA
  1169                                  	; undefined flags: PF, ZF, SF, OF
  1170                                  	testBCDflags   aaa, 0x0000, 0,           PS_PF|PS_ZF
  1170 00009915 66B80000            <1>  mov ax, %3
  1170 00009919 6650                <1>  push ax
  1170 0000991B 9D                  <1>  popf
  1170 0000991C 66B80000            <1>  mov ax, %2
  1170 00009920 37                  <1>  %1
  1170 00009921 9C                  <1>  pushf
  1170 00009922 6658                <1>  pop ax
  1170 00009924 6625D508            <1>  and ax, PS_ARITH
  1170 00009928 6683F844            <1>  cmp ax, %4
  1170 0000992C 0F855D3C0000        <1>  jne error
  1171                                  	testBCDflags   aaa, 0x0001, PS_PZSO,     0
  1171 00009932 66B8C408            <1>  mov ax, %3
  1171 00009936 6650                <1>  push ax
  1171 00009938 9D                  <1>  popf
  1171 00009939 66B80100            <1>  mov ax, %2
  1171 0000993D 37                  <1>  %1
  1171 0000993E 9C                  <1>  pushf
  1171 0000993F 6658                <1>  pop ax
  1171 00009941 6625D508            <1>  and ax, PS_ARITH
  1171 00009945 6683F800            <1>  cmp ax, %4
  1171 00009949 0F85403C0000        <1>  jne error
  1172                                  	testBCDflags   aaa, 0x007A, 0,           PS_CF|PS_AF|PS_SF|PS_OF
  1172 0000994F 66B80000            <1>  mov ax, %3
  1172 00009953 6650                <1>  push ax
  1172 00009955 9D                  <1>  popf
  1172 00009956 66B87A00            <1>  mov ax, %2
  1172 0000995A 37                  <1>  %1
  1172 0000995B 9C                  <1>  pushf
  1172 0000995C 6658                <1>  pop ax
  1172 0000995E 6625D508            <1>  and ax, PS_ARITH
  1172 00009962 663D9108            <1>  cmp ax, %4
  1172 00009966 0F85233C0000        <1>  jne error
  1173                                  	testBCDflags   aaa, 0x007B, PS_AF,       PS_CF|PS_PF|PS_AF|PS_SF|PS_OF
  1173 0000996C 66B81000            <1>  mov ax, %3
  1173 00009970 6650                <1>  push ax
  1173 00009972 9D                  <1>  popf
  1173 00009973 66B87B00            <1>  mov ax, %2
  1173 00009977 37                  <1>  %1
  1173 00009978 9C                  <1>  pushf
  1173 00009979 6658                <1>  pop ax
  1173 0000997B 6625D508            <1>  and ax, PS_ARITH
  1173 0000997F 663D9508            <1>  cmp ax, %4
  1173 00009983 0F85063C0000        <1>  jne error
  1174                                  	; AAD
  1175                                  	; undefined flags: CF, AF, OF
  1176                                  	testBCDflags   aad, 0x0001, PS_CAO,      0
  1176 00009989 66B81108            <1>  mov ax, %3
  1176 0000998D 6650                <1>  push ax
  1176 0000998F 9D                  <1>  popf
  1176 00009990 66B80100            <1>  mov ax, %2
  1176 00009994 D50A                <1>  %1
  1176 00009996 9C                  <1>  pushf
  1176 00009997 6658                <1>  pop ax
  1176 00009999 6625D508            <1>  and ax, PS_ARITH
  1176 0000999D 6683F800            <1>  cmp ax, %4
  1176 000099A1 0F85E83B0000        <1>  jne error
  1177                                  	testBCDflags   aad, 0x0D8E, 0,           PS_CAO
  1177 000099A7 66B80000            <1>  mov ax, %3
  1177 000099AB 6650                <1>  push ax
  1177 000099AD 9D                  <1>  popf
  1177 000099AE 66B88E0D            <1>  mov ax, %2
  1177 000099B2 D50A                <1>  %1
  1177 000099B4 9C                  <1>  pushf
  1177 000099B5 6658                <1>  pop ax
  1177 000099B7 6625D508            <1>  and ax, PS_ARITH
  1177 000099BB 663D1108            <1>  cmp ax, %4
  1177 000099BF 0F85CA3B0000        <1>  jne error
  1178                                  	testBCDflags   aad, 0x0106, 0,           PS_AF
  1178 000099C5 66B80000            <1>  mov ax, %3
  1178 000099C9 6650                <1>  push ax
  1178 000099CB 9D                  <1>  popf
  1178 000099CC 66B80601            <1>  mov ax, %2
  1178 000099D0 D50A                <1>  %1
  1178 000099D2 9C                  <1>  pushf
  1178 000099D3 6658                <1>  pop ax
  1178 000099D5 6625D508            <1>  and ax, PS_ARITH
  1178 000099D9 6683F810            <1>  cmp ax, %4
  1178 000099DD 0F85AC3B0000        <1>  jne error
  1179                                  	testBCDflags   aad, 0x01F7, 0,           PS_CF|PS_AF
  1179 000099E3 66B80000            <1>  mov ax, %3
  1179 000099E7 6650                <1>  push ax
  1179 000099E9 9D                  <1>  popf
  1179 000099EA 66B8F701            <1>  mov ax, %2
  1179 000099EE D50A                <1>  %1
  1179 000099F0 9C                  <1>  pushf
  1179 000099F1 6658                <1>  pop ax
  1179 000099F3 6625D508            <1>  and ax, PS_ARITH
  1179 000099F7 6683F811            <1>  cmp ax, %4
  1179 000099FB 0F858E3B0000        <1>  jne error
  1180                                  	; AAM
  1181                                  	; undefined flags: CF, AF, OF
  1182                                  	testBCDflags   aam, 0x0000, 0,           PS_ZF|PS_PF
  1182 00009A01 66B80000            <1>  mov ax, %3
  1182 00009A05 6650                <1>  push ax
  1182 00009A07 9D                  <1>  popf
  1182 00009A08 66B80000            <1>  mov ax, %2
  1182 00009A0C D40A                <1>  %1
  1182 00009A0E 9C                  <1>  pushf
  1182 00009A0F 6658                <1>  pop ax
  1182 00009A11 6625D508            <1>  and ax, PS_ARITH
  1182 00009A15 6683F844            <1>  cmp ax, %4
  1182 00009A19 0F85703B0000        <1>  jne error
  1183                                  	testBCDflags   aam, 0x0000, PS_CAO,      PS_ZF|PS_PF
  1183 00009A1F 66B81108            <1>  mov ax, %3
  1183 00009A23 6650                <1>  push ax
  1183 00009A25 9D                  <1>  popf
  1183 00009A26 66B80000            <1>  mov ax, %2
  1183 00009A2A D40A                <1>  %1
  1183 00009A2C 9C                  <1>  pushf
  1183 00009A2D 6658                <1>  pop ax
  1183 00009A2F 6625D508            <1>  and ax, PS_ARITH
  1183 00009A33 6683F844            <1>  cmp ax, %4
  1183 00009A37 0F85523B0000        <1>  jne error
  1184                                  	; AAS
  1185                                  	; undefined flags: PF, ZF, SF, OF
  1186                                  	testBCDflags   aas, 0x0000, PS_SF|PS_OF, PS_PF|PS_ZF
  1186 00009A3D 66B88008            <1>  mov ax, %3
  1186 00009A41 6650                <1>  push ax
  1186 00009A43 9D                  <1>  popf
  1186 00009A44 66B80000            <1>  mov ax, %2
  1186 00009A48 3F                  <1>  %1
  1186 00009A49 9C                  <1>  pushf
  1186 00009A4A 6658                <1>  pop ax
  1186 00009A4C 6625D508            <1>  and ax, PS_ARITH
  1186 00009A50 6683F844            <1>  cmp ax, %4
  1186 00009A54 0F85353B0000        <1>  jne error
  1187                                  	testBCDflags   aas, 0x0000, PS_AF,       PS_CF|PS_PF|PS_AF|PS_SF
  1187 00009A5A 66B81000            <1>  mov ax, %3
  1187 00009A5E 6650                <1>  push ax
  1187 00009A60 9D                  <1>  popf
  1187 00009A61 66B80000            <1>  mov ax, %2
  1187 00009A65 3F                  <1>  %1
  1187 00009A66 9C                  <1>  pushf
  1187 00009A67 6658                <1>  pop ax
  1187 00009A69 6625D508            <1>  and ax, PS_ARITH
  1187 00009A6D 663D9500            <1>  cmp ax, %4
  1187 00009A71 0F85183B0000        <1>  jne error
  1188                                  	testBCDflags   aas, 0x0001, PS_PZSO,     0
  1188 00009A77 66B8C408            <1>  mov ax, %3
  1188 00009A7B 6650                <1>  push ax
  1188 00009A7D 9D                  <1>  popf
  1188 00009A7E 66B80100            <1>  mov ax, %2
  1188 00009A82 3F                  <1>  %1
  1188 00009A83 9C                  <1>  pushf
  1188 00009A84 6658                <1>  pop ax
  1188 00009A86 6625D508            <1>  and ax, PS_ARITH
  1188 00009A8A 6683F800            <1>  cmp ax, %4
  1188 00009A8E 0F85FB3A0000        <1>  jne error
  1189                                  	testBCDflags   aas, 0x0680, PS_AF,       PS_CF|PS_AF|PS_OF
  1189 00009A94 66B81000            <1>  mov ax, %3
  1189 00009A98 6650                <1>  push ax
  1189 00009A9A 9D                  <1>  popf
  1189 00009A9B 66B88006            <1>  mov ax, %2
  1189 00009A9F 3F                  <1>  %1
  1189 00009AA0 9C                  <1>  pushf
  1189 00009AA1 6658                <1>  pop ax
  1189 00009AA3 6625D508            <1>  and ax, PS_ARITH
  1189 00009AA7 663D1108            <1>  cmp ax, %4
  1189 00009AAB 0F85DE3A0000        <1>  jne error
  1190                                  	; DAA
  1191                                  	; undefined flags: OF
  1192                                  	testBCDflags   daa, 0x001A, PS_AF|PS_OF, PS_AF
  1192 00009AB1 66B81008            <1>  mov ax, %3
  1192 00009AB5 6650                <1>  push ax
  1192 00009AB7 9D                  <1>  popf
  1192 00009AB8 66B81A00            <1>  mov ax, %2
  1192 00009ABC 27                  <1>  %1
  1192 00009ABD 9C                  <1>  pushf
  1192 00009ABE 6658                <1>  pop ax
  1192 00009AC0 6625D508            <1>  and ax, PS_ARITH
  1192 00009AC4 6683F810            <1>  cmp ax, %4
  1192 00009AC8 0F85C13A0000        <1>  jne error
  1193                                  	testBCDflags   daa, 0x001A, PS_CF,       PS_CF|PS_AF|PS_SF|PS_OF
  1193 00009ACE 66B80100            <1>  mov ax, %3
  1193 00009AD2 6650                <1>  push ax
  1193 00009AD4 9D                  <1>  popf
  1193 00009AD5 66B81A00            <1>  mov ax, %2
  1193 00009AD9 27                  <1>  %1
  1193 00009ADA 9C                  <1>  pushf
  1193 00009ADB 6658                <1>  pop ax
  1193 00009ADD 6625D508            <1>  and ax, PS_ARITH
  1193 00009AE1 663D9108            <1>  cmp ax, %4
  1193 00009AE5 0F85A43A0000        <1>  jne error
  1194                                  	; DAS
  1195                                  	; undefined flags: OF
  1196                                  	testBCDflags   das, 0x0080, PS_OF,       PS_SF
  1196 00009AEB 66B80008            <1>  mov ax, %3
  1196 00009AEF 6650                <1>  push ax
  1196 00009AF1 9D                  <1>  popf
  1196 00009AF2 66B88000            <1>  mov ax, %2
  1196 00009AF6 2F                  <1>  %1
  1196 00009AF7 9C                  <1>  pushf
  1196 00009AF8 6658                <1>  pop ax
  1196 00009AFA 6625D508            <1>  and ax, PS_ARITH
  1196 00009AFE 663D8000            <1>  cmp ax, %4
  1196 00009B02 0F85873A0000        <1>  jne error
  1197                                  	testBCDflags   das, 0x0080, PS_AF,       PS_AF|PS_OF
  1197 00009B08 66B81000            <1>  mov ax, %3
  1197 00009B0C 6650                <1>  push ax
  1197 00009B0E 9D                  <1>  popf
  1197 00009B0F 66B88000            <1>  mov ax, %2
  1197 00009B13 2F                  <1>  %1
  1197 00009B14 9C                  <1>  pushf
  1197 00009B15 6658                <1>  pop ax
  1197 00009B17 6625D508            <1>  and ax, PS_ARITH
  1197 00009B1B 663D1008            <1>  cmp ax, %4
  1197 00009B1F 0F856A3A0000        <1>  jne error
  1198                                  
  1199                                  shifts386FlagsTest:
  1200                                  	%include "tests/shift_m.asm"
     1                              <1> ;
     2                              <1> ;   Executes a byte shift operation and checks the resulting flags.
     3                              <1> ;
     4                              <1> ;   %1 operation
     5                              <1> ;   %2 al: byte operand
     6                              <1> ;   %3 cl: shift count
     7                              <1> ;   %4 flags: value of flags before %1 execution
     8                              <1> ;   %5 flags: expected value of flags after %1 execution (cmp with PS_ARITH mask)
     9                              <1> ;
    10                              <1> ;   Uses: AX, CL, Flags
    11                              <1> ;
    12                              <1> %macro testShiftBFlags 5
    13                              <1> 	mov ax, %4
    14                              <1> 	push ax
    15                              <1> 	popf
    16                              <1> 	mov ah, 0xff
    17                              <1> 	mov al, %2
    18                              <1> 	mov cl, %3
    19                              <1> 	%1 al, cl
    20                              <1> 	pushf
    21                              <1> 	pop ax
    22                              <1> 	and ax, PS_ARITH
    23                              <1> 	cmp ax, %5
    24                              <1> 	jne error
    25                              <1> %endmacro
    26                              <1> 
    27                              <1> ;
    28                              <1> ;   Executes a word shift operation and checks the resulting flags.
    29                              <1> ;
    30                              <1> ;   %1 operation
    31                              <1> ;   %2 ax: word operand
    32                              <1> ;   %3 cl: shift count
    33                              <1> ;   %4 flags: value of flags before %1 execution
    34                              <1> ;   %5 flags: expected value of flags after %1 execution (cmp with PS_ARITH mask)
    35                              <1> ;
    36                              <1> ;   Uses: AX, CL, Flags
    37                              <1> ;
    38                              <1> %macro testShiftWFlags 5
    39                              <1> 	mov ax, %4
    40                              <1> 	push ax
    41                              <1> 	popf
    42                              <1> 	mov ax, %2
    43                              <1> 	mov cl, %3
    44                              <1> 	%1 ax, cl
    45                              <1> 	pushf
    46                              <1> 	pop ax
    47                              <1> 	and ax, PS_ARITH
    48                              <1> 	cmp ax, %5
    49                              <1> 	jne error
    50                              <1> %endmacro
  1201                                  
  1202                                  	; SHR al,cl - SHR ax,cl
  1203                                  	; undefined flags:
  1204                                  	;  CF when cl>7 (byte) or cl>15 (word):
  1205                                  	;    if byte operand and cl=8 or cl=16 or cl=24 then CF=MSB(operand)
  1206                                  	;    if word operand and cl=16 then CF=MSB(operand)
  1207                                  	;  OF when cl>1: set according to result
  1208                                  	;  AF when cl>0: always 1
  1209                                  	; shift count is modulo 32 so if cl=32 then result is equal to cl=0
  1210                                  	testShiftBFlags   shr, 0x81,   1,  0,     PS_CF|PS_AF|PS_OF
  1210 00009B25 66B80000            <1>  mov ax, %4
  1210 00009B29 6650                <1>  push ax
  1210 00009B2B 9D                  <1>  popf
  1210 00009B2C B4FF                <1>  mov ah, 0xff
  1210 00009B2E B081                <1>  mov al, %2
  1210 00009B30 B101                <1>  mov cl, %3
  1210 00009B32 D2E8                <1>  %1 al, cl
  1210 00009B34 9C                  <1>  pushf
  1210 00009B35 6658                <1>  pop ax
  1210 00009B37 6625D508            <1>  and ax, PS_ARITH
  1210 00009B3B 663D1108            <1>  cmp ax, %5
  1210 00009B3F 0F854A3A0000        <1>  jne error
  1211                                  	testShiftBFlags   shr, 0x82,   2,  0,     PS_CF|PS_AF
  1211 00009B45 66B80000            <1>  mov ax, %4
  1211 00009B49 6650                <1>  push ax
  1211 00009B4B 9D                  <1>  popf
  1211 00009B4C B4FF                <1>  mov ah, 0xff
  1211 00009B4E B082                <1>  mov al, %2
  1211 00009B50 B102                <1>  mov cl, %3
  1211 00009B52 D2E8                <1>  %1 al, cl
  1211 00009B54 9C                  <1>  pushf
  1211 00009B55 6658                <1>  pop ax
  1211 00009B57 6625D508            <1>  and ax, PS_ARITH
  1211 00009B5B 6683F811            <1>  cmp ax, %5
  1211 00009B5F 0F852A3A0000        <1>  jne error
  1212                                  	testShiftBFlags   shr, 0x80,   8,  0,     PS_CF|PS_PF|PS_AF|PS_ZF
  1212 00009B65 66B80000            <1>  mov ax, %4
  1212 00009B69 6650                <1>  push ax
  1212 00009B6B 9D                  <1>  popf
  1212 00009B6C B4FF                <1>  mov ah, 0xff
  1212 00009B6E B080                <1>  mov al, %2
  1212 00009B70 B108                <1>  mov cl, %3
  1212 00009B72 D2E8                <1>  %1 al, cl
  1212 00009B74 9C                  <1>  pushf
  1212 00009B75 6658                <1>  pop ax
  1212 00009B77 6625D508            <1>  and ax, PS_ARITH
  1212 00009B7B 6683F855            <1>  cmp ax, %5
  1212 00009B7F 0F850A3A0000        <1>  jne error
  1213                                  	testShiftBFlags   shr, 0x00,   8,  PS_CF, PS_PF|PS_AF|PS_ZF
  1213 00009B85 66B80100            <1>  mov ax, %4
  1213 00009B89 6650                <1>  push ax
  1213 00009B8B 9D                  <1>  popf
  1213 00009B8C B4FF                <1>  mov ah, 0xff
  1213 00009B8E B000                <1>  mov al, %2
  1213 00009B90 B108                <1>  mov cl, %3
  1213 00009B92 D2E8                <1>  %1 al, cl
  1213 00009B94 9C                  <1>  pushf
  1213 00009B95 6658                <1>  pop ax
  1213 00009B97 6625D508            <1>  and ax, PS_ARITH
  1213 00009B9B 6683F854            <1>  cmp ax, %5
  1213 00009B9F 0F85EA390000        <1>  jne error
  1214                                  	testShiftBFlags   shr, 0x80,   16, 0,     PS_CF|PS_PF|PS_AF|PS_ZF
  1214 00009BA5 66B80000            <1>  mov ax, %4
  1214 00009BA9 6650                <1>  push ax
  1214 00009BAB 9D                  <1>  popf
  1214 00009BAC B4FF                <1>  mov ah, 0xff
  1214 00009BAE B080                <1>  mov al, %2
  1214 00009BB0 B110                <1>  mov cl, %3
  1214 00009BB2 D2E8                <1>  %1 al, cl
  1214 00009BB4 9C                  <1>  pushf
  1214 00009BB5 6658                <1>  pop ax
  1214 00009BB7 6625D508            <1>  and ax, PS_ARITH
  1214 00009BBB 6683F855            <1>  cmp ax, %5
  1214 00009BBF 0F85CA390000        <1>  jne error
  1215                                  	testShiftBFlags   shr, 0x00,   16, PS_CF, PS_PF|PS_AF|PS_ZF
  1215 00009BC5 66B80100            <1>  mov ax, %4
  1215 00009BC9 6650                <1>  push ax
  1215 00009BCB 9D                  <1>  popf
  1215 00009BCC B4FF                <1>  mov ah, 0xff
  1215 00009BCE B000                <1>  mov al, %2
  1215 00009BD0 B110                <1>  mov cl, %3
  1215 00009BD2 D2E8                <1>  %1 al, cl
  1215 00009BD4 9C                  <1>  pushf
  1215 00009BD5 6658                <1>  pop ax
  1215 00009BD7 6625D508            <1>  and ax, PS_ARITH
  1215 00009BDB 6683F854            <1>  cmp ax, %5
  1215 00009BDF 0F85AA390000        <1>  jne error
  1216                                  	testShiftBFlags   shr, 0x80,   24, 0,     PS_CF|PS_PF|PS_AF|PS_ZF
  1216 00009BE5 66B80000            <1>  mov ax, %4
  1216 00009BE9 6650                <1>  push ax
  1216 00009BEB 9D                  <1>  popf
  1216 00009BEC B4FF                <1>  mov ah, 0xff
  1216 00009BEE B080                <1>  mov al, %2
  1216 00009BF0 B118                <1>  mov cl, %3
  1216 00009BF2 D2E8                <1>  %1 al, cl
  1216 00009BF4 9C                  <1>  pushf
  1216 00009BF5 6658                <1>  pop ax
  1216 00009BF7 6625D508            <1>  and ax, PS_ARITH
  1216 00009BFB 6683F855            <1>  cmp ax, %5
  1216 00009BFF 0F858A390000        <1>  jne error
  1217                                  	testShiftBFlags   shr, 0x00,   24, PS_CF, PS_PF|PS_AF|PS_ZF
  1217 00009C05 66B80100            <1>  mov ax, %4
  1217 00009C09 6650                <1>  push ax
  1217 00009C0B 9D                  <1>  popf
  1217 00009C0C B4FF                <1>  mov ah, 0xff
  1217 00009C0E B000                <1>  mov al, %2
  1217 00009C10 B118                <1>  mov cl, %3
  1217 00009C12 D2E8                <1>  %1 al, cl
  1217 00009C14 9C                  <1>  pushf
  1217 00009C15 6658                <1>  pop ax
  1217 00009C17 6625D508            <1>  and ax, PS_ARITH
  1217 00009C1B 6683F854            <1>  cmp ax, %5
  1217 00009C1F 0F856A390000        <1>  jne error
  1218                                  	testShiftBFlags   shr, 0x80,   32, 0,     0
  1218 00009C25 66B80000            <1>  mov ax, %4
  1218 00009C29 6650                <1>  push ax
  1218 00009C2B 9D                  <1>  popf
  1218 00009C2C B4FF                <1>  mov ah, 0xff
  1218 00009C2E B080                <1>  mov al, %2
  1218 00009C30 B120                <1>  mov cl, %3
  1218 00009C32 D2E8                <1>  %1 al, cl
  1218 00009C34 9C                  <1>  pushf
  1218 00009C35 6658                <1>  pop ax
  1218 00009C37 6625D508            <1>  and ax, PS_ARITH
  1218 00009C3B 6683F800            <1>  cmp ax, %5
  1218 00009C3F 0F854A390000        <1>  jne error
  1219                                  	testShiftWFlags   shr, 0x8000, 16, 0,     PS_CF|PS_PF|PS_AF|PS_ZF
  1219 00009C45 66B80000            <1>  mov ax, %4
  1219 00009C49 6650                <1>  push ax
  1219 00009C4B 9D                  <1>  popf
  1219 00009C4C 66B80080            <1>  mov ax, %2
  1219 00009C50 B110                <1>  mov cl, %3
  1219 00009C52 66D3E8              <1>  %1 ax, cl
  1219 00009C55 9C                  <1>  pushf
  1219 00009C56 6658                <1>  pop ax
  1219 00009C58 6625D508            <1>  and ax, PS_ARITH
  1219 00009C5C 6683F855            <1>  cmp ax, %5
  1219 00009C60 0F8529390000        <1>  jne error
  1220                                  	testShiftWFlags   shr, 0x0000, 16, PS_CF, PS_PF|PS_AF|PS_ZF
  1220 00009C66 66B80100            <1>  mov ax, %4
  1220 00009C6A 6650                <1>  push ax
  1220 00009C6C 9D                  <1>  popf
  1220 00009C6D 66B80000            <1>  mov ax, %2
  1220 00009C71 B110                <1>  mov cl, %3
  1220 00009C73 66D3E8              <1>  %1 ax, cl
  1220 00009C76 9C                  <1>  pushf
  1220 00009C77 6658                <1>  pop ax
  1220 00009C79 6625D508            <1>  and ax, PS_ARITH
  1220 00009C7D 6683F854            <1>  cmp ax, %5
  1220 00009C81 0F8508390000        <1>  jne error
  1221                                  	testShiftWFlags   shr, 0x8000, 32, 0,     0
  1221 00009C87 66B80000            <1>  mov ax, %4
  1221 00009C8B 6650                <1>  push ax
  1221 00009C8D 9D                  <1>  popf
  1221 00009C8E 66B80080            <1>  mov ax, %2
  1221 00009C92 B120                <1>  mov cl, %3
  1221 00009C94 66D3E8              <1>  %1 ax, cl
  1221 00009C97 9C                  <1>  pushf
  1221 00009C98 6658                <1>  pop ax
  1221 00009C9A 6625D508            <1>  and ax, PS_ARITH
  1221 00009C9E 6683F800            <1>  cmp ax, %5
  1221 00009CA2 0F85E7380000        <1>  jne error
  1222                                  
  1223                                  	; SHL al,cl - SHL ax,cl
  1224                                  	; undefined flags:
  1225                                  	;  CF when cl>7 (byte) or cl>15 (word):
  1226                                  	;    if byte operand and cl=8 or cl=16 or cl=24 then CF=LSB(operand)
  1227                                  	;    if word operand and cl=16 then CF=LSB(operand)
  1228                                  	;  OF when cl>1: set according to result
  1229                                  	;  AF when cl>0: always 1
  1230                                  	; shift count is modulo 32 so if cl=32 then result is equal to cl=0
  1231                                  	testShiftBFlags   shl, 0x81, 1,  0,     PS_CF|PS_AF|PS_OF
  1231 00009CA8 66B80000            <1>  mov ax, %4
  1231 00009CAC 6650                <1>  push ax
  1231 00009CAE 9D                  <1>  popf
  1231 00009CAF B4FF                <1>  mov ah, 0xff
  1231 00009CB1 B081                <1>  mov al, %2
  1231 00009CB3 B101                <1>  mov cl, %3
  1231 00009CB5 D2E0                <1>  %1 al, cl
  1231 00009CB7 9C                  <1>  pushf
  1231 00009CB8 6658                <1>  pop ax
  1231 00009CBA 6625D508            <1>  and ax, PS_ARITH
  1231 00009CBE 663D1108            <1>  cmp ax, %5
  1231 00009CC2 0F85C7380000        <1>  jne error
  1232                                  	testShiftBFlags   shl, 0x41, 2,  0,     PS_CF|PS_AF|PS_OF
  1232 00009CC8 66B80000            <1>  mov ax, %4
  1232 00009CCC 6650                <1>  push ax
  1232 00009CCE 9D                  <1>  popf
  1232 00009CCF B4FF                <1>  mov ah, 0xff
  1232 00009CD1 B041                <1>  mov al, %2
  1232 00009CD3 B102                <1>  mov cl, %3
  1232 00009CD5 D2E0                <1>  %1 al, cl
  1232 00009CD7 9C                  <1>  pushf
  1232 00009CD8 6658                <1>  pop ax
  1232 00009CDA 6625D508            <1>  and ax, PS_ARITH
  1232 00009CDE 663D1108            <1>  cmp ax, %5
  1232 00009CE2 0F85A7380000        <1>  jne error
  1233                                  	testShiftBFlags   shl, 0x01, 8,  0,     PS_CF|PS_PF|PS_AF|PS_ZF|PS_OF
  1233 00009CE8 66B80000            <1>  mov ax, %4
  1233 00009CEC 6650                <1>  push ax
  1233 00009CEE 9D                  <1>  popf
  1233 00009CEF B4FF                <1>  mov ah, 0xff
  1233 00009CF1 B001                <1>  mov al, %2
  1233 00009CF3 B108                <1>  mov cl, %3
  1233 00009CF5 D2E0                <1>  %1 al, cl
  1233 00009CF7 9C                  <1>  pushf
  1233 00009CF8 6658                <1>  pop ax
  1233 00009CFA 6625D508            <1>  and ax, PS_ARITH
  1233 00009CFE 663D5508            <1>  cmp ax, %5
  1233 00009D02 0F8587380000        <1>  jne error
  1234                                  	testShiftBFlags   shl, 0x00, 8,  PS_CF, PS_PF|PS_AF|PS_ZF
  1234 00009D08 66B80100            <1>  mov ax, %4
  1234 00009D0C 6650                <1>  push ax
  1234 00009D0E 9D                  <1>  popf
  1234 00009D0F B4FF                <1>  mov ah, 0xff
  1234 00009D11 B000                <1>  mov al, %2
  1234 00009D13 B108                <1>  mov cl, %3
  1234 00009D15 D2E0                <1>  %1 al, cl
  1234 00009D17 9C                  <1>  pushf
  1234 00009D18 6658                <1>  pop ax
  1234 00009D1A 6625D508            <1>  and ax, PS_ARITH
  1234 00009D1E 6683F854            <1>  cmp ax, %5
  1234 00009D22 0F8567380000        <1>  jne error
  1235                                  	testShiftBFlags   shl, 0x01, 16, 0,     PS_CF|PS_PF|PS_AF|PS_ZF|PS_OF
  1235 00009D28 66B80000            <1>  mov ax, %4
  1235 00009D2C 6650                <1>  push ax
  1235 00009D2E 9D                  <1>  popf
  1235 00009D2F B4FF                <1>  mov ah, 0xff
  1235 00009D31 B001                <1>  mov al, %2
  1235 00009D33 B110                <1>  mov cl, %3
  1235 00009D35 D2E0                <1>  %1 al, cl
  1235 00009D37 9C                  <1>  pushf
  1235 00009D38 6658                <1>  pop ax
  1235 00009D3A 6625D508            <1>  and ax, PS_ARITH
  1235 00009D3E 663D5508            <1>  cmp ax, %5
  1235 00009D42 0F8547380000        <1>  jne error
  1236                                  	testShiftBFlags   shl, 0x00, 16, PS_CF, PS_PF|PS_AF|PS_ZF
  1236 00009D48 66B80100            <1>  mov ax, %4
  1236 00009D4C 6650                <1>  push ax
  1236 00009D4E 9D                  <1>  popf
  1236 00009D4F B4FF                <1>  mov ah, 0xff
  1236 00009D51 B000                <1>  mov al, %2
  1236 00009D53 B110                <1>  mov cl, %3
  1236 00009D55 D2E0                <1>  %1 al, cl
  1236 00009D57 9C                  <1>  pushf
  1236 00009D58 6658                <1>  pop ax
  1236 00009D5A 6625D508            <1>  and ax, PS_ARITH
  1236 00009D5E 6683F854            <1>  cmp ax, %5
  1236 00009D62 0F8527380000        <1>  jne error
  1237                                  	testShiftBFlags   shl, 0x01, 24, 0,     PS_CF|PS_PF|PS_AF|PS_ZF|PS_OF
  1237 00009D68 66B80000            <1>  mov ax, %4
  1237 00009D6C 6650                <1>  push ax
  1237 00009D6E 9D                  <1>  popf
  1237 00009D6F B4FF                <1>  mov ah, 0xff
  1237 00009D71 B001                <1>  mov al, %2
  1237 00009D73 B118                <1>  mov cl, %3
  1237 00009D75 D2E0                <1>  %1 al, cl
  1237 00009D77 9C                  <1>  pushf
  1237 00009D78 6658                <1>  pop ax
  1237 00009D7A 6625D508            <1>  and ax, PS_ARITH
  1237 00009D7E 663D5508            <1>  cmp ax, %5
  1237 00009D82 0F8507380000        <1>  jne error
  1238                                  	testShiftBFlags   shl, 0x00, 24, PS_CF, PS_PF|PS_AF|PS_ZF
  1238 00009D88 66B80100            <1>  mov ax, %4
  1238 00009D8C 6650                <1>  push ax
  1238 00009D8E 9D                  <1>  popf
  1238 00009D8F B4FF                <1>  mov ah, 0xff
  1238 00009D91 B000                <1>  mov al, %2
  1238 00009D93 B118                <1>  mov cl, %3
  1238 00009D95 D2E0                <1>  %1 al, cl
  1238 00009D97 9C                  <1>  pushf
  1238 00009D98 6658                <1>  pop ax
  1238 00009D9A 6625D508            <1>  and ax, PS_ARITH
  1238 00009D9E 6683F854            <1>  cmp ax, %5
  1238 00009DA2 0F85E7370000        <1>  jne error
  1239                                  	testShiftBFlags   shl, 0x01, 32, 0,     0
  1239 00009DA8 66B80000            <1>  mov ax, %4
  1239 00009DAC 6650                <1>  push ax
  1239 00009DAE 9D                  <1>  popf
  1239 00009DAF B4FF                <1>  mov ah, 0xff
  1239 00009DB1 B001                <1>  mov al, %2
  1239 00009DB3 B120                <1>  mov cl, %3
  1239 00009DB5 D2E0                <1>  %1 al, cl
  1239 00009DB7 9C                  <1>  pushf
  1239 00009DB8 6658                <1>  pop ax
  1239 00009DBA 6625D508            <1>  and ax, PS_ARITH
  1239 00009DBE 6683F800            <1>  cmp ax, %5
  1239 00009DC2 0F85C7370000        <1>  jne error
  1240                                  	testShiftWFlags   shl, 0x01, 16, 0,     PS_CF|PS_PF|PS_AF|PS_ZF|PS_OF
  1240 00009DC8 66B80000            <1>  mov ax, %4
  1240 00009DCC 6650                <1>  push ax
  1240 00009DCE 9D                  <1>  popf
  1240 00009DCF 66B80100            <1>  mov ax, %2
  1240 00009DD3 B110                <1>  mov cl, %3
  1240 00009DD5 66D3E0              <1>  %1 ax, cl
  1240 00009DD8 9C                  <1>  pushf
  1240 00009DD9 6658                <1>  pop ax
  1240 00009DDB 6625D508            <1>  and ax, PS_ARITH
  1240 00009DDF 663D5508            <1>  cmp ax, %5
  1240 00009DE3 0F85A6370000        <1>  jne error
  1241                                  	testShiftWFlags   shl, 0x00, 16, PS_CF, PS_PF|PS_AF|PS_ZF
  1241 00009DE9 66B80100            <1>  mov ax, %4
  1241 00009DED 6650                <1>  push ax
  1241 00009DEF 9D                  <1>  popf
  1241 00009DF0 66B80000            <1>  mov ax, %2
  1241 00009DF4 B110                <1>  mov cl, %3
  1241 00009DF6 66D3E0              <1>  %1 ax, cl
  1241 00009DF9 9C                  <1>  pushf
  1241 00009DFA 6658                <1>  pop ax
  1241 00009DFC 6625D508            <1>  and ax, PS_ARITH
  1241 00009E00 6683F854            <1>  cmp ax, %5
  1241 00009E04 0F8585370000        <1>  jne error
  1242                                  	testShiftWFlags   shl, 0x01, 32, 0,     0
  1242 00009E0A 66B80000            <1>  mov ax, %4
  1242 00009E0E 6650                <1>  push ax
  1242 00009E10 9D                  <1>  popf
  1242 00009E11 66B80100            <1>  mov ax, %2
  1242 00009E15 B120                <1>  mov cl, %3
  1242 00009E17 66D3E0              <1>  %1 ax, cl
  1242 00009E1A 9C                  <1>  pushf
  1242 00009E1B 6658                <1>  pop ax
  1242 00009E1D 6625D508            <1>  and ax, PS_ARITH
  1242 00009E21 6683F800            <1>  cmp ax, %5
  1242 00009E25 0F8564370000        <1>  jne error
  1243                                  
  1244                                  bt386FlagsTest:
  1245                                  	; BT, BTC, BTR, BTS
  1246                                  	; undefined flags:
  1247                                  	;  OF: same as RCR with CF=0
  1248                                  	testBittestFlags   0x01, 0, 0,     PS_CF
  1248                              <1>  testBittestWFlags bt, %1, %2, %3, %4
  1248                              <2> 
  1248 00009E2B 66B80000            <2>  mov ax, %4
  1248 00009E2F 6650                <2>  push ax
  1248 00009E31 9D                  <2>  popf
  1248 00009E32 66B80100            <2>  mov ax, %2
  1248 00009E36 660FBAE000          <2>  o16 %1 ax, %3
  1248 00009E3B 9C                  <2>  pushf
  1248 00009E3C 6658                <2>  pop ax
  1248 00009E3E 6625D508            <2>  and ax, PS_ARITH
  1248 00009E42 6683F801            <2>  cmp ax, %5
  1248 00009E46 0F8543370000        <2>  jne error
  1248                              <2> 
  1248                              <2> 
  1248 00009E4C 66B80000            <2>  mov ax, %4
  1248 00009E50 6650                <2>  push ax
  1248 00009E52 9D                  <2>  popf
  1248 00009E53 66B80100            <2>  mov ax, %2
  1248 00009E57 66B90000            <2>  mov cx, %3
  1248 00009E5B 660FA3C8            <2>  o16 %1 ax, cx
  1248 00009E5F 9C                  <2>  pushf
  1248 00009E60 6658                <2>  pop ax
  1248 00009E62 6625D508            <2>  and ax, PS_ARITH
  1248 00009E66 6683F801            <2>  cmp ax, %5
  1248 00009E6A 0F851F370000        <2>  jne error
  1248                              <1>  testBittestWFlags btc, %1, %2, %3, %4
  1248                              <2> 
  1248 00009E70 66B80000            <2>  mov ax, %4
  1248 00009E74 6650                <2>  push ax
  1248 00009E76 9D                  <2>  popf
  1248 00009E77 66B80100            <2>  mov ax, %2
  1248 00009E7B 660FBAF800          <2>  o16 %1 ax, %3
  1248 00009E80 9C                  <2>  pushf
  1248 00009E81 6658                <2>  pop ax
  1248 00009E83 6625D508            <2>  and ax, PS_ARITH
  1248 00009E87 6683F801            <2>  cmp ax, %5
  1248 00009E8B 0F85FE360000        <2>  jne error
  1248                              <2> 
  1248                              <2> 
  1248 00009E91 66B80000            <2>  mov ax, %4
  1248 00009E95 6650                <2>  push ax
  1248 00009E97 9D                  <2>  popf
  1248 00009E98 66B80100            <2>  mov ax, %2
  1248 00009E9C 66B90000            <2>  mov cx, %3
  1248 00009EA0 660FBBC8            <2>  o16 %1 ax, cx
  1248 00009EA4 9C                  <2>  pushf
  1248 00009EA5 6658                <2>  pop ax
  1248 00009EA7 6625D508            <2>  and ax, PS_ARITH
  1248 00009EAB 6683F801            <2>  cmp ax, %5
  1248 00009EAF 0F85DA360000        <2>  jne error
  1248                              <1>  testBittestWFlags btr, %1, %2, %3, %4
  1248                              <2> 
  1248 00009EB5 66B80000            <2>  mov ax, %4
  1248 00009EB9 6650                <2>  push ax
  1248 00009EBB 9D                  <2>  popf
  1248 00009EBC 66B80100            <2>  mov ax, %2
  1248 00009EC0 660FBAF000          <2>  o16 %1 ax, %3
  1248 00009EC5 9C                  <2>  pushf
  1248 00009EC6 6658                <2>  pop ax
  1248 00009EC8 6625D508            <2>  and ax, PS_ARITH
  1248 00009ECC 6683F801            <2>  cmp ax, %5
  1248 00009ED0 0F85B9360000        <2>  jne error
  1248                              <2> 
  1248                              <2> 
  1248 00009ED6 66B80000            <2>  mov ax, %4
  1248 00009EDA 6650                <2>  push ax
  1248 00009EDC 9D                  <2>  popf
  1248 00009EDD 66B80100            <2>  mov ax, %2
  1248 00009EE1 66B90000            <2>  mov cx, %3
  1248 00009EE5 660FB3C8            <2>  o16 %1 ax, cx
  1248 00009EE9 9C                  <2>  pushf
  1248 00009EEA 6658                <2>  pop ax
  1248 00009EEC 6625D508            <2>  and ax, PS_ARITH
  1248 00009EF0 6683F801            <2>  cmp ax, %5
  1248 00009EF4 0F8595360000        <2>  jne error
  1248                              <1>  testBittestWFlags bts, %1, %2, %3, %4
  1248                              <2> 
  1248 00009EFA 66B80000            <2>  mov ax, %4
  1248 00009EFE 6650                <2>  push ax
  1248 00009F00 9D                  <2>  popf
  1248 00009F01 66B80100            <2>  mov ax, %2
  1248 00009F05 660FBAE800          <2>  o16 %1 ax, %3
  1248 00009F0A 9C                  <2>  pushf
  1248 00009F0B 6658                <2>  pop ax
  1248 00009F0D 6625D508            <2>  and ax, PS_ARITH
  1248 00009F11 6683F801            <2>  cmp ax, %5
  1248 00009F15 0F8574360000        <2>  jne error
  1248                              <2> 
  1248                              <2> 
  1248 00009F1B 66B80000            <2>  mov ax, %4
  1248 00009F1F 6650                <2>  push ax
  1248 00009F21 9D                  <2>  popf
  1248 00009F22 66B80100            <2>  mov ax, %2
  1248 00009F26 66B90000            <2>  mov cx, %3
  1248 00009F2A 660FABC8            <2>  o16 %1 ax, cx
  1248 00009F2E 9C                  <2>  pushf
  1248 00009F2F 6658                <2>  pop ax
  1248 00009F31 6625D508            <2>  and ax, PS_ARITH
  1248 00009F35 6683F801            <2>  cmp ax, %5
  1248 00009F39 0F8550360000        <2>  jne error
  1248                              <1> 
  1248                              <1>  testBittestDFlags bt, %1, %2, %3, %4
  1248                              <2> 
  1248 00009F3F 66B80000            <2>  mov ax, %4
  1248 00009F43 6650                <2>  push ax
  1248 00009F45 9D                  <2>  popf
  1248 00009F46 B801000000          <2>  mov eax, %2
  1248 00009F4B 0FBAE000            <2>  o32 %1 eax, %3
  1248 00009F4F 9C                  <2>  pushf
  1248 00009F50 6658                <2>  pop ax
  1248 00009F52 6625D508            <2>  and ax, PS_ARITH
  1248 00009F56 6683F801            <2>  cmp ax, %5
  1248 00009F5A 0F852F360000        <2>  jne error
  1248                              <2> 
  1248                              <2> 
  1248 00009F60 66B80000            <2>  mov ax, %4
  1248 00009F64 6650                <2>  push ax
  1248 00009F66 9D                  <2>  popf
  1248 00009F67 B801000000          <2>  mov eax, %2
  1248 00009F6C B900000000          <2>  mov ecx, %3
  1248 00009F71 0FA3C8              <2>  o32 %1 eax, ecx
  1248 00009F74 9C                  <2>  pushf
  1248 00009F75 6658                <2>  pop ax
  1248 00009F77 6625D508            <2>  and ax, PS_ARITH
  1248 00009F7B 6683F801            <2>  cmp ax, %5
  1248 00009F7F 0F850A360000        <2>  jne error
  1248                              <1>  testBittestDFlags btc, %1, %2, %3, %4
  1248                              <2> 
  1248 00009F85 66B80000            <2>  mov ax, %4
  1248 00009F89 6650                <2>  push ax
  1248 00009F8B 9D                  <2>  popf
  1248 00009F8C B801000000          <2>  mov eax, %2
  1248 00009F91 0FBAF800            <2>  o32 %1 eax, %3
  1248 00009F95 9C                  <2>  pushf
  1248 00009F96 6658                <2>  pop ax
  1248 00009F98 6625D508            <2>  and ax, PS_ARITH
  1248 00009F9C 6683F801            <2>  cmp ax, %5
  1248 00009FA0 0F85E9350000        <2>  jne error
  1248                              <2> 
  1248                              <2> 
  1248 00009FA6 66B80000            <2>  mov ax, %4
  1248 00009FAA 6650                <2>  push ax
  1248 00009FAC 9D                  <2>  popf
  1248 00009FAD B801000000          <2>  mov eax, %2
  1248 00009FB2 B900000000          <2>  mov ecx, %3
  1248 00009FB7 0FBBC8              <2>  o32 %1 eax, ecx
  1248 00009FBA 9C                  <2>  pushf
  1248 00009FBB 6658                <2>  pop ax
  1248 00009FBD 6625D508            <2>  and ax, PS_ARITH
  1248 00009FC1 6683F801            <2>  cmp ax, %5
  1248 00009FC5 0F85C4350000        <2>  jne error
  1248                              <1>  testBittestDFlags btr, %1, %2, %3, %4
  1248                              <2> 
  1248 00009FCB 66B80000            <2>  mov ax, %4
  1248 00009FCF 6650                <2>  push ax
  1248 00009FD1 9D                  <2>  popf
  1248 00009FD2 B801000000          <2>  mov eax, %2
  1248 00009FD7 0FBAF000            <2>  o32 %1 eax, %3
  1248 00009FDB 9C                  <2>  pushf
  1248 00009FDC 6658                <2>  pop ax
  1248 00009FDE 6625D508            <2>  and ax, PS_ARITH
  1248 00009FE2 6683F801            <2>  cmp ax, %5
  1248 00009FE6 0F85A3350000        <2>  jne error
  1248                              <2> 
  1248                              <2> 
  1248 00009FEC 66B80000            <2>  mov ax, %4
  1248 00009FF0 6650                <2>  push ax
  1248 00009FF2 9D                  <2>  popf
  1248 00009FF3 B801000000          <2>  mov eax, %2
  1248 00009FF8 B900000000          <2>  mov ecx, %3
  1248 00009FFD 0FB3C8              <2>  o32 %1 eax, ecx
  1248 0000A000 9C                  <2>  pushf
  1248 0000A001 6658                <2>  pop ax
  1248 0000A003 6625D508            <2>  and ax, PS_ARITH
  1248 0000A007 6683F801            <2>  cmp ax, %5
  1248 0000A00B 0F857E350000        <2>  jne error
  1248                              <1>  testBittestDFlags bts, %1, %2, %3, %4
  1248                              <2> 
  1248 0000A011 66B80000            <2>  mov ax, %4
  1248 0000A015 6650                <2>  push ax
  1248 0000A017 9D                  <2>  popf
  1248 0000A018 B801000000          <2>  mov eax, %2
  1248 0000A01D 0FBAE800            <2>  o32 %1 eax, %3
  1248 0000A021 9C                  <2>  pushf
  1248 0000A022 6658                <2>  pop ax
  1248 0000A024 6625D508            <2>  and ax, PS_ARITH
  1248 0000A028 6683F801            <2>  cmp ax, %5
  1248 0000A02C 0F855D350000        <2>  jne error
  1248                              <2> 
  1248                              <2> 
  1248 0000A032 66B80000            <2>  mov ax, %4
  1248 0000A036 6650                <2>  push ax
  1248 0000A038 9D                  <2>  popf
  1248 0000A039 B801000000          <2>  mov eax, %2
  1248 0000A03E B900000000          <2>  mov ecx, %3
  1248 0000A043 0FABC8              <2>  o32 %1 eax, ecx
  1248 0000A046 9C                  <2>  pushf
  1248 0000A047 6658                <2>  pop ax
  1248 0000A049 6625D508            <2>  and ax, PS_ARITH
  1248 0000A04D 6683F801            <2>  cmp ax, %5
  1248 0000A051 0F8538350000        <2>  jne error
  1249                                  	testBittestFlags   0x01, 0, PS_CF, PS_CF
  1249                              <1>  testBittestWFlags bt, %1, %2, %3, %4
  1249                              <2> 
  1249 0000A057 66B80100            <2>  mov ax, %4
  1249 0000A05B 6650                <2>  push ax
  1249 0000A05D 9D                  <2>  popf
  1249 0000A05E 66B80100            <2>  mov ax, %2
  1249 0000A062 660FBAE000          <2>  o16 %1 ax, %3
  1249 0000A067 9C                  <2>  pushf
  1249 0000A068 6658                <2>  pop ax
  1249 0000A06A 6625D508            <2>  and ax, PS_ARITH
  1249 0000A06E 6683F801            <2>  cmp ax, %5
  1249 0000A072 0F8517350000        <2>  jne error
  1249                              <2> 
  1249                              <2> 
  1249 0000A078 66B80100            <2>  mov ax, %4
  1249 0000A07C 6650                <2>  push ax
  1249 0000A07E 9D                  <2>  popf
  1249 0000A07F 66B80100            <2>  mov ax, %2
  1249 0000A083 66B90000            <2>  mov cx, %3
  1249 0000A087 660FA3C8            <2>  o16 %1 ax, cx
  1249 0000A08B 9C                  <2>  pushf
  1249 0000A08C 6658                <2>  pop ax
  1249 0000A08E 6625D508            <2>  and ax, PS_ARITH
  1249 0000A092 6683F801            <2>  cmp ax, %5
  1249 0000A096 0F85F3340000        <2>  jne error
  1249                              <1>  testBittestWFlags btc, %1, %2, %3, %4
  1249                              <2> 
  1249 0000A09C 66B80100            <2>  mov ax, %4
  1249 0000A0A0 6650                <2>  push ax
  1249 0000A0A2 9D                  <2>  popf
  1249 0000A0A3 66B80100            <2>  mov ax, %2
  1249 0000A0A7 660FBAF800          <2>  o16 %1 ax, %3
  1249 0000A0AC 9C                  <2>  pushf
  1249 0000A0AD 6658                <2>  pop ax
  1249 0000A0AF 6625D508            <2>  and ax, PS_ARITH
  1249 0000A0B3 6683F801            <2>  cmp ax, %5
  1249 0000A0B7 0F85D2340000        <2>  jne error
  1249                              <2> 
  1249                              <2> 
  1249 0000A0BD 66B80100            <2>  mov ax, %4
  1249 0000A0C1 6650                <2>  push ax
  1249 0000A0C3 9D                  <2>  popf
  1249 0000A0C4 66B80100            <2>  mov ax, %2
  1249 0000A0C8 66B90000            <2>  mov cx, %3
  1249 0000A0CC 660FBBC8            <2>  o16 %1 ax, cx
  1249 0000A0D0 9C                  <2>  pushf
  1249 0000A0D1 6658                <2>  pop ax
  1249 0000A0D3 6625D508            <2>  and ax, PS_ARITH
  1249 0000A0D7 6683F801            <2>  cmp ax, %5
  1249 0000A0DB 0F85AE340000        <2>  jne error
  1249                              <1>  testBittestWFlags btr, %1, %2, %3, %4
  1249                              <2> 
  1249 0000A0E1 66B80100            <2>  mov ax, %4
  1249 0000A0E5 6650                <2>  push ax
  1249 0000A0E7 9D                  <2>  popf
  1249 0000A0E8 66B80100            <2>  mov ax, %2
  1249 0000A0EC 660FBAF000          <2>  o16 %1 ax, %3
  1249 0000A0F1 9C                  <2>  pushf
  1249 0000A0F2 6658                <2>  pop ax
  1249 0000A0F4 6625D508            <2>  and ax, PS_ARITH
  1249 0000A0F8 6683F801            <2>  cmp ax, %5
  1249 0000A0FC 0F858D340000        <2>  jne error
  1249                              <2> 
  1249                              <2> 
  1249 0000A102 66B80100            <2>  mov ax, %4
  1249 0000A106 6650                <2>  push ax
  1249 0000A108 9D                  <2>  popf
  1249 0000A109 66B80100            <2>  mov ax, %2
  1249 0000A10D 66B90000            <2>  mov cx, %3
  1249 0000A111 660FB3C8            <2>  o16 %1 ax, cx
  1249 0000A115 9C                  <2>  pushf
  1249 0000A116 6658                <2>  pop ax
  1249 0000A118 6625D508            <2>  and ax, PS_ARITH
  1249 0000A11C 6683F801            <2>  cmp ax, %5
  1249 0000A120 0F8569340000        <2>  jne error
  1249                              <1>  testBittestWFlags bts, %1, %2, %3, %4
  1249                              <2> 
  1249 0000A126 66B80100            <2>  mov ax, %4
  1249 0000A12A 6650                <2>  push ax
  1249 0000A12C 9D                  <2>  popf
  1249 0000A12D 66B80100            <2>  mov ax, %2
  1249 0000A131 660FBAE800          <2>  o16 %1 ax, %3
  1249 0000A136 9C                  <2>  pushf
  1249 0000A137 6658                <2>  pop ax
  1249 0000A139 6625D508            <2>  and ax, PS_ARITH
  1249 0000A13D 6683F801            <2>  cmp ax, %5
  1249 0000A141 0F8548340000        <2>  jne error
  1249                              <2> 
  1249                              <2> 
  1249 0000A147 66B80100            <2>  mov ax, %4
  1249 0000A14B 6650                <2>  push ax
  1249 0000A14D 9D                  <2>  popf
  1249 0000A14E 66B80100            <2>  mov ax, %2
  1249 0000A152 66B90000            <2>  mov cx, %3
  1249 0000A156 660FABC8            <2>  o16 %1 ax, cx
  1249 0000A15A 9C                  <2>  pushf
  1249 0000A15B 6658                <2>  pop ax
  1249 0000A15D 6625D508            <2>  and ax, PS_ARITH
  1249 0000A161 6683F801            <2>  cmp ax, %5
  1249 0000A165 0F8524340000        <2>  jne error
  1249                              <1> 
  1249                              <1>  testBittestDFlags bt, %1, %2, %3, %4
  1249                              <2> 
  1249 0000A16B 66B80100            <2>  mov ax, %4
  1249 0000A16F 6650                <2>  push ax
  1249 0000A171 9D                  <2>  popf
  1249 0000A172 B801000000          <2>  mov eax, %2
  1249 0000A177 0FBAE000            <2>  o32 %1 eax, %3
  1249 0000A17B 9C                  <2>  pushf
  1249 0000A17C 6658                <2>  pop ax
  1249 0000A17E 6625D508            <2>  and ax, PS_ARITH
  1249 0000A182 6683F801            <2>  cmp ax, %5
  1249 0000A186 0F8503340000        <2>  jne error
  1249                              <2> 
  1249                              <2> 
  1249 0000A18C 66B80100            <2>  mov ax, %4
  1249 0000A190 6650                <2>  push ax
  1249 0000A192 9D                  <2>  popf
  1249 0000A193 B801000000          <2>  mov eax, %2
  1249 0000A198 B900000000          <2>  mov ecx, %3
  1249 0000A19D 0FA3C8              <2>  o32 %1 eax, ecx
  1249 0000A1A0 9C                  <2>  pushf
  1249 0000A1A1 6658                <2>  pop ax
  1249 0000A1A3 6625D508            <2>  and ax, PS_ARITH
  1249 0000A1A7 6683F801            <2>  cmp ax, %5
  1249 0000A1AB 0F85DE330000        <2>  jne error
  1249                              <1>  testBittestDFlags btc, %1, %2, %3, %4
  1249                              <2> 
  1249 0000A1B1 66B80100            <2>  mov ax, %4
  1249 0000A1B5 6650                <2>  push ax
  1249 0000A1B7 9D                  <2>  popf
  1249 0000A1B8 B801000000          <2>  mov eax, %2
  1249 0000A1BD 0FBAF800            <2>  o32 %1 eax, %3
  1249 0000A1C1 9C                  <2>  pushf
  1249 0000A1C2 6658                <2>  pop ax
  1249 0000A1C4 6625D508            <2>  and ax, PS_ARITH
  1249 0000A1C8 6683F801            <2>  cmp ax, %5
  1249 0000A1CC 0F85BD330000        <2>  jne error
  1249                              <2> 
  1249                              <2> 
  1249 0000A1D2 66B80100            <2>  mov ax, %4
  1249 0000A1D6 6650                <2>  push ax
  1249 0000A1D8 9D                  <2>  popf
  1249 0000A1D9 B801000000          <2>  mov eax, %2
  1249 0000A1DE B900000000          <2>  mov ecx, %3
  1249 0000A1E3 0FBBC8              <2>  o32 %1 eax, ecx
  1249 0000A1E6 9C                  <2>  pushf
  1249 0000A1E7 6658                <2>  pop ax
  1249 0000A1E9 6625D508            <2>  and ax, PS_ARITH
  1249 0000A1ED 6683F801            <2>  cmp ax, %5
  1249 0000A1F1 0F8598330000        <2>  jne error
  1249                              <1>  testBittestDFlags btr, %1, %2, %3, %4
  1249                              <2> 
  1249 0000A1F7 66B80100            <2>  mov ax, %4
  1249 0000A1FB 6650                <2>  push ax
  1249 0000A1FD 9D                  <2>  popf
  1249 0000A1FE B801000000          <2>  mov eax, %2
  1249 0000A203 0FBAF000            <2>  o32 %1 eax, %3
  1249 0000A207 9C                  <2>  pushf
  1249 0000A208 6658                <2>  pop ax
  1249 0000A20A 6625D508            <2>  and ax, PS_ARITH
  1249 0000A20E 6683F801            <2>  cmp ax, %5
  1249 0000A212 0F8577330000        <2>  jne error
  1249                              <2> 
  1249                              <2> 
  1249 0000A218 66B80100            <2>  mov ax, %4
  1249 0000A21C 6650                <2>  push ax
  1249 0000A21E 9D                  <2>  popf
  1249 0000A21F B801000000          <2>  mov eax, %2
  1249 0000A224 B900000000          <2>  mov ecx, %3
  1249 0000A229 0FB3C8              <2>  o32 %1 eax, ecx
  1249 0000A22C 9C                  <2>  pushf
  1249 0000A22D 6658                <2>  pop ax
  1249 0000A22F 6625D508            <2>  and ax, PS_ARITH
  1249 0000A233 6683F801            <2>  cmp ax, %5
  1249 0000A237 0F8552330000        <2>  jne error
  1249                              <1>  testBittestDFlags bts, %1, %2, %3, %4
  1249                              <2> 
  1249 0000A23D 66B80100            <2>  mov ax, %4
  1249 0000A241 6650                <2>  push ax
  1249 0000A243 9D                  <2>  popf
  1249 0000A244 B801000000          <2>  mov eax, %2
  1249 0000A249 0FBAE800            <2>  o32 %1 eax, %3
  1249 0000A24D 9C                  <2>  pushf
  1249 0000A24E 6658                <2>  pop ax
  1249 0000A250 6625D508            <2>  and ax, PS_ARITH
  1249 0000A254 6683F801            <2>  cmp ax, %5
  1249 0000A258 0F8531330000        <2>  jne error
  1249                              <2> 
  1249                              <2> 
  1249 0000A25E 66B80100            <2>  mov ax, %4
  1249 0000A262 6650                <2>  push ax
  1249 0000A264 9D                  <2>  popf
  1249 0000A265 B801000000          <2>  mov eax, %2
  1249 0000A26A B900000000          <2>  mov ecx, %3
  1249 0000A26F 0FABC8              <2>  o32 %1 eax, ecx
  1249 0000A272 9C                  <2>  pushf
  1249 0000A273 6658                <2>  pop ax
  1249 0000A275 6625D508            <2>  and ax, PS_ARITH
  1249 0000A279 6683F801            <2>  cmp ax, %5
  1249 0000A27D 0F850C330000        <2>  jne error
  1250                                  	testBittestFlags   0x01, 1, 0,     PS_OF
  1250                              <1>  testBittestWFlags bt, %1, %2, %3, %4
  1250                              <2> 
  1250 0000A283 66B80000            <2>  mov ax, %4
  1250 0000A287 6650                <2>  push ax
  1250 0000A289 9D                  <2>  popf
  1250 0000A28A 66B80100            <2>  mov ax, %2
  1250 0000A28E 660FBAE001          <2>  o16 %1 ax, %3
  1250 0000A293 9C                  <2>  pushf
  1250 0000A294 6658                <2>  pop ax
  1250 0000A296 6625D508            <2>  and ax, PS_ARITH
  1250 0000A29A 663D0008            <2>  cmp ax, %5
  1250 0000A29E 0F85EB320000        <2>  jne error
  1250                              <2> 
  1250                              <2> 
  1250 0000A2A4 66B80000            <2>  mov ax, %4
  1250 0000A2A8 6650                <2>  push ax
  1250 0000A2AA 9D                  <2>  popf
  1250 0000A2AB 66B80100            <2>  mov ax, %2
  1250 0000A2AF 66B90100            <2>  mov cx, %3
  1250 0000A2B3 660FA3C8            <2>  o16 %1 ax, cx
  1250 0000A2B7 9C                  <2>  pushf
  1250 0000A2B8 6658                <2>  pop ax
  1250 0000A2BA 6625D508            <2>  and ax, PS_ARITH
  1250 0000A2BE 663D0008            <2>  cmp ax, %5
  1250 0000A2C2 0F85C7320000        <2>  jne error
  1250                              <1>  testBittestWFlags btc, %1, %2, %3, %4
  1250                              <2> 
  1250 0000A2C8 66B80000            <2>  mov ax, %4
  1250 0000A2CC 6650                <2>  push ax
  1250 0000A2CE 9D                  <2>  popf
  1250 0000A2CF 66B80100            <2>  mov ax, %2
  1250 0000A2D3 660FBAF801          <2>  o16 %1 ax, %3
  1250 0000A2D8 9C                  <2>  pushf
  1250 0000A2D9 6658                <2>  pop ax
  1250 0000A2DB 6625D508            <2>  and ax, PS_ARITH
  1250 0000A2DF 663D0008            <2>  cmp ax, %5
  1250 0000A2E3 0F85A6320000        <2>  jne error
  1250                              <2> 
  1250                              <2> 
  1250 0000A2E9 66B80000            <2>  mov ax, %4
  1250 0000A2ED 6650                <2>  push ax
  1250 0000A2EF 9D                  <2>  popf
  1250 0000A2F0 66B80100            <2>  mov ax, %2
  1250 0000A2F4 66B90100            <2>  mov cx, %3
  1250 0000A2F8 660FBBC8            <2>  o16 %1 ax, cx
  1250 0000A2FC 9C                  <2>  pushf
  1250 0000A2FD 6658                <2>  pop ax
  1250 0000A2FF 6625D508            <2>  and ax, PS_ARITH
  1250 0000A303 663D0008            <2>  cmp ax, %5
  1250 0000A307 0F8582320000        <2>  jne error
  1250                              <1>  testBittestWFlags btr, %1, %2, %3, %4
  1250                              <2> 
  1250 0000A30D 66B80000            <2>  mov ax, %4
  1250 0000A311 6650                <2>  push ax
  1250 0000A313 9D                  <2>  popf
  1250 0000A314 66B80100            <2>  mov ax, %2
  1250 0000A318 660FBAF001          <2>  o16 %1 ax, %3
  1250 0000A31D 9C                  <2>  pushf
  1250 0000A31E 6658                <2>  pop ax
  1250 0000A320 6625D508            <2>  and ax, PS_ARITH
  1250 0000A324 663D0008            <2>  cmp ax, %5
  1250 0000A328 0F8561320000        <2>  jne error
  1250                              <2> 
  1250                              <2> 
  1250 0000A32E 66B80000            <2>  mov ax, %4
  1250 0000A332 6650                <2>  push ax
  1250 0000A334 9D                  <2>  popf
  1250 0000A335 66B80100            <2>  mov ax, %2
  1250 0000A339 66B90100            <2>  mov cx, %3
  1250 0000A33D 660FB3C8            <2>  o16 %1 ax, cx
  1250 0000A341 9C                  <2>  pushf
  1250 0000A342 6658                <2>  pop ax
  1250 0000A344 6625D508            <2>  and ax, PS_ARITH
  1250 0000A348 663D0008            <2>  cmp ax, %5
  1250 0000A34C 0F853D320000        <2>  jne error
  1250                              <1>  testBittestWFlags bts, %1, %2, %3, %4
  1250                              <2> 
  1250 0000A352 66B80000            <2>  mov ax, %4
  1250 0000A356 6650                <2>  push ax
  1250 0000A358 9D                  <2>  popf
  1250 0000A359 66B80100            <2>  mov ax, %2
  1250 0000A35D 660FBAE801          <2>  o16 %1 ax, %3
  1250 0000A362 9C                  <2>  pushf
  1250 0000A363 6658                <2>  pop ax
  1250 0000A365 6625D508            <2>  and ax, PS_ARITH
  1250 0000A369 663D0008            <2>  cmp ax, %5
  1250 0000A36D 0F851C320000        <2>  jne error
  1250                              <2> 
  1250                              <2> 
  1250 0000A373 66B80000            <2>  mov ax, %4
  1250 0000A377 6650                <2>  push ax
  1250 0000A379 9D                  <2>  popf
  1250 0000A37A 66B80100            <2>  mov ax, %2
  1250 0000A37E 66B90100            <2>  mov cx, %3
  1250 0000A382 660FABC8            <2>  o16 %1 ax, cx
  1250 0000A386 9C                  <2>  pushf
  1250 0000A387 6658                <2>  pop ax
  1250 0000A389 6625D508            <2>  and ax, PS_ARITH
  1250 0000A38D 663D0008            <2>  cmp ax, %5
  1250 0000A391 0F85F8310000        <2>  jne error
  1250                              <1> 
  1250                              <1>  testBittestDFlags bt, %1, %2, %3, %4
  1250                              <2> 
  1250 0000A397 66B80000            <2>  mov ax, %4
  1250 0000A39B 6650                <2>  push ax
  1250 0000A39D 9D                  <2>  popf
  1250 0000A39E B801000000          <2>  mov eax, %2
  1250 0000A3A3 0FBAE001            <2>  o32 %1 eax, %3
  1250 0000A3A7 9C                  <2>  pushf
  1250 0000A3A8 6658                <2>  pop ax
  1250 0000A3AA 6625D508            <2>  and ax, PS_ARITH
  1250 0000A3AE 663D0008            <2>  cmp ax, %5
  1250 0000A3B2 0F85D7310000        <2>  jne error
  1250                              <2> 
  1250                              <2> 
  1250 0000A3B8 66B80000            <2>  mov ax, %4
  1250 0000A3BC 6650                <2>  push ax
  1250 0000A3BE 9D                  <2>  popf
  1250 0000A3BF B801000000          <2>  mov eax, %2
  1250 0000A3C4 B901000000          <2>  mov ecx, %3
  1250 0000A3C9 0FA3C8              <2>  o32 %1 eax, ecx
  1250 0000A3CC 9C                  <2>  pushf
  1250 0000A3CD 6658                <2>  pop ax
  1250 0000A3CF 6625D508            <2>  and ax, PS_ARITH
  1250 0000A3D3 663D0008            <2>  cmp ax, %5
  1250 0000A3D7 0F85B2310000        <2>  jne error
  1250                              <1>  testBittestDFlags btc, %1, %2, %3, %4
  1250                              <2> 
  1250 0000A3DD 66B80000            <2>  mov ax, %4
  1250 0000A3E1 6650                <2>  push ax
  1250 0000A3E3 9D                  <2>  popf
  1250 0000A3E4 B801000000          <2>  mov eax, %2
  1250 0000A3E9 0FBAF801            <2>  o32 %1 eax, %3
  1250 0000A3ED 9C                  <2>  pushf
  1250 0000A3EE 6658                <2>  pop ax
  1250 0000A3F0 6625D508            <2>  and ax, PS_ARITH
  1250 0000A3F4 663D0008            <2>  cmp ax, %5
  1250 0000A3F8 0F8591310000        <2>  jne error
  1250                              <2> 
  1250                              <2> 
  1250 0000A3FE 66B80000            <2>  mov ax, %4
  1250 0000A402 6650                <2>  push ax
  1250 0000A404 9D                  <2>  popf
  1250 0000A405 B801000000          <2>  mov eax, %2
  1250 0000A40A B901000000          <2>  mov ecx, %3
  1250 0000A40F 0FBBC8              <2>  o32 %1 eax, ecx
  1250 0000A412 9C                  <2>  pushf
  1250 0000A413 6658                <2>  pop ax
  1250 0000A415 6625D508            <2>  and ax, PS_ARITH
  1250 0000A419 663D0008            <2>  cmp ax, %5
  1250 0000A41D 0F856C310000        <2>  jne error
  1250                              <1>  testBittestDFlags btr, %1, %2, %3, %4
  1250                              <2> 
  1250 0000A423 66B80000            <2>  mov ax, %4
  1250 0000A427 6650                <2>  push ax
  1250 0000A429 9D                  <2>  popf
  1250 0000A42A B801000000          <2>  mov eax, %2
  1250 0000A42F 0FBAF001            <2>  o32 %1 eax, %3
  1250 0000A433 9C                  <2>  pushf
  1250 0000A434 6658                <2>  pop ax
  1250 0000A436 6625D508            <2>  and ax, PS_ARITH
  1250 0000A43A 663D0008            <2>  cmp ax, %5
  1250 0000A43E 0F854B310000        <2>  jne error
  1250                              <2> 
  1250                              <2> 
  1250 0000A444 66B80000            <2>  mov ax, %4
  1250 0000A448 6650                <2>  push ax
  1250 0000A44A 9D                  <2>  popf
  1250 0000A44B B801000000          <2>  mov eax, %2
  1250 0000A450 B901000000          <2>  mov ecx, %3
  1250 0000A455 0FB3C8              <2>  o32 %1 eax, ecx
  1250 0000A458 9C                  <2>  pushf
  1250 0000A459 6658                <2>  pop ax
  1250 0000A45B 6625D508            <2>  and ax, PS_ARITH
  1250 0000A45F 663D0008            <2>  cmp ax, %5
  1250 0000A463 0F8526310000        <2>  jne error
  1250                              <1>  testBittestDFlags bts, %1, %2, %3, %4
  1250                              <2> 
  1250 0000A469 66B80000            <2>  mov ax, %4
  1250 0000A46D 6650                <2>  push ax
  1250 0000A46F 9D                  <2>  popf
  1250 0000A470 B801000000          <2>  mov eax, %2
  1250 0000A475 0FBAE801            <2>  o32 %1 eax, %3
  1250 0000A479 9C                  <2>  pushf
  1250 0000A47A 6658                <2>  pop ax
  1250 0000A47C 6625D508            <2>  and ax, PS_ARITH
  1250 0000A480 663D0008            <2>  cmp ax, %5
  1250 0000A484 0F8505310000        <2>  jne error
  1250                              <2> 
  1250                              <2> 
  1250 0000A48A 66B80000            <2>  mov ax, %4
  1250 0000A48E 6650                <2>  push ax
  1250 0000A490 9D                  <2>  popf
  1250 0000A491 B801000000          <2>  mov eax, %2
  1250 0000A496 B901000000          <2>  mov ecx, %3
  1250 0000A49B 0FABC8              <2>  o32 %1 eax, ecx
  1250 0000A49E 9C                  <2>  pushf
  1250 0000A49F 6658                <2>  pop ax
  1250 0000A4A1 6625D508            <2>  and ax, PS_ARITH
  1250 0000A4A5 663D0008            <2>  cmp ax, %5
  1250 0000A4A9 0F85E0300000        <2>  jne error
  1251                                  	testBittestFlags   0x01, 1, PS_CF, PS_OF
  1251                              <1>  testBittestWFlags bt, %1, %2, %3, %4
  1251                              <2> 
  1251 0000A4AF 66B80100            <2>  mov ax, %4
  1251 0000A4B3 6650                <2>  push ax
  1251 0000A4B5 9D                  <2>  popf
  1251 0000A4B6 66B80100            <2>  mov ax, %2
  1251 0000A4BA 660FBAE001          <2>  o16 %1 ax, %3
  1251 0000A4BF 9C                  <2>  pushf
  1251 0000A4C0 6658                <2>  pop ax
  1251 0000A4C2 6625D508            <2>  and ax, PS_ARITH
  1251 0000A4C6 663D0008            <2>  cmp ax, %5
  1251 0000A4CA 0F85BF300000        <2>  jne error
  1251                              <2> 
  1251                              <2> 
  1251 0000A4D0 66B80100            <2>  mov ax, %4
  1251 0000A4D4 6650                <2>  push ax
  1251 0000A4D6 9D                  <2>  popf
  1251 0000A4D7 66B80100            <2>  mov ax, %2
  1251 0000A4DB 66B90100            <2>  mov cx, %3
  1251 0000A4DF 660FA3C8            <2>  o16 %1 ax, cx
  1251 0000A4E3 9C                  <2>  pushf
  1251 0000A4E4 6658                <2>  pop ax
  1251 0000A4E6 6625D508            <2>  and ax, PS_ARITH
  1251 0000A4EA 663D0008            <2>  cmp ax, %5
  1251 0000A4EE 0F859B300000        <2>  jne error
  1251                              <1>  testBittestWFlags btc, %1, %2, %3, %4
  1251                              <2> 
  1251 0000A4F4 66B80100            <2>  mov ax, %4
  1251 0000A4F8 6650                <2>  push ax
  1251 0000A4FA 9D                  <2>  popf
  1251 0000A4FB 66B80100            <2>  mov ax, %2
  1251 0000A4FF 660FBAF801          <2>  o16 %1 ax, %3
  1251 0000A504 9C                  <2>  pushf
  1251 0000A505 6658                <2>  pop ax
  1251 0000A507 6625D508            <2>  and ax, PS_ARITH
  1251 0000A50B 663D0008            <2>  cmp ax, %5
  1251 0000A50F 0F857A300000        <2>  jne error
  1251                              <2> 
  1251                              <2> 
  1251 0000A515 66B80100            <2>  mov ax, %4
  1251 0000A519 6650                <2>  push ax
  1251 0000A51B 9D                  <2>  popf
  1251 0000A51C 66B80100            <2>  mov ax, %2
  1251 0000A520 66B90100            <2>  mov cx, %3
  1251 0000A524 660FBBC8            <2>  o16 %1 ax, cx
  1251 0000A528 9C                  <2>  pushf
  1251 0000A529 6658                <2>  pop ax
  1251 0000A52B 6625D508            <2>  and ax, PS_ARITH
  1251 0000A52F 663D0008            <2>  cmp ax, %5
  1251 0000A533 0F8556300000        <2>  jne error
  1251                              <1>  testBittestWFlags btr, %1, %2, %3, %4
  1251                              <2> 
  1251 0000A539 66B80100            <2>  mov ax, %4
  1251 0000A53D 6650                <2>  push ax
  1251 0000A53F 9D                  <2>  popf
  1251 0000A540 66B80100            <2>  mov ax, %2
  1251 0000A544 660FBAF001          <2>  o16 %1 ax, %3
  1251 0000A549 9C                  <2>  pushf
  1251 0000A54A 6658                <2>  pop ax
  1251 0000A54C 6625D508            <2>  and ax, PS_ARITH
  1251 0000A550 663D0008            <2>  cmp ax, %5
  1251 0000A554 0F8535300000        <2>  jne error
  1251                              <2> 
  1251                              <2> 
  1251 0000A55A 66B80100            <2>  mov ax, %4
  1251 0000A55E 6650                <2>  push ax
  1251 0000A560 9D                  <2>  popf
  1251 0000A561 66B80100            <2>  mov ax, %2
  1251 0000A565 66B90100            <2>  mov cx, %3
  1251 0000A569 660FB3C8            <2>  o16 %1 ax, cx
  1251 0000A56D 9C                  <2>  pushf
  1251 0000A56E 6658                <2>  pop ax
  1251 0000A570 6625D508            <2>  and ax, PS_ARITH
  1251 0000A574 663D0008            <2>  cmp ax, %5
  1251 0000A578 0F8511300000        <2>  jne error
  1251                              <1>  testBittestWFlags bts, %1, %2, %3, %4
  1251                              <2> 
  1251 0000A57E 66B80100            <2>  mov ax, %4
  1251 0000A582 6650                <2>  push ax
  1251 0000A584 9D                  <2>  popf
  1251 0000A585 66B80100            <2>  mov ax, %2
  1251 0000A589 660FBAE801          <2>  o16 %1 ax, %3
  1251 0000A58E 9C                  <2>  pushf
  1251 0000A58F 6658                <2>  pop ax
  1251 0000A591 6625D508            <2>  and ax, PS_ARITH
  1251 0000A595 663D0008            <2>  cmp ax, %5
  1251 0000A599 0F85F02F0000        <2>  jne error
  1251                              <2> 
  1251                              <2> 
  1251 0000A59F 66B80100            <2>  mov ax, %4
  1251 0000A5A3 6650                <2>  push ax
  1251 0000A5A5 9D                  <2>  popf
  1251 0000A5A6 66B80100            <2>  mov ax, %2
  1251 0000A5AA 66B90100            <2>  mov cx, %3
  1251 0000A5AE 660FABC8            <2>  o16 %1 ax, cx
  1251 0000A5B2 9C                  <2>  pushf
  1251 0000A5B3 6658                <2>  pop ax
  1251 0000A5B5 6625D508            <2>  and ax, PS_ARITH
  1251 0000A5B9 663D0008            <2>  cmp ax, %5
  1251 0000A5BD 0F85CC2F0000        <2>  jne error
  1251                              <1> 
  1251                              <1>  testBittestDFlags bt, %1, %2, %3, %4
  1251                              <2> 
  1251 0000A5C3 66B80100            <2>  mov ax, %4
  1251 0000A5C7 6650                <2>  push ax
  1251 0000A5C9 9D                  <2>  popf
  1251 0000A5CA B801000000          <2>  mov eax, %2
  1251 0000A5CF 0FBAE001            <2>  o32 %1 eax, %3
  1251 0000A5D3 9C                  <2>  pushf
  1251 0000A5D4 6658                <2>  pop ax
  1251 0000A5D6 6625D508            <2>  and ax, PS_ARITH
  1251 0000A5DA 663D0008            <2>  cmp ax, %5
  1251 0000A5DE 0F85AB2F0000        <2>  jne error
  1251                              <2> 
  1251                              <2> 
  1251 0000A5E4 66B80100            <2>  mov ax, %4
  1251 0000A5E8 6650                <2>  push ax
  1251 0000A5EA 9D                  <2>  popf
  1251 0000A5EB B801000000          <2>  mov eax, %2
  1251 0000A5F0 B901000000          <2>  mov ecx, %3
  1251 0000A5F5 0FA3C8              <2>  o32 %1 eax, ecx
  1251 0000A5F8 9C                  <2>  pushf
  1251 0000A5F9 6658                <2>  pop ax
  1251 0000A5FB 6625D508            <2>  and ax, PS_ARITH
  1251 0000A5FF 663D0008            <2>  cmp ax, %5
  1251 0000A603 0F85862F0000        <2>  jne error
  1251                              <1>  testBittestDFlags btc, %1, %2, %3, %4
  1251                              <2> 
  1251 0000A609 66B80100            <2>  mov ax, %4
  1251 0000A60D 6650                <2>  push ax
  1251 0000A60F 9D                  <2>  popf
  1251 0000A610 B801000000          <2>  mov eax, %2
  1251 0000A615 0FBAF801            <2>  o32 %1 eax, %3
  1251 0000A619 9C                  <2>  pushf
  1251 0000A61A 6658                <2>  pop ax
  1251 0000A61C 6625D508            <2>  and ax, PS_ARITH
  1251 0000A620 663D0008            <2>  cmp ax, %5
  1251 0000A624 0F85652F0000        <2>  jne error
  1251                              <2> 
  1251                              <2> 
  1251 0000A62A 66B80100            <2>  mov ax, %4
  1251 0000A62E 6650                <2>  push ax
  1251 0000A630 9D                  <2>  popf
  1251 0000A631 B801000000          <2>  mov eax, %2
  1251 0000A636 B901000000          <2>  mov ecx, %3
  1251 0000A63B 0FBBC8              <2>  o32 %1 eax, ecx
  1251 0000A63E 9C                  <2>  pushf
  1251 0000A63F 6658                <2>  pop ax
  1251 0000A641 6625D508            <2>  and ax, PS_ARITH
  1251 0000A645 663D0008            <2>  cmp ax, %5
  1251 0000A649 0F85402F0000        <2>  jne error
  1251                              <1>  testBittestDFlags btr, %1, %2, %3, %4
  1251                              <2> 
  1251 0000A64F 66B80100            <2>  mov ax, %4
  1251 0000A653 6650                <2>  push ax
  1251 0000A655 9D                  <2>  popf
  1251 0000A656 B801000000          <2>  mov eax, %2
  1251 0000A65B 0FBAF001            <2>  o32 %1 eax, %3
  1251 0000A65F 9C                  <2>  pushf
  1251 0000A660 6658                <2>  pop ax
  1251 0000A662 6625D508            <2>  and ax, PS_ARITH
  1251 0000A666 663D0008            <2>  cmp ax, %5
  1251 0000A66A 0F851F2F0000        <2>  jne error
  1251                              <2> 
  1251                              <2> 
  1251 0000A670 66B80100            <2>  mov ax, %4
  1251 0000A674 6650                <2>  push ax
  1251 0000A676 9D                  <2>  popf
  1251 0000A677 B801000000          <2>  mov eax, %2
  1251 0000A67C B901000000          <2>  mov ecx, %3
  1251 0000A681 0FB3C8              <2>  o32 %1 eax, ecx
  1251 0000A684 9C                  <2>  pushf
  1251 0000A685 6658                <2>  pop ax
  1251 0000A687 6625D508            <2>  and ax, PS_ARITH
  1251 0000A68B 663D0008            <2>  cmp ax, %5
  1251 0000A68F 0F85FA2E0000        <2>  jne error
  1251                              <1>  testBittestDFlags bts, %1, %2, %3, %4
  1251                              <2> 
  1251 0000A695 66B80100            <2>  mov ax, %4
  1251 0000A699 6650                <2>  push ax
  1251 0000A69B 9D                  <2>  popf
  1251 0000A69C B801000000          <2>  mov eax, %2
  1251 0000A6A1 0FBAE801            <2>  o32 %1 eax, %3
  1251 0000A6A5 9C                  <2>  pushf
  1251 0000A6A6 6658                <2>  pop ax
  1251 0000A6A8 6625D508            <2>  and ax, PS_ARITH
  1251 0000A6AC 663D0008            <2>  cmp ax, %5
  1251 0000A6B0 0F85D92E0000        <2>  jne error
  1251                              <2> 
  1251                              <2> 
  1251 0000A6B6 66B80100            <2>  mov ax, %4
  1251 0000A6BA 6650                <2>  push ax
  1251 0000A6BC 9D                  <2>  popf
  1251 0000A6BD B801000000          <2>  mov eax, %2
  1251 0000A6C2 B901000000          <2>  mov ecx, %3
  1251 0000A6C7 0FABC8              <2>  o32 %1 eax, ecx
  1251 0000A6CA 9C                  <2>  pushf
  1251 0000A6CB 6658                <2>  pop ax
  1251 0000A6CD 6625D508            <2>  and ax, PS_ARITH
  1251 0000A6D1 663D0008            <2>  cmp ax, %5
  1251 0000A6D5 0F85B42E0000        <2>  jne error
  1252                                  	testBittestFlags   0x01, 2, 0,     PS_OF
  1252                              <1>  testBittestWFlags bt, %1, %2, %3, %4
  1252                              <2> 
  1252 0000A6DB 66B80000            <2>  mov ax, %4
  1252 0000A6DF 6650                <2>  push ax
  1252 0000A6E1 9D                  <2>  popf
  1252 0000A6E2 66B80100            <2>  mov ax, %2
  1252 0000A6E6 660FBAE002          <2>  o16 %1 ax, %3
  1252 0000A6EB 9C                  <2>  pushf
  1252 0000A6EC 6658                <2>  pop ax
  1252 0000A6EE 6625D508            <2>  and ax, PS_ARITH
  1252 0000A6F2 663D0008            <2>  cmp ax, %5
  1252 0000A6F6 0F85932E0000        <2>  jne error
  1252                              <2> 
  1252                              <2> 
  1252 0000A6FC 66B80000            <2>  mov ax, %4
  1252 0000A700 6650                <2>  push ax
  1252 0000A702 9D                  <2>  popf
  1252 0000A703 66B80100            <2>  mov ax, %2
  1252 0000A707 66B90200            <2>  mov cx, %3
  1252 0000A70B 660FA3C8            <2>  o16 %1 ax, cx
  1252 0000A70F 9C                  <2>  pushf
  1252 0000A710 6658                <2>  pop ax
  1252 0000A712 6625D508            <2>  and ax, PS_ARITH
  1252 0000A716 663D0008            <2>  cmp ax, %5
  1252 0000A71A 0F856F2E0000        <2>  jne error
  1252                              <1>  testBittestWFlags btc, %1, %2, %3, %4
  1252                              <2> 
  1252 0000A720 66B80000            <2>  mov ax, %4
  1252 0000A724 6650                <2>  push ax
  1252 0000A726 9D                  <2>  popf
  1252 0000A727 66B80100            <2>  mov ax, %2
  1252 0000A72B 660FBAF802          <2>  o16 %1 ax, %3
  1252 0000A730 9C                  <2>  pushf
  1252 0000A731 6658                <2>  pop ax
  1252 0000A733 6625D508            <2>  and ax, PS_ARITH
  1252 0000A737 663D0008            <2>  cmp ax, %5
  1252 0000A73B 0F854E2E0000        <2>  jne error
  1252                              <2> 
  1252                              <2> 
  1252 0000A741 66B80000            <2>  mov ax, %4
  1252 0000A745 6650                <2>  push ax
  1252 0000A747 9D                  <2>  popf
  1252 0000A748 66B80100            <2>  mov ax, %2
  1252 0000A74C 66B90200            <2>  mov cx, %3
  1252 0000A750 660FBBC8            <2>  o16 %1 ax, cx
  1252 0000A754 9C                  <2>  pushf
  1252 0000A755 6658                <2>  pop ax
  1252 0000A757 6625D508            <2>  and ax, PS_ARITH
  1252 0000A75B 663D0008            <2>  cmp ax, %5
  1252 0000A75F 0F852A2E0000        <2>  jne error
  1252                              <1>  testBittestWFlags btr, %1, %2, %3, %4
  1252                              <2> 
  1252 0000A765 66B80000            <2>  mov ax, %4
  1252 0000A769 6650                <2>  push ax
  1252 0000A76B 9D                  <2>  popf
  1252 0000A76C 66B80100            <2>  mov ax, %2
  1252 0000A770 660FBAF002          <2>  o16 %1 ax, %3
  1252 0000A775 9C                  <2>  pushf
  1252 0000A776 6658                <2>  pop ax
  1252 0000A778 6625D508            <2>  and ax, PS_ARITH
  1252 0000A77C 663D0008            <2>  cmp ax, %5
  1252 0000A780 0F85092E0000        <2>  jne error
  1252                              <2> 
  1252                              <2> 
  1252 0000A786 66B80000            <2>  mov ax, %4
  1252 0000A78A 6650                <2>  push ax
  1252 0000A78C 9D                  <2>  popf
  1252 0000A78D 66B80100            <2>  mov ax, %2
  1252 0000A791 66B90200            <2>  mov cx, %3
  1252 0000A795 660FB3C8            <2>  o16 %1 ax, cx
  1252 0000A799 9C                  <2>  pushf
  1252 0000A79A 6658                <2>  pop ax
  1252 0000A79C 6625D508            <2>  and ax, PS_ARITH
  1252 0000A7A0 663D0008            <2>  cmp ax, %5
  1252 0000A7A4 0F85E52D0000        <2>  jne error
  1252                              <1>  testBittestWFlags bts, %1, %2, %3, %4
  1252                              <2> 
  1252 0000A7AA 66B80000            <2>  mov ax, %4
  1252 0000A7AE 6650                <2>  push ax
  1252 0000A7B0 9D                  <2>  popf
  1252 0000A7B1 66B80100            <2>  mov ax, %2
  1252 0000A7B5 660FBAE802          <2>  o16 %1 ax, %3
  1252 0000A7BA 9C                  <2>  pushf
  1252 0000A7BB 6658                <2>  pop ax
  1252 0000A7BD 6625D508            <2>  and ax, PS_ARITH
  1252 0000A7C1 663D0008            <2>  cmp ax, %5
  1252 0000A7C5 0F85C42D0000        <2>  jne error
  1252                              <2> 
  1252                              <2> 
  1252 0000A7CB 66B80000            <2>  mov ax, %4
  1252 0000A7CF 6650                <2>  push ax
  1252 0000A7D1 9D                  <2>  popf
  1252 0000A7D2 66B80100            <2>  mov ax, %2
  1252 0000A7D6 66B90200            <2>  mov cx, %3
  1252 0000A7DA 660FABC8            <2>  o16 %1 ax, cx
  1252 0000A7DE 9C                  <2>  pushf
  1252 0000A7DF 6658                <2>  pop ax
  1252 0000A7E1 6625D508            <2>  and ax, PS_ARITH
  1252 0000A7E5 663D0008            <2>  cmp ax, %5
  1252 0000A7E9 0F85A02D0000        <2>  jne error
  1252                              <1> 
  1252                              <1>  testBittestDFlags bt, %1, %2, %3, %4
  1252                              <2> 
  1252 0000A7EF 66B80000            <2>  mov ax, %4
  1252 0000A7F3 6650                <2>  push ax
  1252 0000A7F5 9D                  <2>  popf
  1252 0000A7F6 B801000000          <2>  mov eax, %2
  1252 0000A7FB 0FBAE002            <2>  o32 %1 eax, %3
  1252 0000A7FF 9C                  <2>  pushf
  1252 0000A800 6658                <2>  pop ax
  1252 0000A802 6625D508            <2>  and ax, PS_ARITH
  1252 0000A806 663D0008            <2>  cmp ax, %5
  1252 0000A80A 0F857F2D0000        <2>  jne error
  1252                              <2> 
  1252                              <2> 
  1252 0000A810 66B80000            <2>  mov ax, %4
  1252 0000A814 6650                <2>  push ax
  1252 0000A816 9D                  <2>  popf
  1252 0000A817 B801000000          <2>  mov eax, %2
  1252 0000A81C B902000000          <2>  mov ecx, %3
  1252 0000A821 0FA3C8              <2>  o32 %1 eax, ecx
  1252 0000A824 9C                  <2>  pushf
  1252 0000A825 6658                <2>  pop ax
  1252 0000A827 6625D508            <2>  and ax, PS_ARITH
  1252 0000A82B 663D0008            <2>  cmp ax, %5
  1252 0000A82F 0F855A2D0000        <2>  jne error
  1252                              <1>  testBittestDFlags btc, %1, %2, %3, %4
  1252                              <2> 
  1252 0000A835 66B80000            <2>  mov ax, %4
  1252 0000A839 6650                <2>  push ax
  1252 0000A83B 9D                  <2>  popf
  1252 0000A83C B801000000          <2>  mov eax, %2
  1252 0000A841 0FBAF802            <2>  o32 %1 eax, %3
  1252 0000A845 9C                  <2>  pushf
  1252 0000A846 6658                <2>  pop ax
  1252 0000A848 6625D508            <2>  and ax, PS_ARITH
  1252 0000A84C 663D0008            <2>  cmp ax, %5
  1252 0000A850 0F85392D0000        <2>  jne error
  1252                              <2> 
  1252                              <2> 
  1252 0000A856 66B80000            <2>  mov ax, %4
  1252 0000A85A 6650                <2>  push ax
  1252 0000A85C 9D                  <2>  popf
  1252 0000A85D B801000000          <2>  mov eax, %2
  1252 0000A862 B902000000          <2>  mov ecx, %3
  1252 0000A867 0FBBC8              <2>  o32 %1 eax, ecx
  1252 0000A86A 9C                  <2>  pushf
  1252 0000A86B 6658                <2>  pop ax
  1252 0000A86D 6625D508            <2>  and ax, PS_ARITH
  1252 0000A871 663D0008            <2>  cmp ax, %5
  1252 0000A875 0F85142D0000        <2>  jne error
  1252                              <1>  testBittestDFlags btr, %1, %2, %3, %4
  1252                              <2> 
  1252 0000A87B 66B80000            <2>  mov ax, %4
  1252 0000A87F 6650                <2>  push ax
  1252 0000A881 9D                  <2>  popf
  1252 0000A882 B801000000          <2>  mov eax, %2
  1252 0000A887 0FBAF002            <2>  o32 %1 eax, %3
  1252 0000A88B 9C                  <2>  pushf
  1252 0000A88C 6658                <2>  pop ax
  1252 0000A88E 6625D508            <2>  and ax, PS_ARITH
  1252 0000A892 663D0008            <2>  cmp ax, %5
  1252 0000A896 0F85F32C0000        <2>  jne error
  1252                              <2> 
  1252                              <2> 
  1252 0000A89C 66B80000            <2>  mov ax, %4
  1252 0000A8A0 6650                <2>  push ax
  1252 0000A8A2 9D                  <2>  popf
  1252 0000A8A3 B801000000          <2>  mov eax, %2
  1252 0000A8A8 B902000000          <2>  mov ecx, %3
  1252 0000A8AD 0FB3C8              <2>  o32 %1 eax, ecx
  1252 0000A8B0 9C                  <2>  pushf
  1252 0000A8B1 6658                <2>  pop ax
  1252 0000A8B3 6625D508            <2>  and ax, PS_ARITH
  1252 0000A8B7 663D0008            <2>  cmp ax, %5
  1252 0000A8BB 0F85CE2C0000        <2>  jne error
  1252                              <1>  testBittestDFlags bts, %1, %2, %3, %4
  1252                              <2> 
  1252 0000A8C1 66B80000            <2>  mov ax, %4
  1252 0000A8C5 6650                <2>  push ax
  1252 0000A8C7 9D                  <2>  popf
  1252 0000A8C8 B801000000          <2>  mov eax, %2
  1252 0000A8CD 0FBAE802            <2>  o32 %1 eax, %3
  1252 0000A8D1 9C                  <2>  pushf
  1252 0000A8D2 6658                <2>  pop ax
  1252 0000A8D4 6625D508            <2>  and ax, PS_ARITH
  1252 0000A8D8 663D0008            <2>  cmp ax, %5
  1252 0000A8DC 0F85AD2C0000        <2>  jne error
  1252                              <2> 
  1252                              <2> 
  1252 0000A8E2 66B80000            <2>  mov ax, %4
  1252 0000A8E6 6650                <2>  push ax
  1252 0000A8E8 9D                  <2>  popf
  1252 0000A8E9 B801000000          <2>  mov eax, %2
  1252 0000A8EE B902000000          <2>  mov ecx, %3
  1252 0000A8F3 0FABC8              <2>  o32 %1 eax, ecx
  1252 0000A8F6 9C                  <2>  pushf
  1252 0000A8F7 6658                <2>  pop ax
  1252 0000A8F9 6625D508            <2>  and ax, PS_ARITH
  1252 0000A8FD 663D0008            <2>  cmp ax, %5
  1252 0000A901 0F85882C0000        <2>  jne error
  1253                                  	testBittestFlags   0x01, 2, PS_CF, PS_OF
  1253                              <1>  testBittestWFlags bt, %1, %2, %3, %4
  1253                              <2> 
  1253 0000A907 66B80100            <2>  mov ax, %4
  1253 0000A90B 6650                <2>  push ax
  1253 0000A90D 9D                  <2>  popf
  1253 0000A90E 66B80100            <2>  mov ax, %2
  1253 0000A912 660FBAE002          <2>  o16 %1 ax, %3
  1253 0000A917 9C                  <2>  pushf
  1253 0000A918 6658                <2>  pop ax
  1253 0000A91A 6625D508            <2>  and ax, PS_ARITH
  1253 0000A91E 663D0008            <2>  cmp ax, %5
  1253 0000A922 0F85672C0000        <2>  jne error
  1253                              <2> 
  1253                              <2> 
  1253 0000A928 66B80100            <2>  mov ax, %4
  1253 0000A92C 6650                <2>  push ax
  1253 0000A92E 9D                  <2>  popf
  1253 0000A92F 66B80100            <2>  mov ax, %2
  1253 0000A933 66B90200            <2>  mov cx, %3
  1253 0000A937 660FA3C8            <2>  o16 %1 ax, cx
  1253 0000A93B 9C                  <2>  pushf
  1253 0000A93C 6658                <2>  pop ax
  1253 0000A93E 6625D508            <2>  and ax, PS_ARITH
  1253 0000A942 663D0008            <2>  cmp ax, %5
  1253 0000A946 0F85432C0000        <2>  jne error
  1253                              <1>  testBittestWFlags btc, %1, %2, %3, %4
  1253                              <2> 
  1253 0000A94C 66B80100            <2>  mov ax, %4
  1253 0000A950 6650                <2>  push ax
  1253 0000A952 9D                  <2>  popf
  1253 0000A953 66B80100            <2>  mov ax, %2
  1253 0000A957 660FBAF802          <2>  o16 %1 ax, %3
  1253 0000A95C 9C                  <2>  pushf
  1253 0000A95D 6658                <2>  pop ax
  1253 0000A95F 6625D508            <2>  and ax, PS_ARITH
  1253 0000A963 663D0008            <2>  cmp ax, %5
  1253 0000A967 0F85222C0000        <2>  jne error
  1253                              <2> 
  1253                              <2> 
  1253 0000A96D 66B80100            <2>  mov ax, %4
  1253 0000A971 6650                <2>  push ax
  1253 0000A973 9D                  <2>  popf
  1253 0000A974 66B80100            <2>  mov ax, %2
  1253 0000A978 66B90200            <2>  mov cx, %3
  1253 0000A97C 660FBBC8            <2>  o16 %1 ax, cx
  1253 0000A980 9C                  <2>  pushf
  1253 0000A981 6658                <2>  pop ax
  1253 0000A983 6625D508            <2>  and ax, PS_ARITH
  1253 0000A987 663D0008            <2>  cmp ax, %5
  1253 0000A98B 0F85FE2B0000        <2>  jne error
  1253                              <1>  testBittestWFlags btr, %1, %2, %3, %4
  1253                              <2> 
  1253 0000A991 66B80100            <2>  mov ax, %4
  1253 0000A995 6650                <2>  push ax
  1253 0000A997 9D                  <2>  popf
  1253 0000A998 66B80100            <2>  mov ax, %2
  1253 0000A99C 660FBAF002          <2>  o16 %1 ax, %3
  1253 0000A9A1 9C                  <2>  pushf
  1253 0000A9A2 6658                <2>  pop ax
  1253 0000A9A4 6625D508            <2>  and ax, PS_ARITH
  1253 0000A9A8 663D0008            <2>  cmp ax, %5
  1253 0000A9AC 0F85DD2B0000        <2>  jne error
  1253                              <2> 
  1253                              <2> 
  1253 0000A9B2 66B80100            <2>  mov ax, %4
  1253 0000A9B6 6650                <2>  push ax
  1253 0000A9B8 9D                  <2>  popf
  1253 0000A9B9 66B80100            <2>  mov ax, %2
  1253 0000A9BD 66B90200            <2>  mov cx, %3
  1253 0000A9C1 660FB3C8            <2>  o16 %1 ax, cx
  1253 0000A9C5 9C                  <2>  pushf
  1253 0000A9C6 6658                <2>  pop ax
  1253 0000A9C8 6625D508            <2>  and ax, PS_ARITH
  1253 0000A9CC 663D0008            <2>  cmp ax, %5
  1253 0000A9D0 0F85B92B0000        <2>  jne error
  1253                              <1>  testBittestWFlags bts, %1, %2, %3, %4
  1253                              <2> 
  1253 0000A9D6 66B80100            <2>  mov ax, %4
  1253 0000A9DA 6650                <2>  push ax
  1253 0000A9DC 9D                  <2>  popf
  1253 0000A9DD 66B80100            <2>  mov ax, %2
  1253 0000A9E1 660FBAE802          <2>  o16 %1 ax, %3
  1253 0000A9E6 9C                  <2>  pushf
  1253 0000A9E7 6658                <2>  pop ax
  1253 0000A9E9 6625D508            <2>  and ax, PS_ARITH
  1253 0000A9ED 663D0008            <2>  cmp ax, %5
  1253 0000A9F1 0F85982B0000        <2>  jne error
  1253                              <2> 
  1253                              <2> 
  1253 0000A9F7 66B80100            <2>  mov ax, %4
  1253 0000A9FB 6650                <2>  push ax
  1253 0000A9FD 9D                  <2>  popf
  1253 0000A9FE 66B80100            <2>  mov ax, %2
  1253 0000AA02 66B90200            <2>  mov cx, %3
  1253 0000AA06 660FABC8            <2>  o16 %1 ax, cx
  1253 0000AA0A 9C                  <2>  pushf
  1253 0000AA0B 6658                <2>  pop ax
  1253 0000AA0D 6625D508            <2>  and ax, PS_ARITH
  1253 0000AA11 663D0008            <2>  cmp ax, %5
  1253 0000AA15 0F85742B0000        <2>  jne error
  1253                              <1> 
  1253                              <1>  testBittestDFlags bt, %1, %2, %3, %4
  1253                              <2> 
  1253 0000AA1B 66B80100            <2>  mov ax, %4
  1253 0000AA1F 6650                <2>  push ax
  1253 0000AA21 9D                  <2>  popf
  1253 0000AA22 B801000000          <2>  mov eax, %2
  1253 0000AA27 0FBAE002            <2>  o32 %1 eax, %3
  1253 0000AA2B 9C                  <2>  pushf
  1253 0000AA2C 6658                <2>  pop ax
  1253 0000AA2E 6625D508            <2>  and ax, PS_ARITH
  1253 0000AA32 663D0008            <2>  cmp ax, %5
  1253 0000AA36 0F85532B0000        <2>  jne error
  1253                              <2> 
  1253                              <2> 
  1253 0000AA3C 66B80100            <2>  mov ax, %4
  1253 0000AA40 6650                <2>  push ax
  1253 0000AA42 9D                  <2>  popf
  1253 0000AA43 B801000000          <2>  mov eax, %2
  1253 0000AA48 B902000000          <2>  mov ecx, %3
  1253 0000AA4D 0FA3C8              <2>  o32 %1 eax, ecx
  1253 0000AA50 9C                  <2>  pushf
  1253 0000AA51 6658                <2>  pop ax
  1253 0000AA53 6625D508            <2>  and ax, PS_ARITH
  1253 0000AA57 663D0008            <2>  cmp ax, %5
  1253 0000AA5B 0F852E2B0000        <2>  jne error
  1253                              <1>  testBittestDFlags btc, %1, %2, %3, %4
  1253                              <2> 
  1253 0000AA61 66B80100            <2>  mov ax, %4
  1253 0000AA65 6650                <2>  push ax
  1253 0000AA67 9D                  <2>  popf
  1253 0000AA68 B801000000          <2>  mov eax, %2
  1253 0000AA6D 0FBAF802            <2>  o32 %1 eax, %3
  1253 0000AA71 9C                  <2>  pushf
  1253 0000AA72 6658                <2>  pop ax
  1253 0000AA74 6625D508            <2>  and ax, PS_ARITH
  1253 0000AA78 663D0008            <2>  cmp ax, %5
  1253 0000AA7C 0F850D2B0000        <2>  jne error
  1253                              <2> 
  1253                              <2> 
  1253 0000AA82 66B80100            <2>  mov ax, %4
  1253 0000AA86 6650                <2>  push ax
  1253 0000AA88 9D                  <2>  popf
  1253 0000AA89 B801000000          <2>  mov eax, %2
  1253 0000AA8E B902000000          <2>  mov ecx, %3
  1253 0000AA93 0FBBC8              <2>  o32 %1 eax, ecx
  1253 0000AA96 9C                  <2>  pushf
  1253 0000AA97 6658                <2>  pop ax
  1253 0000AA99 6625D508            <2>  and ax, PS_ARITH
  1253 0000AA9D 663D0008            <2>  cmp ax, %5
  1253 0000AAA1 0F85E82A0000        <2>  jne error
  1253                              <1>  testBittestDFlags btr, %1, %2, %3, %4
  1253                              <2> 
  1253 0000AAA7 66B80100            <2>  mov ax, %4
  1253 0000AAAB 6650                <2>  push ax
  1253 0000AAAD 9D                  <2>  popf
  1253 0000AAAE B801000000          <2>  mov eax, %2
  1253 0000AAB3 0FBAF002            <2>  o32 %1 eax, %3
  1253 0000AAB7 9C                  <2>  pushf
  1253 0000AAB8 6658                <2>  pop ax
  1253 0000AABA 6625D508            <2>  and ax, PS_ARITH
  1253 0000AABE 663D0008            <2>  cmp ax, %5
  1253 0000AAC2 0F85C72A0000        <2>  jne error
  1253                              <2> 
  1253                              <2> 
  1253 0000AAC8 66B80100            <2>  mov ax, %4
  1253 0000AACC 6650                <2>  push ax
  1253 0000AACE 9D                  <2>  popf
  1253 0000AACF B801000000          <2>  mov eax, %2
  1253 0000AAD4 B902000000          <2>  mov ecx, %3
  1253 0000AAD9 0FB3C8              <2>  o32 %1 eax, ecx
  1253 0000AADC 9C                  <2>  pushf
  1253 0000AADD 6658                <2>  pop ax
  1253 0000AADF 6625D508            <2>  and ax, PS_ARITH
  1253 0000AAE3 663D0008            <2>  cmp ax, %5
  1253 0000AAE7 0F85A22A0000        <2>  jne error
  1253                              <1>  testBittestDFlags bts, %1, %2, %3, %4
  1253                              <2> 
  1253 0000AAED 66B80100            <2>  mov ax, %4
  1253 0000AAF1 6650                <2>  push ax
  1253 0000AAF3 9D                  <2>  popf
  1253 0000AAF4 B801000000          <2>  mov eax, %2
  1253 0000AAF9 0FBAE802            <2>  o32 %1 eax, %3
  1253 0000AAFD 9C                  <2>  pushf
  1253 0000AAFE 6658                <2>  pop ax
  1253 0000AB00 6625D508            <2>  and ax, PS_ARITH
  1253 0000AB04 663D0008            <2>  cmp ax, %5
  1253 0000AB08 0F85812A0000        <2>  jne error
  1253                              <2> 
  1253                              <2> 
  1253 0000AB0E 66B80100            <2>  mov ax, %4
  1253 0000AB12 6650                <2>  push ax
  1253 0000AB14 9D                  <2>  popf
  1253 0000AB15 B801000000          <2>  mov eax, %2
  1253 0000AB1A B902000000          <2>  mov ecx, %3
  1253 0000AB1F 0FABC8              <2>  o32 %1 eax, ecx
  1253 0000AB22 9C                  <2>  pushf
  1253 0000AB23 6658                <2>  pop ax
  1253 0000AB25 6625D508            <2>  and ax, PS_ARITH
  1253 0000AB29 663D0008            <2>  cmp ax, %5
  1253 0000AB2D 0F855C2A0000        <2>  jne error
  1254                                  	testBittestFlags   0x01, 3, 0,     0
  1254                              <1>  testBittestWFlags bt, %1, %2, %3, %4
  1254                              <2> 
  1254 0000AB33 66B80000            <2>  mov ax, %4
  1254 0000AB37 6650                <2>  push ax
  1254 0000AB39 9D                  <2>  popf
  1254 0000AB3A 66B80100            <2>  mov ax, %2
  1254 0000AB3E 660FBAE003          <2>  o16 %1 ax, %3
  1254 0000AB43 9C                  <2>  pushf
  1254 0000AB44 6658                <2>  pop ax
  1254 0000AB46 6625D508            <2>  and ax, PS_ARITH
  1254 0000AB4A 6683F800            <2>  cmp ax, %5
  1254 0000AB4E 0F853B2A0000        <2>  jne error
  1254                              <2> 
  1254                              <2> 
  1254 0000AB54 66B80000            <2>  mov ax, %4
  1254 0000AB58 6650                <2>  push ax
  1254 0000AB5A 9D                  <2>  popf
  1254 0000AB5B 66B80100            <2>  mov ax, %2
  1254 0000AB5F 66B90300            <2>  mov cx, %3
  1254 0000AB63 660FA3C8            <2>  o16 %1 ax, cx
  1254 0000AB67 9C                  <2>  pushf
  1254 0000AB68 6658                <2>  pop ax
  1254 0000AB6A 6625D508            <2>  and ax, PS_ARITH
  1254 0000AB6E 6683F800            <2>  cmp ax, %5
  1254 0000AB72 0F85172A0000        <2>  jne error
  1254                              <1>  testBittestWFlags btc, %1, %2, %3, %4
  1254                              <2> 
  1254 0000AB78 66B80000            <2>  mov ax, %4
  1254 0000AB7C 6650                <2>  push ax
  1254 0000AB7E 9D                  <2>  popf
  1254 0000AB7F 66B80100            <2>  mov ax, %2
  1254 0000AB83 660FBAF803          <2>  o16 %1 ax, %3
  1254 0000AB88 9C                  <2>  pushf
  1254 0000AB89 6658                <2>  pop ax
  1254 0000AB8B 6625D508            <2>  and ax, PS_ARITH
  1254 0000AB8F 6683F800            <2>  cmp ax, %5
  1254 0000AB93 0F85F6290000        <2>  jne error
  1254                              <2> 
  1254                              <2> 
  1254 0000AB99 66B80000            <2>  mov ax, %4
  1254 0000AB9D 6650                <2>  push ax
  1254 0000AB9F 9D                  <2>  popf
  1254 0000ABA0 66B80100            <2>  mov ax, %2
  1254 0000ABA4 66B90300            <2>  mov cx, %3
  1254 0000ABA8 660FBBC8            <2>  o16 %1 ax, cx
  1254 0000ABAC 9C                  <2>  pushf
  1254 0000ABAD 6658                <2>  pop ax
  1254 0000ABAF 6625D508            <2>  and ax, PS_ARITH
  1254 0000ABB3 6683F800            <2>  cmp ax, %5
  1254 0000ABB7 0F85D2290000        <2>  jne error
  1254                              <1>  testBittestWFlags btr, %1, %2, %3, %4
  1254                              <2> 
  1254 0000ABBD 66B80000            <2>  mov ax, %4
  1254 0000ABC1 6650                <2>  push ax
  1254 0000ABC3 9D                  <2>  popf
  1254 0000ABC4 66B80100            <2>  mov ax, %2
  1254 0000ABC8 660FBAF003          <2>  o16 %1 ax, %3
  1254 0000ABCD 9C                  <2>  pushf
  1254 0000ABCE 6658                <2>  pop ax
  1254 0000ABD0 6625D508            <2>  and ax, PS_ARITH
  1254 0000ABD4 6683F800            <2>  cmp ax, %5
  1254 0000ABD8 0F85B1290000        <2>  jne error
  1254                              <2> 
  1254                              <2> 
  1254 0000ABDE 66B80000            <2>  mov ax, %4
  1254 0000ABE2 6650                <2>  push ax
  1254 0000ABE4 9D                  <2>  popf
  1254 0000ABE5 66B80100            <2>  mov ax, %2
  1254 0000ABE9 66B90300            <2>  mov cx, %3
  1254 0000ABED 660FB3C8            <2>  o16 %1 ax, cx
  1254 0000ABF1 9C                  <2>  pushf
  1254 0000ABF2 6658                <2>  pop ax
  1254 0000ABF4 6625D508            <2>  and ax, PS_ARITH
  1254 0000ABF8 6683F800            <2>  cmp ax, %5
  1254 0000ABFC 0F858D290000        <2>  jne error
  1254                              <1>  testBittestWFlags bts, %1, %2, %3, %4
  1254                              <2> 
  1254 0000AC02 66B80000            <2>  mov ax, %4
  1254 0000AC06 6650                <2>  push ax
  1254 0000AC08 9D                  <2>  popf
  1254 0000AC09 66B80100            <2>  mov ax, %2
  1254 0000AC0D 660FBAE803          <2>  o16 %1 ax, %3
  1254 0000AC12 9C                  <2>  pushf
  1254 0000AC13 6658                <2>  pop ax
  1254 0000AC15 6625D508            <2>  and ax, PS_ARITH
  1254 0000AC19 6683F800            <2>  cmp ax, %5
  1254 0000AC1D 0F856C290000        <2>  jne error
  1254                              <2> 
  1254                              <2> 
  1254 0000AC23 66B80000            <2>  mov ax, %4
  1254 0000AC27 6650                <2>  push ax
  1254 0000AC29 9D                  <2>  popf
  1254 0000AC2A 66B80100            <2>  mov ax, %2
  1254 0000AC2E 66B90300            <2>  mov cx, %3
  1254 0000AC32 660FABC8            <2>  o16 %1 ax, cx
  1254 0000AC36 9C                  <2>  pushf
  1254 0000AC37 6658                <2>  pop ax
  1254 0000AC39 6625D508            <2>  and ax, PS_ARITH
  1254 0000AC3D 6683F800            <2>  cmp ax, %5
  1254 0000AC41 0F8548290000        <2>  jne error
  1254                              <1> 
  1254                              <1>  testBittestDFlags bt, %1, %2, %3, %4
  1254                              <2> 
  1254 0000AC47 66B80000            <2>  mov ax, %4
  1254 0000AC4B 6650                <2>  push ax
  1254 0000AC4D 9D                  <2>  popf
  1254 0000AC4E B801000000          <2>  mov eax, %2
  1254 0000AC53 0FBAE003            <2>  o32 %1 eax, %3
  1254 0000AC57 9C                  <2>  pushf
  1254 0000AC58 6658                <2>  pop ax
  1254 0000AC5A 6625D508            <2>  and ax, PS_ARITH
  1254 0000AC5E 6683F800            <2>  cmp ax, %5
  1254 0000AC62 0F8527290000        <2>  jne error
  1254                              <2> 
  1254                              <2> 
  1254 0000AC68 66B80000            <2>  mov ax, %4
  1254 0000AC6C 6650                <2>  push ax
  1254 0000AC6E 9D                  <2>  popf
  1254 0000AC6F B801000000          <2>  mov eax, %2
  1254 0000AC74 B903000000          <2>  mov ecx, %3
  1254 0000AC79 0FA3C8              <2>  o32 %1 eax, ecx
  1254 0000AC7C 9C                  <2>  pushf
  1254 0000AC7D 6658                <2>  pop ax
  1254 0000AC7F 6625D508            <2>  and ax, PS_ARITH
  1254 0000AC83 6683F800            <2>  cmp ax, %5
  1254 0000AC87 0F8502290000        <2>  jne error
  1254                              <1>  testBittestDFlags btc, %1, %2, %3, %4
  1254                              <2> 
  1254 0000AC8D 66B80000            <2>  mov ax, %4
  1254 0000AC91 6650                <2>  push ax
  1254 0000AC93 9D                  <2>  popf
  1254 0000AC94 B801000000          <2>  mov eax, %2
  1254 0000AC99 0FBAF803            <2>  o32 %1 eax, %3
  1254 0000AC9D 9C                  <2>  pushf
  1254 0000AC9E 6658                <2>  pop ax
  1254 0000ACA0 6625D508            <2>  and ax, PS_ARITH
  1254 0000ACA4 6683F800            <2>  cmp ax, %5
  1254 0000ACA8 0F85E1280000        <2>  jne error
  1254                              <2> 
  1254                              <2> 
  1254 0000ACAE 66B80000            <2>  mov ax, %4
  1254 0000ACB2 6650                <2>  push ax
  1254 0000ACB4 9D                  <2>  popf
  1254 0000ACB5 B801000000          <2>  mov eax, %2
  1254 0000ACBA B903000000          <2>  mov ecx, %3
  1254 0000ACBF 0FBBC8              <2>  o32 %1 eax, ecx
  1254 0000ACC2 9C                  <2>  pushf
  1254 0000ACC3 6658                <2>  pop ax
  1254 0000ACC5 6625D508            <2>  and ax, PS_ARITH
  1254 0000ACC9 6683F800            <2>  cmp ax, %5
  1254 0000ACCD 0F85BC280000        <2>  jne error
  1254                              <1>  testBittestDFlags btr, %1, %2, %3, %4
  1254                              <2> 
  1254 0000ACD3 66B80000            <2>  mov ax, %4
  1254 0000ACD7 6650                <2>  push ax
  1254 0000ACD9 9D                  <2>  popf
  1254 0000ACDA B801000000          <2>  mov eax, %2
  1254 0000ACDF 0FBAF003            <2>  o32 %1 eax, %3
  1254 0000ACE3 9C                  <2>  pushf
  1254 0000ACE4 6658                <2>  pop ax
  1254 0000ACE6 6625D508            <2>  and ax, PS_ARITH
  1254 0000ACEA 6683F800            <2>  cmp ax, %5
  1254 0000ACEE 0F859B280000        <2>  jne error
  1254                              <2> 
  1254                              <2> 
  1254 0000ACF4 66B80000            <2>  mov ax, %4
  1254 0000ACF8 6650                <2>  push ax
  1254 0000ACFA 9D                  <2>  popf
  1254 0000ACFB B801000000          <2>  mov eax, %2
  1254 0000AD00 B903000000          <2>  mov ecx, %3
  1254 0000AD05 0FB3C8              <2>  o32 %1 eax, ecx
  1254 0000AD08 9C                  <2>  pushf
  1254 0000AD09 6658                <2>  pop ax
  1254 0000AD0B 6625D508            <2>  and ax, PS_ARITH
  1254 0000AD0F 6683F800            <2>  cmp ax, %5
  1254 0000AD13 0F8576280000        <2>  jne error
  1254                              <1>  testBittestDFlags bts, %1, %2, %3, %4
  1254                              <2> 
  1254 0000AD19 66B80000            <2>  mov ax, %4
  1254 0000AD1D 6650                <2>  push ax
  1254 0000AD1F 9D                  <2>  popf
  1254 0000AD20 B801000000          <2>  mov eax, %2
  1254 0000AD25 0FBAE803            <2>  o32 %1 eax, %3
  1254 0000AD29 9C                  <2>  pushf
  1254 0000AD2A 6658                <2>  pop ax
  1254 0000AD2C 6625D508            <2>  and ax, PS_ARITH
  1254 0000AD30 6683F800            <2>  cmp ax, %5
  1254 0000AD34 0F8555280000        <2>  jne error
  1254                              <2> 
  1254                              <2> 
  1254 0000AD3A 66B80000            <2>  mov ax, %4
  1254 0000AD3E 6650                <2>  push ax
  1254 0000AD40 9D                  <2>  popf
  1254 0000AD41 B801000000          <2>  mov eax, %2
  1254 0000AD46 B903000000          <2>  mov ecx, %3
  1254 0000AD4B 0FABC8              <2>  o32 %1 eax, ecx
  1254 0000AD4E 9C                  <2>  pushf
  1254 0000AD4F 6658                <2>  pop ax
  1254 0000AD51 6625D508            <2>  and ax, PS_ARITH
  1254 0000AD55 6683F800            <2>  cmp ax, %5
  1254 0000AD59 0F8530280000        <2>  jne error
  1255                                  	testBittestFlags   0x01, 3, PS_CF, 0
  1255                              <1>  testBittestWFlags bt, %1, %2, %3, %4
  1255                              <2> 
  1255 0000AD5F 66B80100            <2>  mov ax, %4
  1255 0000AD63 6650                <2>  push ax
  1255 0000AD65 9D                  <2>  popf
  1255 0000AD66 66B80100            <2>  mov ax, %2
  1255 0000AD6A 660FBAE003          <2>  o16 %1 ax, %3
  1255 0000AD6F 9C                  <2>  pushf
  1255 0000AD70 6658                <2>  pop ax
  1255 0000AD72 6625D508            <2>  and ax, PS_ARITH
  1255 0000AD76 6683F800            <2>  cmp ax, %5
  1255 0000AD7A 0F850F280000        <2>  jne error
  1255                              <2> 
  1255                              <2> 
  1255 0000AD80 66B80100            <2>  mov ax, %4
  1255 0000AD84 6650                <2>  push ax
  1255 0000AD86 9D                  <2>  popf
  1255 0000AD87 66B80100            <2>  mov ax, %2
  1255 0000AD8B 66B90300            <2>  mov cx, %3
  1255 0000AD8F 660FA3C8            <2>  o16 %1 ax, cx
  1255 0000AD93 9C                  <2>  pushf
  1255 0000AD94 6658                <2>  pop ax
  1255 0000AD96 6625D508            <2>  and ax, PS_ARITH
  1255 0000AD9A 6683F800            <2>  cmp ax, %5
  1255 0000AD9E 0F85EB270000        <2>  jne error
  1255                              <1>  testBittestWFlags btc, %1, %2, %3, %4
  1255                              <2> 
  1255 0000ADA4 66B80100            <2>  mov ax, %4
  1255 0000ADA8 6650                <2>  push ax
  1255 0000ADAA 9D                  <2>  popf
  1255 0000ADAB 66B80100            <2>  mov ax, %2
  1255 0000ADAF 660FBAF803          <2>  o16 %1 ax, %3
  1255 0000ADB4 9C                  <2>  pushf
  1255 0000ADB5 6658                <2>  pop ax
  1255 0000ADB7 6625D508            <2>  and ax, PS_ARITH
  1255 0000ADBB 6683F800            <2>  cmp ax, %5
  1255 0000ADBF 0F85CA270000        <2>  jne error
  1255                              <2> 
  1255                              <2> 
  1255 0000ADC5 66B80100            <2>  mov ax, %4
  1255 0000ADC9 6650                <2>  push ax
  1255 0000ADCB 9D                  <2>  popf
  1255 0000ADCC 66B80100            <2>  mov ax, %2
  1255 0000ADD0 66B90300            <2>  mov cx, %3
  1255 0000ADD4 660FBBC8            <2>  o16 %1 ax, cx
  1255 0000ADD8 9C                  <2>  pushf
  1255 0000ADD9 6658                <2>  pop ax
  1255 0000ADDB 6625D508            <2>  and ax, PS_ARITH
  1255 0000ADDF 6683F800            <2>  cmp ax, %5
  1255 0000ADE3 0F85A6270000        <2>  jne error
  1255                              <1>  testBittestWFlags btr, %1, %2, %3, %4
  1255                              <2> 
  1255 0000ADE9 66B80100            <2>  mov ax, %4
  1255 0000ADED 6650                <2>  push ax
  1255 0000ADEF 9D                  <2>  popf
  1255 0000ADF0 66B80100            <2>  mov ax, %2
  1255 0000ADF4 660FBAF003          <2>  o16 %1 ax, %3
  1255 0000ADF9 9C                  <2>  pushf
  1255 0000ADFA 6658                <2>  pop ax
  1255 0000ADFC 6625D508            <2>  and ax, PS_ARITH
  1255 0000AE00 6683F800            <2>  cmp ax, %5
  1255 0000AE04 0F8585270000        <2>  jne error
  1255                              <2> 
  1255                              <2> 
  1255 0000AE0A 66B80100            <2>  mov ax, %4
  1255 0000AE0E 6650                <2>  push ax
  1255 0000AE10 9D                  <2>  popf
  1255 0000AE11 66B80100            <2>  mov ax, %2
  1255 0000AE15 66B90300            <2>  mov cx, %3
  1255 0000AE19 660FB3C8            <2>  o16 %1 ax, cx
  1255 0000AE1D 9C                  <2>  pushf
  1255 0000AE1E 6658                <2>  pop ax
  1255 0000AE20 6625D508            <2>  and ax, PS_ARITH
  1255 0000AE24 6683F800            <2>  cmp ax, %5
  1255 0000AE28 0F8561270000        <2>  jne error
  1255                              <1>  testBittestWFlags bts, %1, %2, %3, %4
  1255                              <2> 
  1255 0000AE2E 66B80100            <2>  mov ax, %4
  1255 0000AE32 6650                <2>  push ax
  1255 0000AE34 9D                  <2>  popf
  1255 0000AE35 66B80100            <2>  mov ax, %2
  1255 0000AE39 660FBAE803          <2>  o16 %1 ax, %3
  1255 0000AE3E 9C                  <2>  pushf
  1255 0000AE3F 6658                <2>  pop ax
  1255 0000AE41 6625D508            <2>  and ax, PS_ARITH
  1255 0000AE45 6683F800            <2>  cmp ax, %5
  1255 0000AE49 0F8540270000        <2>  jne error
  1255                              <2> 
  1255                              <2> 
  1255 0000AE4F 66B80100            <2>  mov ax, %4
  1255 0000AE53 6650                <2>  push ax
  1255 0000AE55 9D                  <2>  popf
  1255 0000AE56 66B80100            <2>  mov ax, %2
  1255 0000AE5A 66B90300            <2>  mov cx, %3
  1255 0000AE5E 660FABC8            <2>  o16 %1 ax, cx
  1255 0000AE62 9C                  <2>  pushf
  1255 0000AE63 6658                <2>  pop ax
  1255 0000AE65 6625D508            <2>  and ax, PS_ARITH
  1255 0000AE69 6683F800            <2>  cmp ax, %5
  1255 0000AE6D 0F851C270000        <2>  jne error
  1255                              <1> 
  1255                              <1>  testBittestDFlags bt, %1, %2, %3, %4
  1255                              <2> 
  1255 0000AE73 66B80100            <2>  mov ax, %4
  1255 0000AE77 6650                <2>  push ax
  1255 0000AE79 9D                  <2>  popf
  1255 0000AE7A B801000000          <2>  mov eax, %2
  1255 0000AE7F 0FBAE003            <2>  o32 %1 eax, %3
  1255 0000AE83 9C                  <2>  pushf
  1255 0000AE84 6658                <2>  pop ax
  1255 0000AE86 6625D508            <2>  and ax, PS_ARITH
  1255 0000AE8A 6683F800            <2>  cmp ax, %5
  1255 0000AE8E 0F85FB260000        <2>  jne error
  1255                              <2> 
  1255                              <2> 
  1255 0000AE94 66B80100            <2>  mov ax, %4
  1255 0000AE98 6650                <2>  push ax
  1255 0000AE9A 9D                  <2>  popf
  1255 0000AE9B B801000000          <2>  mov eax, %2
  1255 0000AEA0 B903000000          <2>  mov ecx, %3
  1255 0000AEA5 0FA3C8              <2>  o32 %1 eax, ecx
  1255 0000AEA8 9C                  <2>  pushf
  1255 0000AEA9 6658                <2>  pop ax
  1255 0000AEAB 6625D508            <2>  and ax, PS_ARITH
  1255 0000AEAF 6683F800            <2>  cmp ax, %5
  1255 0000AEB3 0F85D6260000        <2>  jne error
  1255                              <1>  testBittestDFlags btc, %1, %2, %3, %4
  1255                              <2> 
  1255 0000AEB9 66B80100            <2>  mov ax, %4
  1255 0000AEBD 6650                <2>  push ax
  1255 0000AEBF 9D                  <2>  popf
  1255 0000AEC0 B801000000          <2>  mov eax, %2
  1255 0000AEC5 0FBAF803            <2>  o32 %1 eax, %3
  1255 0000AEC9 9C                  <2>  pushf
  1255 0000AECA 6658                <2>  pop ax
  1255 0000AECC 6625D508            <2>  and ax, PS_ARITH
  1255 0000AED0 6683F800            <2>  cmp ax, %5
  1255 0000AED4 0F85B5260000        <2>  jne error
  1255                              <2> 
  1255                              <2> 
  1255 0000AEDA 66B80100            <2>  mov ax, %4
  1255 0000AEDE 6650                <2>  push ax
  1255 0000AEE0 9D                  <2>  popf
  1255 0000AEE1 B801000000          <2>  mov eax, %2
  1255 0000AEE6 B903000000          <2>  mov ecx, %3
  1255 0000AEEB 0FBBC8              <2>  o32 %1 eax, ecx
  1255 0000AEEE 9C                  <2>  pushf
  1255 0000AEEF 6658                <2>  pop ax
  1255 0000AEF1 6625D508            <2>  and ax, PS_ARITH
  1255 0000AEF5 6683F800            <2>  cmp ax, %5
  1255 0000AEF9 0F8590260000        <2>  jne error
  1255                              <1>  testBittestDFlags btr, %1, %2, %3, %4
  1255                              <2> 
  1255 0000AEFF 66B80100            <2>  mov ax, %4
  1255 0000AF03 6650                <2>  push ax
  1255 0000AF05 9D                  <2>  popf
  1255 0000AF06 B801000000          <2>  mov eax, %2
  1255 0000AF0B 0FBAF003            <2>  o32 %1 eax, %3
  1255 0000AF0F 9C                  <2>  pushf
  1255 0000AF10 6658                <2>  pop ax
  1255 0000AF12 6625D508            <2>  and ax, PS_ARITH
  1255 0000AF16 6683F800            <2>  cmp ax, %5
  1255 0000AF1A 0F856F260000        <2>  jne error
  1255                              <2> 
  1255                              <2> 
  1255 0000AF20 66B80100            <2>  mov ax, %4
  1255 0000AF24 6650                <2>  push ax
  1255 0000AF26 9D                  <2>  popf
  1255 0000AF27 B801000000          <2>  mov eax, %2
  1255 0000AF2C B903000000          <2>  mov ecx, %3
  1255 0000AF31 0FB3C8              <2>  o32 %1 eax, ecx
  1255 0000AF34 9C                  <2>  pushf
  1255 0000AF35 6658                <2>  pop ax
  1255 0000AF37 6625D508            <2>  and ax, PS_ARITH
  1255 0000AF3B 6683F800            <2>  cmp ax, %5
  1255 0000AF3F 0F854A260000        <2>  jne error
  1255                              <1>  testBittestDFlags bts, %1, %2, %3, %4
  1255                              <2> 
  1255 0000AF45 66B80100            <2>  mov ax, %4
  1255 0000AF49 6650                <2>  push ax
  1255 0000AF4B 9D                  <2>  popf
  1255 0000AF4C B801000000          <2>  mov eax, %2
  1255 0000AF51 0FBAE803            <2>  o32 %1 eax, %3
  1255 0000AF55 9C                  <2>  pushf
  1255 0000AF56 6658                <2>  pop ax
  1255 0000AF58 6625D508            <2>  and ax, PS_ARITH
  1255 0000AF5C 6683F800            <2>  cmp ax, %5
  1255 0000AF60 0F8529260000        <2>  jne error
  1255                              <2> 
  1255                              <2> 
  1255 0000AF66 66B80100            <2>  mov ax, %4
  1255 0000AF6A 6650                <2>  push ax
  1255 0000AF6C 9D                  <2>  popf
  1255 0000AF6D B801000000          <2>  mov eax, %2
  1255 0000AF72 B903000000          <2>  mov ecx, %3
  1255 0000AF77 0FABC8              <2>  o32 %1 eax, ecx
  1255 0000AF7A 9C                  <2>  pushf
  1255 0000AF7B 6658                <2>  pop ax
  1255 0000AF7D 6625D508            <2>  and ax, PS_ARITH
  1255 0000AF81 6683F800            <2>  cmp ax, %5
  1255 0000AF85 0F8504260000        <2>  jne error
  1256                                  
  1257                                  rotate386FlagsTest:
  1258                                  	; RCR
  1259                                  	; CF and OF are set with byte and count=9 or word and count=17
  1260                                  	testShiftBFlags   rcr, 0,    9, 0,           0
  1260 0000AF8B 66B80000            <1>  mov ax, %4
  1260 0000AF8F 6650                <1>  push ax
  1260 0000AF91 9D                  <1>  popf
  1260 0000AF92 B4FF                <1>  mov ah, 0xff
  1260 0000AF94 B000                <1>  mov al, %2
  1260 0000AF96 B109                <1>  mov cl, %3
  1260 0000AF98 D2D8                <1>  %1 al, cl
  1260 0000AF9A 9C                  <1>  pushf
  1260 0000AF9B 6658                <1>  pop ax
  1260 0000AF9D 6625D508            <1>  and ax, PS_ARITH
  1260 0000AFA1 6683F800            <1>  cmp ax, %5
  1260 0000AFA5 0F85E4250000        <1>  jne error
  1261                                  	testShiftBFlags   rcr, 0,    9, PS_CF|PS_OF, PS_CF
  1261 0000AFAB 66B80108            <1>  mov ax, %4
  1261 0000AFAF 6650                <1>  push ax
  1261 0000AFB1 9D                  <1>  popf
  1261 0000AFB2 B4FF                <1>  mov ah, 0xff
  1261 0000AFB4 B000                <1>  mov al, %2
  1261 0000AFB6 B109                <1>  mov cl, %3
  1261 0000AFB8 D2D8                <1>  %1 al, cl
  1261 0000AFBA 9C                  <1>  pushf
  1261 0000AFBB 6658                <1>  pop ax
  1261 0000AFBD 6625D508            <1>  and ax, PS_ARITH
  1261 0000AFC1 6683F801            <1>  cmp ax, %5
  1261 0000AFC5 0F85C4250000        <1>  jne error
  1262                                  	testShiftBFlags   rcr, 0x40, 9, 0,           PS_OF
  1262 0000AFCB 66B80000            <1>  mov ax, %4
  1262 0000AFCF 6650                <1>  push ax
  1262 0000AFD1 9D                  <1>  popf
  1262 0000AFD2 B4FF                <1>  mov ah, 0xff
  1262 0000AFD4 B040                <1>  mov al, %2
  1262 0000AFD6 B109                <1>  mov cl, %3
  1262 0000AFD8 D2D8                <1>  %1 al, cl
  1262 0000AFDA 9C                  <1>  pushf
  1262 0000AFDB 6658                <1>  pop ax
  1262 0000AFDD 6625D508            <1>  and ax, PS_ARITH
  1262 0000AFE1 663D0008            <1>  cmp ax, %5
  1262 0000AFE5 0F85A4250000        <1>  jne error
  1263                                  	testShiftBFlags   rcr, 0x40, 9, PS_CF|PS_OF, PS_CF|PS_OF
  1263 0000AFEB 66B80108            <1>  mov ax, %4
  1263 0000AFEF 6650                <1>  push ax
  1263 0000AFF1 9D                  <1>  popf
  1263 0000AFF2 B4FF                <1>  mov ah, 0xff
  1263 0000AFF4 B040                <1>  mov al, %2
  1263 0000AFF6 B109                <1>  mov cl, %3
  1263 0000AFF8 D2D8                <1>  %1 al, cl
  1263 0000AFFA 9C                  <1>  pushf
  1263 0000AFFB 6658                <1>  pop ax
  1263 0000AFFD 6625D508            <1>  and ax, PS_ARITH
  1263 0000B001 663D0108            <1>  cmp ax, %5
  1263 0000B005 0F8584250000        <1>  jne error
  1264                                  	testShiftWFlags   rcr, 0,      17, 0,           0
  1264 0000B00B 66B80000            <1>  mov ax, %4
  1264 0000B00F 6650                <1>  push ax
  1264 0000B011 9D                  <1>  popf
  1264 0000B012 66B80000            <1>  mov ax, %2
  1264 0000B016 B111                <1>  mov cl, %3
  1264 0000B018 66D3D8              <1>  %1 ax, cl
  1264 0000B01B 9C                  <1>  pushf
  1264 0000B01C 6658                <1>  pop ax
  1264 0000B01E 6625D508            <1>  and ax, PS_ARITH
  1264 0000B022 6683F800            <1>  cmp ax, %5
  1264 0000B026 0F8563250000        <1>  jne error
  1265                                  	testShiftWFlags   rcr, 0,      17, PS_CF|PS_OF, PS_CF
  1265 0000B02C 66B80108            <1>  mov ax, %4
  1265 0000B030 6650                <1>  push ax
  1265 0000B032 9D                  <1>  popf
  1265 0000B033 66B80000            <1>  mov ax, %2
  1265 0000B037 B111                <1>  mov cl, %3
  1265 0000B039 66D3D8              <1>  %1 ax, cl
  1265 0000B03C 9C                  <1>  pushf
  1265 0000B03D 6658                <1>  pop ax
  1265 0000B03F 6625D508            <1>  and ax, PS_ARITH
  1265 0000B043 6683F801            <1>  cmp ax, %5
  1265 0000B047 0F8542250000        <1>  jne error
  1266                                  	testShiftWFlags   rcr, 0x4000, 17, 0,           PS_OF
  1266 0000B04D 66B80000            <1>  mov ax, %4
  1266 0000B051 6650                <1>  push ax
  1266 0000B053 9D                  <1>  popf
  1266 0000B054 66B80040            <1>  mov ax, %2
  1266 0000B058 B111                <1>  mov cl, %3
  1266 0000B05A 66D3D8              <1>  %1 ax, cl
  1266 0000B05D 9C                  <1>  pushf
  1266 0000B05E 6658                <1>  pop ax
  1266 0000B060 6625D508            <1>  and ax, PS_ARITH
  1266 0000B064 663D0008            <1>  cmp ax, %5
  1266 0000B068 0F8521250000        <1>  jne error
  1267                                  	testShiftWFlags   rcr, 0x4000, 17, PS_CF|PS_OF, PS_CF|PS_OF
  1267 0000B06E 66B80108            <1>  mov ax, %4
  1267 0000B072 6650                <1>  push ax
  1267 0000B074 9D                  <1>  popf
  1267 0000B075 66B80040            <1>  mov ax, %2
  1267 0000B079 B111                <1>  mov cl, %3
  1267 0000B07B 66D3D8              <1>  %1 ax, cl
  1267 0000B07E 9C                  <1>  pushf
  1267 0000B07F 6658                <1>  pop ax
  1267 0000B081 6625D508            <1>  and ax, PS_ARITH
  1267 0000B085 663D0108            <1>  cmp ax, %5
  1267 0000B089 0F8500250000        <1>  jne error
  1268                                  	; RCL
  1269                                  	; CF and OF are set with byte and count=9 or word and count=17
  1270                                  	testShiftBFlags   rcl, 0,    9, 0,           0
  1270 0000B08F 66B80000            <1>  mov ax, %4
  1270 0000B093 6650                <1>  push ax
  1270 0000B095 9D                  <1>  popf
  1270 0000B096 B4FF                <1>  mov ah, 0xff
  1270 0000B098 B000                <1>  mov al, %2
  1270 0000B09A B109                <1>  mov cl, %3
  1270 0000B09C D2D0                <1>  %1 al, cl
  1270 0000B09E 9C                  <1>  pushf
  1270 0000B09F 6658                <1>  pop ax
  1270 0000B0A1 6625D508            <1>  and ax, PS_ARITH
  1270 0000B0A5 6683F800            <1>  cmp ax, %5
  1270 0000B0A9 0F85E0240000        <1>  jne error
  1271                                  	testShiftBFlags   rcl, 0,    9, PS_CF|PS_OF, PS_CF|PS_OF
  1271 0000B0AF 66B80108            <1>  mov ax, %4
  1271 0000B0B3 6650                <1>  push ax
  1271 0000B0B5 9D                  <1>  popf
  1271 0000B0B6 B4FF                <1>  mov ah, 0xff
  1271 0000B0B8 B000                <1>  mov al, %2
  1271 0000B0BA B109                <1>  mov cl, %3
  1271 0000B0BC D2D0                <1>  %1 al, cl
  1271 0000B0BE 9C                  <1>  pushf
  1271 0000B0BF 6658                <1>  pop ax
  1271 0000B0C1 6625D508            <1>  and ax, PS_ARITH
  1271 0000B0C5 663D0108            <1>  cmp ax, %5
  1271 0000B0C9 0F85C0240000        <1>  jne error
  1272                                  	testShiftBFlags   rcl, 0x80, 9, 0,           PS_OF
  1272 0000B0CF 66B80000            <1>  mov ax, %4
  1272 0000B0D3 6650                <1>  push ax
  1272 0000B0D5 9D                  <1>  popf
  1272 0000B0D6 B4FF                <1>  mov ah, 0xff
  1272 0000B0D8 B080                <1>  mov al, %2
  1272 0000B0DA B109                <1>  mov cl, %3
  1272 0000B0DC D2D0                <1>  %1 al, cl
  1272 0000B0DE 9C                  <1>  pushf
  1272 0000B0DF 6658                <1>  pop ax
  1272 0000B0E1 6625D508            <1>  and ax, PS_ARITH
  1272 0000B0E5 663D0008            <1>  cmp ax, %5
  1272 0000B0E9 0F85A0240000        <1>  jne error
  1273                                  	testShiftBFlags   rcl, 0x80, 9, PS_CF|PS_OF, PS_CF
  1273 0000B0EF 66B80108            <1>  mov ax, %4
  1273 0000B0F3 6650                <1>  push ax
  1273 0000B0F5 9D                  <1>  popf
  1273 0000B0F6 B4FF                <1>  mov ah, 0xff
  1273 0000B0F8 B080                <1>  mov al, %2
  1273 0000B0FA B109                <1>  mov cl, %3
  1273 0000B0FC D2D0                <1>  %1 al, cl
  1273 0000B0FE 9C                  <1>  pushf
  1273 0000B0FF 6658                <1>  pop ax
  1273 0000B101 6625D508            <1>  and ax, PS_ARITH
  1273 0000B105 6683F801            <1>  cmp ax, %5
  1273 0000B109 0F8580240000        <1>  jne error
  1274                                  	testShiftWFlags   rcl, 0,      17, 0,           0
  1274 0000B10F 66B80000            <1>  mov ax, %4
  1274 0000B113 6650                <1>  push ax
  1274 0000B115 9D                  <1>  popf
  1274 0000B116 66B80000            <1>  mov ax, %2
  1274 0000B11A B111                <1>  mov cl, %3
  1274 0000B11C 66D3D0              <1>  %1 ax, cl
  1274 0000B11F 9C                  <1>  pushf
  1274 0000B120 6658                <1>  pop ax
  1274 0000B122 6625D508            <1>  and ax, PS_ARITH
  1274 0000B126 6683F800            <1>  cmp ax, %5
  1274 0000B12A 0F855F240000        <1>  jne error
  1275                                  	testShiftWFlags   rcl, 0,      17, PS_CF|PS_OF, PS_CF|PS_OF
  1275 0000B130 66B80108            <1>  mov ax, %4
  1275 0000B134 6650                <1>  push ax
  1275 0000B136 9D                  <1>  popf
  1275 0000B137 66B80000            <1>  mov ax, %2
  1275 0000B13B B111                <1>  mov cl, %3
  1275 0000B13D 66D3D0              <1>  %1 ax, cl
  1275 0000B140 9C                  <1>  pushf
  1275 0000B141 6658                <1>  pop ax
  1275 0000B143 6625D508            <1>  and ax, PS_ARITH
  1275 0000B147 663D0108            <1>  cmp ax, %5
  1275 0000B14B 0F853E240000        <1>  jne error
  1276                                  	testShiftWFlags   rcl, 0x8000, 17, 0,           PS_OF
  1276 0000B151 66B80000            <1>  mov ax, %4
  1276 0000B155 6650                <1>  push ax
  1276 0000B157 9D                  <1>  popf
  1276 0000B158 66B80080            <1>  mov ax, %2
  1276 0000B15C B111                <1>  mov cl, %3
  1276 0000B15E 66D3D0              <1>  %1 ax, cl
  1276 0000B161 9C                  <1>  pushf
  1276 0000B162 6658                <1>  pop ax
  1276 0000B164 6625D508            <1>  and ax, PS_ARITH
  1276 0000B168 663D0008            <1>  cmp ax, %5
  1276 0000B16C 0F851D240000        <1>  jne error
  1277                                  	testShiftWFlags   rcl, 0x8000, 17, PS_CF|PS_OF, PS_CF
  1277 0000B172 66B80108            <1>  mov ax, %4
  1277 0000B176 6650                <1>  push ax
  1277 0000B178 9D                  <1>  popf
  1277 0000B179 66B80080            <1>  mov ax, %2
  1277 0000B17D B111                <1>  mov cl, %3
  1277 0000B17F 66D3D0              <1>  %1 ax, cl
  1277 0000B182 9C                  <1>  pushf
  1277 0000B183 6658                <1>  pop ax
  1277 0000B185 6625D508            <1>  and ax, PS_ARITH
  1277 0000B189 6683F801            <1>  cmp ax, %5
  1277 0000B18D 0F85FC230000        <1>  jne error
  1278                                  
  1279 0000B193 EB00                    	jmp arithLogicTests
  1280                                  
  1281                                  
  1282                                  ;
  1283                                  ;   Now run a series of unverified tests for arithmetical and logical opcodes
  1284                                  ;   Manually verify by comparing the tests output with a reference file
  1285                                  ;
  1286                                  arithLogicTests:
  1287                                  
  1288                                  	POST EE
  1288 0000B195 B0EE                <1>  mov al, 0x%1
  1288 0000B197 66BA9001            <1>  mov dx, POST_PORT
  1288 0000B19B EE                  <1>  out dx, al
  1289                                  
  1290 0000B19C EB00                    	jmp bcdTests
  1291                                  
  1292                                  
  1293                                  bcdTests:
  1294                                  	testBCD   daa, 0x12340503, PS_AF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1294 0000B19E BE[CBB10000]        <1>  mov esi, %%name
  1294 0000B1A3 E872E6FFFF          <1>  call printStr
  1294 0000B1A8 B803053412          <1>  mov eax, %2
  1294 0000B1AD E8C8E6FFFF          <1>  call printEAX
  1294 0000B1B2 B810000000          <1>  mov eax, %3
  1294 0000B1B7 6A10                <1>  push %3
  1294 0000B1B9 9D                  <1>  popf
  1294 0000B1BA E819E7FFFF          <1>  call printPS2
  1294                              <1> 
  1294 0000B1BF B803053412          <1>  mov eax, %2
  1294 0000B1C4 6A10                <1>  push %3
  1294 0000B1C6 9D                  <1>  popf
  1294 0000B1C7 27                  <1>  %1
  1294 0000B1C8 9C                  <1>  pushfd
  1294                              <1> 
  1294 0000B1C9 EB05                <1>  jmp %%printres
  1294                              <1> 
  1294                              <1> %%name:
  1294 0000B1CB 6461612000          <1>  db quot %+ %1 %+ quot,' ',0
  1294          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1294                              <1> 
  1294                              <1> %%printres:
  1294 0000B1D0 E8A5E6FFFF          <1>  call printEAX
  1294 0000B1D5 B8D5000000          <1>  mov eax, %4
  1294 0000B1DA 9D                  <1>  popf
  1294 0000B1DB E8F8E6FFFF          <1>  call printPS2
  1294 0000B1E0 E81BE6FFFF          <1>  call printEOL
  1295                                  	testBCD   daa, 0x12340506, PS_AF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1295 0000B1E5 BE[12B20000]        <1>  mov esi, %%name
  1295 0000B1EA E82BE6FFFF          <1>  call printStr
  1295 0000B1EF B806053412          <1>  mov eax, %2
  1295 0000B1F4 E881E6FFFF          <1>  call printEAX
  1295 0000B1F9 B810000000          <1>  mov eax, %3
  1295 0000B1FE 6A10                <1>  push %3
  1295 0000B200 9D                  <1>  popf
  1295 0000B201 E8D2E6FFFF          <1>  call printPS2
  1295                              <1> 
  1295 0000B206 B806053412          <1>  mov eax, %2
  1295 0000B20B 6A10                <1>  push %3
  1295 0000B20D 9D                  <1>  popf
  1295 0000B20E 27                  <1>  %1
  1295 0000B20F 9C                  <1>  pushfd
  1295                              <1> 
  1295 0000B210 EB05                <1>  jmp %%printres
  1295                              <1> 
  1295                              <1> %%name:
  1295 0000B212 6461612000          <1>  db quot %+ %1 %+ quot,' ',0
  1295          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1295                              <1> 
  1295                              <1> %%printres:
  1295 0000B217 E85EE6FFFF          <1>  call printEAX
  1295 0000B21C B8D5000000          <1>  mov eax, %4
  1295 0000B221 9D                  <1>  popf
  1295 0000B222 E8B1E6FFFF          <1>  call printPS2
  1295 0000B227 E8D4E5FFFF          <1>  call printEOL
  1296                                  	testBCD   daa, 0x12340507, PS_AF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1296 0000B22C BE[59B20000]        <1>  mov esi, %%name
  1296 0000B231 E8E4E5FFFF          <1>  call printStr
  1296 0000B236 B807053412          <1>  mov eax, %2
  1296 0000B23B E83AE6FFFF          <1>  call printEAX
  1296 0000B240 B810000000          <1>  mov eax, %3
  1296 0000B245 6A10                <1>  push %3
  1296 0000B247 9D                  <1>  popf
  1296 0000B248 E88BE6FFFF          <1>  call printPS2
  1296                              <1> 
  1296 0000B24D B807053412          <1>  mov eax, %2
  1296 0000B252 6A10                <1>  push %3
  1296 0000B254 9D                  <1>  popf
  1296 0000B255 27                  <1>  %1
  1296 0000B256 9C                  <1>  pushfd
  1296                              <1> 
  1296 0000B257 EB05                <1>  jmp %%printres
  1296                              <1> 
  1296                              <1> %%name:
  1296 0000B259 6461612000          <1>  db quot %+ %1 %+ quot,' ',0
  1296          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1296                              <1> 
  1296                              <1> %%printres:
  1296 0000B25E E817E6FFFF          <1>  call printEAX
  1296 0000B263 B8D5000000          <1>  mov eax, %4
  1296 0000B268 9D                  <1>  popf
  1296 0000B269 E86AE6FFFF          <1>  call printPS2
  1296 0000B26E E88DE5FFFF          <1>  call printEOL
  1297                                  	testBCD   daa, 0x12340559, PS_AF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1297 0000B273 BE[A0B20000]        <1>  mov esi, %%name
  1297 0000B278 E89DE5FFFF          <1>  call printStr
  1297 0000B27D B859053412          <1>  mov eax, %2
  1297 0000B282 E8F3E5FFFF          <1>  call printEAX
  1297 0000B287 B810000000          <1>  mov eax, %3
  1297 0000B28C 6A10                <1>  push %3
  1297 0000B28E 9D                  <1>  popf
  1297 0000B28F E844E6FFFF          <1>  call printPS2
  1297                              <1> 
  1297 0000B294 B859053412          <1>  mov eax, %2
  1297 0000B299 6A10                <1>  push %3
  1297 0000B29B 9D                  <1>  popf
  1297 0000B29C 27                  <1>  %1
  1297 0000B29D 9C                  <1>  pushfd
  1297                              <1> 
  1297 0000B29E EB05                <1>  jmp %%printres
  1297                              <1> 
  1297                              <1> %%name:
  1297 0000B2A0 6461612000          <1>  db quot %+ %1 %+ quot,' ',0
  1297          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1297                              <1> 
  1297                              <1> %%printres:
  1297 0000B2A5 E8D0E5FFFF          <1>  call printEAX
  1297 0000B2AA B8D5000000          <1>  mov eax, %4
  1297 0000B2AF 9D                  <1>  popf
  1297 0000B2B0 E823E6FFFF          <1>  call printPS2
  1297 0000B2B5 E846E5FFFF          <1>  call printEOL
  1298                                  	testBCD   daa, 0x12340560, PS_AF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1298 0000B2BA BE[E7B20000]        <1>  mov esi, %%name
  1298 0000B2BF E856E5FFFF          <1>  call printStr
  1298 0000B2C4 B860053412          <1>  mov eax, %2
  1298 0000B2C9 E8ACE5FFFF          <1>  call printEAX
  1298 0000B2CE B810000000          <1>  mov eax, %3
  1298 0000B2D3 6A10                <1>  push %3
  1298 0000B2D5 9D                  <1>  popf
  1298 0000B2D6 E8FDE5FFFF          <1>  call printPS2
  1298                              <1> 
  1298 0000B2DB B860053412          <1>  mov eax, %2
  1298 0000B2E0 6A10                <1>  push %3
  1298 0000B2E2 9D                  <1>  popf
  1298 0000B2E3 27                  <1>  %1
  1298 0000B2E4 9C                  <1>  pushfd
  1298                              <1> 
  1298 0000B2E5 EB05                <1>  jmp %%printres
  1298                              <1> 
  1298                              <1> %%name:
  1298 0000B2E7 6461612000          <1>  db quot %+ %1 %+ quot,' ',0
  1298          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1298                              <1> 
  1298                              <1> %%printres:
  1298 0000B2EC E889E5FFFF          <1>  call printEAX
  1298 0000B2F1 B8D5000000          <1>  mov eax, %4
  1298 0000B2F6 9D                  <1>  popf
  1298 0000B2F7 E8DCE5FFFF          <1>  call printPS2
  1298 0000B2FC E8FFE4FFFF          <1>  call printEOL
  1299                                  	testBCD   daa, 0x1234059f, PS_AF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1299 0000B301 BE[2EB30000]        <1>  mov esi, %%name
  1299 0000B306 E80FE5FFFF          <1>  call printStr
  1299 0000B30B B89F053412          <1>  mov eax, %2
  1299 0000B310 E865E5FFFF          <1>  call printEAX
  1299 0000B315 B810000000          <1>  mov eax, %3
  1299 0000B31A 6A10                <1>  push %3
  1299 0000B31C 9D                  <1>  popf
  1299 0000B31D E8B6E5FFFF          <1>  call printPS2
  1299                              <1> 
  1299 0000B322 B89F053412          <1>  mov eax, %2
  1299 0000B327 6A10                <1>  push %3
  1299 0000B329 9D                  <1>  popf
  1299 0000B32A 27                  <1>  %1
  1299 0000B32B 9C                  <1>  pushfd
  1299                              <1> 
  1299 0000B32C EB05                <1>  jmp %%printres
  1299                              <1> 
  1299                              <1> %%name:
  1299 0000B32E 6461612000          <1>  db quot %+ %1 %+ quot,' ',0
  1299          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1299                              <1> 
  1299                              <1> %%printres:
  1299 0000B333 E842E5FFFF          <1>  call printEAX
  1299 0000B338 B8D5000000          <1>  mov eax, %4
  1299 0000B33D 9D                  <1>  popf
  1299 0000B33E E895E5FFFF          <1>  call printPS2
  1299 0000B343 E8B8E4FFFF          <1>  call printEOL
  1300                                  	testBCD   daa, 0x123405a0, PS_AF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1300 0000B348 BE[75B30000]        <1>  mov esi, %%name
  1300 0000B34D E8C8E4FFFF          <1>  call printStr
  1300 0000B352 B8A0053412          <1>  mov eax, %2
  1300 0000B357 E81EE5FFFF          <1>  call printEAX
  1300 0000B35C B810000000          <1>  mov eax, %3
  1300 0000B361 6A10                <1>  push %3
  1300 0000B363 9D                  <1>  popf
  1300 0000B364 E86FE5FFFF          <1>  call printPS2
  1300                              <1> 
  1300 0000B369 B8A0053412          <1>  mov eax, %2
  1300 0000B36E 6A10                <1>  push %3
  1300 0000B370 9D                  <1>  popf
  1300 0000B371 27                  <1>  %1
  1300 0000B372 9C                  <1>  pushfd
  1300                              <1> 
  1300 0000B373 EB05                <1>  jmp %%printres
  1300                              <1> 
  1300                              <1> %%name:
  1300 0000B375 6461612000          <1>  db quot %+ %1 %+ quot,' ',0
  1300          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1300                              <1> 
  1300                              <1> %%printres:
  1300 0000B37A E8FBE4FFFF          <1>  call printEAX
  1300 0000B37F B8D5000000          <1>  mov eax, %4
  1300 0000B384 9D                  <1>  popf
  1300 0000B385 E84EE5FFFF          <1>  call printPS2
  1300 0000B38A E871E4FFFF          <1>  call printEOL
  1301                                  	testBCD   daa, 0x12340503, 0,             PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1301 0000B38F BE[BCB30000]        <1>  mov esi, %%name
  1301 0000B394 E881E4FFFF          <1>  call printStr
  1301 0000B399 B803053412          <1>  mov eax, %2
  1301 0000B39E E8D7E4FFFF          <1>  call printEAX
  1301 0000B3A3 B800000000          <1>  mov eax, %3
  1301 0000B3A8 6A00                <1>  push %3
  1301 0000B3AA 9D                  <1>  popf
  1301 0000B3AB E828E5FFFF          <1>  call printPS2
  1301                              <1> 
  1301 0000B3B0 B803053412          <1>  mov eax, %2
  1301 0000B3B5 6A00                <1>  push %3
  1301 0000B3B7 9D                  <1>  popf
  1301 0000B3B8 27                  <1>  %1
  1301 0000B3B9 9C                  <1>  pushfd
  1301                              <1> 
  1301 0000B3BA EB05                <1>  jmp %%printres
  1301                              <1> 
  1301                              <1> %%name:
  1301 0000B3BC 6461612000          <1>  db quot %+ %1 %+ quot,' ',0
  1301          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1301                              <1> 
  1301                              <1> %%printres:
  1301 0000B3C1 E8B4E4FFFF          <1>  call printEAX
  1301 0000B3C6 B8D5000000          <1>  mov eax, %4
  1301 0000B3CB 9D                  <1>  popf
  1301 0000B3CC E807E5FFFF          <1>  call printPS2
  1301 0000B3D1 E82AE4FFFF          <1>  call printEOL
  1302                                  	testBCD   daa, 0x12340506, 0,             PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1302 0000B3D6 BE[03B40000]        <1>  mov esi, %%name
  1302 0000B3DB E83AE4FFFF          <1>  call printStr
  1302 0000B3E0 B806053412          <1>  mov eax, %2
  1302 0000B3E5 E890E4FFFF          <1>  call printEAX
  1302 0000B3EA B800000000          <1>  mov eax, %3
  1302 0000B3EF 6A00                <1>  push %3
  1302 0000B3F1 9D                  <1>  popf
  1302 0000B3F2 E8E1E4FFFF          <1>  call printPS2
  1302                              <1> 
  1302 0000B3F7 B806053412          <1>  mov eax, %2
  1302 0000B3FC 6A00                <1>  push %3
  1302 0000B3FE 9D                  <1>  popf
  1302 0000B3FF 27                  <1>  %1
  1302 0000B400 9C                  <1>  pushfd
  1302                              <1> 
  1302 0000B401 EB05                <1>  jmp %%printres
  1302                              <1> 
  1302                              <1> %%name:
  1302 0000B403 6461612000          <1>  db quot %+ %1 %+ quot,' ',0
  1302          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1302                              <1> 
  1302                              <1> %%printres:
  1302 0000B408 E86DE4FFFF          <1>  call printEAX
  1302 0000B40D B8D5000000          <1>  mov eax, %4
  1302 0000B412 9D                  <1>  popf
  1302 0000B413 E8C0E4FFFF          <1>  call printPS2
  1302 0000B418 E8E3E3FFFF          <1>  call printEOL
  1303                                  	testBCD   daa, 0x12340503, PS_CF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1303 0000B41D BE[4AB40000]        <1>  mov esi, %%name
  1303 0000B422 E8F3E3FFFF          <1>  call printStr
  1303 0000B427 B803053412          <1>  mov eax, %2
  1303 0000B42C E849E4FFFF          <1>  call printEAX
  1303 0000B431 B801000000          <1>  mov eax, %3
  1303 0000B436 6A01                <1>  push %3
  1303 0000B438 9D                  <1>  popf
  1303 0000B439 E89AE4FFFF          <1>  call printPS2
  1303                              <1> 
  1303 0000B43E B803053412          <1>  mov eax, %2
  1303 0000B443 6A01                <1>  push %3
  1303 0000B445 9D                  <1>  popf
  1303 0000B446 27                  <1>  %1
  1303 0000B447 9C                  <1>  pushfd
  1303                              <1> 
  1303 0000B448 EB05                <1>  jmp %%printres
  1303                              <1> 
  1303                              <1> %%name:
  1303 0000B44A 6461612000          <1>  db quot %+ %1 %+ quot,' ',0
  1303          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1303                              <1> 
  1303                              <1> %%printres:
  1303 0000B44F E826E4FFFF          <1>  call printEAX
  1303 0000B454 B8D5000000          <1>  mov eax, %4
  1303 0000B459 9D                  <1>  popf
  1303 0000B45A E879E4FFFF          <1>  call printPS2
  1303 0000B45F E89CE3FFFF          <1>  call printEOL
  1304                                  	testBCD   daa, 0x12340506, PS_CF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1304 0000B464 BE[91B40000]        <1>  mov esi, %%name
  1304 0000B469 E8ACE3FFFF          <1>  call printStr
  1304 0000B46E B806053412          <1>  mov eax, %2
  1304 0000B473 E802E4FFFF          <1>  call printEAX
  1304 0000B478 B801000000          <1>  mov eax, %3
  1304 0000B47D 6A01                <1>  push %3
  1304 0000B47F 9D                  <1>  popf
  1304 0000B480 E853E4FFFF          <1>  call printPS2
  1304                              <1> 
  1304 0000B485 B806053412          <1>  mov eax, %2
  1304 0000B48A 6A01                <1>  push %3
  1304 0000B48C 9D                  <1>  popf
  1304 0000B48D 27                  <1>  %1
  1304 0000B48E 9C                  <1>  pushfd
  1304                              <1> 
  1304 0000B48F EB05                <1>  jmp %%printres
  1304                              <1> 
  1304                              <1> %%name:
  1304 0000B491 6461612000          <1>  db quot %+ %1 %+ quot,' ',0
  1304          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1304                              <1> 
  1304                              <1> %%printres:
  1304 0000B496 E8DFE3FFFF          <1>  call printEAX
  1304 0000B49B B8D5000000          <1>  mov eax, %4
  1304 0000B4A0 9D                  <1>  popf
  1304 0000B4A1 E832E4FFFF          <1>  call printPS2
  1304 0000B4A6 E855E3FFFF          <1>  call printEOL
  1305                                  	testBCD   daa, 0x12340503, PS_CF | PS_AF, PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1305 0000B4AB BE[D8B40000]        <1>  mov esi, %%name
  1305 0000B4B0 E865E3FFFF          <1>  call printStr
  1305 0000B4B5 B803053412          <1>  mov eax, %2
  1305 0000B4BA E8BBE3FFFF          <1>  call printEAX
  1305 0000B4BF B811000000          <1>  mov eax, %3
  1305 0000B4C4 6A11                <1>  push %3
  1305 0000B4C6 9D                  <1>  popf
  1305 0000B4C7 E80CE4FFFF          <1>  call printPS2
  1305                              <1> 
  1305 0000B4CC B803053412          <1>  mov eax, %2
  1305 0000B4D1 6A11                <1>  push %3
  1305 0000B4D3 9D                  <1>  popf
  1305 0000B4D4 27                  <1>  %1
  1305 0000B4D5 9C                  <1>  pushfd
  1305                              <1> 
  1305 0000B4D6 EB05                <1>  jmp %%printres
  1305                              <1> 
  1305                              <1> %%name:
  1305 0000B4D8 6461612000          <1>  db quot %+ %1 %+ quot,' ',0
  1305          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1305                              <1> 
  1305                              <1> %%printres:
  1305 0000B4DD E898E3FFFF          <1>  call printEAX
  1305 0000B4E2 B8D5000000          <1>  mov eax, %4
  1305 0000B4E7 9D                  <1>  popf
  1305 0000B4E8 E8EBE3FFFF          <1>  call printPS2
  1305 0000B4ED E80EE3FFFF          <1>  call printEOL
  1306                                  	testBCD   daa, 0x12340506, PS_CF | PS_AF, PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1306 0000B4F2 BE[1FB50000]        <1>  mov esi, %%name
  1306 0000B4F7 E81EE3FFFF          <1>  call printStr
  1306 0000B4FC B806053412          <1>  mov eax, %2
  1306 0000B501 E874E3FFFF          <1>  call printEAX
  1306 0000B506 B811000000          <1>  mov eax, %3
  1306 0000B50B 6A11                <1>  push %3
  1306 0000B50D 9D                  <1>  popf
  1306 0000B50E E8C5E3FFFF          <1>  call printPS2
  1306                              <1> 
  1306 0000B513 B806053412          <1>  mov eax, %2
  1306 0000B518 6A11                <1>  push %3
  1306 0000B51A 9D                  <1>  popf
  1306 0000B51B 27                  <1>  %1
  1306 0000B51C 9C                  <1>  pushfd
  1306                              <1> 
  1306 0000B51D EB05                <1>  jmp %%printres
  1306                              <1> 
  1306                              <1> %%name:
  1306 0000B51F 6461612000          <1>  db quot %+ %1 %+ quot,' ',0
  1306          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1306                              <1> 
  1306                              <1> %%printres:
  1306 0000B524 E851E3FFFF          <1>  call printEAX
  1306 0000B529 B8D5000000          <1>  mov eax, %4
  1306 0000B52E 9D                  <1>  popf
  1306 0000B52F E8A4E3FFFF          <1>  call printPS2
  1306 0000B534 E8C7E2FFFF          <1>  call printEOL
  1307                                  	testBCD   das, 0x12340503, PS_AF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1307 0000B539 BE[66B50000]        <1>  mov esi, %%name
  1307 0000B53E E8D7E2FFFF          <1>  call printStr
  1307 0000B543 B803053412          <1>  mov eax, %2
  1307 0000B548 E82DE3FFFF          <1>  call printEAX
  1307 0000B54D B810000000          <1>  mov eax, %3
  1307 0000B552 6A10                <1>  push %3
  1307 0000B554 9D                  <1>  popf
  1307 0000B555 E87EE3FFFF          <1>  call printPS2
  1307                              <1> 
  1307 0000B55A B803053412          <1>  mov eax, %2
  1307 0000B55F 6A10                <1>  push %3
  1307 0000B561 9D                  <1>  popf
  1307 0000B562 2F                  <1>  %1
  1307 0000B563 9C                  <1>  pushfd
  1307                              <1> 
  1307 0000B564 EB05                <1>  jmp %%printres
  1307                              <1> 
  1307                              <1> %%name:
  1307 0000B566 6461732000          <1>  db quot %+ %1 %+ quot,' ',0
  1307          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1307                              <1> 
  1307                              <1> %%printres:
  1307 0000B56B E80AE3FFFF          <1>  call printEAX
  1307 0000B570 B8D5000000          <1>  mov eax, %4
  1307 0000B575 9D                  <1>  popf
  1307 0000B576 E85DE3FFFF          <1>  call printPS2
  1307 0000B57B E880E2FFFF          <1>  call printEOL
  1308                                  	testBCD   das, 0x12340506, PS_AF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1308 0000B580 BE[ADB50000]        <1>  mov esi, %%name
  1308 0000B585 E890E2FFFF          <1>  call printStr
  1308 0000B58A B806053412          <1>  mov eax, %2
  1308 0000B58F E8E6E2FFFF          <1>  call printEAX
  1308 0000B594 B810000000          <1>  mov eax, %3
  1308 0000B599 6A10                <1>  push %3
  1308 0000B59B 9D                  <1>  popf
  1308 0000B59C E837E3FFFF          <1>  call printPS2
  1308                              <1> 
  1308 0000B5A1 B806053412          <1>  mov eax, %2
  1308 0000B5A6 6A10                <1>  push %3
  1308 0000B5A8 9D                  <1>  popf
  1308 0000B5A9 2F                  <1>  %1
  1308 0000B5AA 9C                  <1>  pushfd
  1308                              <1> 
  1308 0000B5AB EB05                <1>  jmp %%printres
  1308                              <1> 
  1308                              <1> %%name:
  1308 0000B5AD 6461732000          <1>  db quot %+ %1 %+ quot,' ',0
  1308          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1308                              <1> 
  1308                              <1> %%printres:
  1308 0000B5B2 E8C3E2FFFF          <1>  call printEAX
  1308 0000B5B7 B8D5000000          <1>  mov eax, %4
  1308 0000B5BC 9D                  <1>  popf
  1308 0000B5BD E816E3FFFF          <1>  call printPS2
  1308 0000B5C2 E839E2FFFF          <1>  call printEOL
  1309                                  	testBCD   das, 0x12340507, PS_AF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1309 0000B5C7 BE[F4B50000]        <1>  mov esi, %%name
  1309 0000B5CC E849E2FFFF          <1>  call printStr
  1309 0000B5D1 B807053412          <1>  mov eax, %2
  1309 0000B5D6 E89FE2FFFF          <1>  call printEAX
  1309 0000B5DB B810000000          <1>  mov eax, %3
  1309 0000B5E0 6A10                <1>  push %3
  1309 0000B5E2 9D                  <1>  popf
  1309 0000B5E3 E8F0E2FFFF          <1>  call printPS2
  1309                              <1> 
  1309 0000B5E8 B807053412          <1>  mov eax, %2
  1309 0000B5ED 6A10                <1>  push %3
  1309 0000B5EF 9D                  <1>  popf
  1309 0000B5F0 2F                  <1>  %1
  1309 0000B5F1 9C                  <1>  pushfd
  1309                              <1> 
  1309 0000B5F2 EB05                <1>  jmp %%printres
  1309                              <1> 
  1309                              <1> %%name:
  1309 0000B5F4 6461732000          <1>  db quot %+ %1 %+ quot,' ',0
  1309          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1309                              <1> 
  1309                              <1> %%printres:
  1309 0000B5F9 E87CE2FFFF          <1>  call printEAX
  1309 0000B5FE B8D5000000          <1>  mov eax, %4
  1309 0000B603 9D                  <1>  popf
  1309 0000B604 E8CFE2FFFF          <1>  call printPS2
  1309 0000B609 E8F2E1FFFF          <1>  call printEOL
  1310                                  	testBCD   das, 0x12340559, PS_AF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1310 0000B60E BE[3BB60000]        <1>  mov esi, %%name
  1310 0000B613 E802E2FFFF          <1>  call printStr
  1310 0000B618 B859053412          <1>  mov eax, %2
  1310 0000B61D E858E2FFFF          <1>  call printEAX
  1310 0000B622 B810000000          <1>  mov eax, %3
  1310 0000B627 6A10                <1>  push %3
  1310 0000B629 9D                  <1>  popf
  1310 0000B62A E8A9E2FFFF          <1>  call printPS2
  1310                              <1> 
  1310 0000B62F B859053412          <1>  mov eax, %2
  1310 0000B634 6A10                <1>  push %3
  1310 0000B636 9D                  <1>  popf
  1310 0000B637 2F                  <1>  %1
  1310 0000B638 9C                  <1>  pushfd
  1310                              <1> 
  1310 0000B639 EB05                <1>  jmp %%printres
  1310                              <1> 
  1310                              <1> %%name:
  1310 0000B63B 6461732000          <1>  db quot %+ %1 %+ quot,' ',0
  1310          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1310                              <1> 
  1310                              <1> %%printres:
  1310 0000B640 E835E2FFFF          <1>  call printEAX
  1310 0000B645 B8D5000000          <1>  mov eax, %4
  1310 0000B64A 9D                  <1>  popf
  1310 0000B64B E888E2FFFF          <1>  call printPS2
  1310 0000B650 E8ABE1FFFF          <1>  call printEOL
  1311                                  	testBCD   das, 0x12340560, PS_AF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1311 0000B655 BE[82B60000]        <1>  mov esi, %%name
  1311 0000B65A E8BBE1FFFF          <1>  call printStr
  1311 0000B65F B860053412          <1>  mov eax, %2
  1311 0000B664 E811E2FFFF          <1>  call printEAX
  1311 0000B669 B810000000          <1>  mov eax, %3
  1311 0000B66E 6A10                <1>  push %3
  1311 0000B670 9D                  <1>  popf
  1311 0000B671 E862E2FFFF          <1>  call printPS2
  1311                              <1> 
  1311 0000B676 B860053412          <1>  mov eax, %2
  1311 0000B67B 6A10                <1>  push %3
  1311 0000B67D 9D                  <1>  popf
  1311 0000B67E 2F                  <1>  %1
  1311 0000B67F 9C                  <1>  pushfd
  1311                              <1> 
  1311 0000B680 EB05                <1>  jmp %%printres
  1311                              <1> 
  1311                              <1> %%name:
  1311 0000B682 6461732000          <1>  db quot %+ %1 %+ quot,' ',0
  1311          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1311                              <1> 
  1311                              <1> %%printres:
  1311 0000B687 E8EEE1FFFF          <1>  call printEAX
  1311 0000B68C B8D5000000          <1>  mov eax, %4
  1311 0000B691 9D                  <1>  popf
  1311 0000B692 E841E2FFFF          <1>  call printPS2
  1311 0000B697 E864E1FFFF          <1>  call printEOL
  1312                                  	testBCD   das, 0x1234059f, PS_AF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1312 0000B69C BE[C9B60000]        <1>  mov esi, %%name
  1312 0000B6A1 E874E1FFFF          <1>  call printStr
  1312 0000B6A6 B89F053412          <1>  mov eax, %2
  1312 0000B6AB E8CAE1FFFF          <1>  call printEAX
  1312 0000B6B0 B810000000          <1>  mov eax, %3
  1312 0000B6B5 6A10                <1>  push %3
  1312 0000B6B7 9D                  <1>  popf
  1312 0000B6B8 E81BE2FFFF          <1>  call printPS2
  1312                              <1> 
  1312 0000B6BD B89F053412          <1>  mov eax, %2
  1312 0000B6C2 6A10                <1>  push %3
  1312 0000B6C4 9D                  <1>  popf
  1312 0000B6C5 2F                  <1>  %1
  1312 0000B6C6 9C                  <1>  pushfd
  1312                              <1> 
  1312 0000B6C7 EB05                <1>  jmp %%printres
  1312                              <1> 
  1312                              <1> %%name:
  1312 0000B6C9 6461732000          <1>  db quot %+ %1 %+ quot,' ',0
  1312          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1312                              <1> 
  1312                              <1> %%printres:
  1312 0000B6CE E8A7E1FFFF          <1>  call printEAX
  1312 0000B6D3 B8D5000000          <1>  mov eax, %4
  1312 0000B6D8 9D                  <1>  popf
  1312 0000B6D9 E8FAE1FFFF          <1>  call printPS2
  1312 0000B6DE E81DE1FFFF          <1>  call printEOL
  1313                                  	testBCD   das, 0x123405a0, PS_AF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1313 0000B6E3 BE[10B70000]        <1>  mov esi, %%name
  1313 0000B6E8 E82DE1FFFF          <1>  call printStr
  1313 0000B6ED B8A0053412          <1>  mov eax, %2
  1313 0000B6F2 E883E1FFFF          <1>  call printEAX
  1313 0000B6F7 B810000000          <1>  mov eax, %3
  1313 0000B6FC 6A10                <1>  push %3
  1313 0000B6FE 9D                  <1>  popf
  1313 0000B6FF E8D4E1FFFF          <1>  call printPS2
  1313                              <1> 
  1313 0000B704 B8A0053412          <1>  mov eax, %2
  1313 0000B709 6A10                <1>  push %3
  1313 0000B70B 9D                  <1>  popf
  1313 0000B70C 2F                  <1>  %1
  1313 0000B70D 9C                  <1>  pushfd
  1313                              <1> 
  1313 0000B70E EB05                <1>  jmp %%printres
  1313                              <1> 
  1313                              <1> %%name:
  1313 0000B710 6461732000          <1>  db quot %+ %1 %+ quot,' ',0
  1313          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1313                              <1> 
  1313                              <1> %%printres:
  1313 0000B715 E860E1FFFF          <1>  call printEAX
  1313 0000B71A B8D5000000          <1>  mov eax, %4
  1313 0000B71F 9D                  <1>  popf
  1313 0000B720 E8B3E1FFFF          <1>  call printPS2
  1313 0000B725 E8D6E0FFFF          <1>  call printEOL
  1314                                  	testBCD   das, 0x12340503, 0,             PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1314 0000B72A BE[57B70000]        <1>  mov esi, %%name
  1314 0000B72F E8E6E0FFFF          <1>  call printStr
  1314 0000B734 B803053412          <1>  mov eax, %2
  1314 0000B739 E83CE1FFFF          <1>  call printEAX
  1314 0000B73E B800000000          <1>  mov eax, %3
  1314 0000B743 6A00                <1>  push %3
  1314 0000B745 9D                  <1>  popf
  1314 0000B746 E88DE1FFFF          <1>  call printPS2
  1314                              <1> 
  1314 0000B74B B803053412          <1>  mov eax, %2
  1314 0000B750 6A00                <1>  push %3
  1314 0000B752 9D                  <1>  popf
  1314 0000B753 2F                  <1>  %1
  1314 0000B754 9C                  <1>  pushfd
  1314                              <1> 
  1314 0000B755 EB05                <1>  jmp %%printres
  1314                              <1> 
  1314                              <1> %%name:
  1314 0000B757 6461732000          <1>  db quot %+ %1 %+ quot,' ',0
  1314          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1314                              <1> 
  1314                              <1> %%printres:
  1314 0000B75C E819E1FFFF          <1>  call printEAX
  1314 0000B761 B8D5000000          <1>  mov eax, %4
  1314 0000B766 9D                  <1>  popf
  1314 0000B767 E86CE1FFFF          <1>  call printPS2
  1314 0000B76C E88FE0FFFF          <1>  call printEOL
  1315                                  	testBCD   das, 0x12340506, 0,             PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1315 0000B771 BE[9EB70000]        <1>  mov esi, %%name
  1315 0000B776 E89FE0FFFF          <1>  call printStr
  1315 0000B77B B806053412          <1>  mov eax, %2
  1315 0000B780 E8F5E0FFFF          <1>  call printEAX
  1315 0000B785 B800000000          <1>  mov eax, %3
  1315 0000B78A 6A00                <1>  push %3
  1315 0000B78C 9D                  <1>  popf
  1315 0000B78D E846E1FFFF          <1>  call printPS2
  1315                              <1> 
  1315 0000B792 B806053412          <1>  mov eax, %2
  1315 0000B797 6A00                <1>  push %3
  1315 0000B799 9D                  <1>  popf
  1315 0000B79A 2F                  <1>  %1
  1315 0000B79B 9C                  <1>  pushfd
  1315                              <1> 
  1315 0000B79C EB05                <1>  jmp %%printres
  1315                              <1> 
  1315                              <1> %%name:
  1315 0000B79E 6461732000          <1>  db quot %+ %1 %+ quot,' ',0
  1315          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1315                              <1> 
  1315                              <1> %%printres:
  1315 0000B7A3 E8D2E0FFFF          <1>  call printEAX
  1315 0000B7A8 B8D5000000          <1>  mov eax, %4
  1315 0000B7AD 9D                  <1>  popf
  1315 0000B7AE E825E1FFFF          <1>  call printPS2
  1315 0000B7B3 E848E0FFFF          <1>  call printEOL
  1316                                  	testBCD   das, 0x12340503, PS_CF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1316 0000B7B8 BE[E5B70000]        <1>  mov esi, %%name
  1316 0000B7BD E858E0FFFF          <1>  call printStr
  1316 0000B7C2 B803053412          <1>  mov eax, %2
  1316 0000B7C7 E8AEE0FFFF          <1>  call printEAX
  1316 0000B7CC B801000000          <1>  mov eax, %3
  1316 0000B7D1 6A01                <1>  push %3
  1316 0000B7D3 9D                  <1>  popf
  1316 0000B7D4 E8FFE0FFFF          <1>  call printPS2
  1316                              <1> 
  1316 0000B7D9 B803053412          <1>  mov eax, %2
  1316 0000B7DE 6A01                <1>  push %3
  1316 0000B7E0 9D                  <1>  popf
  1316 0000B7E1 2F                  <1>  %1
  1316 0000B7E2 9C                  <1>  pushfd
  1316                              <1> 
  1316 0000B7E3 EB05                <1>  jmp %%printres
  1316                              <1> 
  1316                              <1> %%name:
  1316 0000B7E5 6461732000          <1>  db quot %+ %1 %+ quot,' ',0
  1316          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1316                              <1> 
  1316                              <1> %%printres:
  1316 0000B7EA E88BE0FFFF          <1>  call printEAX
  1316 0000B7EF B8D5000000          <1>  mov eax, %4
  1316 0000B7F4 9D                  <1>  popf
  1316 0000B7F5 E8DEE0FFFF          <1>  call printPS2
  1316 0000B7FA E801E0FFFF          <1>  call printEOL
  1317                                  	testBCD   das, 0x12340506, PS_CF,         PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1317 0000B7FF BE[2CB80000]        <1>  mov esi, %%name
  1317 0000B804 E811E0FFFF          <1>  call printStr
  1317 0000B809 B806053412          <1>  mov eax, %2
  1317 0000B80E E867E0FFFF          <1>  call printEAX
  1317 0000B813 B801000000          <1>  mov eax, %3
  1317 0000B818 6A01                <1>  push %3
  1317 0000B81A 9D                  <1>  popf
  1317 0000B81B E8B8E0FFFF          <1>  call printPS2
  1317                              <1> 
  1317 0000B820 B806053412          <1>  mov eax, %2
  1317 0000B825 6A01                <1>  push %3
  1317 0000B827 9D                  <1>  popf
  1317 0000B828 2F                  <1>  %1
  1317 0000B829 9C                  <1>  pushfd
  1317                              <1> 
  1317 0000B82A EB05                <1>  jmp %%printres
  1317                              <1> 
  1317                              <1> %%name:
  1317 0000B82C 6461732000          <1>  db quot %+ %1 %+ quot,' ',0
  1317          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1317                              <1> 
  1317                              <1> %%printres:
  1317 0000B831 E844E0FFFF          <1>  call printEAX
  1317 0000B836 B8D5000000          <1>  mov eax, %4
  1317 0000B83B 9D                  <1>  popf
  1317 0000B83C E897E0FFFF          <1>  call printPS2
  1317 0000B841 E8BADFFFFF          <1>  call printEOL
  1318                                  	testBCD   das, 0x12340503, PS_CF | PS_AF, PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1318 0000B846 BE[73B80000]        <1>  mov esi, %%name
  1318 0000B84B E8CADFFFFF          <1>  call printStr
  1318 0000B850 B803053412          <1>  mov eax, %2
  1318 0000B855 E820E0FFFF          <1>  call printEAX
  1318 0000B85A B811000000          <1>  mov eax, %3
  1318 0000B85F 6A11                <1>  push %3
  1318 0000B861 9D                  <1>  popf
  1318 0000B862 E871E0FFFF          <1>  call printPS2
  1318                              <1> 
  1318 0000B867 B803053412          <1>  mov eax, %2
  1318 0000B86C 6A11                <1>  push %3
  1318 0000B86E 9D                  <1>  popf
  1318 0000B86F 2F                  <1>  %1
  1318 0000B870 9C                  <1>  pushfd
  1318                              <1> 
  1318 0000B871 EB05                <1>  jmp %%printres
  1318                              <1> 
  1318                              <1> %%name:
  1318 0000B873 6461732000          <1>  db quot %+ %1 %+ quot,' ',0
  1318          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1318                              <1> 
  1318                              <1> %%printres:
  1318 0000B878 E8FDDFFFFF          <1>  call printEAX
  1318 0000B87D B8D5000000          <1>  mov eax, %4
  1318 0000B882 9D                  <1>  popf
  1318 0000B883 E850E0FFFF          <1>  call printPS2
  1318 0000B888 E873DFFFFF          <1>  call printEOL
  1319                                  	testBCD   das, 0x12340506, PS_CF | PS_AF, PS_CF | PS_PF | PS_ZF | PS_SF | PS_AF
  1319 0000B88D BE[BAB80000]        <1>  mov esi, %%name
  1319 0000B892 E883DFFFFF          <1>  call printStr
  1319 0000B897 B806053412          <1>  mov eax, %2
  1319 0000B89C E8D9DFFFFF          <1>  call printEAX
  1319 0000B8A1 B811000000          <1>  mov eax, %3
  1319 0000B8A6 6A11                <1>  push %3
  1319 0000B8A8 9D                  <1>  popf
  1319 0000B8A9 E82AE0FFFF          <1>  call printPS2
  1319                              <1> 
  1319 0000B8AE B806053412          <1>  mov eax, %2
  1319 0000B8B3 6A11                <1>  push %3
  1319 0000B8B5 9D                  <1>  popf
  1319 0000B8B6 2F                  <1>  %1
  1319 0000B8B7 9C                  <1>  pushfd
  1319                              <1> 
  1319 0000B8B8 EB05                <1>  jmp %%printres
  1319                              <1> 
  1319                              <1> %%name:
  1319 0000B8BA 6461732000          <1>  db quot %+ %1 %+ quot,' ',0
  1319          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1319                              <1> 
  1319                              <1> %%printres:
  1319 0000B8BF E8B6DFFFFF          <1>  call printEAX
  1319 0000B8C4 B8D5000000          <1>  mov eax, %4
  1319 0000B8C9 9D                  <1>  popf
  1319 0000B8CA E809E0FFFF          <1>  call printPS2
  1319 0000B8CF E82CDFFFFF          <1>  call printEOL
  1320                                  	testBCD   aaa, 0x12340205, PS_AF,         PS_CF | PS_AF
  1320 0000B8D4 BE[01B90000]        <1>  mov esi, %%name
  1320 0000B8D9 E83CDFFFFF          <1>  call printStr
  1320 0000B8DE B805023412          <1>  mov eax, %2
  1320 0000B8E3 E892DFFFFF          <1>  call printEAX
  1320 0000B8E8 B810000000          <1>  mov eax, %3
  1320 0000B8ED 6A10                <1>  push %3
  1320 0000B8EF 9D                  <1>  popf
  1320 0000B8F0 E8E3DFFFFF          <1>  call printPS2
  1320                              <1> 
  1320 0000B8F5 B805023412          <1>  mov eax, %2
  1320 0000B8FA 6A10                <1>  push %3
  1320 0000B8FC 9D                  <1>  popf
  1320 0000B8FD 37                  <1>  %1
  1320 0000B8FE 9C                  <1>  pushfd
  1320                              <1> 
  1320 0000B8FF EB05                <1>  jmp %%printres
  1320                              <1> 
  1320                              <1> %%name:
  1320 0000B901 6161612000          <1>  db quot %+ %1 %+ quot,' ',0
  1320          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1320                              <1> 
  1320                              <1> %%printres:
  1320 0000B906 E86FDFFFFF          <1>  call printEAX
  1320 0000B90B B811000000          <1>  mov eax, %4
  1320 0000B910 9D                  <1>  popf
  1320 0000B911 E8C2DFFFFF          <1>  call printPS2
  1320 0000B916 E8E5DEFFFF          <1>  call printEOL
  1321                                  	testBCD   aaa, 0x12340306, PS_AF,         PS_CF | PS_AF
  1321 0000B91B BE[48B90000]        <1>  mov esi, %%name
  1321 0000B920 E8F5DEFFFF          <1>  call printStr
  1321 0000B925 B806033412          <1>  mov eax, %2
  1321 0000B92A E84BDFFFFF          <1>  call printEAX
  1321 0000B92F B810000000          <1>  mov eax, %3
  1321 0000B934 6A10                <1>  push %3
  1321 0000B936 9D                  <1>  popf
  1321 0000B937 E89CDFFFFF          <1>  call printPS2
  1321                              <1> 
  1321 0000B93C B806033412          <1>  mov eax, %2
  1321 0000B941 6A10                <1>  push %3
  1321 0000B943 9D                  <1>  popf
  1321 0000B944 37                  <1>  %1
  1321 0000B945 9C                  <1>  pushfd
  1321                              <1> 
  1321 0000B946 EB05                <1>  jmp %%printres
  1321                              <1> 
  1321                              <1> %%name:
  1321 0000B948 6161612000          <1>  db quot %+ %1 %+ quot,' ',0
  1321          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1321                              <1> 
  1321                              <1> %%printres:
  1321 0000B94D E828DFFFFF          <1>  call printEAX
  1321 0000B952 B811000000          <1>  mov eax, %4
  1321 0000B957 9D                  <1>  popf
  1321 0000B958 E87BDFFFFF          <1>  call printPS2
  1321 0000B95D E89EDEFFFF          <1>  call printEOL
  1322                                  	testBCD   aaa, 0x1234040a, PS_AF,         PS_CF | PS_AF
  1322 0000B962 BE[8FB90000]        <1>  mov esi, %%name
  1322 0000B967 E8AEDEFFFF          <1>  call printStr
  1322 0000B96C B80A043412          <1>  mov eax, %2
  1322 0000B971 E804DFFFFF          <1>  call printEAX
  1322 0000B976 B810000000          <1>  mov eax, %3
  1322 0000B97B 6A10                <1>  push %3
  1322 0000B97D 9D                  <1>  popf
  1322 0000B97E E855DFFFFF          <1>  call printPS2
  1322                              <1> 
  1322 0000B983 B80A043412          <1>  mov eax, %2
  1322 0000B988 6A10                <1>  push %3
  1322 0000B98A 9D                  <1>  popf
  1322 0000B98B 37                  <1>  %1
  1322 0000B98C 9C                  <1>  pushfd
  1322                              <1> 
  1322 0000B98D EB05                <1>  jmp %%printres
  1322                              <1> 
  1322                              <1> %%name:
  1322 0000B98F 6161612000          <1>  db quot %+ %1 %+ quot,' ',0
  1322          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1322                              <1> 
  1322                              <1> %%printres:
  1322 0000B994 E8E1DEFFFF          <1>  call printEAX
  1322 0000B999 B811000000          <1>  mov eax, %4
  1322 0000B99E 9D                  <1>  popf
  1322 0000B99F E834DFFFFF          <1>  call printPS2
  1322 0000B9A4 E857DEFFFF          <1>  call printEOL
  1323                                  	testBCD   aaa, 0x123405fa, PS_AF,         PS_CF | PS_AF
  1323 0000B9A9 BE[D6B90000]        <1>  mov esi, %%name
  1323 0000B9AE E867DEFFFF          <1>  call printStr
  1323 0000B9B3 B8FA053412          <1>  mov eax, %2
  1323 0000B9B8 E8BDDEFFFF          <1>  call printEAX
  1323 0000B9BD B810000000          <1>  mov eax, %3
  1323 0000B9C2 6A10                <1>  push %3
  1323 0000B9C4 9D                  <1>  popf
  1323 0000B9C5 E80EDFFFFF          <1>  call printPS2
  1323                              <1> 
  1323 0000B9CA B8FA053412          <1>  mov eax, %2
  1323 0000B9CF 6A10                <1>  push %3
  1323 0000B9D1 9D                  <1>  popf
  1323 0000B9D2 37                  <1>  %1
  1323 0000B9D3 9C                  <1>  pushfd
  1323                              <1> 
  1323 0000B9D4 EB05                <1>  jmp %%printres
  1323                              <1> 
  1323                              <1> %%name:
  1323 0000B9D6 6161612000          <1>  db quot %+ %1 %+ quot,' ',0
  1323          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1323                              <1> 
  1323                              <1> %%printres:
  1323 0000B9DB E89ADEFFFF          <1>  call printEAX
  1323 0000B9E0 B811000000          <1>  mov eax, %4
  1323 0000B9E5 9D                  <1>  popf
  1323 0000B9E6 E8EDDEFFFF          <1>  call printPS2
  1323 0000B9EB E810DEFFFF          <1>  call printEOL
  1324                                  	testBCD   aaa, 0x12340205, 0,             PS_CF | PS_AF
  1324 0000B9F0 BE[1DBA0000]        <1>  mov esi, %%name
  1324 0000B9F5 E820DEFFFF          <1>  call printStr
  1324 0000B9FA B805023412          <1>  mov eax, %2
  1324 0000B9FF E876DEFFFF          <1>  call printEAX
  1324 0000BA04 B800000000          <1>  mov eax, %3
  1324 0000BA09 6A00                <1>  push %3
  1324 0000BA0B 9D                  <1>  popf
  1324 0000BA0C E8C7DEFFFF          <1>  call printPS2
  1324                              <1> 
  1324 0000BA11 B805023412          <1>  mov eax, %2
  1324 0000BA16 6A00                <1>  push %3
  1324 0000BA18 9D                  <1>  popf
  1324 0000BA19 37                  <1>  %1
  1324 0000BA1A 9C                  <1>  pushfd
  1324                              <1> 
  1324 0000BA1B EB05                <1>  jmp %%printres
  1324                              <1> 
  1324                              <1> %%name:
  1324 0000BA1D 6161612000          <1>  db quot %+ %1 %+ quot,' ',0
  1324          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1324                              <1> 
  1324                              <1> %%printres:
  1324 0000BA22 E853DEFFFF          <1>  call printEAX
  1324 0000BA27 B811000000          <1>  mov eax, %4
  1324 0000BA2C 9D                  <1>  popf
  1324 0000BA2D E8A6DEFFFF          <1>  call printPS2
  1324 0000BA32 E8C9DDFFFF          <1>  call printEOL
  1325                                  	testBCD   aaa, 0x12340306, 0,             PS_CF | PS_AF
  1325 0000BA37 BE[64BA0000]        <1>  mov esi, %%name
  1325 0000BA3C E8D9DDFFFF          <1>  call printStr
  1325 0000BA41 B806033412          <1>  mov eax, %2
  1325 0000BA46 E82FDEFFFF          <1>  call printEAX
  1325 0000BA4B B800000000          <1>  mov eax, %3
  1325 0000BA50 6A00                <1>  push %3
  1325 0000BA52 9D                  <1>  popf
  1325 0000BA53 E880DEFFFF          <1>  call printPS2
  1325                              <1> 
  1325 0000BA58 B806033412          <1>  mov eax, %2
  1325 0000BA5D 6A00                <1>  push %3
  1325 0000BA5F 9D                  <1>  popf
  1325 0000BA60 37                  <1>  %1
  1325 0000BA61 9C                  <1>  pushfd
  1325                              <1> 
  1325 0000BA62 EB05                <1>  jmp %%printres
  1325                              <1> 
  1325                              <1> %%name:
  1325 0000BA64 6161612000          <1>  db quot %+ %1 %+ quot,' ',0
  1325          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1325                              <1> 
  1325                              <1> %%printres:
  1325 0000BA69 E80CDEFFFF          <1>  call printEAX
  1325 0000BA6E B811000000          <1>  mov eax, %4
  1325 0000BA73 9D                  <1>  popf
  1325 0000BA74 E85FDEFFFF          <1>  call printPS2
  1325 0000BA79 E882DDFFFF          <1>  call printEOL
  1326                                  	testBCD   aaa, 0x1234040a, 0,             PS_CF | PS_AF
  1326 0000BA7E BE[ABBA0000]        <1>  mov esi, %%name
  1326 0000BA83 E892DDFFFF          <1>  call printStr
  1326 0000BA88 B80A043412          <1>  mov eax, %2
  1326 0000BA8D E8E8DDFFFF          <1>  call printEAX
  1326 0000BA92 B800000000          <1>  mov eax, %3
  1326 0000BA97 6A00                <1>  push %3
  1326 0000BA99 9D                  <1>  popf
  1326 0000BA9A E839DEFFFF          <1>  call printPS2
  1326                              <1> 
  1326 0000BA9F B80A043412          <1>  mov eax, %2
  1326 0000BAA4 6A00                <1>  push %3
  1326 0000BAA6 9D                  <1>  popf
  1326 0000BAA7 37                  <1>  %1
  1326 0000BAA8 9C                  <1>  pushfd
  1326                              <1> 
  1326 0000BAA9 EB05                <1>  jmp %%printres
  1326                              <1> 
  1326                              <1> %%name:
  1326 0000BAAB 6161612000          <1>  db quot %+ %1 %+ quot,' ',0
  1326          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1326                              <1> 
  1326                              <1> %%printres:
  1326 0000BAB0 E8C5DDFFFF          <1>  call printEAX
  1326 0000BAB5 B811000000          <1>  mov eax, %4
  1326 0000BABA 9D                  <1>  popf
  1326 0000BABB E818DEFFFF          <1>  call printPS2
  1326 0000BAC0 E83BDDFFFF          <1>  call printEOL
  1327                                  	testBCD   aaa, 0x123405fa, 0,             PS_CF | PS_AF
  1327 0000BAC5 BE[F2BA0000]        <1>  mov esi, %%name
  1327 0000BACA E84BDDFFFF          <1>  call printStr
  1327 0000BACF B8FA053412          <1>  mov eax, %2
  1327 0000BAD4 E8A1DDFFFF          <1>  call printEAX
  1327 0000BAD9 B800000000          <1>  mov eax, %3
  1327 0000BADE 6A00                <1>  push %3
  1327 0000BAE0 9D                  <1>  popf
  1327 0000BAE1 E8F2DDFFFF          <1>  call printPS2
  1327                              <1> 
  1327 0000BAE6 B8FA053412          <1>  mov eax, %2
  1327 0000BAEB 6A00                <1>  push %3
  1327 0000BAED 9D                  <1>  popf
  1327 0000BAEE 37                  <1>  %1
  1327 0000BAEF 9C                  <1>  pushfd
  1327                              <1> 
  1327 0000BAF0 EB05                <1>  jmp %%printres
  1327                              <1> 
  1327                              <1> %%name:
  1327 0000BAF2 6161612000          <1>  db quot %+ %1 %+ quot,' ',0
  1327          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1327                              <1> 
  1327                              <1> %%printres:
  1327 0000BAF7 E87EDDFFFF          <1>  call printEAX
  1327 0000BAFC B811000000          <1>  mov eax, %4
  1327 0000BB01 9D                  <1>  popf
  1327 0000BB02 E8D1DDFFFF          <1>  call printPS2
  1327 0000BB07 E8F4DCFFFF          <1>  call printEOL
  1328                                  	testBCD   aas, 0x12340205, PS_AF,         PS_CF | PS_AF
  1328 0000BB0C BE[39BB0000]        <1>  mov esi, %%name
  1328 0000BB11 E804DDFFFF          <1>  call printStr
  1328 0000BB16 B805023412          <1>  mov eax, %2
  1328 0000BB1B E85ADDFFFF          <1>  call printEAX
  1328 0000BB20 B810000000          <1>  mov eax, %3
  1328 0000BB25 6A10                <1>  push %3
  1328 0000BB27 9D                  <1>  popf
  1328 0000BB28 E8ABDDFFFF          <1>  call printPS2
  1328                              <1> 
  1328 0000BB2D B805023412          <1>  mov eax, %2
  1328 0000BB32 6A10                <1>  push %3
  1328 0000BB34 9D                  <1>  popf
  1328 0000BB35 3F                  <1>  %1
  1328 0000BB36 9C                  <1>  pushfd
  1328                              <1> 
  1328 0000BB37 EB05                <1>  jmp %%printres
  1328                              <1> 
  1328                              <1> %%name:
  1328 0000BB39 6161732000          <1>  db quot %+ %1 %+ quot,' ',0
  1328          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1328                              <1> 
  1328                              <1> %%printres:
  1328 0000BB3E E837DDFFFF          <1>  call printEAX
  1328 0000BB43 B811000000          <1>  mov eax, %4
  1328 0000BB48 9D                  <1>  popf
  1328 0000BB49 E88ADDFFFF          <1>  call printPS2
  1328 0000BB4E E8ADDCFFFF          <1>  call printEOL
  1329                                  	testBCD   aas, 0x12340306, PS_AF,         PS_CF | PS_AF
  1329 0000BB53 BE[80BB0000]        <1>  mov esi, %%name
  1329 0000BB58 E8BDDCFFFF          <1>  call printStr
  1329 0000BB5D B806033412          <1>  mov eax, %2
  1329 0000BB62 E813DDFFFF          <1>  call printEAX
  1329 0000BB67 B810000000          <1>  mov eax, %3
  1329 0000BB6C 6A10                <1>  push %3
  1329 0000BB6E 9D                  <1>  popf
  1329 0000BB6F E864DDFFFF          <1>  call printPS2
  1329                              <1> 
  1329 0000BB74 B806033412          <1>  mov eax, %2
  1329 0000BB79 6A10                <1>  push %3
  1329 0000BB7B 9D                  <1>  popf
  1329 0000BB7C 3F                  <1>  %1
  1329 0000BB7D 9C                  <1>  pushfd
  1329                              <1> 
  1329 0000BB7E EB05                <1>  jmp %%printres
  1329                              <1> 
  1329                              <1> %%name:
  1329 0000BB80 6161732000          <1>  db quot %+ %1 %+ quot,' ',0
  1329          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1329                              <1> 
  1329                              <1> %%printres:
  1329 0000BB85 E8F0DCFFFF          <1>  call printEAX
  1329 0000BB8A B811000000          <1>  mov eax, %4
  1329 0000BB8F 9D                  <1>  popf
  1329 0000BB90 E843DDFFFF          <1>  call printPS2
  1329 0000BB95 E866DCFFFF          <1>  call printEOL
  1330                                  	testBCD   aas, 0x1234040a, PS_AF,         PS_CF | PS_AF
  1330 0000BB9A BE[C7BB0000]        <1>  mov esi, %%name
  1330 0000BB9F E876DCFFFF          <1>  call printStr
  1330 0000BBA4 B80A043412          <1>  mov eax, %2
  1330 0000BBA9 E8CCDCFFFF          <1>  call printEAX
  1330 0000BBAE B810000000          <1>  mov eax, %3
  1330 0000BBB3 6A10                <1>  push %3
  1330 0000BBB5 9D                  <1>  popf
  1330 0000BBB6 E81DDDFFFF          <1>  call printPS2
  1330                              <1> 
  1330 0000BBBB B80A043412          <1>  mov eax, %2
  1330 0000BBC0 6A10                <1>  push %3
  1330 0000BBC2 9D                  <1>  popf
  1330 0000BBC3 3F                  <1>  %1
  1330 0000BBC4 9C                  <1>  pushfd
  1330                              <1> 
  1330 0000BBC5 EB05                <1>  jmp %%printres
  1330                              <1> 
  1330                              <1> %%name:
  1330 0000BBC7 6161732000          <1>  db quot %+ %1 %+ quot,' ',0
  1330          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1330                              <1> 
  1330                              <1> %%printres:
  1330 0000BBCC E8A9DCFFFF          <1>  call printEAX
  1330 0000BBD1 B811000000          <1>  mov eax, %4
  1330 0000BBD6 9D                  <1>  popf
  1330 0000BBD7 E8FCDCFFFF          <1>  call printPS2
  1330 0000BBDC E81FDCFFFF          <1>  call printEOL
  1331                                  	testBCD   aas, 0x123405fa, PS_AF,         PS_CF | PS_AF
  1331 0000BBE1 BE[0EBC0000]        <1>  mov esi, %%name
  1331 0000BBE6 E82FDCFFFF          <1>  call printStr
  1331 0000BBEB B8FA053412          <1>  mov eax, %2
  1331 0000BBF0 E885DCFFFF          <1>  call printEAX
  1331 0000BBF5 B810000000          <1>  mov eax, %3
  1331 0000BBFA 6A10                <1>  push %3
  1331 0000BBFC 9D                  <1>  popf
  1331 0000BBFD E8D6DCFFFF          <1>  call printPS2
  1331                              <1> 
  1331 0000BC02 B8FA053412          <1>  mov eax, %2
  1331 0000BC07 6A10                <1>  push %3
  1331 0000BC09 9D                  <1>  popf
  1331 0000BC0A 3F                  <1>  %1
  1331 0000BC0B 9C                  <1>  pushfd
  1331                              <1> 
  1331 0000BC0C EB05                <1>  jmp %%printres
  1331                              <1> 
  1331                              <1> %%name:
  1331 0000BC0E 6161732000          <1>  db quot %+ %1 %+ quot,' ',0
  1331          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1331                              <1> 
  1331                              <1> %%printres:
  1331 0000BC13 E862DCFFFF          <1>  call printEAX
  1331 0000BC18 B811000000          <1>  mov eax, %4
  1331 0000BC1D 9D                  <1>  popf
  1331 0000BC1E E8B5DCFFFF          <1>  call printPS2
  1331 0000BC23 E8D8DBFFFF          <1>  call printEOL
  1332                                  	testBCD   aas, 0x12340205, 0,             PS_CF | PS_AF
  1332 0000BC28 BE[55BC0000]        <1>  mov esi, %%name
  1332 0000BC2D E8E8DBFFFF          <1>  call printStr
  1332 0000BC32 B805023412          <1>  mov eax, %2
  1332 0000BC37 E83EDCFFFF          <1>  call printEAX
  1332 0000BC3C B800000000          <1>  mov eax, %3
  1332 0000BC41 6A00                <1>  push %3
  1332 0000BC43 9D                  <1>  popf
  1332 0000BC44 E88FDCFFFF          <1>  call printPS2
  1332                              <1> 
  1332 0000BC49 B805023412          <1>  mov eax, %2
  1332 0000BC4E 6A00                <1>  push %3
  1332 0000BC50 9D                  <1>  popf
  1332 0000BC51 3F                  <1>  %1
  1332 0000BC52 9C                  <1>  pushfd
  1332                              <1> 
  1332 0000BC53 EB05                <1>  jmp %%printres
  1332                              <1> 
  1332                              <1> %%name:
  1332 0000BC55 6161732000          <1>  db quot %+ %1 %+ quot,' ',0
  1332          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1332                              <1> 
  1332                              <1> %%printres:
  1332 0000BC5A E81BDCFFFF          <1>  call printEAX
  1332 0000BC5F B811000000          <1>  mov eax, %4
  1332 0000BC64 9D                  <1>  popf
  1332 0000BC65 E86EDCFFFF          <1>  call printPS2
  1332 0000BC6A E891DBFFFF          <1>  call printEOL
  1333                                  	testBCD   aas, 0x12340306, 0,             PS_CF | PS_AF
  1333 0000BC6F BE[9CBC0000]        <1>  mov esi, %%name
  1333 0000BC74 E8A1DBFFFF          <1>  call printStr
  1333 0000BC79 B806033412          <1>  mov eax, %2
  1333 0000BC7E E8F7DBFFFF          <1>  call printEAX
  1333 0000BC83 B800000000          <1>  mov eax, %3
  1333 0000BC88 6A00                <1>  push %3
  1333 0000BC8A 9D                  <1>  popf
  1333 0000BC8B E848DCFFFF          <1>  call printPS2
  1333                              <1> 
  1333 0000BC90 B806033412          <1>  mov eax, %2
  1333 0000BC95 6A00                <1>  push %3
  1333 0000BC97 9D                  <1>  popf
  1333 0000BC98 3F                  <1>  %1
  1333 0000BC99 9C                  <1>  pushfd
  1333                              <1> 
  1333 0000BC9A EB05                <1>  jmp %%printres
  1333                              <1> 
  1333                              <1> %%name:
  1333 0000BC9C 6161732000          <1>  db quot %+ %1 %+ quot,' ',0
  1333          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1333                              <1> 
  1333                              <1> %%printres:
  1333 0000BCA1 E8D4DBFFFF          <1>  call printEAX
  1333 0000BCA6 B811000000          <1>  mov eax, %4
  1333 0000BCAB 9D                  <1>  popf
  1333 0000BCAC E827DCFFFF          <1>  call printPS2
  1333 0000BCB1 E84ADBFFFF          <1>  call printEOL
  1334                                  	testBCD   aas, 0x1234040a, 0,             PS_CF | PS_AF
  1334 0000BCB6 BE[E3BC0000]        <1>  mov esi, %%name
  1334 0000BCBB E85ADBFFFF          <1>  call printStr
  1334 0000BCC0 B80A043412          <1>  mov eax, %2
  1334 0000BCC5 E8B0DBFFFF          <1>  call printEAX
  1334 0000BCCA B800000000          <1>  mov eax, %3
  1334 0000BCCF 6A00                <1>  push %3
  1334 0000BCD1 9D                  <1>  popf
  1334 0000BCD2 E801DCFFFF          <1>  call printPS2
  1334                              <1> 
  1334 0000BCD7 B80A043412          <1>  mov eax, %2
  1334 0000BCDC 6A00                <1>  push %3
  1334 0000BCDE 9D                  <1>  popf
  1334 0000BCDF 3F                  <1>  %1
  1334 0000BCE0 9C                  <1>  pushfd
  1334                              <1> 
  1334 0000BCE1 EB05                <1>  jmp %%printres
  1334                              <1> 
  1334                              <1> %%name:
  1334 0000BCE3 6161732000          <1>  db quot %+ %1 %+ quot,' ',0
  1334          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1334                              <1> 
  1334                              <1> %%printres:
  1334 0000BCE8 E88DDBFFFF          <1>  call printEAX
  1334 0000BCED B811000000          <1>  mov eax, %4
  1334 0000BCF2 9D                  <1>  popf
  1334 0000BCF3 E8E0DBFFFF          <1>  call printPS2
  1334 0000BCF8 E803DBFFFF          <1>  call printEOL
  1335                                  	testBCD   aas, 0x123405fa, 0,             PS_CF | PS_AF
  1335 0000BCFD BE[2ABD0000]        <1>  mov esi, %%name
  1335 0000BD02 E813DBFFFF          <1>  call printStr
  1335 0000BD07 B8FA053412          <1>  mov eax, %2
  1335 0000BD0C E869DBFFFF          <1>  call printEAX
  1335 0000BD11 B800000000          <1>  mov eax, %3
  1335 0000BD16 6A00                <1>  push %3
  1335 0000BD18 9D                  <1>  popf
  1335 0000BD19 E8BADBFFFF          <1>  call printPS2
  1335                              <1> 
  1335 0000BD1E B8FA053412          <1>  mov eax, %2
  1335 0000BD23 6A00                <1>  push %3
  1335 0000BD25 9D                  <1>  popf
  1335 0000BD26 3F                  <1>  %1
  1335 0000BD27 9C                  <1>  pushfd
  1335                              <1> 
  1335 0000BD28 EB05                <1>  jmp %%printres
  1335                              <1> 
  1335                              <1> %%name:
  1335 0000BD2A 6161732000          <1>  db quot %+ %1 %+ quot,' ',0
  1335          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1335                              <1> 
  1335                              <1> %%printres:
  1335 0000BD2F E846DBFFFF          <1>  call printEAX
  1335 0000BD34 B811000000          <1>  mov eax, %4
  1335 0000BD39 9D                  <1>  popf
  1335 0000BD3A E899DBFFFF          <1>  call printPS2
  1335 0000BD3F E8BCDAFFFF          <1>  call printEOL
  1336                                  	testBCD   aam, 0x12340547, PS_AF,         PS_PF | PS_ZF | PS_SF
  1336 0000BD44 BE[72BD0000]        <1>  mov esi, %%name
  1336 0000BD49 E8CCDAFFFF          <1>  call printStr
  1336 0000BD4E B847053412          <1>  mov eax, %2
  1336 0000BD53 E822DBFFFF          <1>  call printEAX
  1336 0000BD58 B810000000          <1>  mov eax, %3
  1336 0000BD5D 6A10                <1>  push %3
  1336 0000BD5F 9D                  <1>  popf
  1336 0000BD60 E873DBFFFF          <1>  call printPS2
  1336                              <1> 
  1336 0000BD65 B847053412          <1>  mov eax, %2
  1336 0000BD6A 6A10                <1>  push %3
  1336 0000BD6C 9D                  <1>  popf
  1336 0000BD6D D40A                <1>  %1
  1336 0000BD6F 9C                  <1>  pushfd
  1336                              <1> 
  1336 0000BD70 EB05                <1>  jmp %%printres
  1336                              <1> 
  1336                              <1> %%name:
  1336 0000BD72 61616D2000          <1>  db quot %+ %1 %+ quot,' ',0
  1336          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1336                              <1> 
  1336                              <1> %%printres:
  1336 0000BD77 E8FEDAFFFF          <1>  call printEAX
  1336 0000BD7C B8C4000000          <1>  mov eax, %4
  1336 0000BD81 9D                  <1>  popf
  1336 0000BD82 E851DBFFFF          <1>  call printPS2
  1336 0000BD87 E874DAFFFF          <1>  call printEOL
  1337                                  	testBCD   aad, 0x12340407, PS_AF,         PS_PF | PS_ZF | PS_SF
  1337 0000BD8C BE[BABD0000]        <1>  mov esi, %%name
  1337 0000BD91 E884DAFFFF          <1>  call printStr
  1337 0000BD96 B807043412          <1>  mov eax, %2
  1337 0000BD9B E8DADAFFFF          <1>  call printEAX
  1337 0000BDA0 B810000000          <1>  mov eax, %3
  1337 0000BDA5 6A10                <1>  push %3
  1337 0000BDA7 9D                  <1>  popf
  1337 0000BDA8 E82BDBFFFF          <1>  call printPS2
  1337                              <1> 
  1337 0000BDAD B807043412          <1>  mov eax, %2
  1337 0000BDB2 6A10                <1>  push %3
  1337 0000BDB4 9D                  <1>  popf
  1337 0000BDB5 D50A                <1>  %1
  1337 0000BDB7 9C                  <1>  pushfd
  1337                              <1> 
  1337 0000BDB8 EB05                <1>  jmp %%printres
  1337                              <1> 
  1337                              <1> %%name:
  1337 0000BDBA 6161642000          <1>  db quot %+ %1 %+ quot,' ',0
  1337          ******************  <1>  warning: (testBCD:19) unterminated string [-w+other]
  1337                              <1> 
  1337                              <1> %%printres:
  1337 0000BDBF E8B6DAFFFF          <1>  call printEAX
  1337 0000BDC4 B8C4000000          <1>  mov eax, %4
  1337 0000BDC9 9D                  <1>  popf
  1337 0000BDCA E809DBFFFF          <1>  call printPS2
  1337 0000BDCF E82CDAFFFF          <1>  call printEOL
  1338                                  
  1339                                  	setProtModeIntGate EX_DE, DivExcHandler
  1339 0000BDD4 60                  <1>  pushad
  1339 0000BDD5 9C                  <1>  pushf
  1339 0000BDD6 668CD8              <1>  mov ax, ds
  1339 0000BDD9 6650                <1>  push ax
  1339 0000BDDB B800000000          <1>  mov eax, %1
  1339 0000BDE0 BF[BDBE0000]        <1>  mov edi, %2
  1339                              <1>  %if %3 != -1
  1339                              <1>  mov dx, %3
  1339                              <1>  %else
  1339 0000BDE5 668CCA              <1>  mov dx, cs
  1339 0000BDE8 6683E207            <1>  and dx, 7
  1339 0000BDEC 66C1E20D            <1>  shl dx, 13
  1339                              <1>  %endif
  1339 0000BDF0 6683FA00            <1>  cmp dx, ACC_DPL_0
  1339 0000BDF4 7507                <1>  jne %%dpl3
  1339                              <1> %%dpl0:
  1339 0000BDF6 BE10000000          <1>  mov esi, C_SEG_PROT32
  1339 0000BDFB EB05                <1>  jmp %%cont
  1339                              <1> %%dpl3:
  1339 0000BDFD BE18000000          <1>  mov esi, CU_SEG_PROT32
  1339                              <1> %%cont:
  1339 0000BE02 668CC9              <1>  mov cx, cs
  1339 0000BE05 66F7C10700          <1>  test cx, 7
  1339 0000BE0A 7509                <1>  jnz %%ring3
  1339                              <1> %%ring0:
  1339 0000BE0C 2EC51D[971B0000]    <1>  lds ebx, [cs:ptrIDTprot]
  1339 0000BE13 EB07                <1>  jmp %%call
  1339                              <1> %%ring3:
  1339 0000BE15 2EC51D[9D1B0000]    <1>  lds ebx, [cs:ptrIDTUprot]
  1339                              <1> %%call:
  1339 0000BE1C E8235FFFFF          <1>  call initIntGateProt
  1339 0000BE21 6658                <1>  pop ax
  1339 0000BE23 8ED8                <1>  mov ds, ax
  1339 0000BE25 9D                  <1>  popf
  1339 0000BE26 61                  <1>  popad
  1340 0000BE27 FC                      	cld
  1341 0000BE28 BE[D2BE0000]            	mov    esi, tableOps   ; ESI -> tableOps entry
  1342                                  
  1343                                  testOps:
  1344 0000BE2D 2E0FB60E                	movzx  ecx, byte [cs:esi]           ; ECX == length of instruction sequence
  1345 0000BE31 85C9                    	test   ecx, ecx                     ; (must use JZ since there's no long version of JECXZ)
  1346 0000BE33 0F847F000000            	jz     near testDone                ; zero means we've reached the end of the table
  1347 0000BE39 2E0FB65E01              	movzx  ebx, byte [cs:esi+1]         ; EBX == TYPE
  1348 0000BE3E C1E306                  	shl    ebx, 6                       ; EBX == TYPE * 64
  1349 0000BE41 2E0FB65602              	movzx  edx, byte [cs:esi+2]         ; EDX == SIZE
  1350 0000BE46 C1E204                  	shl    edx, 4                       ; EDX == SIZE * 16
  1351 0000BE49 2E8D9C13[04D30000]      	lea    ebx, [cs:typeValues+ebx+edx] ; EBX -> values for type
  1352 0000BE51 83C603                  	add    esi, 3                       ; ESI -> instruction mnemonic
  1353                                  .skip:
  1354 0000BE54 2EAC                    	cs lodsb
  1355 0000BE56 84C0                    	test   al,al
  1356 0000BE58 75FA                    	jnz    .skip
  1357 0000BE5A 51                      	push   ecx
  1358 0000BE5B 2E8B0B                  	mov    ecx, [cs:ebx]    ; ECX == count of values for dst
  1359 0000BE5E 2E8B4304                	mov    eax, [cs:ebx+4]  ; EAX -> values for dst
  1360 0000BE62 2E8B6B08                	mov    ebp, [cs:ebx+8]  ; EBP == count of values for src
  1361 0000BE66 2E8B7B0C                	mov    edi, [cs:ebx+12] ; EDI -> values for src
  1362 0000BE6A 93                      	xchg   ebx, eax         ; EBX -> values for dst
  1363 0000BE6B 29C0                    	sub    eax, eax         ; set all ARITH flags to known values prior to tests
  1364                                  testDst:
  1365 0000BE6D 55                      	push   ebp
  1366 0000BE6E 57                      	push   edi
  1367 0000BE6F 9C                      	pushfd
  1368                                  testSrc:
  1369 0000BE70 2E8B03                  	mov   eax, [cs:ebx]    ; EAX == dst
  1370 0000BE73 2E8B17                  	mov   edx, [cs:edi]    ; EDX == src
  1371 0000BE76 9D                      	popfd
  1372 0000BE77 E8D5D9FFFF              	call  printOp
  1373 0000BE7C E8F9D9FFFF              	call  printEAX
  1374 0000BE81 E80ADAFFFF              	call  printEDX
  1375 0000BE86 E81DDAFFFF              	call  printPS
  1376 0000BE8B FFD6                    	call  esi       ; execute the instruction sequence
  1377 0000BE8D E8E8D9FFFF              	call  printEAX
  1378 0000BE92 E8F9D9FFFF              	call  printEDX
  1379 0000BE97 E80CDAFFFF              	call  printPS
  1380 0000BE9C E85FD9FFFF              	call  printEOL
  1381 0000BEA1 9C                      	pushfd
  1382 0000BEA2 83C704                  	add   edi,4    ; EDI -> next src
  1383 0000BEA5 4D                      	dec   ebp      ; decrement src count
  1384 0000BEA6 75C8                    	jnz   testSrc
  1385 0000BEA8 9D                      	popfd
  1386 0000BEA9 5F                      	pop   edi         ; ESI -> restored values for src
  1387 0000BEAA 5D                      	pop   ebp         ; EBP == restored count of values for src
  1388 0000BEAB 8D5B04                  	lea   ebx,[ebx+4] ; EBX -> next dst (without modifying flags)
  1389 0000BEAE E2BD                    	loop  testDst
  1390                                  
  1391 0000BEB0 59                      	pop  ecx
  1392 0000BEB1 01CE                    	add  esi, ecx     ; ESI -> next tableOps entry
  1393 0000BEB3 E975FFFFFF              	jmp  testOps
  1394                                  
  1395                                  testDone:
  1396 0000BEB8 E9C7160000              	jmp postFF
  1397                                  
  1398                                  DivExcHandler:
  1399 0000BEBD 56                      	push esi
  1400 0000BEBE BE[C8970000]            	mov  esi,strDE
  1401 0000BEC3 E852D9FFFF              	call printStr
  1402 0000BEC8 5E                      	pop  esi
  1403                                  ;
  1404                                  ;   It's rather annoying that the 80386 treats #DE as a fault rather than a trap, leaving CS:EIP pointing to the
  1405                                  ;   faulting instruction instead of the RET we conveniently placed after it.  So, instead of trying to calculate where
  1406                                  ;   that RET is, we simply set EIP on the stack to point to our own RET.
  1407                                  ;
  1408 0000BEC9 C70424[D1BE0000]        	mov  dword [esp], DivExcHandlerRet
  1409 0000BED0 CF                      	iretd
  1410                                  DivExcHandlerRet:
  1411 0000BED1 C3                      	ret
  1412                                  
  1413                                  %include "tests/arith-logic_d.asm"
     1                              <1> TYPE_ARITH    equ  0 ; multiple values for eAX and eDX
     2                              <1> TYPE_ARITH1   equ  1 ; multiple values for eAX, 1 value for eDX
     3                              <1> TYPE_ARITH1D  equ  2 ; 1 value for eAX, multiple values for eDX
     4                              <1> TYPE_LOGIC    equ  3 ; multiple values for eAX and eDX
     5                              <1> TYPE_LOGIC1   equ  4 ; multiple values for eAX, 1 value for eDX
     6                              <1> TYPE_LOGIC1D  equ  5 ; 1 value for eAX, multiple values for eDX
     7                              <1> TYPE_MULTIPLY equ  6
     8                              <1> TYPE_DIVIDE   equ  7
     9                              <1> TYPE_SHIFTS_1 equ  8
    10                              <1> TYPE_SHIFTS_R equ  9
    11                              <1> 
    12                              <1> SIZE_BYTE     equ  0
    13                              <1> SIZE_SHORT    equ  1
    14                              <1> SIZE_LONG     equ  2
    15                              <1> 
    16                              <1> ; Defines a logic/arithmetic operation with 1 to 3 operands
    17                              <1> ; %1 name string
    18                              <1> ; %2 mnemonic
    19                              <1> ; %3 "al" / "ax" / "eax" / "dl" / "dx" / "edx"
    20                              <1> ; %4 src operand / immediate / "mem" / "none"
    21                              <1> ; %5 3rd operand / "none"
    22                              <1> ; %6 type
    23                              <1> %macro defOp 6
    24                              <1> 	%ifidni %3,al
    25                              <1> 	%assign size SIZE_BYTE
    26                              <1> 	%define msrc dl
    27                              <1> 	%elifidni %3,dl
    28                              <1> 	%assign size SIZE_BYTE
    29                              <1> 	%elifidni %3,ax
    30                              <1> 	%assign size SIZE_SHORT
    31                              <1> 	%define msrc dx
    32                              <1> 	%elifidni %3,dx
    33                              <1> 	%assign size SIZE_SHORT
    34                              <1> 	%else
    35                              <1> 	%assign size SIZE_LONG
    36                              <1> 	%define msrc edx
    37                              <1> 	%endif
    38                              <1> 	db	%%end-%%beg,%6,size
    39                              <1> %%name:
    40                              <1> 	db	%1,' ',0
    41                              <1> %%beg:
    42                              <1> 	%ifidni %4,none
    43                              <1> 	%2	%3
    44                              <1> 	%elifidni %4,mem
    45                              <1> 	mov [0], msrc
    46                              <1> 	%2	%3,[0]
    47                              <1> 	%elifidni %5,none
    48                              <1> 	%2	%3,%4
    49                              <1> 	%else
    50                              <1> 	%2	%3,%4,%5
    51                              <1> 	%endif
    52                              <1> 	ret
    53                              <1> %%end:
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> ; Defines a logic/arithmetic operation with 0 operands
    57                              <1> ; %1 name string
    58                              <1> ; %2 mnemonic
    59                              <1> ; %3 size as "b", "w", or "d"
    60                              <1> ; %4 type
    61                              <1> %macro defOp0 4
    62                              <1> 	%ifidni %3,b
    63                              <1> 	%assign size SIZE_BYTE
    64                              <1> 	%elifidni %3,w
    65                              <1> 	%assign size SIZE_SHORT
    66                              <1> 	%else
    67                              <1> 	%assign size SIZE_LONG
    68                              <1> 	%endif
    69                              <1> 	db %%end-%%beg,%4,size
    70                              <1> %%name:
    71                              <1> 	db %1,' ',0
    72                              <1> %%beg:
    73                              <1> 	%2
    74                              <1> 	ret
    75                              <1> %%end:
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> ; Defines a shift operation
    79                              <1> ; %1 name string
    80                              <1> ; %2 mnemonic
    81                              <1> ; %3 register operand
    82                              <1> ; %4 "cl" or immediate
    83                              <1> ; %5 type
    84                              <1> %macro defOpSh 5
    85                              <1> 	%ifidni %3,al
    86                              <1> 	%assign size SIZE_BYTE
    87                              <1> 	%elifidni %3,ax
    88                              <1> 	%assign size SIZE_SHORT
    89                              <1> 	%else ; eax
    90                              <1> 	%assign size SIZE_LONG
    91                              <1> 	%endif
    92                              <1> 	db	%%end-%%beg,%5,size
    93                              <1> %%name:
    94                              <1> 	db	%1,' ',0
    95                              <1> %%beg:
    96                              <1> 	stc
    97                              <1> 	%ifidni %4,cl
    98                              <1> 	xchg cl,dl
    99                              <1> 	%2	%3,cl
   100                              <1> 	xchg cl,dl
   101                              <1> 	%else
   102                              <1> 	%2	%3,%4
   103                              <1> 	%endif
   104                              <1> 	ret
   105                              <1> %%end:
   106                              <1> %endmacro
   107                              <1> 
   108                              <1> ; Defines a double precision shift operation
   109                              <1> ; %1 name string
   110                              <1> ; %2 mnemonic
   111                              <1> ; %3 operand 1: "ax" or "eax"
   112                              <1> ; %4 operand 2
   113                              <1> ; %5 "cl" or immediate
   114                              <1> ; %6 type
   115                              <1> %macro defOpShD 6
   116                              <1> 	%ifidni %3,ax
   117                              <1> 	%assign size SIZE_SHORT
   118                              <1> 	%else ; eax
   119                              <1> 	%assign size SIZE_LONG
   120                              <1> 	%endif
   121                              <1> 	db	%%end-%%beg,%6,size
   122                              <1> %%name:
   123                              <1> 	db	%1,' ',0
   124                              <1> %%beg:
   125                              <1> 	stc
   126                              <1> 	%ifidni %5,cl
   127                              <1> 	mov [0],cl
   128                              <1> 	mov cl,dl
   129                              <1> 	%2	%3,%4,cl
   130                              <1> 	mov cl,[0]
   131                              <1> 	%else
   132                              <1> 	%2	%3,%4,%5
   133                              <1> 	%endif
   134                              <1> 	ret
   135                              <1> %%end:
   136                              <1> %endmacro
   137                              <1> 
   138                              <1> ; Defines a INC or DEC operation
   139                              <1> ; %1 name string
   140                              <1> ; %2 mnemonic
   141                              <1> ; %3 register or "mem"
   142                              <1> ; %3 size as "byte", "word", or "dword"
   143                              <1> %macro	defOpInc 4
   144                              <1> 	%ifidni %4,byte
   145                              <1> 	%assign size SIZE_BYTE
   146                              <1> 	%define eAX al
   147                              <1> 	%elifidni %4,word
   148                              <1> 	%assign size SIZE_SHORT
   149                              <1> 	%define eAX ax
   150                              <1> 	%else
   151                              <1> 	%assign size SIZE_LONG
   152                              <1> 	%define eAX eax
   153                              <1> 	%endif
   154                              <1> 	db	%%end-%%beg,TYPE_ARITH1,size
   155                              <1> %%name:
   156                              <1> 	db	%1,' ',0
   157                              <1> %%beg:
   158                              <1> 	%ifidni %3,mem
   159                              <1> 		mov [0], eAX
   160                              <1> 		%2	%4 [0]
   161                              <1> 		mov eAX, [0]
   162                              <1> 	%else
   163                              <1> 		xchg eAX, %3
   164                              <1> 		%2	%3
   165                              <1> 		xchg eAX, %3
   166                              <1> 	%endif
   167                              <1> 	ret
   168                              <1> %%end:
   169                              <1> %endmacro
   170                              <1> 
   171                              <1> ALLOPS equ 1
   172                              <1> 
   173                              <1> tableOps:
   174                              <1> 	defOp0   "98 CBW",cbw,b,TYPE_ARITH1                       ; 66 98
   174                              <2>  %ifidni %3,b
   174                              <2>  %assign size SIZE_BYTE
   174                              <2>  %elifidni %3,w
   174                              <2>  %assign size SIZE_SHORT
   174                              <2>  %else
   174                              <2>  %assign size SIZE_LONG
   174                              <2>  %endif
   174 0000BED2 030100              <2>  db %%end-%%beg,%4,size
   174                              <2> %%name:
   174 0000BED5 3938204342572000    <2>  db %1,' ',0
   174                              <2> %%beg:
   174 0000BEDD 6698                <2>  %2
   174 0000BEDF C3                  <2>  ret
   174                              <2> %%end:
   175                              <1> 	defOp0   "98 CWDE",cwde,w,TYPE_ARITH1                     ;    98
   175                              <2>  %ifidni %3,b
   175                              <2>  %assign size SIZE_BYTE
   175                              <2>  %elifidni %3,w
   175                              <2>  %assign size SIZE_SHORT
   175                              <2>  %else
   175                              <2>  %assign size SIZE_LONG
   175                              <2>  %endif
   175 0000BEE0 020101              <2>  db %%end-%%beg,%4,size
   175                              <2> %%name:
   175 0000BEE3 393820435744452000  <2>  db %1,' ',0
   175                              <2> %%beg:
   175 0000BEEC 98                  <2>  %2
   175 0000BEED C3                  <2>  ret
   175                              <2> %%end:
   176                              <1> 	defOp0   "99 CWD",cwd,w,TYPE_ARITH1                       ; 66 99
   176                              <2>  %ifidni %3,b
   176                              <2>  %assign size SIZE_BYTE
   176                              <2>  %elifidni %3,w
   176                              <2>  %assign size SIZE_SHORT
   176                              <2>  %else
   176                              <2>  %assign size SIZE_LONG
   176                              <2>  %endif
   176 0000BEEE 030101              <2>  db %%end-%%beg,%4,size
   176                              <2> %%name:
   176 0000BEF1 3939204357442000    <2>  db %1,' ',0
   176                              <2> %%beg:
   176 0000BEF9 6699                <2>  %2
   176 0000BEFB C3                  <2>  ret
   176                              <2> %%end:
   177                              <1> 	defOp0   "99 CDQ",cdq,d,TYPE_ARITH1                       ;    99
   177                              <2>  %ifidni %3,b
   177                              <2>  %assign size SIZE_BYTE
   177                              <2>  %elifidni %3,w
   177                              <2>  %assign size SIZE_SHORT
   177                              <2>  %else
   177                              <2>  %assign size SIZE_LONG
   177                              <2>  %endif
   177 0000BEFC 020102              <2>  db %%end-%%beg,%4,size
   177                              <2> %%name:
   177 0000BEFF 3939204344512000    <2>  db %1,' ',0
   177                              <2> %%beg:
   177 0000BF07 99                  <2>  %2
   177 0000BF08 C3                  <2>  ret
   177                              <2> %%end:
   178                              <1> 	defOp    "00 ADD",add,al,dl,none,TYPE_ARITH               ;    00 D0
   178                              <2>  %ifidni %3,al
   178                              <2>  %assign size SIZE_BYTE
   178                              <2>  %define msrc dl
   178                              <2>  %elifidni %3,dl
   178                              <2>  %assign size SIZE_BYTE
   178                              <2>  %elifidni %3,ax
   178                              <2>  %assign size SIZE_SHORT
   178                              <2>  %define msrc dx
   178                              <2>  %elifidni %3,dx
   178                              <2>  %assign size SIZE_SHORT
   178                              <2>  %else
   178                              <2>  %assign size SIZE_LONG
   178                              <2>  %define msrc edx
   178                              <2>  %endif
   178 0000BF09 030000              <2>  db %%end-%%beg,%6,size
   178                              <2> %%name:
   178 0000BF0C 3030204144442000    <2>  db %1,' ',0
   178                              <2> %%beg:
   178                              <2>  %ifidni %4,none
   178                              <2>  %2 %3
   178                              <2>  %elifidni %4,mem
   178                              <2>  mov [0], msrc
   178                              <2>  %2 %3,[0]
   178                              <2>  %elifidni %5,none
   178 0000BF14 00D0                <2>  %2 %3,%4
   178                              <2>  %else
   178                              <2>  %2 %3,%4,%5
   178                              <2>  %endif
   178 0000BF16 C3                  <2>  ret
   178                              <2> %%end:
   179                              <1> 	defOp    "01 ADD",add,ax,dx,none,TYPE_ARITH               ; 66 01 D0
   179                              <2>  %ifidni %3,al
   179                              <2>  %assign size SIZE_BYTE
   179                              <2>  %define msrc dl
   179                              <2>  %elifidni %3,dl
   179                              <2>  %assign size SIZE_BYTE
   179                              <2>  %elifidni %3,ax
   179                              <2>  %assign size SIZE_SHORT
   179                              <2>  %define msrc dx
   179                              <2>  %elifidni %3,dx
   179                              <2>  %assign size SIZE_SHORT
   179                              <2>  %else
   179                              <2>  %assign size SIZE_LONG
   179                              <2>  %define msrc edx
   179                              <2>  %endif
   179 0000BF17 040001              <2>  db %%end-%%beg,%6,size
   179                              <2> %%name:
   179 0000BF1A 3031204144442000    <2>  db %1,' ',0
   179                              <2> %%beg:
   179                              <2>  %ifidni %4,none
   179                              <2>  %2 %3
   179                              <2>  %elifidni %4,mem
   179                              <2>  mov [0], msrc
   179                              <2>  %2 %3,[0]
   179                              <2>  %elifidni %5,none
   179 0000BF22 6601D0              <2>  %2 %3,%4
   179                              <2>  %else
   179                              <2>  %2 %3,%4,%5
   179                              <2>  %endif
   179 0000BF25 C3                  <2>  ret
   179                              <2> %%end:
   180                              <1> 	defOp    "01 ADD",add,eax,edx,none,TYPE_ARITH             ;    01 D0
   180                              <2>  %ifidni %3,al
   180                              <2>  %assign size SIZE_BYTE
   180                              <2>  %define msrc dl
   180                              <2>  %elifidni %3,dl
   180                              <2>  %assign size SIZE_BYTE
   180                              <2>  %elifidni %3,ax
   180                              <2>  %assign size SIZE_SHORT
   180                              <2>  %define msrc dx
   180                              <2>  %elifidni %3,dx
   180                              <2>  %assign size SIZE_SHORT
   180                              <2>  %else
   180                              <2>  %assign size SIZE_LONG
   180                              <2>  %define msrc edx
   180                              <2>  %endif
   180 0000BF26 030002              <2>  db %%end-%%beg,%6,size
   180                              <2> %%name:
   180 0000BF29 3031204144442000    <2>  db %1,' ',0
   180                              <2> %%beg:
   180                              <2>  %ifidni %4,none
   180                              <2>  %2 %3
   180                              <2>  %elifidni %4,mem
   180                              <2>  mov [0], msrc
   180                              <2>  %2 %3,[0]
   180                              <2>  %elifidni %5,none
   180 0000BF31 01D0                <2>  %2 %3,%4
   180                              <2>  %else
   180                              <2>  %2 %3,%4,%5
   180                              <2>  %endif
   180 0000BF33 C3                  <2>  ret
   180                              <2> %%end:
   181                              <1> 	defOp    "04 ADD",add,al,0xFF,none,TYPE_ARITH1            ;    04 FF
   181                              <2>  %ifidni %3,al
   181                              <2>  %assign size SIZE_BYTE
   181                              <2>  %define msrc dl
   181                              <2>  %elifidni %3,dl
   181                              <2>  %assign size SIZE_BYTE
   181                              <2>  %elifidni %3,ax
   181                              <2>  %assign size SIZE_SHORT
   181                              <2>  %define msrc dx
   181                              <2>  %elifidni %3,dx
   181                              <2>  %assign size SIZE_SHORT
   181                              <2>  %else
   181                              <2>  %assign size SIZE_LONG
   181                              <2>  %define msrc edx
   181                              <2>  %endif
   181 0000BF34 030100              <2>  db %%end-%%beg,%6,size
   181                              <2> %%name:
   181 0000BF37 3034204144442000    <2>  db %1,' ',0
   181                              <2> %%beg:
   181                              <2>  %ifidni %4,none
   181                              <2>  %2 %3
   181                              <2>  %elifidni %4,mem
   181                              <2>  mov [0], msrc
   181                              <2>  %2 %3,[0]
   181                              <2>  %elifidni %5,none
   181 0000BF3F 04FF                <2>  %2 %3,%4
   181                              <2>  %else
   181                              <2>  %2 %3,%4,%5
   181                              <2>  %endif
   181 0000BF41 C3                  <2>  ret
   181                              <2> %%end:
   182                              <1> 	defOp    "05 ADD",add,ax,0x8002,none,TYPE_ARITH1          ; 66 05 0280
   182                              <2>  %ifidni %3,al
   182                              <2>  %assign size SIZE_BYTE
   182                              <2>  %define msrc dl
   182                              <2>  %elifidni %3,dl
   182                              <2>  %assign size SIZE_BYTE
   182                              <2>  %elifidni %3,ax
   182                              <2>  %assign size SIZE_SHORT
   182                              <2>  %define msrc dx
   182                              <2>  %elifidni %3,dx
   182                              <2>  %assign size SIZE_SHORT
   182                              <2>  %else
   182                              <2>  %assign size SIZE_LONG
   182                              <2>  %define msrc edx
   182                              <2>  %endif
   182 0000BF42 050101              <2>  db %%end-%%beg,%6,size
   182                              <2> %%name:
   182 0000BF45 3035204144442000    <2>  db %1,' ',0
   182                              <2> %%beg:
   182                              <2>  %ifidni %4,none
   182                              <2>  %2 %3
   182                              <2>  %elifidni %4,mem
   182                              <2>  mov [0], msrc
   182                              <2>  %2 %3,[0]
   182                              <2>  %elifidni %5,none
   182 0000BF4D 66050280            <2>  %2 %3,%4
   182                              <2>  %else
   182                              <2>  %2 %3,%4,%5
   182                              <2>  %endif
   182 0000BF51 C3                  <2>  ret
   182                              <2> %%end:
   183                              <1> 	defOp    "05 ADD",add,eax,0x80000002,none,TYPE_ARITH1     ;    05 02000080
   183                              <2>  %ifidni %3,al
   183                              <2>  %assign size SIZE_BYTE
   183                              <2>  %define msrc dl
   183                              <2>  %elifidni %3,dl
   183                              <2>  %assign size SIZE_BYTE
   183                              <2>  %elifidni %3,ax
   183                              <2>  %assign size SIZE_SHORT
   183                              <2>  %define msrc dx
   183                              <2>  %elifidni %3,dx
   183                              <2>  %assign size SIZE_SHORT
   183                              <2>  %else
   183                              <2>  %assign size SIZE_LONG
   183                              <2>  %define msrc edx
   183                              <2>  %endif
   183 0000BF52 060102              <2>  db %%end-%%beg,%6,size
   183                              <2> %%name:
   183 0000BF55 3035204144442000    <2>  db %1,' ',0
   183                              <2> %%beg:
   183                              <2>  %ifidni %4,none
   183                              <2>  %2 %3
   183                              <2>  %elifidni %4,mem
   183                              <2>  mov [0], msrc
   183                              <2>  %2 %3,[0]
   183                              <2>  %elifidni %5,none
   183 0000BF5D 0502000080          <2>  %2 %3,%4
   183                              <2>  %else
   183                              <2>  %2 %3,%4,%5
   183                              <2>  %endif
   183 0000BF62 C3                  <2>  ret
   183                              <2> %%end:
   184                              <1> 	defOp    "83 ADD",add,ax,byte 0xFF,none,TYPE_ARITH1       ; 66 83 C0 FF
   184                              <2>  %ifidni %3,al
   184                              <2>  %assign size SIZE_BYTE
   184                              <2>  %define msrc dl
   184                              <2>  %elifidni %3,dl
   184                              <2>  %assign size SIZE_BYTE
   184                              <2>  %elifidni %3,ax
   184                              <2>  %assign size SIZE_SHORT
   184                              <2>  %define msrc dx
   184                              <2>  %elifidni %3,dx
   184                              <2>  %assign size SIZE_SHORT
   184                              <2>  %else
   184                              <2>  %assign size SIZE_LONG
   184                              <2>  %define msrc edx
   184                              <2>  %endif
   184 0000BF63 050101              <2>  db %%end-%%beg,%6,size
   184                              <2> %%name:
   184 0000BF66 3833204144442000    <2>  db %1,' ',0
   184                              <2> %%beg:
   184                              <2>  %ifidni %4,none
   184                              <2>  %2 %3
   184                              <2>  %elifidni %4,mem
   184                              <2>  mov [0], msrc
   184                              <2>  %2 %3,[0]
   184                              <2>  %elifidni %5,none
   184 0000BF6E 6683C0FF            <2>  %2 %3,%4
   184          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   184                              <2>  %else
   184                              <2>  %2 %3,%4,%5
   184                              <2>  %endif
   184 0000BF72 C3                  <2>  ret
   184                              <2> %%end:
   185                              <1> 	defOp    "83 ADD",add,eax,byte 0xFF,none,TYPE_ARITH1      ;    83 C0 FF
   185                              <2>  %ifidni %3,al
   185                              <2>  %assign size SIZE_BYTE
   185                              <2>  %define msrc dl
   185                              <2>  %elifidni %3,dl
   185                              <2>  %assign size SIZE_BYTE
   185                              <2>  %elifidni %3,ax
   185                              <2>  %assign size SIZE_SHORT
   185                              <2>  %define msrc dx
   185                              <2>  %elifidni %3,dx
   185                              <2>  %assign size SIZE_SHORT
   185                              <2>  %else
   185                              <2>  %assign size SIZE_LONG
   185                              <2>  %define msrc edx
   185                              <2>  %endif
   185 0000BF73 040102              <2>  db %%end-%%beg,%6,size
   185                              <2> %%name:
   185 0000BF76 3833204144442000    <2>  db %1,' ',0
   185                              <2> %%beg:
   185                              <2>  %ifidni %4,none
   185                              <2>  %2 %3
   185                              <2>  %elifidni %4,mem
   185                              <2>  mov [0], msrc
   185                              <2>  %2 %3,[0]
   185                              <2>  %elifidni %5,none
   185 0000BF7E 83C0FF              <2>  %2 %3,%4
   185          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   185                              <2>  %else
   185                              <2>  %2 %3,%4,%5
   185                              <2>  %endif
   185 0000BF81 C3                  <2>  ret
   185                              <2> %%end:
   186                              <1> 	defOp    "80 ADD",add,dl,0xFF,none,TYPE_ARITH1D           ;    80 C2 FF
   186                              <2>  %ifidni %3,al
   186                              <2>  %assign size SIZE_BYTE
   186                              <2>  %define msrc dl
   186                              <2>  %elifidni %3,dl
   186                              <2>  %assign size SIZE_BYTE
   186                              <2>  %elifidni %3,ax
   186                              <2>  %assign size SIZE_SHORT
   186                              <2>  %define msrc dx
   186                              <2>  %elifidni %3,dx
   186                              <2>  %assign size SIZE_SHORT
   186                              <2>  %else
   186                              <2>  %assign size SIZE_LONG
   186                              <2>  %define msrc edx
   186                              <2>  %endif
   186 0000BF82 040200              <2>  db %%end-%%beg,%6,size
   186                              <2> %%name:
   186 0000BF85 3830204144442000    <2>  db %1,' ',0
   186                              <2> %%beg:
   186                              <2>  %ifidni %4,none
   186                              <2>  %2 %3
   186                              <2>  %elifidni %4,mem
   186                              <2>  mov [0], msrc
   186                              <2>  %2 %3,[0]
   186                              <2>  %elifidni %5,none
   186 0000BF8D 80C2FF              <2>  %2 %3,%4
   186                              <2>  %else
   186                              <2>  %2 %3,%4,%5
   186                              <2>  %endif
   186 0000BF90 C3                  <2>  ret
   186                              <2> %%end:
   187                              <1> 	defOp    "81 ADD",add,dx,0x8002,none,TYPE_ARITH1D         ; 66 81 C2 0280
   187                              <2>  %ifidni %3,al
   187                              <2>  %assign size SIZE_BYTE
   187                              <2>  %define msrc dl
   187                              <2>  %elifidni %3,dl
   187                              <2>  %assign size SIZE_BYTE
   187                              <2>  %elifidni %3,ax
   187                              <2>  %assign size SIZE_SHORT
   187                              <2>  %define msrc dx
   187                              <2>  %elifidni %3,dx
   187                              <2>  %assign size SIZE_SHORT
   187                              <2>  %else
   187                              <2>  %assign size SIZE_LONG
   187                              <2>  %define msrc edx
   187                              <2>  %endif
   187 0000BF91 060201              <2>  db %%end-%%beg,%6,size
   187                              <2> %%name:
   187 0000BF94 3831204144442000    <2>  db %1,' ',0
   187                              <2> %%beg:
   187                              <2>  %ifidni %4,none
   187                              <2>  %2 %3
   187                              <2>  %elifidni %4,mem
   187                              <2>  mov [0], msrc
   187                              <2>  %2 %3,[0]
   187                              <2>  %elifidni %5,none
   187 0000BF9C 6681C20280          <2>  %2 %3,%4
   187                              <2>  %else
   187                              <2>  %2 %3,%4,%5
   187                              <2>  %endif
   187 0000BFA1 C3                  <2>  ret
   187                              <2> %%end:
   188                              <1> 	defOp    "81 ADD",add,edx,0x80000002,none,TYPE_ARITH1D    ;    81 C2 02000080
   188                              <2>  %ifidni %3,al
   188                              <2>  %assign size SIZE_BYTE
   188                              <2>  %define msrc dl
   188                              <2>  %elifidni %3,dl
   188                              <2>  %assign size SIZE_BYTE
   188                              <2>  %elifidni %3,ax
   188                              <2>  %assign size SIZE_SHORT
   188                              <2>  %define msrc dx
   188                              <2>  %elifidni %3,dx
   188                              <2>  %assign size SIZE_SHORT
   188                              <2>  %else
   188                              <2>  %assign size SIZE_LONG
   188                              <2>  %define msrc edx
   188                              <2>  %endif
   188 0000BFA2 070202              <2>  db %%end-%%beg,%6,size
   188                              <2> %%name:
   188 0000BFA5 3831204144442000    <2>  db %1,' ',0
   188                              <2> %%beg:
   188                              <2>  %ifidni %4,none
   188                              <2>  %2 %3
   188                              <2>  %elifidni %4,mem
   188                              <2>  mov [0], msrc
   188                              <2>  %2 %3,[0]
   188                              <2>  %elifidni %5,none
   188 0000BFAD 81C202000080        <2>  %2 %3,%4
   188                              <2>  %else
   188                              <2>  %2 %3,%4,%5
   188                              <2>  %endif
   188 0000BFB3 C3                  <2>  ret
   188                              <2> %%end:
   189                              <1> 	defOp    "02 ADD",add,al,mem,none,TYPE_ARITH              ;    02 05 00000000
   189                              <2>  %ifidni %3,al
   189                              <2>  %assign size SIZE_BYTE
   189                              <2>  %define msrc dl
   189                              <2>  %elifidni %3,dl
   189                              <2>  %assign size SIZE_BYTE
   189                              <2>  %elifidni %3,ax
   189                              <2>  %assign size SIZE_SHORT
   189                              <2>  %define msrc dx
   189                              <2>  %elifidni %3,dx
   189                              <2>  %assign size SIZE_SHORT
   189                              <2>  %else
   189                              <2>  %assign size SIZE_LONG
   189                              <2>  %define msrc edx
   189                              <2>  %endif
   189 0000BFB4 0D0000              <2>  db %%end-%%beg,%6,size
   189                              <2> %%name:
   189 0000BFB7 3032204144442000    <2>  db %1,' ',0
   189                              <2> %%beg:
   189                              <2>  %ifidni %4,none
   189                              <2>  %2 %3
   189                              <2>  %elifidni %4,mem
   189 0000BFBF 881500000000        <2>  mov [0], msrc
   189 0000BFC5 020500000000        <2>  %2 %3,[0]
   189                              <2>  %elifidni %5,none
   189                              <2>  %2 %3,%4
   189                              <2>  %else
   189                              <2>  %2 %3,%4,%5
   189                              <2>  %endif
   189 0000BFCB C3                  <2>  ret
   189                              <2> %%end:
   190                              <1> 	defOp    "03 ADD",add,ax,mem,none,TYPE_ARITH              ; 66 03 05 00000000
   190                              <2>  %ifidni %3,al
   190                              <2>  %assign size SIZE_BYTE
   190                              <2>  %define msrc dl
   190                              <2>  %elifidni %3,dl
   190                              <2>  %assign size SIZE_BYTE
   190                              <2>  %elifidni %3,ax
   190                              <2>  %assign size SIZE_SHORT
   190                              <2>  %define msrc dx
   190                              <2>  %elifidni %3,dx
   190                              <2>  %assign size SIZE_SHORT
   190                              <2>  %else
   190                              <2>  %assign size SIZE_LONG
   190                              <2>  %define msrc edx
   190                              <2>  %endif
   190 0000BFCC 0F0001              <2>  db %%end-%%beg,%6,size
   190                              <2> %%name:
   190 0000BFCF 3033204144442000    <2>  db %1,' ',0
   190                              <2> %%beg:
   190                              <2>  %ifidni %4,none
   190                              <2>  %2 %3
   190                              <2>  %elifidni %4,mem
   190 0000BFD7 66891500000000      <2>  mov [0], msrc
   190 0000BFDE 66030500000000      <2>  %2 %3,[0]
   190                              <2>  %elifidni %5,none
   190                              <2>  %2 %3,%4
   190                              <2>  %else
   190                              <2>  %2 %3,%4,%5
   190                              <2>  %endif
   190 0000BFE5 C3                  <2>  ret
   190                              <2> %%end:
   191                              <1> 	defOp    "03 ADD",add,eax,mem,none,TYPE_ARITH             ;    03 05 00000000
   191                              <2>  %ifidni %3,al
   191                              <2>  %assign size SIZE_BYTE
   191                              <2>  %define msrc dl
   191                              <2>  %elifidni %3,dl
   191                              <2>  %assign size SIZE_BYTE
   191                              <2>  %elifidni %3,ax
   191                              <2>  %assign size SIZE_SHORT
   191                              <2>  %define msrc dx
   191                              <2>  %elifidni %3,dx
   191                              <2>  %assign size SIZE_SHORT
   191                              <2>  %else
   191                              <2>  %assign size SIZE_LONG
   191                              <2>  %define msrc edx
   191                              <2>  %endif
   191 0000BFE6 0D0002              <2>  db %%end-%%beg,%6,size
   191                              <2> %%name:
   191 0000BFE9 3033204144442000    <2>  db %1,' ',0
   191                              <2> %%beg:
   191                              <2>  %ifidni %4,none
   191                              <2>  %2 %3
   191                              <2>  %elifidni %4,mem
   191 0000BFF1 891500000000        <2>  mov [0], msrc
   191 0000BFF7 030500000000        <2>  %2 %3,[0]
   191                              <2>  %elifidni %5,none
   191                              <2>  %2 %3,%4
   191                              <2>  %else
   191                              <2>  %2 %3,%4,%5
   191                              <2>  %endif
   191 0000BFFD C3                  <2>  ret
   191                              <2> %%end:
   192                              <1> 	defOp    "08 OR",or,al,dl,none,TYPE_LOGIC                 ;    08 D0
   192                              <2>  %ifidni %3,al
   192                              <2>  %assign size SIZE_BYTE
   192                              <2>  %define msrc dl
   192                              <2>  %elifidni %3,dl
   192                              <2>  %assign size SIZE_BYTE
   192                              <2>  %elifidni %3,ax
   192                              <2>  %assign size SIZE_SHORT
   192                              <2>  %define msrc dx
   192                              <2>  %elifidni %3,dx
   192                              <2>  %assign size SIZE_SHORT
   192                              <2>  %else
   192                              <2>  %assign size SIZE_LONG
   192                              <2>  %define msrc edx
   192                              <2>  %endif
   192 0000BFFE 030300              <2>  db %%end-%%beg,%6,size
   192                              <2> %%name:
   192 0000C001 3038204F522000      <2>  db %1,' ',0
   192                              <2> %%beg:
   192                              <2>  %ifidni %4,none
   192                              <2>  %2 %3
   192                              <2>  %elifidni %4,mem
   192                              <2>  mov [0], msrc
   192                              <2>  %2 %3,[0]
   192                              <2>  %elifidni %5,none
   192 0000C008 08D0                <2>  %2 %3,%4
   192                              <2>  %else
   192                              <2>  %2 %3,%4,%5
   192                              <2>  %endif
   192 0000C00A C3                  <2>  ret
   192                              <2> %%end:
   193                              <1> 	defOp    "09 OR",or,ax,dx,none,TYPE_LOGIC                 ; 66 09 D0
   193                              <2>  %ifidni %3,al
   193                              <2>  %assign size SIZE_BYTE
   193                              <2>  %define msrc dl
   193                              <2>  %elifidni %3,dl
   193                              <2>  %assign size SIZE_BYTE
   193                              <2>  %elifidni %3,ax
   193                              <2>  %assign size SIZE_SHORT
   193                              <2>  %define msrc dx
   193                              <2>  %elifidni %3,dx
   193                              <2>  %assign size SIZE_SHORT
   193                              <2>  %else
   193                              <2>  %assign size SIZE_LONG
   193                              <2>  %define msrc edx
   193                              <2>  %endif
   193 0000C00B 040301              <2>  db %%end-%%beg,%6,size
   193                              <2> %%name:
   193 0000C00E 3039204F522000      <2>  db %1,' ',0
   193                              <2> %%beg:
   193                              <2>  %ifidni %4,none
   193                              <2>  %2 %3
   193                              <2>  %elifidni %4,mem
   193                              <2>  mov [0], msrc
   193                              <2>  %2 %3,[0]
   193                              <2>  %elifidni %5,none
   193 0000C015 6609D0              <2>  %2 %3,%4
   193                              <2>  %else
   193                              <2>  %2 %3,%4,%5
   193                              <2>  %endif
   193 0000C018 C3                  <2>  ret
   193                              <2> %%end:
   194                              <1> 	defOp    "09 OR",or,eax,edx,none,TYPE_LOGIC               ;    09 D0
   194                              <2>  %ifidni %3,al
   194                              <2>  %assign size SIZE_BYTE
   194                              <2>  %define msrc dl
   194                              <2>  %elifidni %3,dl
   194                              <2>  %assign size SIZE_BYTE
   194                              <2>  %elifidni %3,ax
   194                              <2>  %assign size SIZE_SHORT
   194                              <2>  %define msrc dx
   194                              <2>  %elifidni %3,dx
   194                              <2>  %assign size SIZE_SHORT
   194                              <2>  %else
   194                              <2>  %assign size SIZE_LONG
   194                              <2>  %define msrc edx
   194                              <2>  %endif
   194 0000C019 030302              <2>  db %%end-%%beg,%6,size
   194                              <2> %%name:
   194 0000C01C 3039204F522000      <2>  db %1,' ',0
   194                              <2> %%beg:
   194                              <2>  %ifidni %4,none
   194                              <2>  %2 %3
   194                              <2>  %elifidni %4,mem
   194                              <2>  mov [0], msrc
   194                              <2>  %2 %3,[0]
   194                              <2>  %elifidni %5,none
   194 0000C023 09D0                <2>  %2 %3,%4
   194                              <2>  %else
   194                              <2>  %2 %3,%4,%5
   194                              <2>  %endif
   194 0000C025 C3                  <2>  ret
   194                              <2> %%end:
   195                              <1> 	defOp    "0C OR",or,al,0xAA,none,TYPE_LOGIC1              ;    0C AA
   195                              <2>  %ifidni %3,al
   195                              <2>  %assign size SIZE_BYTE
   195                              <2>  %define msrc dl
   195                              <2>  %elifidni %3,dl
   195                              <2>  %assign size SIZE_BYTE
   195                              <2>  %elifidni %3,ax
   195                              <2>  %assign size SIZE_SHORT
   195                              <2>  %define msrc dx
   195                              <2>  %elifidni %3,dx
   195                              <2>  %assign size SIZE_SHORT
   195                              <2>  %else
   195                              <2>  %assign size SIZE_LONG
   195                              <2>  %define msrc edx
   195                              <2>  %endif
   195 0000C026 030400              <2>  db %%end-%%beg,%6,size
   195                              <2> %%name:
   195 0000C029 3043204F522000      <2>  db %1,' ',0
   195                              <2> %%beg:
   195                              <2>  %ifidni %4,none
   195                              <2>  %2 %3
   195                              <2>  %elifidni %4,mem
   195                              <2>  mov [0], msrc
   195                              <2>  %2 %3,[0]
   195                              <2>  %elifidni %5,none
   195 0000C030 0CAA                <2>  %2 %3,%4
   195                              <2>  %else
   195                              <2>  %2 %3,%4,%5
   195                              <2>  %endif
   195 0000C032 C3                  <2>  ret
   195                              <2> %%end:
   196                              <1> 	defOp    "0D OR",or,ax,0xAAAA,none,TYPE_LOGIC1            ; 66 0D AAAA
   196                              <2>  %ifidni %3,al
   196                              <2>  %assign size SIZE_BYTE
   196                              <2>  %define msrc dl
   196                              <2>  %elifidni %3,dl
   196                              <2>  %assign size SIZE_BYTE
   196                              <2>  %elifidni %3,ax
   196                              <2>  %assign size SIZE_SHORT
   196                              <2>  %define msrc dx
   196                              <2>  %elifidni %3,dx
   196                              <2>  %assign size SIZE_SHORT
   196                              <2>  %else
   196                              <2>  %assign size SIZE_LONG
   196                              <2>  %define msrc edx
   196                              <2>  %endif
   196 0000C033 050401              <2>  db %%end-%%beg,%6,size
   196                              <2> %%name:
   196 0000C036 3044204F522000      <2>  db %1,' ',0
   196                              <2> %%beg:
   196                              <2>  %ifidni %4,none
   196                              <2>  %2 %3
   196                              <2>  %elifidni %4,mem
   196                              <2>  mov [0], msrc
   196                              <2>  %2 %3,[0]
   196                              <2>  %elifidni %5,none
   196 0000C03D 660DAAAA            <2>  %2 %3,%4
   196                              <2>  %else
   196                              <2>  %2 %3,%4,%5
   196                              <2>  %endif
   196 0000C041 C3                  <2>  ret
   196                              <2> %%end:
   197                              <1> 	defOp    "0D OR",or,eax,0xAAAAAAAA,none,TYPE_LOGIC1       ;    0D AAAAAAAA
   197                              <2>  %ifidni %3,al
   197                              <2>  %assign size SIZE_BYTE
   197                              <2>  %define msrc dl
   197                              <2>  %elifidni %3,dl
   197                              <2>  %assign size SIZE_BYTE
   197                              <2>  %elifidni %3,ax
   197                              <2>  %assign size SIZE_SHORT
   197                              <2>  %define msrc dx
   197                              <2>  %elifidni %3,dx
   197                              <2>  %assign size SIZE_SHORT
   197                              <2>  %else
   197                              <2>  %assign size SIZE_LONG
   197                              <2>  %define msrc edx
   197                              <2>  %endif
   197 0000C042 060402              <2>  db %%end-%%beg,%6,size
   197                              <2> %%name:
   197 0000C045 3044204F522000      <2>  db %1,' ',0
   197                              <2> %%beg:
   197                              <2>  %ifidni %4,none
   197                              <2>  %2 %3
   197                              <2>  %elifidni %4,mem
   197                              <2>  mov [0], msrc
   197                              <2>  %2 %3,[0]
   197                              <2>  %elifidni %5,none
   197 0000C04C 0DAAAAAAAA          <2>  %2 %3,%4
   197                              <2>  %else
   197                              <2>  %2 %3,%4,%5
   197                              <2>  %endif
   197 0000C051 C3                  <2>  ret
   197                              <2> %%end:
   198                              <1> 	defOp    "83 OR",or,ax,byte 0xAA,none,TYPE_LOGIC1         ; 66 83 C8 AA
   198                              <2>  %ifidni %3,al
   198                              <2>  %assign size SIZE_BYTE
   198                              <2>  %define msrc dl
   198                              <2>  %elifidni %3,dl
   198                              <2>  %assign size SIZE_BYTE
   198                              <2>  %elifidni %3,ax
   198                              <2>  %assign size SIZE_SHORT
   198                              <2>  %define msrc dx
   198                              <2>  %elifidni %3,dx
   198                              <2>  %assign size SIZE_SHORT
   198                              <2>  %else
   198                              <2>  %assign size SIZE_LONG
   198                              <2>  %define msrc edx
   198                              <2>  %endif
   198 0000C052 050401              <2>  db %%end-%%beg,%6,size
   198                              <2> %%name:
   198 0000C055 3833204F522000      <2>  db %1,' ',0
   198                              <2> %%beg:
   198                              <2>  %ifidni %4,none
   198                              <2>  %2 %3
   198                              <2>  %elifidni %4,mem
   198                              <2>  mov [0], msrc
   198                              <2>  %2 %3,[0]
   198                              <2>  %elifidni %5,none
   198 0000C05C 6683C8AA            <2>  %2 %3,%4
   198          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   198                              <2>  %else
   198                              <2>  %2 %3,%4,%5
   198                              <2>  %endif
   198 0000C060 C3                  <2>  ret
   198                              <2> %%end:
   199                              <1> 	defOp    "83 OR",or,eax,byte 0xAA,none,TYPE_LOGIC1        ;    83 C8 AA
   199                              <2>  %ifidni %3,al
   199                              <2>  %assign size SIZE_BYTE
   199                              <2>  %define msrc dl
   199                              <2>  %elifidni %3,dl
   199                              <2>  %assign size SIZE_BYTE
   199                              <2>  %elifidni %3,ax
   199                              <2>  %assign size SIZE_SHORT
   199                              <2>  %define msrc dx
   199                              <2>  %elifidni %3,dx
   199                              <2>  %assign size SIZE_SHORT
   199                              <2>  %else
   199                              <2>  %assign size SIZE_LONG
   199                              <2>  %define msrc edx
   199                              <2>  %endif
   199 0000C061 040402              <2>  db %%end-%%beg,%6,size
   199                              <2> %%name:
   199 0000C064 3833204F522000      <2>  db %1,' ',0
   199                              <2> %%beg:
   199                              <2>  %ifidni %4,none
   199                              <2>  %2 %3
   199                              <2>  %elifidni %4,mem
   199                              <2>  mov [0], msrc
   199                              <2>  %2 %3,[0]
   199                              <2>  %elifidni %5,none
   199 0000C06B 83C8AA              <2>  %2 %3,%4
   199          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   199                              <2>  %else
   199                              <2>  %2 %3,%4,%5
   199                              <2>  %endif
   199 0000C06E C3                  <2>  ret
   199                              <2> %%end:
   200                              <1> 	defOp    "80 OR",or,dl,0xAA,none,TYPE_LOGIC1D             ;    80 CA AA
   200                              <2>  %ifidni %3,al
   200                              <2>  %assign size SIZE_BYTE
   200                              <2>  %define msrc dl
   200                              <2>  %elifidni %3,dl
   200                              <2>  %assign size SIZE_BYTE
   200                              <2>  %elifidni %3,ax
   200                              <2>  %assign size SIZE_SHORT
   200                              <2>  %define msrc dx
   200                              <2>  %elifidni %3,dx
   200                              <2>  %assign size SIZE_SHORT
   200                              <2>  %else
   200                              <2>  %assign size SIZE_LONG
   200                              <2>  %define msrc edx
   200                              <2>  %endif
   200 0000C06F 040500              <2>  db %%end-%%beg,%6,size
   200                              <2> %%name:
   200 0000C072 3830204F522000      <2>  db %1,' ',0
   200                              <2> %%beg:
   200                              <2>  %ifidni %4,none
   200                              <2>  %2 %3
   200                              <2>  %elifidni %4,mem
   200                              <2>  mov [0], msrc
   200                              <2>  %2 %3,[0]
   200                              <2>  %elifidni %5,none
   200 0000C079 80CAAA              <2>  %2 %3,%4
   200                              <2>  %else
   200                              <2>  %2 %3,%4,%5
   200                              <2>  %endif
   200 0000C07C C3                  <2>  ret
   200                              <2> %%end:
   201                              <1> 	defOp    "81 OR",or,dx,0xAAAA,none,TYPE_LOGIC1D           ; 66 81 CA AAAA
   201                              <2>  %ifidni %3,al
   201                              <2>  %assign size SIZE_BYTE
   201                              <2>  %define msrc dl
   201                              <2>  %elifidni %3,dl
   201                              <2>  %assign size SIZE_BYTE
   201                              <2>  %elifidni %3,ax
   201                              <2>  %assign size SIZE_SHORT
   201                              <2>  %define msrc dx
   201                              <2>  %elifidni %3,dx
   201                              <2>  %assign size SIZE_SHORT
   201                              <2>  %else
   201                              <2>  %assign size SIZE_LONG
   201                              <2>  %define msrc edx
   201                              <2>  %endif
   201 0000C07D 060501              <2>  db %%end-%%beg,%6,size
   201                              <2> %%name:
   201 0000C080 3831204F522000      <2>  db %1,' ',0
   201                              <2> %%beg:
   201                              <2>  %ifidni %4,none
   201                              <2>  %2 %3
   201                              <2>  %elifidni %4,mem
   201                              <2>  mov [0], msrc
   201                              <2>  %2 %3,[0]
   201                              <2>  %elifidni %5,none
   201 0000C087 6681CAAAAA          <2>  %2 %3,%4
   201                              <2>  %else
   201                              <2>  %2 %3,%4,%5
   201                              <2>  %endif
   201 0000C08C C3                  <2>  ret
   201                              <2> %%end:
   202                              <1> 	defOp    "81 OR",or,edx,0xAAAAAAAA,none,TYPE_LOGIC1D      ;    81 CA AAAAAAAA
   202                              <2>  %ifidni %3,al
   202                              <2>  %assign size SIZE_BYTE
   202                              <2>  %define msrc dl
   202                              <2>  %elifidni %3,dl
   202                              <2>  %assign size SIZE_BYTE
   202                              <2>  %elifidni %3,ax
   202                              <2>  %assign size SIZE_SHORT
   202                              <2>  %define msrc dx
   202                              <2>  %elifidni %3,dx
   202                              <2>  %assign size SIZE_SHORT
   202                              <2>  %else
   202                              <2>  %assign size SIZE_LONG
   202                              <2>  %define msrc edx
   202                              <2>  %endif
   202 0000C08D 070502              <2>  db %%end-%%beg,%6,size
   202                              <2> %%name:
   202 0000C090 3831204F522000      <2>  db %1,' ',0
   202                              <2> %%beg:
   202                              <2>  %ifidni %4,none
   202                              <2>  %2 %3
   202                              <2>  %elifidni %4,mem
   202                              <2>  mov [0], msrc
   202                              <2>  %2 %3,[0]
   202                              <2>  %elifidni %5,none
   202 0000C097 81CAAAAAAAAA        <2>  %2 %3,%4
   202                              <2>  %else
   202                              <2>  %2 %3,%4,%5
   202                              <2>  %endif
   202 0000C09D C3                  <2>  ret
   202                              <2> %%end:
   203                              <1> 	defOp    "0A OR",or,al,mem,none,TYPE_LOGIC                ;    0A 05 00000000
   203                              <2>  %ifidni %3,al
   203                              <2>  %assign size SIZE_BYTE
   203                              <2>  %define msrc dl
   203                              <2>  %elifidni %3,dl
   203                              <2>  %assign size SIZE_BYTE
   203                              <2>  %elifidni %3,ax
   203                              <2>  %assign size SIZE_SHORT
   203                              <2>  %define msrc dx
   203                              <2>  %elifidni %3,dx
   203                              <2>  %assign size SIZE_SHORT
   203                              <2>  %else
   203                              <2>  %assign size SIZE_LONG
   203                              <2>  %define msrc edx
   203                              <2>  %endif
   203 0000C09E 0D0300              <2>  db %%end-%%beg,%6,size
   203                              <2> %%name:
   203 0000C0A1 3041204F522000      <2>  db %1,' ',0
   203                              <2> %%beg:
   203                              <2>  %ifidni %4,none
   203                              <2>  %2 %3
   203                              <2>  %elifidni %4,mem
   203 0000C0A8 881500000000        <2>  mov [0], msrc
   203 0000C0AE 0A0500000000        <2>  %2 %3,[0]
   203                              <2>  %elifidni %5,none
   203                              <2>  %2 %3,%4
   203                              <2>  %else
   203                              <2>  %2 %3,%4,%5
   203                              <2>  %endif
   203 0000C0B4 C3                  <2>  ret
   203                              <2> %%end:
   204                              <1> 	defOp    "0B OR",or,ax,mem,none,TYPE_LOGIC                ; 66 0B 05 00000000
   204                              <2>  %ifidni %3,al
   204                              <2>  %assign size SIZE_BYTE
   204                              <2>  %define msrc dl
   204                              <2>  %elifidni %3,dl
   204                              <2>  %assign size SIZE_BYTE
   204                              <2>  %elifidni %3,ax
   204                              <2>  %assign size SIZE_SHORT
   204                              <2>  %define msrc dx
   204                              <2>  %elifidni %3,dx
   204                              <2>  %assign size SIZE_SHORT
   204                              <2>  %else
   204                              <2>  %assign size SIZE_LONG
   204                              <2>  %define msrc edx
   204                              <2>  %endif
   204 0000C0B5 0F0301              <2>  db %%end-%%beg,%6,size
   204                              <2> %%name:
   204 0000C0B8 3042204F522000      <2>  db %1,' ',0
   204                              <2> %%beg:
   204                              <2>  %ifidni %4,none
   204                              <2>  %2 %3
   204                              <2>  %elifidni %4,mem
   204 0000C0BF 66891500000000      <2>  mov [0], msrc
   204 0000C0C6 660B0500000000      <2>  %2 %3,[0]
   204                              <2>  %elifidni %5,none
   204                              <2>  %2 %3,%4
   204                              <2>  %else
   204                              <2>  %2 %3,%4,%5
   204                              <2>  %endif
   204 0000C0CD C3                  <2>  ret
   204                              <2> %%end:
   205                              <1> 	defOp    "0B OR",or,eax,mem,none,TYPE_LOGIC               ;    0B 05 00000000
   205                              <2>  %ifidni %3,al
   205                              <2>  %assign size SIZE_BYTE
   205                              <2>  %define msrc dl
   205                              <2>  %elifidni %3,dl
   205                              <2>  %assign size SIZE_BYTE
   205                              <2>  %elifidni %3,ax
   205                              <2>  %assign size SIZE_SHORT
   205                              <2>  %define msrc dx
   205                              <2>  %elifidni %3,dx
   205                              <2>  %assign size SIZE_SHORT
   205                              <2>  %else
   205                              <2>  %assign size SIZE_LONG
   205                              <2>  %define msrc edx
   205                              <2>  %endif
   205 0000C0CE 0D0302              <2>  db %%end-%%beg,%6,size
   205                              <2> %%name:
   205 0000C0D1 3042204F522000      <2>  db %1,' ',0
   205                              <2> %%beg:
   205                              <2>  %ifidni %4,none
   205                              <2>  %2 %3
   205                              <2>  %elifidni %4,mem
   205 0000C0D8 891500000000        <2>  mov [0], msrc
   205 0000C0DE 0B0500000000        <2>  %2 %3,[0]
   205                              <2>  %elifidni %5,none
   205                              <2>  %2 %3,%4
   205                              <2>  %else
   205                              <2>  %2 %3,%4,%5
   205                              <2>  %endif
   205 0000C0E4 C3                  <2>  ret
   205                              <2> %%end:
   206                              <1> 	defOp    "10 ADC",adc,al,dl,none,TYPE_ARITH               ;    10 D0
   206                              <2>  %ifidni %3,al
   206                              <2>  %assign size SIZE_BYTE
   206                              <2>  %define msrc dl
   206                              <2>  %elifidni %3,dl
   206                              <2>  %assign size SIZE_BYTE
   206                              <2>  %elifidni %3,ax
   206                              <2>  %assign size SIZE_SHORT
   206                              <2>  %define msrc dx
   206                              <2>  %elifidni %3,dx
   206                              <2>  %assign size SIZE_SHORT
   206                              <2>  %else
   206                              <2>  %assign size SIZE_LONG
   206                              <2>  %define msrc edx
   206                              <2>  %endif
   206 0000C0E5 030000              <2>  db %%end-%%beg,%6,size
   206                              <2> %%name:
   206 0000C0E8 3130204144432000    <2>  db %1,' ',0
   206                              <2> %%beg:
   206                              <2>  %ifidni %4,none
   206                              <2>  %2 %3
   206                              <2>  %elifidni %4,mem
   206                              <2>  mov [0], msrc
   206                              <2>  %2 %3,[0]
   206                              <2>  %elifidni %5,none
   206 0000C0F0 10D0                <2>  %2 %3,%4
   206                              <2>  %else
   206                              <2>  %2 %3,%4,%5
   206                              <2>  %endif
   206 0000C0F2 C3                  <2>  ret
   206                              <2> %%end:
   207                              <1> 	defOp    "11 ADC",adc,ax,dx,none,TYPE_ARITH               ; 66 11 D0
   207                              <2>  %ifidni %3,al
   207                              <2>  %assign size SIZE_BYTE
   207                              <2>  %define msrc dl
   207                              <2>  %elifidni %3,dl
   207                              <2>  %assign size SIZE_BYTE
   207                              <2>  %elifidni %3,ax
   207                              <2>  %assign size SIZE_SHORT
   207                              <2>  %define msrc dx
   207                              <2>  %elifidni %3,dx
   207                              <2>  %assign size SIZE_SHORT
   207                              <2>  %else
   207                              <2>  %assign size SIZE_LONG
   207                              <2>  %define msrc edx
   207                              <2>  %endif
   207 0000C0F3 040001              <2>  db %%end-%%beg,%6,size
   207                              <2> %%name:
   207 0000C0F6 3131204144432000    <2>  db %1,' ',0
   207                              <2> %%beg:
   207                              <2>  %ifidni %4,none
   207                              <2>  %2 %3
   207                              <2>  %elifidni %4,mem
   207                              <2>  mov [0], msrc
   207                              <2>  %2 %3,[0]
   207                              <2>  %elifidni %5,none
   207 0000C0FE 6611D0              <2>  %2 %3,%4
   207                              <2>  %else
   207                              <2>  %2 %3,%4,%5
   207                              <2>  %endif
   207 0000C101 C3                  <2>  ret
   207                              <2> %%end:
   208                              <1> 	defOp    "11 ADC",adc,eax,edx,none,TYPE_ARITH             ;    11 D0
   208                              <2>  %ifidni %3,al
   208                              <2>  %assign size SIZE_BYTE
   208                              <2>  %define msrc dl
   208                              <2>  %elifidni %3,dl
   208                              <2>  %assign size SIZE_BYTE
   208                              <2>  %elifidni %3,ax
   208                              <2>  %assign size SIZE_SHORT
   208                              <2>  %define msrc dx
   208                              <2>  %elifidni %3,dx
   208                              <2>  %assign size SIZE_SHORT
   208                              <2>  %else
   208                              <2>  %assign size SIZE_LONG
   208                              <2>  %define msrc edx
   208                              <2>  %endif
   208 0000C102 030002              <2>  db %%end-%%beg,%6,size
   208                              <2> %%name:
   208 0000C105 3131204144432000    <2>  db %1,' ',0
   208                              <2> %%beg:
   208                              <2>  %ifidni %4,none
   208                              <2>  %2 %3
   208                              <2>  %elifidni %4,mem
   208                              <2>  mov [0], msrc
   208                              <2>  %2 %3,[0]
   208                              <2>  %elifidni %5,none
   208 0000C10D 11D0                <2>  %2 %3,%4
   208                              <2>  %else
   208                              <2>  %2 %3,%4,%5
   208                              <2>  %endif
   208 0000C10F C3                  <2>  ret
   208                              <2> %%end:
   209                              <1> 	defOp    "14 ADC",adc,al,0xFF,none,TYPE_ARITH1            ;    14 FF
   209                              <2>  %ifidni %3,al
   209                              <2>  %assign size SIZE_BYTE
   209                              <2>  %define msrc dl
   209                              <2>  %elifidni %3,dl
   209                              <2>  %assign size SIZE_BYTE
   209                              <2>  %elifidni %3,ax
   209                              <2>  %assign size SIZE_SHORT
   209                              <2>  %define msrc dx
   209                              <2>  %elifidni %3,dx
   209                              <2>  %assign size SIZE_SHORT
   209                              <2>  %else
   209                              <2>  %assign size SIZE_LONG
   209                              <2>  %define msrc edx
   209                              <2>  %endif
   209 0000C110 030100              <2>  db %%end-%%beg,%6,size
   209                              <2> %%name:
   209 0000C113 3134204144432000    <2>  db %1,' ',0
   209                              <2> %%beg:
   209                              <2>  %ifidni %4,none
   209                              <2>  %2 %3
   209                              <2>  %elifidni %4,mem
   209                              <2>  mov [0], msrc
   209                              <2>  %2 %3,[0]
   209                              <2>  %elifidni %5,none
   209 0000C11B 14FF                <2>  %2 %3,%4
   209                              <2>  %else
   209                              <2>  %2 %3,%4,%5
   209                              <2>  %endif
   209 0000C11D C3                  <2>  ret
   209                              <2> %%end:
   210                              <1> 	defOp    "15 ADC",adc,ax,0x8002,none,TYPE_ARITH1          ; 66 15 0280
   210                              <2>  %ifidni %3,al
   210                              <2>  %assign size SIZE_BYTE
   210                              <2>  %define msrc dl
   210                              <2>  %elifidni %3,dl
   210                              <2>  %assign size SIZE_BYTE
   210                              <2>  %elifidni %3,ax
   210                              <2>  %assign size SIZE_SHORT
   210                              <2>  %define msrc dx
   210                              <2>  %elifidni %3,dx
   210                              <2>  %assign size SIZE_SHORT
   210                              <2>  %else
   210                              <2>  %assign size SIZE_LONG
   210                              <2>  %define msrc edx
   210                              <2>  %endif
   210 0000C11E 050101              <2>  db %%end-%%beg,%6,size
   210                              <2> %%name:
   210 0000C121 3135204144432000    <2>  db %1,' ',0
   210                              <2> %%beg:
   210                              <2>  %ifidni %4,none
   210                              <2>  %2 %3
   210                              <2>  %elifidni %4,mem
   210                              <2>  mov [0], msrc
   210                              <2>  %2 %3,[0]
   210                              <2>  %elifidni %5,none
   210 0000C129 66150280            <2>  %2 %3,%4
   210                              <2>  %else
   210                              <2>  %2 %3,%4,%5
   210                              <2>  %endif
   210 0000C12D C3                  <2>  ret
   210                              <2> %%end:
   211                              <1> 	defOp    "15 ADC",adc,eax,0x80000002,none,TYPE_ARITH1     ;    15 02000080
   211                              <2>  %ifidni %3,al
   211                              <2>  %assign size SIZE_BYTE
   211                              <2>  %define msrc dl
   211                              <2>  %elifidni %3,dl
   211                              <2>  %assign size SIZE_BYTE
   211                              <2>  %elifidni %3,ax
   211                              <2>  %assign size SIZE_SHORT
   211                              <2>  %define msrc dx
   211                              <2>  %elifidni %3,dx
   211                              <2>  %assign size SIZE_SHORT
   211                              <2>  %else
   211                              <2>  %assign size SIZE_LONG
   211                              <2>  %define msrc edx
   211                              <2>  %endif
   211 0000C12E 060102              <2>  db %%end-%%beg,%6,size
   211                              <2> %%name:
   211 0000C131 3135204144432000    <2>  db %1,' ',0
   211                              <2> %%beg:
   211                              <2>  %ifidni %4,none
   211                              <2>  %2 %3
   211                              <2>  %elifidni %4,mem
   211                              <2>  mov [0], msrc
   211                              <2>  %2 %3,[0]
   211                              <2>  %elifidni %5,none
   211 0000C139 1502000080          <2>  %2 %3,%4
   211                              <2>  %else
   211                              <2>  %2 %3,%4,%5
   211                              <2>  %endif
   211 0000C13E C3                  <2>  ret
   211                              <2> %%end:
   212                              <1> 	defOp    "83 ADC",adc,ax,byte 0xFF,none,TYPE_ARITH1       ; 66 83 D0 FF
   212                              <2>  %ifidni %3,al
   212                              <2>  %assign size SIZE_BYTE
   212                              <2>  %define msrc dl
   212                              <2>  %elifidni %3,dl
   212                              <2>  %assign size SIZE_BYTE
   212                              <2>  %elifidni %3,ax
   212                              <2>  %assign size SIZE_SHORT
   212                              <2>  %define msrc dx
   212                              <2>  %elifidni %3,dx
   212                              <2>  %assign size SIZE_SHORT
   212                              <2>  %else
   212                              <2>  %assign size SIZE_LONG
   212                              <2>  %define msrc edx
   212                              <2>  %endif
   212 0000C13F 050101              <2>  db %%end-%%beg,%6,size
   212                              <2> %%name:
   212 0000C142 3833204144432000    <2>  db %1,' ',0
   212                              <2> %%beg:
   212                              <2>  %ifidni %4,none
   212                              <2>  %2 %3
   212                              <2>  %elifidni %4,mem
   212                              <2>  mov [0], msrc
   212                              <2>  %2 %3,[0]
   212                              <2>  %elifidni %5,none
   212 0000C14A 6683D0FF            <2>  %2 %3,%4
   212          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   212                              <2>  %else
   212                              <2>  %2 %3,%4,%5
   212                              <2>  %endif
   212 0000C14E C3                  <2>  ret
   212                              <2> %%end:
   213                              <1> 	defOp    "83 ADC",adc,eax,byte 0xFF,none,TYPE_ARITH1      ;    83 D0 FF
   213                              <2>  %ifidni %3,al
   213                              <2>  %assign size SIZE_BYTE
   213                              <2>  %define msrc dl
   213                              <2>  %elifidni %3,dl
   213                              <2>  %assign size SIZE_BYTE
   213                              <2>  %elifidni %3,ax
   213                              <2>  %assign size SIZE_SHORT
   213                              <2>  %define msrc dx
   213                              <2>  %elifidni %3,dx
   213                              <2>  %assign size SIZE_SHORT
   213                              <2>  %else
   213                              <2>  %assign size SIZE_LONG
   213                              <2>  %define msrc edx
   213                              <2>  %endif
   213 0000C14F 040102              <2>  db %%end-%%beg,%6,size
   213                              <2> %%name:
   213 0000C152 3833204144432000    <2>  db %1,' ',0
   213                              <2> %%beg:
   213                              <2>  %ifidni %4,none
   213                              <2>  %2 %3
   213                              <2>  %elifidni %4,mem
   213                              <2>  mov [0], msrc
   213                              <2>  %2 %3,[0]
   213                              <2>  %elifidni %5,none
   213 0000C15A 83D0FF              <2>  %2 %3,%4
   213          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   213                              <2>  %else
   213                              <2>  %2 %3,%4,%5
   213                              <2>  %endif
   213 0000C15D C3                  <2>  ret
   213                              <2> %%end:
   214                              <1> 	defOp    "80 ADC",adc,dl,0xFF,none,TYPE_ARITH1D           ;    80 D2 FF
   214                              <2>  %ifidni %3,al
   214                              <2>  %assign size SIZE_BYTE
   214                              <2>  %define msrc dl
   214                              <2>  %elifidni %3,dl
   214                              <2>  %assign size SIZE_BYTE
   214                              <2>  %elifidni %3,ax
   214                              <2>  %assign size SIZE_SHORT
   214                              <2>  %define msrc dx
   214                              <2>  %elifidni %3,dx
   214                              <2>  %assign size SIZE_SHORT
   214                              <2>  %else
   214                              <2>  %assign size SIZE_LONG
   214                              <2>  %define msrc edx
   214                              <2>  %endif
   214 0000C15E 040200              <2>  db %%end-%%beg,%6,size
   214                              <2> %%name:
   214 0000C161 3830204144432000    <2>  db %1,' ',0
   214                              <2> %%beg:
   214                              <2>  %ifidni %4,none
   214                              <2>  %2 %3
   214                              <2>  %elifidni %4,mem
   214                              <2>  mov [0], msrc
   214                              <2>  %2 %3,[0]
   214                              <2>  %elifidni %5,none
   214 0000C169 80D2FF              <2>  %2 %3,%4
   214                              <2>  %else
   214                              <2>  %2 %3,%4,%5
   214                              <2>  %endif
   214 0000C16C C3                  <2>  ret
   214                              <2> %%end:
   215                              <1> 	defOp    "81 ADC",adc,dx,0x8002,none,TYPE_ARITH1D         ; 66 81 D2 0280
   215                              <2>  %ifidni %3,al
   215                              <2>  %assign size SIZE_BYTE
   215                              <2>  %define msrc dl
   215                              <2>  %elifidni %3,dl
   215                              <2>  %assign size SIZE_BYTE
   215                              <2>  %elifidni %3,ax
   215                              <2>  %assign size SIZE_SHORT
   215                              <2>  %define msrc dx
   215                              <2>  %elifidni %3,dx
   215                              <2>  %assign size SIZE_SHORT
   215                              <2>  %else
   215                              <2>  %assign size SIZE_LONG
   215                              <2>  %define msrc edx
   215                              <2>  %endif
   215 0000C16D 060201              <2>  db %%end-%%beg,%6,size
   215                              <2> %%name:
   215 0000C170 3831204144432000    <2>  db %1,' ',0
   215                              <2> %%beg:
   215                              <2>  %ifidni %4,none
   215                              <2>  %2 %3
   215                              <2>  %elifidni %4,mem
   215                              <2>  mov [0], msrc
   215                              <2>  %2 %3,[0]
   215                              <2>  %elifidni %5,none
   215 0000C178 6681D20280          <2>  %2 %3,%4
   215                              <2>  %else
   215                              <2>  %2 %3,%4,%5
   215                              <2>  %endif
   215 0000C17D C3                  <2>  ret
   215                              <2> %%end:
   216                              <1> 	defOp    "81 ADC",adc,edx,0x80000002,none,TYPE_ARITH1D    ;    81 D2 02000080
   216                              <2>  %ifidni %3,al
   216                              <2>  %assign size SIZE_BYTE
   216                              <2>  %define msrc dl
   216                              <2>  %elifidni %3,dl
   216                              <2>  %assign size SIZE_BYTE
   216                              <2>  %elifidni %3,ax
   216                              <2>  %assign size SIZE_SHORT
   216                              <2>  %define msrc dx
   216                              <2>  %elifidni %3,dx
   216                              <2>  %assign size SIZE_SHORT
   216                              <2>  %else
   216                              <2>  %assign size SIZE_LONG
   216                              <2>  %define msrc edx
   216                              <2>  %endif
   216 0000C17E 070202              <2>  db %%end-%%beg,%6,size
   216                              <2> %%name:
   216 0000C181 3831204144432000    <2>  db %1,' ',0
   216                              <2> %%beg:
   216                              <2>  %ifidni %4,none
   216                              <2>  %2 %3
   216                              <2>  %elifidni %4,mem
   216                              <2>  mov [0], msrc
   216                              <2>  %2 %3,[0]
   216                              <2>  %elifidni %5,none
   216 0000C189 81D202000080        <2>  %2 %3,%4
   216                              <2>  %else
   216                              <2>  %2 %3,%4,%5
   216                              <2>  %endif
   216 0000C18F C3                  <2>  ret
   216                              <2> %%end:
   217                              <1> 	defOp    "12 ADC",adc,al,mem,none,TYPE_ARITH              ;    12 05 00000000
   217                              <2>  %ifidni %3,al
   217                              <2>  %assign size SIZE_BYTE
   217                              <2>  %define msrc dl
   217                              <2>  %elifidni %3,dl
   217                              <2>  %assign size SIZE_BYTE
   217                              <2>  %elifidni %3,ax
   217                              <2>  %assign size SIZE_SHORT
   217                              <2>  %define msrc dx
   217                              <2>  %elifidni %3,dx
   217                              <2>  %assign size SIZE_SHORT
   217                              <2>  %else
   217                              <2>  %assign size SIZE_LONG
   217                              <2>  %define msrc edx
   217                              <2>  %endif
   217 0000C190 0D0000              <2>  db %%end-%%beg,%6,size
   217                              <2> %%name:
   217 0000C193 3132204144432000    <2>  db %1,' ',0
   217                              <2> %%beg:
   217                              <2>  %ifidni %4,none
   217                              <2>  %2 %3
   217                              <2>  %elifidni %4,mem
   217 0000C19B 881500000000        <2>  mov [0], msrc
   217 0000C1A1 120500000000        <2>  %2 %3,[0]
   217                              <2>  %elifidni %5,none
   217                              <2>  %2 %3,%4
   217                              <2>  %else
   217                              <2>  %2 %3,%4,%5
   217                              <2>  %endif
   217 0000C1A7 C3                  <2>  ret
   217                              <2> %%end:
   218                              <1> 	defOp    "13 ADC",adc,ax,mem,none,TYPE_ARITH              ; 66 13 05 00000000
   218                              <2>  %ifidni %3,al
   218                              <2>  %assign size SIZE_BYTE
   218                              <2>  %define msrc dl
   218                              <2>  %elifidni %3,dl
   218                              <2>  %assign size SIZE_BYTE
   218                              <2>  %elifidni %3,ax
   218                              <2>  %assign size SIZE_SHORT
   218                              <2>  %define msrc dx
   218                              <2>  %elifidni %3,dx
   218                              <2>  %assign size SIZE_SHORT
   218                              <2>  %else
   218                              <2>  %assign size SIZE_LONG
   218                              <2>  %define msrc edx
   218                              <2>  %endif
   218 0000C1A8 0F0001              <2>  db %%end-%%beg,%6,size
   218                              <2> %%name:
   218 0000C1AB 3133204144432000    <2>  db %1,' ',0
   218                              <2> %%beg:
   218                              <2>  %ifidni %4,none
   218                              <2>  %2 %3
   218                              <2>  %elifidni %4,mem
   218 0000C1B3 66891500000000      <2>  mov [0], msrc
   218 0000C1BA 66130500000000      <2>  %2 %3,[0]
   218                              <2>  %elifidni %5,none
   218                              <2>  %2 %3,%4
   218                              <2>  %else
   218                              <2>  %2 %3,%4,%5
   218                              <2>  %endif
   218 0000C1C1 C3                  <2>  ret
   218                              <2> %%end:
   219                              <1> 	defOp    "13 ADC",adc,eax,mem,none,TYPE_ARITH             ;    13 05 00000000
   219                              <2>  %ifidni %3,al
   219                              <2>  %assign size SIZE_BYTE
   219                              <2>  %define msrc dl
   219                              <2>  %elifidni %3,dl
   219                              <2>  %assign size SIZE_BYTE
   219                              <2>  %elifidni %3,ax
   219                              <2>  %assign size SIZE_SHORT
   219                              <2>  %define msrc dx
   219                              <2>  %elifidni %3,dx
   219                              <2>  %assign size SIZE_SHORT
   219                              <2>  %else
   219                              <2>  %assign size SIZE_LONG
   219                              <2>  %define msrc edx
   219                              <2>  %endif
   219 0000C1C2 0D0002              <2>  db %%end-%%beg,%6,size
   219                              <2> %%name:
   219 0000C1C5 3133204144432000    <2>  db %1,' ',0
   219                              <2> %%beg:
   219                              <2>  %ifidni %4,none
   219                              <2>  %2 %3
   219                              <2>  %elifidni %4,mem
   219 0000C1CD 891500000000        <2>  mov [0], msrc
   219 0000C1D3 130500000000        <2>  %2 %3,[0]
   219                              <2>  %elifidni %5,none
   219                              <2>  %2 %3,%4
   219                              <2>  %else
   219                              <2>  %2 %3,%4,%5
   219                              <2>  %endif
   219 0000C1D9 C3                  <2>  ret
   219                              <2> %%end:
   220                              <1> 	defOp    "18 SBB",sbb,al,dl,none,TYPE_ARITH               ;    18 D0
   220                              <2>  %ifidni %3,al
   220                              <2>  %assign size SIZE_BYTE
   220                              <2>  %define msrc dl
   220                              <2>  %elifidni %3,dl
   220                              <2>  %assign size SIZE_BYTE
   220                              <2>  %elifidni %3,ax
   220                              <2>  %assign size SIZE_SHORT
   220                              <2>  %define msrc dx
   220                              <2>  %elifidni %3,dx
   220                              <2>  %assign size SIZE_SHORT
   220                              <2>  %else
   220                              <2>  %assign size SIZE_LONG
   220                              <2>  %define msrc edx
   220                              <2>  %endif
   220 0000C1DA 030000              <2>  db %%end-%%beg,%6,size
   220                              <2> %%name:
   220 0000C1DD 3138205342422000    <2>  db %1,' ',0
   220                              <2> %%beg:
   220                              <2>  %ifidni %4,none
   220                              <2>  %2 %3
   220                              <2>  %elifidni %4,mem
   220                              <2>  mov [0], msrc
   220                              <2>  %2 %3,[0]
   220                              <2>  %elifidni %5,none
   220 0000C1E5 18D0                <2>  %2 %3,%4
   220                              <2>  %else
   220                              <2>  %2 %3,%4,%5
   220                              <2>  %endif
   220 0000C1E7 C3                  <2>  ret
   220                              <2> %%end:
   221                              <1> 	defOp    "19 SBB",sbb,ax,dx,none,TYPE_ARITH               ; 66 19 D0
   221                              <2>  %ifidni %3,al
   221                              <2>  %assign size SIZE_BYTE
   221                              <2>  %define msrc dl
   221                              <2>  %elifidni %3,dl
   221                              <2>  %assign size SIZE_BYTE
   221                              <2>  %elifidni %3,ax
   221                              <2>  %assign size SIZE_SHORT
   221                              <2>  %define msrc dx
   221                              <2>  %elifidni %3,dx
   221                              <2>  %assign size SIZE_SHORT
   221                              <2>  %else
   221                              <2>  %assign size SIZE_LONG
   221                              <2>  %define msrc edx
   221                              <2>  %endif
   221 0000C1E8 040001              <2>  db %%end-%%beg,%6,size
   221                              <2> %%name:
   221 0000C1EB 3139205342422000    <2>  db %1,' ',0
   221                              <2> %%beg:
   221                              <2>  %ifidni %4,none
   221                              <2>  %2 %3
   221                              <2>  %elifidni %4,mem
   221                              <2>  mov [0], msrc
   221                              <2>  %2 %3,[0]
   221                              <2>  %elifidni %5,none
   221 0000C1F3 6619D0              <2>  %2 %3,%4
   221                              <2>  %else
   221                              <2>  %2 %3,%4,%5
   221                              <2>  %endif
   221 0000C1F6 C3                  <2>  ret
   221                              <2> %%end:
   222                              <1> 	defOp    "19 SBB",sbb,eax,edx,none,TYPE_ARITH             ;    19 D0
   222                              <2>  %ifidni %3,al
   222                              <2>  %assign size SIZE_BYTE
   222                              <2>  %define msrc dl
   222                              <2>  %elifidni %3,dl
   222                              <2>  %assign size SIZE_BYTE
   222                              <2>  %elifidni %3,ax
   222                              <2>  %assign size SIZE_SHORT
   222                              <2>  %define msrc dx
   222                              <2>  %elifidni %3,dx
   222                              <2>  %assign size SIZE_SHORT
   222                              <2>  %else
   222                              <2>  %assign size SIZE_LONG
   222                              <2>  %define msrc edx
   222                              <2>  %endif
   222 0000C1F7 030002              <2>  db %%end-%%beg,%6,size
   222                              <2> %%name:
   222 0000C1FA 3139205342422000    <2>  db %1,' ',0
   222                              <2> %%beg:
   222                              <2>  %ifidni %4,none
   222                              <2>  %2 %3
   222                              <2>  %elifidni %4,mem
   222                              <2>  mov [0], msrc
   222                              <2>  %2 %3,[0]
   222                              <2>  %elifidni %5,none
   222 0000C202 19D0                <2>  %2 %3,%4
   222                              <2>  %else
   222                              <2>  %2 %3,%4,%5
   222                              <2>  %endif
   222 0000C204 C3                  <2>  ret
   222                              <2> %%end:
   223                              <1> 	defOp    "1C SBB",sbb,al,0xFF,none,TYPE_ARITH1            ;    1C FF
   223                              <2>  %ifidni %3,al
   223                              <2>  %assign size SIZE_BYTE
   223                              <2>  %define msrc dl
   223                              <2>  %elifidni %3,dl
   223                              <2>  %assign size SIZE_BYTE
   223                              <2>  %elifidni %3,ax
   223                              <2>  %assign size SIZE_SHORT
   223                              <2>  %define msrc dx
   223                              <2>  %elifidni %3,dx
   223                              <2>  %assign size SIZE_SHORT
   223                              <2>  %else
   223                              <2>  %assign size SIZE_LONG
   223                              <2>  %define msrc edx
   223                              <2>  %endif
   223 0000C205 030100              <2>  db %%end-%%beg,%6,size
   223                              <2> %%name:
   223 0000C208 3143205342422000    <2>  db %1,' ',0
   223                              <2> %%beg:
   223                              <2>  %ifidni %4,none
   223                              <2>  %2 %3
   223                              <2>  %elifidni %4,mem
   223                              <2>  mov [0], msrc
   223                              <2>  %2 %3,[0]
   223                              <2>  %elifidni %5,none
   223 0000C210 1CFF                <2>  %2 %3,%4
   223                              <2>  %else
   223                              <2>  %2 %3,%4,%5
   223                              <2>  %endif
   223 0000C212 C3                  <2>  ret
   223                              <2> %%end:
   224                              <1> 	defOp    "1D SBB",sbb,ax,0x8000,none,TYPE_ARITH1          ; 66 1D 0080
   224                              <2>  %ifidni %3,al
   224                              <2>  %assign size SIZE_BYTE
   224                              <2>  %define msrc dl
   224                              <2>  %elifidni %3,dl
   224                              <2>  %assign size SIZE_BYTE
   224                              <2>  %elifidni %3,ax
   224                              <2>  %assign size SIZE_SHORT
   224                              <2>  %define msrc dx
   224                              <2>  %elifidni %3,dx
   224                              <2>  %assign size SIZE_SHORT
   224                              <2>  %else
   224                              <2>  %assign size SIZE_LONG
   224                              <2>  %define msrc edx
   224                              <2>  %endif
   224 0000C213 050101              <2>  db %%end-%%beg,%6,size
   224                              <2> %%name:
   224 0000C216 3144205342422000    <2>  db %1,' ',0
   224                              <2> %%beg:
   224                              <2>  %ifidni %4,none
   224                              <2>  %2 %3
   224                              <2>  %elifidni %4,mem
   224                              <2>  mov [0], msrc
   224                              <2>  %2 %3,[0]
   224                              <2>  %elifidni %5,none
   224 0000C21E 661D0080            <2>  %2 %3,%4
   224                              <2>  %else
   224                              <2>  %2 %3,%4,%5
   224                              <2>  %endif
   224 0000C222 C3                  <2>  ret
   224                              <2> %%end:
   225                              <1> 	defOp    "1D SBB",sbb,eax,0x80000000,none,TYPE_ARITH1     ;    1D 00000080
   225                              <2>  %ifidni %3,al
   225                              <2>  %assign size SIZE_BYTE
   225                              <2>  %define msrc dl
   225                              <2>  %elifidni %3,dl
   225                              <2>  %assign size SIZE_BYTE
   225                              <2>  %elifidni %3,ax
   225                              <2>  %assign size SIZE_SHORT
   225                              <2>  %define msrc dx
   225                              <2>  %elifidni %3,dx
   225                              <2>  %assign size SIZE_SHORT
   225                              <2>  %else
   225                              <2>  %assign size SIZE_LONG
   225                              <2>  %define msrc edx
   225                              <2>  %endif
   225 0000C223 060102              <2>  db %%end-%%beg,%6,size
   225                              <2> %%name:
   225 0000C226 3144205342422000    <2>  db %1,' ',0
   225                              <2> %%beg:
   225                              <2>  %ifidni %4,none
   225                              <2>  %2 %3
   225                              <2>  %elifidni %4,mem
   225                              <2>  mov [0], msrc
   225                              <2>  %2 %3,[0]
   225                              <2>  %elifidni %5,none
   225 0000C22E 1D00000080          <2>  %2 %3,%4
   225                              <2>  %else
   225                              <2>  %2 %3,%4,%5
   225                              <2>  %endif
   225 0000C233 C3                  <2>  ret
   225                              <2> %%end:
   226                              <1> 	defOp    "83 SBB",sbb,ax,byte 0xFF,none,TYPE_ARITH1       ; 66 83 D8 FF
   226                              <2>  %ifidni %3,al
   226                              <2>  %assign size SIZE_BYTE
   226                              <2>  %define msrc dl
   226                              <2>  %elifidni %3,dl
   226                              <2>  %assign size SIZE_BYTE
   226                              <2>  %elifidni %3,ax
   226                              <2>  %assign size SIZE_SHORT
   226                              <2>  %define msrc dx
   226                              <2>  %elifidni %3,dx
   226                              <2>  %assign size SIZE_SHORT
   226                              <2>  %else
   226                              <2>  %assign size SIZE_LONG
   226                              <2>  %define msrc edx
   226                              <2>  %endif
   226 0000C234 050101              <2>  db %%end-%%beg,%6,size
   226                              <2> %%name:
   226 0000C237 3833205342422000    <2>  db %1,' ',0
   226                              <2> %%beg:
   226                              <2>  %ifidni %4,none
   226                              <2>  %2 %3
   226                              <2>  %elifidni %4,mem
   226                              <2>  mov [0], msrc
   226                              <2>  %2 %3,[0]
   226                              <2>  %elifidni %5,none
   226 0000C23F 6683D8FF            <2>  %2 %3,%4
   226          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   226                              <2>  %else
   226                              <2>  %2 %3,%4,%5
   226                              <2>  %endif
   226 0000C243 C3                  <2>  ret
   226                              <2> %%end:
   227                              <1> 	defOp    "83 SBB",sbb,eax,byte 0xFF,none,TYPE_ARITH1      ;    83 D8 FF
   227                              <2>  %ifidni %3,al
   227                              <2>  %assign size SIZE_BYTE
   227                              <2>  %define msrc dl
   227                              <2>  %elifidni %3,dl
   227                              <2>  %assign size SIZE_BYTE
   227                              <2>  %elifidni %3,ax
   227                              <2>  %assign size SIZE_SHORT
   227                              <2>  %define msrc dx
   227                              <2>  %elifidni %3,dx
   227                              <2>  %assign size SIZE_SHORT
   227                              <2>  %else
   227                              <2>  %assign size SIZE_LONG
   227                              <2>  %define msrc edx
   227                              <2>  %endif
   227 0000C244 040102              <2>  db %%end-%%beg,%6,size
   227                              <2> %%name:
   227 0000C247 3833205342422000    <2>  db %1,' ',0
   227                              <2> %%beg:
   227                              <2>  %ifidni %4,none
   227                              <2>  %2 %3
   227                              <2>  %elifidni %4,mem
   227                              <2>  mov [0], msrc
   227                              <2>  %2 %3,[0]
   227                              <2>  %elifidni %5,none
   227 0000C24F 83D8FF              <2>  %2 %3,%4
   227          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   227                              <2>  %else
   227                              <2>  %2 %3,%4,%5
   227                              <2>  %endif
   227 0000C252 C3                  <2>  ret
   227                              <2> %%end:
   228                              <1> 	defOp    "80 SBB",sbb,dl,0xFF,none,TYPE_ARITH1D           ;    80 DA FF
   228                              <2>  %ifidni %3,al
   228                              <2>  %assign size SIZE_BYTE
   228                              <2>  %define msrc dl
   228                              <2>  %elifidni %3,dl
   228                              <2>  %assign size SIZE_BYTE
   228                              <2>  %elifidni %3,ax
   228                              <2>  %assign size SIZE_SHORT
   228                              <2>  %define msrc dx
   228                              <2>  %elifidni %3,dx
   228                              <2>  %assign size SIZE_SHORT
   228                              <2>  %else
   228                              <2>  %assign size SIZE_LONG
   228                              <2>  %define msrc edx
   228                              <2>  %endif
   228 0000C253 040200              <2>  db %%end-%%beg,%6,size
   228                              <2> %%name:
   228 0000C256 3830205342422000    <2>  db %1,' ',0
   228                              <2> %%beg:
   228                              <2>  %ifidni %4,none
   228                              <2>  %2 %3
   228                              <2>  %elifidni %4,mem
   228                              <2>  mov [0], msrc
   228                              <2>  %2 %3,[0]
   228                              <2>  %elifidni %5,none
   228 0000C25E 80DAFF              <2>  %2 %3,%4
   228                              <2>  %else
   228                              <2>  %2 %3,%4,%5
   228                              <2>  %endif
   228 0000C261 C3                  <2>  ret
   228                              <2> %%end:
   229                              <1> 	defOp    "81 SBB",sbb,dx,0x8000,none,TYPE_ARITH1D         ; 66 81 DA 0080
   229                              <2>  %ifidni %3,al
   229                              <2>  %assign size SIZE_BYTE
   229                              <2>  %define msrc dl
   229                              <2>  %elifidni %3,dl
   229                              <2>  %assign size SIZE_BYTE
   229                              <2>  %elifidni %3,ax
   229                              <2>  %assign size SIZE_SHORT
   229                              <2>  %define msrc dx
   229                              <2>  %elifidni %3,dx
   229                              <2>  %assign size SIZE_SHORT
   229                              <2>  %else
   229                              <2>  %assign size SIZE_LONG
   229                              <2>  %define msrc edx
   229                              <2>  %endif
   229 0000C262 060201              <2>  db %%end-%%beg,%6,size
   229                              <2> %%name:
   229 0000C265 3831205342422000    <2>  db %1,' ',0
   229                              <2> %%beg:
   229                              <2>  %ifidni %4,none
   229                              <2>  %2 %3
   229                              <2>  %elifidni %4,mem
   229                              <2>  mov [0], msrc
   229                              <2>  %2 %3,[0]
   229                              <2>  %elifidni %5,none
   229 0000C26D 6681DA0080          <2>  %2 %3,%4
   229                              <2>  %else
   229                              <2>  %2 %3,%4,%5
   229                              <2>  %endif
   229 0000C272 C3                  <2>  ret
   229                              <2> %%end:
   230                              <1> 	defOp    "81 SBB",sbb,edx,0x80000000,none,TYPE_ARITH1D    ;    81 DA 00000080
   230                              <2>  %ifidni %3,al
   230                              <2>  %assign size SIZE_BYTE
   230                              <2>  %define msrc dl
   230                              <2>  %elifidni %3,dl
   230                              <2>  %assign size SIZE_BYTE
   230                              <2>  %elifidni %3,ax
   230                              <2>  %assign size SIZE_SHORT
   230                              <2>  %define msrc dx
   230                              <2>  %elifidni %3,dx
   230                              <2>  %assign size SIZE_SHORT
   230                              <2>  %else
   230                              <2>  %assign size SIZE_LONG
   230                              <2>  %define msrc edx
   230                              <2>  %endif
   230 0000C273 070202              <2>  db %%end-%%beg,%6,size
   230                              <2> %%name:
   230 0000C276 3831205342422000    <2>  db %1,' ',0
   230                              <2> %%beg:
   230                              <2>  %ifidni %4,none
   230                              <2>  %2 %3
   230                              <2>  %elifidni %4,mem
   230                              <2>  mov [0], msrc
   230                              <2>  %2 %3,[0]
   230                              <2>  %elifidni %5,none
   230 0000C27E 81DA00000080        <2>  %2 %3,%4
   230                              <2>  %else
   230                              <2>  %2 %3,%4,%5
   230                              <2>  %endif
   230 0000C284 C3                  <2>  ret
   230                              <2> %%end:
   231                              <1> 	defOp    "1A SBB",sbb,al,mem,none,TYPE_ARITH              ;    1A 05 00000000
   231                              <2>  %ifidni %3,al
   231                              <2>  %assign size SIZE_BYTE
   231                              <2>  %define msrc dl
   231                              <2>  %elifidni %3,dl
   231                              <2>  %assign size SIZE_BYTE
   231                              <2>  %elifidni %3,ax
   231                              <2>  %assign size SIZE_SHORT
   231                              <2>  %define msrc dx
   231                              <2>  %elifidni %3,dx
   231                              <2>  %assign size SIZE_SHORT
   231                              <2>  %else
   231                              <2>  %assign size SIZE_LONG
   231                              <2>  %define msrc edx
   231                              <2>  %endif
   231 0000C285 0D0000              <2>  db %%end-%%beg,%6,size
   231                              <2> %%name:
   231 0000C288 3141205342422000    <2>  db %1,' ',0
   231                              <2> %%beg:
   231                              <2>  %ifidni %4,none
   231                              <2>  %2 %3
   231                              <2>  %elifidni %4,mem
   231 0000C290 881500000000        <2>  mov [0], msrc
   231 0000C296 1A0500000000        <2>  %2 %3,[0]
   231                              <2>  %elifidni %5,none
   231                              <2>  %2 %3,%4
   231                              <2>  %else
   231                              <2>  %2 %3,%4,%5
   231                              <2>  %endif
   231 0000C29C C3                  <2>  ret
   231                              <2> %%end:
   232                              <1> 	defOp    "1B SBB",sbb,ax,mem,none,TYPE_ARITH              ; 66 1B 05 00000000
   232                              <2>  %ifidni %3,al
   232                              <2>  %assign size SIZE_BYTE
   232                              <2>  %define msrc dl
   232                              <2>  %elifidni %3,dl
   232                              <2>  %assign size SIZE_BYTE
   232                              <2>  %elifidni %3,ax
   232                              <2>  %assign size SIZE_SHORT
   232                              <2>  %define msrc dx
   232                              <2>  %elifidni %3,dx
   232                              <2>  %assign size SIZE_SHORT
   232                              <2>  %else
   232                              <2>  %assign size SIZE_LONG
   232                              <2>  %define msrc edx
   232                              <2>  %endif
   232 0000C29D 0F0001              <2>  db %%end-%%beg,%6,size
   232                              <2> %%name:
   232 0000C2A0 3142205342422000    <2>  db %1,' ',0
   232                              <2> %%beg:
   232                              <2>  %ifidni %4,none
   232                              <2>  %2 %3
   232                              <2>  %elifidni %4,mem
   232 0000C2A8 66891500000000      <2>  mov [0], msrc
   232 0000C2AF 661B0500000000      <2>  %2 %3,[0]
   232                              <2>  %elifidni %5,none
   232                              <2>  %2 %3,%4
   232                              <2>  %else
   232                              <2>  %2 %3,%4,%5
   232                              <2>  %endif
   232 0000C2B6 C3                  <2>  ret
   232                              <2> %%end:
   233                              <1> 	defOp    "1B SBB",sbb,eax,mem,none,TYPE_ARITH             ;    1B 05 00000000
   233                              <2>  %ifidni %3,al
   233                              <2>  %assign size SIZE_BYTE
   233                              <2>  %define msrc dl
   233                              <2>  %elifidni %3,dl
   233                              <2>  %assign size SIZE_BYTE
   233                              <2>  %elifidni %3,ax
   233                              <2>  %assign size SIZE_SHORT
   233                              <2>  %define msrc dx
   233                              <2>  %elifidni %3,dx
   233                              <2>  %assign size SIZE_SHORT
   233                              <2>  %else
   233                              <2>  %assign size SIZE_LONG
   233                              <2>  %define msrc edx
   233                              <2>  %endif
   233 0000C2B7 0D0002              <2>  db %%end-%%beg,%6,size
   233                              <2> %%name:
   233 0000C2BA 3142205342422000    <2>  db %1,' ',0
   233                              <2> %%beg:
   233                              <2>  %ifidni %4,none
   233                              <2>  %2 %3
   233                              <2>  %elifidni %4,mem
   233 0000C2C2 891500000000        <2>  mov [0], msrc
   233 0000C2C8 1B0500000000        <2>  %2 %3,[0]
   233                              <2>  %elifidni %5,none
   233                              <2>  %2 %3,%4
   233                              <2>  %else
   233                              <2>  %2 %3,%4,%5
   233                              <2>  %endif
   233 0000C2CE C3                  <2>  ret
   233                              <2> %%end:
   234                              <1> 	defOp    "20 AND",and,al,dl,none,TYPE_LOGIC               ;    20 D0
   234                              <2>  %ifidni %3,al
   234                              <2>  %assign size SIZE_BYTE
   234                              <2>  %define msrc dl
   234                              <2>  %elifidni %3,dl
   234                              <2>  %assign size SIZE_BYTE
   234                              <2>  %elifidni %3,ax
   234                              <2>  %assign size SIZE_SHORT
   234                              <2>  %define msrc dx
   234                              <2>  %elifidni %3,dx
   234                              <2>  %assign size SIZE_SHORT
   234                              <2>  %else
   234                              <2>  %assign size SIZE_LONG
   234                              <2>  %define msrc edx
   234                              <2>  %endif
   234 0000C2CF 030300              <2>  db %%end-%%beg,%6,size
   234                              <2> %%name:
   234 0000C2D2 323020414E442000    <2>  db %1,' ',0
   234                              <2> %%beg:
   234                              <2>  %ifidni %4,none
   234                              <2>  %2 %3
   234                              <2>  %elifidni %4,mem
   234                              <2>  mov [0], msrc
   234                              <2>  %2 %3,[0]
   234                              <2>  %elifidni %5,none
   234 0000C2DA 20D0                <2>  %2 %3,%4
   234                              <2>  %else
   234                              <2>  %2 %3,%4,%5
   234                              <2>  %endif
   234 0000C2DC C3                  <2>  ret
   234                              <2> %%end:
   235                              <1> 	defOp    "21 AND",and,ax,dx,none,TYPE_LOGIC               ; 66 21 D0
   235                              <2>  %ifidni %3,al
   235                              <2>  %assign size SIZE_BYTE
   235                              <2>  %define msrc dl
   235                              <2>  %elifidni %3,dl
   235                              <2>  %assign size SIZE_BYTE
   235                              <2>  %elifidni %3,ax
   235                              <2>  %assign size SIZE_SHORT
   235                              <2>  %define msrc dx
   235                              <2>  %elifidni %3,dx
   235                              <2>  %assign size SIZE_SHORT
   235                              <2>  %else
   235                              <2>  %assign size SIZE_LONG
   235                              <2>  %define msrc edx
   235                              <2>  %endif
   235 0000C2DD 040301              <2>  db %%end-%%beg,%6,size
   235                              <2> %%name:
   235 0000C2E0 323120414E442000    <2>  db %1,' ',0
   235                              <2> %%beg:
   235                              <2>  %ifidni %4,none
   235                              <2>  %2 %3
   235                              <2>  %elifidni %4,mem
   235                              <2>  mov [0], msrc
   235                              <2>  %2 %3,[0]
   235                              <2>  %elifidni %5,none
   235 0000C2E8 6621D0              <2>  %2 %3,%4
   235                              <2>  %else
   235                              <2>  %2 %3,%4,%5
   235                              <2>  %endif
   235 0000C2EB C3                  <2>  ret
   235                              <2> %%end:
   236                              <1> 	defOp    "21 AND",and,eax,edx,none,TYPE_LOGIC             ;    21 D0
   236                              <2>  %ifidni %3,al
   236                              <2>  %assign size SIZE_BYTE
   236                              <2>  %define msrc dl
   236                              <2>  %elifidni %3,dl
   236                              <2>  %assign size SIZE_BYTE
   236                              <2>  %elifidni %3,ax
   236                              <2>  %assign size SIZE_SHORT
   236                              <2>  %define msrc dx
   236                              <2>  %elifidni %3,dx
   236                              <2>  %assign size SIZE_SHORT
   236                              <2>  %else
   236                              <2>  %assign size SIZE_LONG
   236                              <2>  %define msrc edx
   236                              <2>  %endif
   236 0000C2EC 030302              <2>  db %%end-%%beg,%6,size
   236                              <2> %%name:
   236 0000C2EF 323120414E442000    <2>  db %1,' ',0
   236                              <2> %%beg:
   236                              <2>  %ifidni %4,none
   236                              <2>  %2 %3
   236                              <2>  %elifidni %4,mem
   236                              <2>  mov [0], msrc
   236                              <2>  %2 %3,[0]
   236                              <2>  %elifidni %5,none
   236 0000C2F7 21D0                <2>  %2 %3,%4
   236                              <2>  %else
   236                              <2>  %2 %3,%4,%5
   236                              <2>  %endif
   236 0000C2F9 C3                  <2>  ret
   236                              <2> %%end:
   237                              <1> 	defOp    "24 AND",and,al,0xAA,none,TYPE_LOGIC1            ;    24 AA
   237                              <2>  %ifidni %3,al
   237                              <2>  %assign size SIZE_BYTE
   237                              <2>  %define msrc dl
   237                              <2>  %elifidni %3,dl
   237                              <2>  %assign size SIZE_BYTE
   237                              <2>  %elifidni %3,ax
   237                              <2>  %assign size SIZE_SHORT
   237                              <2>  %define msrc dx
   237                              <2>  %elifidni %3,dx
   237                              <2>  %assign size SIZE_SHORT
   237                              <2>  %else
   237                              <2>  %assign size SIZE_LONG
   237                              <2>  %define msrc edx
   237                              <2>  %endif
   237 0000C2FA 030400              <2>  db %%end-%%beg,%6,size
   237                              <2> %%name:
   237 0000C2FD 323420414E442000    <2>  db %1,' ',0
   237                              <2> %%beg:
   237                              <2>  %ifidni %4,none
   237                              <2>  %2 %3
   237                              <2>  %elifidni %4,mem
   237                              <2>  mov [0], msrc
   237                              <2>  %2 %3,[0]
   237                              <2>  %elifidni %5,none
   237 0000C305 24AA                <2>  %2 %3,%4
   237                              <2>  %else
   237                              <2>  %2 %3,%4,%5
   237                              <2>  %endif
   237 0000C307 C3                  <2>  ret
   237                              <2> %%end:
   238                              <1> 	defOp    "25 AND",and,ax,0xAAAA,none,TYPE_LOGIC1          ; 66 25 AAAA
   238                              <2>  %ifidni %3,al
   238                              <2>  %assign size SIZE_BYTE
   238                              <2>  %define msrc dl
   238                              <2>  %elifidni %3,dl
   238                              <2>  %assign size SIZE_BYTE
   238                              <2>  %elifidni %3,ax
   238                              <2>  %assign size SIZE_SHORT
   238                              <2>  %define msrc dx
   238                              <2>  %elifidni %3,dx
   238                              <2>  %assign size SIZE_SHORT
   238                              <2>  %else
   238                              <2>  %assign size SIZE_LONG
   238                              <2>  %define msrc edx
   238                              <2>  %endif
   238 0000C308 050401              <2>  db %%end-%%beg,%6,size
   238                              <2> %%name:
   238 0000C30B 323520414E442000    <2>  db %1,' ',0
   238                              <2> %%beg:
   238                              <2>  %ifidni %4,none
   238                              <2>  %2 %3
   238                              <2>  %elifidni %4,mem
   238                              <2>  mov [0], msrc
   238                              <2>  %2 %3,[0]
   238                              <2>  %elifidni %5,none
   238 0000C313 6625AAAA            <2>  %2 %3,%4
   238                              <2>  %else
   238                              <2>  %2 %3,%4,%5
   238                              <2>  %endif
   238 0000C317 C3                  <2>  ret
   238                              <2> %%end:
   239                              <1> 	defOp    "25 AND",and,eax,0xAAAAAAAA,none,TYPE_LOGIC1     ;    25 AAAAAAAA
   239                              <2>  %ifidni %3,al
   239                              <2>  %assign size SIZE_BYTE
   239                              <2>  %define msrc dl
   239                              <2>  %elifidni %3,dl
   239                              <2>  %assign size SIZE_BYTE
   239                              <2>  %elifidni %3,ax
   239                              <2>  %assign size SIZE_SHORT
   239                              <2>  %define msrc dx
   239                              <2>  %elifidni %3,dx
   239                              <2>  %assign size SIZE_SHORT
   239                              <2>  %else
   239                              <2>  %assign size SIZE_LONG
   239                              <2>  %define msrc edx
   239                              <2>  %endif
   239 0000C318 060402              <2>  db %%end-%%beg,%6,size
   239                              <2> %%name:
   239 0000C31B 323520414E442000    <2>  db %1,' ',0
   239                              <2> %%beg:
   239                              <2>  %ifidni %4,none
   239                              <2>  %2 %3
   239                              <2>  %elifidni %4,mem
   239                              <2>  mov [0], msrc
   239                              <2>  %2 %3,[0]
   239                              <2>  %elifidni %5,none
   239 0000C323 25AAAAAAAA          <2>  %2 %3,%4
   239                              <2>  %else
   239                              <2>  %2 %3,%4,%5
   239                              <2>  %endif
   239 0000C328 C3                  <2>  ret
   239                              <2> %%end:
   240                              <1> 	defOp    "83 AND",and,ax,byte 0xAA,none,TYPE_LOGIC1       ; 66 83 E0 AA
   240                              <2>  %ifidni %3,al
   240                              <2>  %assign size SIZE_BYTE
   240                              <2>  %define msrc dl
   240                              <2>  %elifidni %3,dl
   240                              <2>  %assign size SIZE_BYTE
   240                              <2>  %elifidni %3,ax
   240                              <2>  %assign size SIZE_SHORT
   240                              <2>  %define msrc dx
   240                              <2>  %elifidni %3,dx
   240                              <2>  %assign size SIZE_SHORT
   240                              <2>  %else
   240                              <2>  %assign size SIZE_LONG
   240                              <2>  %define msrc edx
   240                              <2>  %endif
   240 0000C329 050401              <2>  db %%end-%%beg,%6,size
   240                              <2> %%name:
   240 0000C32C 383320414E442000    <2>  db %1,' ',0
   240                              <2> %%beg:
   240                              <2>  %ifidni %4,none
   240                              <2>  %2 %3
   240                              <2>  %elifidni %4,mem
   240                              <2>  mov [0], msrc
   240                              <2>  %2 %3,[0]
   240                              <2>  %elifidni %5,none
   240 0000C334 6683E0AA            <2>  %2 %3,%4
   240          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   240                              <2>  %else
   240                              <2>  %2 %3,%4,%5
   240                              <2>  %endif
   240 0000C338 C3                  <2>  ret
   240                              <2> %%end:
   241                              <1> 	defOp    "83 AND",and,eax,byte 0xAA,none,TYPE_LOGIC1      ;    83 E0 AA
   241                              <2>  %ifidni %3,al
   241                              <2>  %assign size SIZE_BYTE
   241                              <2>  %define msrc dl
   241                              <2>  %elifidni %3,dl
   241                              <2>  %assign size SIZE_BYTE
   241                              <2>  %elifidni %3,ax
   241                              <2>  %assign size SIZE_SHORT
   241                              <2>  %define msrc dx
   241                              <2>  %elifidni %3,dx
   241                              <2>  %assign size SIZE_SHORT
   241                              <2>  %else
   241                              <2>  %assign size SIZE_LONG
   241                              <2>  %define msrc edx
   241                              <2>  %endif
   241 0000C339 040402              <2>  db %%end-%%beg,%6,size
   241                              <2> %%name:
   241 0000C33C 383320414E442000    <2>  db %1,' ',0
   241                              <2> %%beg:
   241                              <2>  %ifidni %4,none
   241                              <2>  %2 %3
   241                              <2>  %elifidni %4,mem
   241                              <2>  mov [0], msrc
   241                              <2>  %2 %3,[0]
   241                              <2>  %elifidni %5,none
   241 0000C344 83E0AA              <2>  %2 %3,%4
   241          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   241                              <2>  %else
   241                              <2>  %2 %3,%4,%5
   241                              <2>  %endif
   241 0000C347 C3                  <2>  ret
   241                              <2> %%end:
   242                              <1> 	defOp    "80 AND",and,dl,0xAA,none,TYPE_LOGIC1D           ;    80 E2 AA
   242                              <2>  %ifidni %3,al
   242                              <2>  %assign size SIZE_BYTE
   242                              <2>  %define msrc dl
   242                              <2>  %elifidni %3,dl
   242                              <2>  %assign size SIZE_BYTE
   242                              <2>  %elifidni %3,ax
   242                              <2>  %assign size SIZE_SHORT
   242                              <2>  %define msrc dx
   242                              <2>  %elifidni %3,dx
   242                              <2>  %assign size SIZE_SHORT
   242                              <2>  %else
   242                              <2>  %assign size SIZE_LONG
   242                              <2>  %define msrc edx
   242                              <2>  %endif
   242 0000C348 040500              <2>  db %%end-%%beg,%6,size
   242                              <2> %%name:
   242 0000C34B 383020414E442000    <2>  db %1,' ',0
   242                              <2> %%beg:
   242                              <2>  %ifidni %4,none
   242                              <2>  %2 %3
   242                              <2>  %elifidni %4,mem
   242                              <2>  mov [0], msrc
   242                              <2>  %2 %3,[0]
   242                              <2>  %elifidni %5,none
   242 0000C353 80E2AA              <2>  %2 %3,%4
   242                              <2>  %else
   242                              <2>  %2 %3,%4,%5
   242                              <2>  %endif
   242 0000C356 C3                  <2>  ret
   242                              <2> %%end:
   243                              <1> 	defOp    "81 AND",and,dx,0xAAAA,none,TYPE_LOGIC1D         ; 66 81 E2 AAAA
   243                              <2>  %ifidni %3,al
   243                              <2>  %assign size SIZE_BYTE
   243                              <2>  %define msrc dl
   243                              <2>  %elifidni %3,dl
   243                              <2>  %assign size SIZE_BYTE
   243                              <2>  %elifidni %3,ax
   243                              <2>  %assign size SIZE_SHORT
   243                              <2>  %define msrc dx
   243                              <2>  %elifidni %3,dx
   243                              <2>  %assign size SIZE_SHORT
   243                              <2>  %else
   243                              <2>  %assign size SIZE_LONG
   243                              <2>  %define msrc edx
   243                              <2>  %endif
   243 0000C357 060501              <2>  db %%end-%%beg,%6,size
   243                              <2> %%name:
   243 0000C35A 383120414E442000    <2>  db %1,' ',0
   243                              <2> %%beg:
   243                              <2>  %ifidni %4,none
   243                              <2>  %2 %3
   243                              <2>  %elifidni %4,mem
   243                              <2>  mov [0], msrc
   243                              <2>  %2 %3,[0]
   243                              <2>  %elifidni %5,none
   243 0000C362 6681E2AAAA          <2>  %2 %3,%4
   243                              <2>  %else
   243                              <2>  %2 %3,%4,%5
   243                              <2>  %endif
   243 0000C367 C3                  <2>  ret
   243                              <2> %%end:
   244                              <1> 	defOp    "81 AND",and,edx,0xAAAAAAAA,none,TYPE_LOGIC1D    ;    81 E2 AAAAAAAA
   244                              <2>  %ifidni %3,al
   244                              <2>  %assign size SIZE_BYTE
   244                              <2>  %define msrc dl
   244                              <2>  %elifidni %3,dl
   244                              <2>  %assign size SIZE_BYTE
   244                              <2>  %elifidni %3,ax
   244                              <2>  %assign size SIZE_SHORT
   244                              <2>  %define msrc dx
   244                              <2>  %elifidni %3,dx
   244                              <2>  %assign size SIZE_SHORT
   244                              <2>  %else
   244                              <2>  %assign size SIZE_LONG
   244                              <2>  %define msrc edx
   244                              <2>  %endif
   244 0000C368 070502              <2>  db %%end-%%beg,%6,size
   244                              <2> %%name:
   244 0000C36B 383120414E442000    <2>  db %1,' ',0
   244                              <2> %%beg:
   244                              <2>  %ifidni %4,none
   244                              <2>  %2 %3
   244                              <2>  %elifidni %4,mem
   244                              <2>  mov [0], msrc
   244                              <2>  %2 %3,[0]
   244                              <2>  %elifidni %5,none
   244 0000C373 81E2AAAAAAAA        <2>  %2 %3,%4
   244                              <2>  %else
   244                              <2>  %2 %3,%4,%5
   244                              <2>  %endif
   244 0000C379 C3                  <2>  ret
   244                              <2> %%end:
   245                              <1> 	defOp    "22 AND",and,al,mem,none,TYPE_LOGIC              ;    22 05 00000000
   245                              <2>  %ifidni %3,al
   245                              <2>  %assign size SIZE_BYTE
   245                              <2>  %define msrc dl
   245                              <2>  %elifidni %3,dl
   245                              <2>  %assign size SIZE_BYTE
   245                              <2>  %elifidni %3,ax
   245                              <2>  %assign size SIZE_SHORT
   245                              <2>  %define msrc dx
   245                              <2>  %elifidni %3,dx
   245                              <2>  %assign size SIZE_SHORT
   245                              <2>  %else
   245                              <2>  %assign size SIZE_LONG
   245                              <2>  %define msrc edx
   245                              <2>  %endif
   245 0000C37A 0D0300              <2>  db %%end-%%beg,%6,size
   245                              <2> %%name:
   245 0000C37D 323220414E442000    <2>  db %1,' ',0
   245                              <2> %%beg:
   245                              <2>  %ifidni %4,none
   245                              <2>  %2 %3
   245                              <2>  %elifidni %4,mem
   245 0000C385 881500000000        <2>  mov [0], msrc
   245 0000C38B 220500000000        <2>  %2 %3,[0]
   245                              <2>  %elifidni %5,none
   245                              <2>  %2 %3,%4
   245                              <2>  %else
   245                              <2>  %2 %3,%4,%5
   245                              <2>  %endif
   245 0000C391 C3                  <2>  ret
   245                              <2> %%end:
   246                              <1> 	defOp    "23 AND",and,ax,mem,none,TYPE_LOGIC              ; 66 23 05 00000000
   246                              <2>  %ifidni %3,al
   246                              <2>  %assign size SIZE_BYTE
   246                              <2>  %define msrc dl
   246                              <2>  %elifidni %3,dl
   246                              <2>  %assign size SIZE_BYTE
   246                              <2>  %elifidni %3,ax
   246                              <2>  %assign size SIZE_SHORT
   246                              <2>  %define msrc dx
   246                              <2>  %elifidni %3,dx
   246                              <2>  %assign size SIZE_SHORT
   246                              <2>  %else
   246                              <2>  %assign size SIZE_LONG
   246                              <2>  %define msrc edx
   246                              <2>  %endif
   246 0000C392 0F0301              <2>  db %%end-%%beg,%6,size
   246                              <2> %%name:
   246 0000C395 323320414E442000    <2>  db %1,' ',0
   246                              <2> %%beg:
   246                              <2>  %ifidni %4,none
   246                              <2>  %2 %3
   246                              <2>  %elifidni %4,mem
   246 0000C39D 66891500000000      <2>  mov [0], msrc
   246 0000C3A4 66230500000000      <2>  %2 %3,[0]
   246                              <2>  %elifidni %5,none
   246                              <2>  %2 %3,%4
   246                              <2>  %else
   246                              <2>  %2 %3,%4,%5
   246                              <2>  %endif
   246 0000C3AB C3                  <2>  ret
   246                              <2> %%end:
   247                              <1> 	defOp    "23 AND",and,eax,mem,none,TYPE_LOGIC             ;    23 05 00000000
   247                              <2>  %ifidni %3,al
   247                              <2>  %assign size SIZE_BYTE
   247                              <2>  %define msrc dl
   247                              <2>  %elifidni %3,dl
   247                              <2>  %assign size SIZE_BYTE
   247                              <2>  %elifidni %3,ax
   247                              <2>  %assign size SIZE_SHORT
   247                              <2>  %define msrc dx
   247                              <2>  %elifidni %3,dx
   247                              <2>  %assign size SIZE_SHORT
   247                              <2>  %else
   247                              <2>  %assign size SIZE_LONG
   247                              <2>  %define msrc edx
   247                              <2>  %endif
   247 0000C3AC 0D0302              <2>  db %%end-%%beg,%6,size
   247                              <2> %%name:
   247 0000C3AF 323320414E442000    <2>  db %1,' ',0
   247                              <2> %%beg:
   247                              <2>  %ifidni %4,none
   247                              <2>  %2 %3
   247                              <2>  %elifidni %4,mem
   247 0000C3B7 891500000000        <2>  mov [0], msrc
   247 0000C3BD 230500000000        <2>  %2 %3,[0]
   247                              <2>  %elifidni %5,none
   247                              <2>  %2 %3,%4
   247                              <2>  %else
   247                              <2>  %2 %3,%4,%5
   247                              <2>  %endif
   247 0000C3C3 C3                  <2>  ret
   247                              <2> %%end:
   248                              <1> 	defOp    "28 SUB",sub,al,dl,none,TYPE_ARITH               ;    28 D0
   248                              <2>  %ifidni %3,al
   248                              <2>  %assign size SIZE_BYTE
   248                              <2>  %define msrc dl
   248                              <2>  %elifidni %3,dl
   248                              <2>  %assign size SIZE_BYTE
   248                              <2>  %elifidni %3,ax
   248                              <2>  %assign size SIZE_SHORT
   248                              <2>  %define msrc dx
   248                              <2>  %elifidni %3,dx
   248                              <2>  %assign size SIZE_SHORT
   248                              <2>  %else
   248                              <2>  %assign size SIZE_LONG
   248                              <2>  %define msrc edx
   248                              <2>  %endif
   248 0000C3C4 030000              <2>  db %%end-%%beg,%6,size
   248                              <2> %%name:
   248 0000C3C7 3238205355422000    <2>  db %1,' ',0
   248                              <2> %%beg:
   248                              <2>  %ifidni %4,none
   248                              <2>  %2 %3
   248                              <2>  %elifidni %4,mem
   248                              <2>  mov [0], msrc
   248                              <2>  %2 %3,[0]
   248                              <2>  %elifidni %5,none
   248 0000C3CF 28D0                <2>  %2 %3,%4
   248                              <2>  %else
   248                              <2>  %2 %3,%4,%5
   248                              <2>  %endif
   248 0000C3D1 C3                  <2>  ret
   248                              <2> %%end:
   249                              <1> 	defOp    "29 SUB",sub,ax,dx,none,TYPE_ARITH               ; 66 29 D0
   249                              <2>  %ifidni %3,al
   249                              <2>  %assign size SIZE_BYTE
   249                              <2>  %define msrc dl
   249                              <2>  %elifidni %3,dl
   249                              <2>  %assign size SIZE_BYTE
   249                              <2>  %elifidni %3,ax
   249                              <2>  %assign size SIZE_SHORT
   249                              <2>  %define msrc dx
   249                              <2>  %elifidni %3,dx
   249                              <2>  %assign size SIZE_SHORT
   249                              <2>  %else
   249                              <2>  %assign size SIZE_LONG
   249                              <2>  %define msrc edx
   249                              <2>  %endif
   249 0000C3D2 040001              <2>  db %%end-%%beg,%6,size
   249                              <2> %%name:
   249 0000C3D5 3239205355422000    <2>  db %1,' ',0
   249                              <2> %%beg:
   249                              <2>  %ifidni %4,none
   249                              <2>  %2 %3
   249                              <2>  %elifidni %4,mem
   249                              <2>  mov [0], msrc
   249                              <2>  %2 %3,[0]
   249                              <2>  %elifidni %5,none
   249 0000C3DD 6629D0              <2>  %2 %3,%4
   249                              <2>  %else
   249                              <2>  %2 %3,%4,%5
   249                              <2>  %endif
   249 0000C3E0 C3                  <2>  ret
   249                              <2> %%end:
   250                              <1> 	defOp    "29 SUB",sub,eax,edx,none,TYPE_ARITH             ;    29 D0
   250                              <2>  %ifidni %3,al
   250                              <2>  %assign size SIZE_BYTE
   250                              <2>  %define msrc dl
   250                              <2>  %elifidni %3,dl
   250                              <2>  %assign size SIZE_BYTE
   250                              <2>  %elifidni %3,ax
   250                              <2>  %assign size SIZE_SHORT
   250                              <2>  %define msrc dx
   250                              <2>  %elifidni %3,dx
   250                              <2>  %assign size SIZE_SHORT
   250                              <2>  %else
   250                              <2>  %assign size SIZE_LONG
   250                              <2>  %define msrc edx
   250                              <2>  %endif
   250 0000C3E1 030002              <2>  db %%end-%%beg,%6,size
   250                              <2> %%name:
   250 0000C3E4 3239205355422000    <2>  db %1,' ',0
   250                              <2> %%beg:
   250                              <2>  %ifidni %4,none
   250                              <2>  %2 %3
   250                              <2>  %elifidni %4,mem
   250                              <2>  mov [0], msrc
   250                              <2>  %2 %3,[0]
   250                              <2>  %elifidni %5,none
   250 0000C3EC 29D0                <2>  %2 %3,%4
   250                              <2>  %else
   250                              <2>  %2 %3,%4,%5
   250                              <2>  %endif
   250 0000C3EE C3                  <2>  ret
   250                              <2> %%end:
   251                              <1> 	defOp    "2C SUB",sub,al,0xFF,none,TYPE_ARITH1            ;    2C FF
   251                              <2>  %ifidni %3,al
   251                              <2>  %assign size SIZE_BYTE
   251                              <2>  %define msrc dl
   251                              <2>  %elifidni %3,dl
   251                              <2>  %assign size SIZE_BYTE
   251                              <2>  %elifidni %3,ax
   251                              <2>  %assign size SIZE_SHORT
   251                              <2>  %define msrc dx
   251                              <2>  %elifidni %3,dx
   251                              <2>  %assign size SIZE_SHORT
   251                              <2>  %else
   251                              <2>  %assign size SIZE_LONG
   251                              <2>  %define msrc edx
   251                              <2>  %endif
   251 0000C3EF 030100              <2>  db %%end-%%beg,%6,size
   251                              <2> %%name:
   251 0000C3F2 3243205355422000    <2>  db %1,' ',0
   251                              <2> %%beg:
   251                              <2>  %ifidni %4,none
   251                              <2>  %2 %3
   251                              <2>  %elifidni %4,mem
   251                              <2>  mov [0], msrc
   251                              <2>  %2 %3,[0]
   251                              <2>  %elifidni %5,none
   251 0000C3FA 2CFF                <2>  %2 %3,%4
   251                              <2>  %else
   251                              <2>  %2 %3,%4,%5
   251                              <2>  %endif
   251 0000C3FC C3                  <2>  ret
   251                              <2> %%end:
   252                              <1> 	defOp    "2D SUB",sub,ax,0x8000,none,TYPE_ARITH1          ; 66 2D 0080
   252                              <2>  %ifidni %3,al
   252                              <2>  %assign size SIZE_BYTE
   252                              <2>  %define msrc dl
   252                              <2>  %elifidni %3,dl
   252                              <2>  %assign size SIZE_BYTE
   252                              <2>  %elifidni %3,ax
   252                              <2>  %assign size SIZE_SHORT
   252                              <2>  %define msrc dx
   252                              <2>  %elifidni %3,dx
   252                              <2>  %assign size SIZE_SHORT
   252                              <2>  %else
   252                              <2>  %assign size SIZE_LONG
   252                              <2>  %define msrc edx
   252                              <2>  %endif
   252 0000C3FD 050101              <2>  db %%end-%%beg,%6,size
   252                              <2> %%name:
   252 0000C400 3244205355422000    <2>  db %1,' ',0
   252                              <2> %%beg:
   252                              <2>  %ifidni %4,none
   252                              <2>  %2 %3
   252                              <2>  %elifidni %4,mem
   252                              <2>  mov [0], msrc
   252                              <2>  %2 %3,[0]
   252                              <2>  %elifidni %5,none
   252 0000C408 662D0080            <2>  %2 %3,%4
   252                              <2>  %else
   252                              <2>  %2 %3,%4,%5
   252                              <2>  %endif
   252 0000C40C C3                  <2>  ret
   252                              <2> %%end:
   253                              <1> 	defOp    "2D SUB",sub,eax,0x80000000,none,TYPE_ARITH1     ;    2D 00000080
   253                              <2>  %ifidni %3,al
   253                              <2>  %assign size SIZE_BYTE
   253                              <2>  %define msrc dl
   253                              <2>  %elifidni %3,dl
   253                              <2>  %assign size SIZE_BYTE
   253                              <2>  %elifidni %3,ax
   253                              <2>  %assign size SIZE_SHORT
   253                              <2>  %define msrc dx
   253                              <2>  %elifidni %3,dx
   253                              <2>  %assign size SIZE_SHORT
   253                              <2>  %else
   253                              <2>  %assign size SIZE_LONG
   253                              <2>  %define msrc edx
   253                              <2>  %endif
   253 0000C40D 060102              <2>  db %%end-%%beg,%6,size
   253                              <2> %%name:
   253 0000C410 3244205355422000    <2>  db %1,' ',0
   253                              <2> %%beg:
   253                              <2>  %ifidni %4,none
   253                              <2>  %2 %3
   253                              <2>  %elifidni %4,mem
   253                              <2>  mov [0], msrc
   253                              <2>  %2 %3,[0]
   253                              <2>  %elifidni %5,none
   253 0000C418 2D00000080          <2>  %2 %3,%4
   253                              <2>  %else
   253                              <2>  %2 %3,%4,%5
   253                              <2>  %endif
   253 0000C41D C3                  <2>  ret
   253                              <2> %%end:
   254                              <1> 	defOp    "83 SUB",sub,ax,byte 0xFF,none,TYPE_ARITH1       ; 66 83 E8 FF
   254                              <2>  %ifidni %3,al
   254                              <2>  %assign size SIZE_BYTE
   254                              <2>  %define msrc dl
   254                              <2>  %elifidni %3,dl
   254                              <2>  %assign size SIZE_BYTE
   254                              <2>  %elifidni %3,ax
   254                              <2>  %assign size SIZE_SHORT
   254                              <2>  %define msrc dx
   254                              <2>  %elifidni %3,dx
   254                              <2>  %assign size SIZE_SHORT
   254                              <2>  %else
   254                              <2>  %assign size SIZE_LONG
   254                              <2>  %define msrc edx
   254                              <2>  %endif
   254 0000C41E 050101              <2>  db %%end-%%beg,%6,size
   254                              <2> %%name:
   254 0000C421 3833205355422000    <2>  db %1,' ',0
   254                              <2> %%beg:
   254                              <2>  %ifidni %4,none
   254                              <2>  %2 %3
   254                              <2>  %elifidni %4,mem
   254                              <2>  mov [0], msrc
   254                              <2>  %2 %3,[0]
   254                              <2>  %elifidni %5,none
   254 0000C429 6683E8FF            <2>  %2 %3,%4
   254          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   254                              <2>  %else
   254                              <2>  %2 %3,%4,%5
   254                              <2>  %endif
   254 0000C42D C3                  <2>  ret
   254                              <2> %%end:
   255                              <1> 	defOp    "83 SUB",sub,eax,byte 0xFF,none,TYPE_ARITH1      ;    83 E8 FF
   255                              <2>  %ifidni %3,al
   255                              <2>  %assign size SIZE_BYTE
   255                              <2>  %define msrc dl
   255                              <2>  %elifidni %3,dl
   255                              <2>  %assign size SIZE_BYTE
   255                              <2>  %elifidni %3,ax
   255                              <2>  %assign size SIZE_SHORT
   255                              <2>  %define msrc dx
   255                              <2>  %elifidni %3,dx
   255                              <2>  %assign size SIZE_SHORT
   255                              <2>  %else
   255                              <2>  %assign size SIZE_LONG
   255                              <2>  %define msrc edx
   255                              <2>  %endif
   255 0000C42E 040102              <2>  db %%end-%%beg,%6,size
   255                              <2> %%name:
   255 0000C431 3833205355422000    <2>  db %1,' ',0
   255                              <2> %%beg:
   255                              <2>  %ifidni %4,none
   255                              <2>  %2 %3
   255                              <2>  %elifidni %4,mem
   255                              <2>  mov [0], msrc
   255                              <2>  %2 %3,[0]
   255                              <2>  %elifidni %5,none
   255 0000C439 83E8FF              <2>  %2 %3,%4
   255          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   255                              <2>  %else
   255                              <2>  %2 %3,%4,%5
   255                              <2>  %endif
   255 0000C43C C3                  <2>  ret
   255                              <2> %%end:
   256                              <1> 	defOp    "80 SUB",sub,dl,0xFF,none,TYPE_ARITH1D           ;    80 EA FF
   256                              <2>  %ifidni %3,al
   256                              <2>  %assign size SIZE_BYTE
   256                              <2>  %define msrc dl
   256                              <2>  %elifidni %3,dl
   256                              <2>  %assign size SIZE_BYTE
   256                              <2>  %elifidni %3,ax
   256                              <2>  %assign size SIZE_SHORT
   256                              <2>  %define msrc dx
   256                              <2>  %elifidni %3,dx
   256                              <2>  %assign size SIZE_SHORT
   256                              <2>  %else
   256                              <2>  %assign size SIZE_LONG
   256                              <2>  %define msrc edx
   256                              <2>  %endif
   256 0000C43D 040200              <2>  db %%end-%%beg,%6,size
   256                              <2> %%name:
   256 0000C440 3830205355422000    <2>  db %1,' ',0
   256                              <2> %%beg:
   256                              <2>  %ifidni %4,none
   256                              <2>  %2 %3
   256                              <2>  %elifidni %4,mem
   256                              <2>  mov [0], msrc
   256                              <2>  %2 %3,[0]
   256                              <2>  %elifidni %5,none
   256 0000C448 80EAFF              <2>  %2 %3,%4
   256                              <2>  %else
   256                              <2>  %2 %3,%4,%5
   256                              <2>  %endif
   256 0000C44B C3                  <2>  ret
   256                              <2> %%end:
   257                              <1> 	defOp    "81 SUB",sub,dx,0x8000,none,TYPE_ARITH1D         ; 66 81 EA 0080
   257                              <2>  %ifidni %3,al
   257                              <2>  %assign size SIZE_BYTE
   257                              <2>  %define msrc dl
   257                              <2>  %elifidni %3,dl
   257                              <2>  %assign size SIZE_BYTE
   257                              <2>  %elifidni %3,ax
   257                              <2>  %assign size SIZE_SHORT
   257                              <2>  %define msrc dx
   257                              <2>  %elifidni %3,dx
   257                              <2>  %assign size SIZE_SHORT
   257                              <2>  %else
   257                              <2>  %assign size SIZE_LONG
   257                              <2>  %define msrc edx
   257                              <2>  %endif
   257 0000C44C 060201              <2>  db %%end-%%beg,%6,size
   257                              <2> %%name:
   257 0000C44F 3831205355422000    <2>  db %1,' ',0
   257                              <2> %%beg:
   257                              <2>  %ifidni %4,none
   257                              <2>  %2 %3
   257                              <2>  %elifidni %4,mem
   257                              <2>  mov [0], msrc
   257                              <2>  %2 %3,[0]
   257                              <2>  %elifidni %5,none
   257 0000C457 6681EA0080          <2>  %2 %3,%4
   257                              <2>  %else
   257                              <2>  %2 %3,%4,%5
   257                              <2>  %endif
   257 0000C45C C3                  <2>  ret
   257                              <2> %%end:
   258                              <1> 	defOp    "81 SUB",sub,edx,0x80000000,none,TYPE_ARITH1D    ;    81 EA 00000080
   258                              <2>  %ifidni %3,al
   258                              <2>  %assign size SIZE_BYTE
   258                              <2>  %define msrc dl
   258                              <2>  %elifidni %3,dl
   258                              <2>  %assign size SIZE_BYTE
   258                              <2>  %elifidni %3,ax
   258                              <2>  %assign size SIZE_SHORT
   258                              <2>  %define msrc dx
   258                              <2>  %elifidni %3,dx
   258                              <2>  %assign size SIZE_SHORT
   258                              <2>  %else
   258                              <2>  %assign size SIZE_LONG
   258                              <2>  %define msrc edx
   258                              <2>  %endif
   258 0000C45D 070202              <2>  db %%end-%%beg,%6,size
   258                              <2> %%name:
   258 0000C460 3831205355422000    <2>  db %1,' ',0
   258                              <2> %%beg:
   258                              <2>  %ifidni %4,none
   258                              <2>  %2 %3
   258                              <2>  %elifidni %4,mem
   258                              <2>  mov [0], msrc
   258                              <2>  %2 %3,[0]
   258                              <2>  %elifidni %5,none
   258 0000C468 81EA00000080        <2>  %2 %3,%4
   258                              <2>  %else
   258                              <2>  %2 %3,%4,%5
   258                              <2>  %endif
   258 0000C46E C3                  <2>  ret
   258                              <2> %%end:
   259                              <1> 	defOp    "2A SUB",sub,al,mem,none,TYPE_ARITH              ;    2A 05 00000000
   259                              <2>  %ifidni %3,al
   259                              <2>  %assign size SIZE_BYTE
   259                              <2>  %define msrc dl
   259                              <2>  %elifidni %3,dl
   259                              <2>  %assign size SIZE_BYTE
   259                              <2>  %elifidni %3,ax
   259                              <2>  %assign size SIZE_SHORT
   259                              <2>  %define msrc dx
   259                              <2>  %elifidni %3,dx
   259                              <2>  %assign size SIZE_SHORT
   259                              <2>  %else
   259                              <2>  %assign size SIZE_LONG
   259                              <2>  %define msrc edx
   259                              <2>  %endif
   259 0000C46F 0D0000              <2>  db %%end-%%beg,%6,size
   259                              <2> %%name:
   259 0000C472 3241205355422000    <2>  db %1,' ',0
   259                              <2> %%beg:
   259                              <2>  %ifidni %4,none
   259                              <2>  %2 %3
   259                              <2>  %elifidni %4,mem
   259 0000C47A 881500000000        <2>  mov [0], msrc
   259 0000C480 2A0500000000        <2>  %2 %3,[0]
   259                              <2>  %elifidni %5,none
   259                              <2>  %2 %3,%4
   259                              <2>  %else
   259                              <2>  %2 %3,%4,%5
   259                              <2>  %endif
   259 0000C486 C3                  <2>  ret
   259                              <2> %%end:
   260                              <1> 	defOp    "2B SUB",sub,ax,mem,none,TYPE_ARITH              ; 66 2B 05 00000000
   260                              <2>  %ifidni %3,al
   260                              <2>  %assign size SIZE_BYTE
   260                              <2>  %define msrc dl
   260                              <2>  %elifidni %3,dl
   260                              <2>  %assign size SIZE_BYTE
   260                              <2>  %elifidni %3,ax
   260                              <2>  %assign size SIZE_SHORT
   260                              <2>  %define msrc dx
   260                              <2>  %elifidni %3,dx
   260                              <2>  %assign size SIZE_SHORT
   260                              <2>  %else
   260                              <2>  %assign size SIZE_LONG
   260                              <2>  %define msrc edx
   260                              <2>  %endif
   260 0000C487 0F0001              <2>  db %%end-%%beg,%6,size
   260                              <2> %%name:
   260 0000C48A 3242205355422000    <2>  db %1,' ',0
   260                              <2> %%beg:
   260                              <2>  %ifidni %4,none
   260                              <2>  %2 %3
   260                              <2>  %elifidni %4,mem
   260 0000C492 66891500000000      <2>  mov [0], msrc
   260 0000C499 662B0500000000      <2>  %2 %3,[0]
   260                              <2>  %elifidni %5,none
   260                              <2>  %2 %3,%4
   260                              <2>  %else
   260                              <2>  %2 %3,%4,%5
   260                              <2>  %endif
   260 0000C4A0 C3                  <2>  ret
   260                              <2> %%end:
   261                              <1> 	defOp    "2B SUB",sub,eax,mem,none,TYPE_ARITH             ;    2B 05 00000000
   261                              <2>  %ifidni %3,al
   261                              <2>  %assign size SIZE_BYTE
   261                              <2>  %define msrc dl
   261                              <2>  %elifidni %3,dl
   261                              <2>  %assign size SIZE_BYTE
   261                              <2>  %elifidni %3,ax
   261                              <2>  %assign size SIZE_SHORT
   261                              <2>  %define msrc dx
   261                              <2>  %elifidni %3,dx
   261                              <2>  %assign size SIZE_SHORT
   261                              <2>  %else
   261                              <2>  %assign size SIZE_LONG
   261                              <2>  %define msrc edx
   261                              <2>  %endif
   261 0000C4A1 0D0002              <2>  db %%end-%%beg,%6,size
   261                              <2> %%name:
   261 0000C4A4 3242205355422000    <2>  db %1,' ',0
   261                              <2> %%beg:
   261                              <2>  %ifidni %4,none
   261                              <2>  %2 %3
   261                              <2>  %elifidni %4,mem
   261 0000C4AC 891500000000        <2>  mov [0], msrc
   261 0000C4B2 2B0500000000        <2>  %2 %3,[0]
   261                              <2>  %elifidni %5,none
   261                              <2>  %2 %3,%4
   261                              <2>  %else
   261                              <2>  %2 %3,%4,%5
   261                              <2>  %endif
   261 0000C4B8 C3                  <2>  ret
   261                              <2> %%end:
   262                              <1> 	defOp    "30 XOR",xor,al,dl,none,TYPE_LOGIC               ;    30 D0
   262                              <2>  %ifidni %3,al
   262                              <2>  %assign size SIZE_BYTE
   262                              <2>  %define msrc dl
   262                              <2>  %elifidni %3,dl
   262                              <2>  %assign size SIZE_BYTE
   262                              <2>  %elifidni %3,ax
   262                              <2>  %assign size SIZE_SHORT
   262                              <2>  %define msrc dx
   262                              <2>  %elifidni %3,dx
   262                              <2>  %assign size SIZE_SHORT
   262                              <2>  %else
   262                              <2>  %assign size SIZE_LONG
   262                              <2>  %define msrc edx
   262                              <2>  %endif
   262 0000C4B9 030300              <2>  db %%end-%%beg,%6,size
   262                              <2> %%name:
   262 0000C4BC 333020584F522000    <2>  db %1,' ',0
   262                              <2> %%beg:
   262                              <2>  %ifidni %4,none
   262                              <2>  %2 %3
   262                              <2>  %elifidni %4,mem
   262                              <2>  mov [0], msrc
   262                              <2>  %2 %3,[0]
   262                              <2>  %elifidni %5,none
   262 0000C4C4 30D0                <2>  %2 %3,%4
   262                              <2>  %else
   262                              <2>  %2 %3,%4,%5
   262                              <2>  %endif
   262 0000C4C6 C3                  <2>  ret
   262                              <2> %%end:
   263                              <1> 	defOp    "31 XOR",xor,ax,dx,none,TYPE_LOGIC               ; 66 31 D0
   263                              <2>  %ifidni %3,al
   263                              <2>  %assign size SIZE_BYTE
   263                              <2>  %define msrc dl
   263                              <2>  %elifidni %3,dl
   263                              <2>  %assign size SIZE_BYTE
   263                              <2>  %elifidni %3,ax
   263                              <2>  %assign size SIZE_SHORT
   263                              <2>  %define msrc dx
   263                              <2>  %elifidni %3,dx
   263                              <2>  %assign size SIZE_SHORT
   263                              <2>  %else
   263                              <2>  %assign size SIZE_LONG
   263                              <2>  %define msrc edx
   263                              <2>  %endif
   263 0000C4C7 040301              <2>  db %%end-%%beg,%6,size
   263                              <2> %%name:
   263 0000C4CA 333120584F522000    <2>  db %1,' ',0
   263                              <2> %%beg:
   263                              <2>  %ifidni %4,none
   263                              <2>  %2 %3
   263                              <2>  %elifidni %4,mem
   263                              <2>  mov [0], msrc
   263                              <2>  %2 %3,[0]
   263                              <2>  %elifidni %5,none
   263 0000C4D2 6631D0              <2>  %2 %3,%4
   263                              <2>  %else
   263                              <2>  %2 %3,%4,%5
   263                              <2>  %endif
   263 0000C4D5 C3                  <2>  ret
   263                              <2> %%end:
   264                              <1> 	defOp    "31 XOR",xor,eax,edx,none,TYPE_LOGIC             ;    31 D0
   264                              <2>  %ifidni %3,al
   264                              <2>  %assign size SIZE_BYTE
   264                              <2>  %define msrc dl
   264                              <2>  %elifidni %3,dl
   264                              <2>  %assign size SIZE_BYTE
   264                              <2>  %elifidni %3,ax
   264                              <2>  %assign size SIZE_SHORT
   264                              <2>  %define msrc dx
   264                              <2>  %elifidni %3,dx
   264                              <2>  %assign size SIZE_SHORT
   264                              <2>  %else
   264                              <2>  %assign size SIZE_LONG
   264                              <2>  %define msrc edx
   264                              <2>  %endif
   264 0000C4D6 030302              <2>  db %%end-%%beg,%6,size
   264                              <2> %%name:
   264 0000C4D9 333120584F522000    <2>  db %1,' ',0
   264                              <2> %%beg:
   264                              <2>  %ifidni %4,none
   264                              <2>  %2 %3
   264                              <2>  %elifidni %4,mem
   264                              <2>  mov [0], msrc
   264                              <2>  %2 %3,[0]
   264                              <2>  %elifidni %5,none
   264 0000C4E1 31D0                <2>  %2 %3,%4
   264                              <2>  %else
   264                              <2>  %2 %3,%4,%5
   264                              <2>  %endif
   264 0000C4E3 C3                  <2>  ret
   264                              <2> %%end:
   265                              <1> 	defOp    "34 XOR",xor,al,0xAA,none,TYPE_LOGIC1            ;    34 AA
   265                              <2>  %ifidni %3,al
   265                              <2>  %assign size SIZE_BYTE
   265                              <2>  %define msrc dl
   265                              <2>  %elifidni %3,dl
   265                              <2>  %assign size SIZE_BYTE
   265                              <2>  %elifidni %3,ax
   265                              <2>  %assign size SIZE_SHORT
   265                              <2>  %define msrc dx
   265                              <2>  %elifidni %3,dx
   265                              <2>  %assign size SIZE_SHORT
   265                              <2>  %else
   265                              <2>  %assign size SIZE_LONG
   265                              <2>  %define msrc edx
   265                              <2>  %endif
   265 0000C4E4 030400              <2>  db %%end-%%beg,%6,size
   265                              <2> %%name:
   265 0000C4E7 333420584F522000    <2>  db %1,' ',0
   265                              <2> %%beg:
   265                              <2>  %ifidni %4,none
   265                              <2>  %2 %3
   265                              <2>  %elifidni %4,mem
   265                              <2>  mov [0], msrc
   265                              <2>  %2 %3,[0]
   265                              <2>  %elifidni %5,none
   265 0000C4EF 34AA                <2>  %2 %3,%4
   265                              <2>  %else
   265                              <2>  %2 %3,%4,%5
   265                              <2>  %endif
   265 0000C4F1 C3                  <2>  ret
   265                              <2> %%end:
   266                              <1> 	defOp    "35 XOR",xor,ax,0xAAAA,none,TYPE_LOGIC1          ; 66 35 AAAA
   266                              <2>  %ifidni %3,al
   266                              <2>  %assign size SIZE_BYTE
   266                              <2>  %define msrc dl
   266                              <2>  %elifidni %3,dl
   266                              <2>  %assign size SIZE_BYTE
   266                              <2>  %elifidni %3,ax
   266                              <2>  %assign size SIZE_SHORT
   266                              <2>  %define msrc dx
   266                              <2>  %elifidni %3,dx
   266                              <2>  %assign size SIZE_SHORT
   266                              <2>  %else
   266                              <2>  %assign size SIZE_LONG
   266                              <2>  %define msrc edx
   266                              <2>  %endif
   266 0000C4F2 050401              <2>  db %%end-%%beg,%6,size
   266                              <2> %%name:
   266 0000C4F5 333520584F522000    <2>  db %1,' ',0
   266                              <2> %%beg:
   266                              <2>  %ifidni %4,none
   266                              <2>  %2 %3
   266                              <2>  %elifidni %4,mem
   266                              <2>  mov [0], msrc
   266                              <2>  %2 %3,[0]
   266                              <2>  %elifidni %5,none
   266 0000C4FD 6635AAAA            <2>  %2 %3,%4
   266                              <2>  %else
   266                              <2>  %2 %3,%4,%5
   266                              <2>  %endif
   266 0000C501 C3                  <2>  ret
   266                              <2> %%end:
   267                              <1> 	defOp    "35 XOR",xor,eax,0xAAAAAAAA,none,TYPE_LOGIC1     ;    35 AAAAAAAA
   267                              <2>  %ifidni %3,al
   267                              <2>  %assign size SIZE_BYTE
   267                              <2>  %define msrc dl
   267                              <2>  %elifidni %3,dl
   267                              <2>  %assign size SIZE_BYTE
   267                              <2>  %elifidni %3,ax
   267                              <2>  %assign size SIZE_SHORT
   267                              <2>  %define msrc dx
   267                              <2>  %elifidni %3,dx
   267                              <2>  %assign size SIZE_SHORT
   267                              <2>  %else
   267                              <2>  %assign size SIZE_LONG
   267                              <2>  %define msrc edx
   267                              <2>  %endif
   267 0000C502 060402              <2>  db %%end-%%beg,%6,size
   267                              <2> %%name:
   267 0000C505 333520584F522000    <2>  db %1,' ',0
   267                              <2> %%beg:
   267                              <2>  %ifidni %4,none
   267                              <2>  %2 %3
   267                              <2>  %elifidni %4,mem
   267                              <2>  mov [0], msrc
   267                              <2>  %2 %3,[0]
   267                              <2>  %elifidni %5,none
   267 0000C50D 35AAAAAAAA          <2>  %2 %3,%4
   267                              <2>  %else
   267                              <2>  %2 %3,%4,%5
   267                              <2>  %endif
   267 0000C512 C3                  <2>  ret
   267                              <2> %%end:
   268                              <1> 	defOp    "83 XOR",xor,ax,byte 0xAA,none,TYPE_LOGIC1       ; 66 83 F0 AA
   268                              <2>  %ifidni %3,al
   268                              <2>  %assign size SIZE_BYTE
   268                              <2>  %define msrc dl
   268                              <2>  %elifidni %3,dl
   268                              <2>  %assign size SIZE_BYTE
   268                              <2>  %elifidni %3,ax
   268                              <2>  %assign size SIZE_SHORT
   268                              <2>  %define msrc dx
   268                              <2>  %elifidni %3,dx
   268                              <2>  %assign size SIZE_SHORT
   268                              <2>  %else
   268                              <2>  %assign size SIZE_LONG
   268                              <2>  %define msrc edx
   268                              <2>  %endif
   268 0000C513 050401              <2>  db %%end-%%beg,%6,size
   268                              <2> %%name:
   268 0000C516 383320584F522000    <2>  db %1,' ',0
   268                              <2> %%beg:
   268                              <2>  %ifidni %4,none
   268                              <2>  %2 %3
   268                              <2>  %elifidni %4,mem
   268                              <2>  mov [0], msrc
   268                              <2>  %2 %3,[0]
   268                              <2>  %elifidni %5,none
   268 0000C51E 6683F0AA            <2>  %2 %3,%4
   268          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   268                              <2>  %else
   268                              <2>  %2 %3,%4,%5
   268                              <2>  %endif
   268 0000C522 C3                  <2>  ret
   268                              <2> %%end:
   269                              <1> 	defOp    "83 XOR",xor,eax,byte 0xAA,none,TYPE_LOGIC1      ;    83 F0 AA
   269                              <2>  %ifidni %3,al
   269                              <2>  %assign size SIZE_BYTE
   269                              <2>  %define msrc dl
   269                              <2>  %elifidni %3,dl
   269                              <2>  %assign size SIZE_BYTE
   269                              <2>  %elifidni %3,ax
   269                              <2>  %assign size SIZE_SHORT
   269                              <2>  %define msrc dx
   269                              <2>  %elifidni %3,dx
   269                              <2>  %assign size SIZE_SHORT
   269                              <2>  %else
   269                              <2>  %assign size SIZE_LONG
   269                              <2>  %define msrc edx
   269                              <2>  %endif
   269 0000C523 040402              <2>  db %%end-%%beg,%6,size
   269                              <2> %%name:
   269 0000C526 383320584F522000    <2>  db %1,' ',0
   269                              <2> %%beg:
   269                              <2>  %ifidni %4,none
   269                              <2>  %2 %3
   269                              <2>  %elifidni %4,mem
   269                              <2>  mov [0], msrc
   269                              <2>  %2 %3,[0]
   269                              <2>  %elifidni %5,none
   269 0000C52E 83F0AA              <2>  %2 %3,%4
   269          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   269                              <2>  %else
   269                              <2>  %2 %3,%4,%5
   269                              <2>  %endif
   269 0000C531 C3                  <2>  ret
   269                              <2> %%end:
   270                              <1> 	defOp    "80 XOR",xor,dl,0xAA,none,TYPE_LOGIC1D           ;    80 F2 AA
   270                              <2>  %ifidni %3,al
   270                              <2>  %assign size SIZE_BYTE
   270                              <2>  %define msrc dl
   270                              <2>  %elifidni %3,dl
   270                              <2>  %assign size SIZE_BYTE
   270                              <2>  %elifidni %3,ax
   270                              <2>  %assign size SIZE_SHORT
   270                              <2>  %define msrc dx
   270                              <2>  %elifidni %3,dx
   270                              <2>  %assign size SIZE_SHORT
   270                              <2>  %else
   270                              <2>  %assign size SIZE_LONG
   270                              <2>  %define msrc edx
   270                              <2>  %endif
   270 0000C532 040500              <2>  db %%end-%%beg,%6,size
   270                              <2> %%name:
   270 0000C535 383020584F522000    <2>  db %1,' ',0
   270                              <2> %%beg:
   270                              <2>  %ifidni %4,none
   270                              <2>  %2 %3
   270                              <2>  %elifidni %4,mem
   270                              <2>  mov [0], msrc
   270                              <2>  %2 %3,[0]
   270                              <2>  %elifidni %5,none
   270 0000C53D 80F2AA              <2>  %2 %3,%4
   270                              <2>  %else
   270                              <2>  %2 %3,%4,%5
   270                              <2>  %endif
   270 0000C540 C3                  <2>  ret
   270                              <2> %%end:
   271                              <1> 	defOp    "81 XOR",xor,dx,0xAAAA,none,TYPE_LOGIC1D         ; 66 81 F2 AAAA
   271                              <2>  %ifidni %3,al
   271                              <2>  %assign size SIZE_BYTE
   271                              <2>  %define msrc dl
   271                              <2>  %elifidni %3,dl
   271                              <2>  %assign size SIZE_BYTE
   271                              <2>  %elifidni %3,ax
   271                              <2>  %assign size SIZE_SHORT
   271                              <2>  %define msrc dx
   271                              <2>  %elifidni %3,dx
   271                              <2>  %assign size SIZE_SHORT
   271                              <2>  %else
   271                              <2>  %assign size SIZE_LONG
   271                              <2>  %define msrc edx
   271                              <2>  %endif
   271 0000C541 060501              <2>  db %%end-%%beg,%6,size
   271                              <2> %%name:
   271 0000C544 383120584F522000    <2>  db %1,' ',0
   271                              <2> %%beg:
   271                              <2>  %ifidni %4,none
   271                              <2>  %2 %3
   271                              <2>  %elifidni %4,mem
   271                              <2>  mov [0], msrc
   271                              <2>  %2 %3,[0]
   271                              <2>  %elifidni %5,none
   271 0000C54C 6681F2AAAA          <2>  %2 %3,%4
   271                              <2>  %else
   271                              <2>  %2 %3,%4,%5
   271                              <2>  %endif
   271 0000C551 C3                  <2>  ret
   271                              <2> %%end:
   272                              <1> 	defOp    "81 XOR",xor,edx,0xAAAAAAAA,none,TYPE_LOGIC1D    ;    81 F2 AAAAAAAA
   272                              <2>  %ifidni %3,al
   272                              <2>  %assign size SIZE_BYTE
   272                              <2>  %define msrc dl
   272                              <2>  %elifidni %3,dl
   272                              <2>  %assign size SIZE_BYTE
   272                              <2>  %elifidni %3,ax
   272                              <2>  %assign size SIZE_SHORT
   272                              <2>  %define msrc dx
   272                              <2>  %elifidni %3,dx
   272                              <2>  %assign size SIZE_SHORT
   272                              <2>  %else
   272                              <2>  %assign size SIZE_LONG
   272                              <2>  %define msrc edx
   272                              <2>  %endif
   272 0000C552 070502              <2>  db %%end-%%beg,%6,size
   272                              <2> %%name:
   272 0000C555 383120584F522000    <2>  db %1,' ',0
   272                              <2> %%beg:
   272                              <2>  %ifidni %4,none
   272                              <2>  %2 %3
   272                              <2>  %elifidni %4,mem
   272                              <2>  mov [0], msrc
   272                              <2>  %2 %3,[0]
   272                              <2>  %elifidni %5,none
   272 0000C55D 81F2AAAAAAAA        <2>  %2 %3,%4
   272                              <2>  %else
   272                              <2>  %2 %3,%4,%5
   272                              <2>  %endif
   272 0000C563 C3                  <2>  ret
   272                              <2> %%end:
   273                              <1> 	defOp    "32 XOR",xor,al,mem,none,TYPE_LOGIC              ;    32 05 00000000
   273                              <2>  %ifidni %3,al
   273                              <2>  %assign size SIZE_BYTE
   273                              <2>  %define msrc dl
   273                              <2>  %elifidni %3,dl
   273                              <2>  %assign size SIZE_BYTE
   273                              <2>  %elifidni %3,ax
   273                              <2>  %assign size SIZE_SHORT
   273                              <2>  %define msrc dx
   273                              <2>  %elifidni %3,dx
   273                              <2>  %assign size SIZE_SHORT
   273                              <2>  %else
   273                              <2>  %assign size SIZE_LONG
   273                              <2>  %define msrc edx
   273                              <2>  %endif
   273 0000C564 0D0300              <2>  db %%end-%%beg,%6,size
   273                              <2> %%name:
   273 0000C567 333220584F522000    <2>  db %1,' ',0
   273                              <2> %%beg:
   273                              <2>  %ifidni %4,none
   273                              <2>  %2 %3
   273                              <2>  %elifidni %4,mem
   273 0000C56F 881500000000        <2>  mov [0], msrc
   273 0000C575 320500000000        <2>  %2 %3,[0]
   273                              <2>  %elifidni %5,none
   273                              <2>  %2 %3,%4
   273                              <2>  %else
   273                              <2>  %2 %3,%4,%5
   273                              <2>  %endif
   273 0000C57B C3                  <2>  ret
   273                              <2> %%end:
   274                              <1> 	defOp    "33 XOR",xor,ax,mem,none,TYPE_LOGIC              ; 66 33 05 00000000
   274                              <2>  %ifidni %3,al
   274                              <2>  %assign size SIZE_BYTE
   274                              <2>  %define msrc dl
   274                              <2>  %elifidni %3,dl
   274                              <2>  %assign size SIZE_BYTE
   274                              <2>  %elifidni %3,ax
   274                              <2>  %assign size SIZE_SHORT
   274                              <2>  %define msrc dx
   274                              <2>  %elifidni %3,dx
   274                              <2>  %assign size SIZE_SHORT
   274                              <2>  %else
   274                              <2>  %assign size SIZE_LONG
   274                              <2>  %define msrc edx
   274                              <2>  %endif
   274 0000C57C 0F0301              <2>  db %%end-%%beg,%6,size
   274                              <2> %%name:
   274 0000C57F 333320584F522000    <2>  db %1,' ',0
   274                              <2> %%beg:
   274                              <2>  %ifidni %4,none
   274                              <2>  %2 %3
   274                              <2>  %elifidni %4,mem
   274 0000C587 66891500000000      <2>  mov [0], msrc
   274 0000C58E 66330500000000      <2>  %2 %3,[0]
   274                              <2>  %elifidni %5,none
   274                              <2>  %2 %3,%4
   274                              <2>  %else
   274                              <2>  %2 %3,%4,%5
   274                              <2>  %endif
   274 0000C595 C3                  <2>  ret
   274                              <2> %%end:
   275                              <1> 	defOp    "33 XOR",xor,eax,mem,none,TYPE_LOGIC             ;    33 05 00000000
   275                              <2>  %ifidni %3,al
   275                              <2>  %assign size SIZE_BYTE
   275                              <2>  %define msrc dl
   275                              <2>  %elifidni %3,dl
   275                              <2>  %assign size SIZE_BYTE
   275                              <2>  %elifidni %3,ax
   275                              <2>  %assign size SIZE_SHORT
   275                              <2>  %define msrc dx
   275                              <2>  %elifidni %3,dx
   275                              <2>  %assign size SIZE_SHORT
   275                              <2>  %else
   275                              <2>  %assign size SIZE_LONG
   275                              <2>  %define msrc edx
   275                              <2>  %endif
   275 0000C596 0D0302              <2>  db %%end-%%beg,%6,size
   275                              <2> %%name:
   275 0000C599 333320584F522000    <2>  db %1,' ',0
   275                              <2> %%beg:
   275                              <2>  %ifidni %4,none
   275                              <2>  %2 %3
   275                              <2>  %elifidni %4,mem
   275 0000C5A1 891500000000        <2>  mov [0], msrc
   275 0000C5A7 330500000000        <2>  %2 %3,[0]
   275                              <2>  %elifidni %5,none
   275                              <2>  %2 %3,%4
   275                              <2>  %else
   275                              <2>  %2 %3,%4,%5
   275                              <2>  %endif
   275 0000C5AD C3                  <2>  ret
   275                              <2> %%end:
   276                              <1> 	defOp    "38 CMP",cmp,al,dl,none,TYPE_LOGIC               ;    38 D0
   276                              <2>  %ifidni %3,al
   276                              <2>  %assign size SIZE_BYTE
   276                              <2>  %define msrc dl
   276                              <2>  %elifidni %3,dl
   276                              <2>  %assign size SIZE_BYTE
   276                              <2>  %elifidni %3,ax
   276                              <2>  %assign size SIZE_SHORT
   276                              <2>  %define msrc dx
   276                              <2>  %elifidni %3,dx
   276                              <2>  %assign size SIZE_SHORT
   276                              <2>  %else
   276                              <2>  %assign size SIZE_LONG
   276                              <2>  %define msrc edx
   276                              <2>  %endif
   276 0000C5AE 030300              <2>  db %%end-%%beg,%6,size
   276                              <2> %%name:
   276 0000C5B1 333820434D502000    <2>  db %1,' ',0
   276                              <2> %%beg:
   276                              <2>  %ifidni %4,none
   276                              <2>  %2 %3
   276                              <2>  %elifidni %4,mem
   276                              <2>  mov [0], msrc
   276                              <2>  %2 %3,[0]
   276                              <2>  %elifidni %5,none
   276 0000C5B9 38D0                <2>  %2 %3,%4
   276                              <2>  %else
   276                              <2>  %2 %3,%4,%5
   276                              <2>  %endif
   276 0000C5BB C3                  <2>  ret
   276                              <2> %%end:
   277                              <1> 	defOp    "39 CMP",cmp,ax,dx,none,TYPE_LOGIC               ; 66 39 D0
   277                              <2>  %ifidni %3,al
   277                              <2>  %assign size SIZE_BYTE
   277                              <2>  %define msrc dl
   277                              <2>  %elifidni %3,dl
   277                              <2>  %assign size SIZE_BYTE
   277                              <2>  %elifidni %3,ax
   277                              <2>  %assign size SIZE_SHORT
   277                              <2>  %define msrc dx
   277                              <2>  %elifidni %3,dx
   277                              <2>  %assign size SIZE_SHORT
   277                              <2>  %else
   277                              <2>  %assign size SIZE_LONG
   277                              <2>  %define msrc edx
   277                              <2>  %endif
   277 0000C5BC 040301              <2>  db %%end-%%beg,%6,size
   277                              <2> %%name:
   277 0000C5BF 333920434D502000    <2>  db %1,' ',0
   277                              <2> %%beg:
   277                              <2>  %ifidni %4,none
   277                              <2>  %2 %3
   277                              <2>  %elifidni %4,mem
   277                              <2>  mov [0], msrc
   277                              <2>  %2 %3,[0]
   277                              <2>  %elifidni %5,none
   277 0000C5C7 6639D0              <2>  %2 %3,%4
   277                              <2>  %else
   277                              <2>  %2 %3,%4,%5
   277                              <2>  %endif
   277 0000C5CA C3                  <2>  ret
   277                              <2> %%end:
   278                              <1> 	defOp    "39 CMP",cmp,eax,edx,none,TYPE_LOGIC             ;    39 D0
   278                              <2>  %ifidni %3,al
   278                              <2>  %assign size SIZE_BYTE
   278                              <2>  %define msrc dl
   278                              <2>  %elifidni %3,dl
   278                              <2>  %assign size SIZE_BYTE
   278                              <2>  %elifidni %3,ax
   278                              <2>  %assign size SIZE_SHORT
   278                              <2>  %define msrc dx
   278                              <2>  %elifidni %3,dx
   278                              <2>  %assign size SIZE_SHORT
   278                              <2>  %else
   278                              <2>  %assign size SIZE_LONG
   278                              <2>  %define msrc edx
   278                              <2>  %endif
   278 0000C5CB 030302              <2>  db %%end-%%beg,%6,size
   278                              <2> %%name:
   278 0000C5CE 333920434D502000    <2>  db %1,' ',0
   278                              <2> %%beg:
   278                              <2>  %ifidni %4,none
   278                              <2>  %2 %3
   278                              <2>  %elifidni %4,mem
   278                              <2>  mov [0], msrc
   278                              <2>  %2 %3,[0]
   278                              <2>  %elifidni %5,none
   278 0000C5D6 39D0                <2>  %2 %3,%4
   278                              <2>  %else
   278                              <2>  %2 %3,%4,%5
   278                              <2>  %endif
   278 0000C5D8 C3                  <2>  ret
   278                              <2> %%end:
   279                              <1> 	defOp    "3C CMP",cmp,al,0xAA,none,TYPE_LOGIC1            ;    3C AA
   279                              <2>  %ifidni %3,al
   279                              <2>  %assign size SIZE_BYTE
   279                              <2>  %define msrc dl
   279                              <2>  %elifidni %3,dl
   279                              <2>  %assign size SIZE_BYTE
   279                              <2>  %elifidni %3,ax
   279                              <2>  %assign size SIZE_SHORT
   279                              <2>  %define msrc dx
   279                              <2>  %elifidni %3,dx
   279                              <2>  %assign size SIZE_SHORT
   279                              <2>  %else
   279                              <2>  %assign size SIZE_LONG
   279                              <2>  %define msrc edx
   279                              <2>  %endif
   279 0000C5D9 030400              <2>  db %%end-%%beg,%6,size
   279                              <2> %%name:
   279 0000C5DC 334320434D502000    <2>  db %1,' ',0
   279                              <2> %%beg:
   279                              <2>  %ifidni %4,none
   279                              <2>  %2 %3
   279                              <2>  %elifidni %4,mem
   279                              <2>  mov [0], msrc
   279                              <2>  %2 %3,[0]
   279                              <2>  %elifidni %5,none
   279 0000C5E4 3CAA                <2>  %2 %3,%4
   279                              <2>  %else
   279                              <2>  %2 %3,%4,%5
   279                              <2>  %endif
   279 0000C5E6 C3                  <2>  ret
   279                              <2> %%end:
   280                              <1> 	defOp    "3D CMP",cmp,ax,0xAAAA,none,TYPE_LOGIC1          ; 66 3D AAAA
   280                              <2>  %ifidni %3,al
   280                              <2>  %assign size SIZE_BYTE
   280                              <2>  %define msrc dl
   280                              <2>  %elifidni %3,dl
   280                              <2>  %assign size SIZE_BYTE
   280                              <2>  %elifidni %3,ax
   280                              <2>  %assign size SIZE_SHORT
   280                              <2>  %define msrc dx
   280                              <2>  %elifidni %3,dx
   280                              <2>  %assign size SIZE_SHORT
   280                              <2>  %else
   280                              <2>  %assign size SIZE_LONG
   280                              <2>  %define msrc edx
   280                              <2>  %endif
   280 0000C5E7 050401              <2>  db %%end-%%beg,%6,size
   280                              <2> %%name:
   280 0000C5EA 334420434D502000    <2>  db %1,' ',0
   280                              <2> %%beg:
   280                              <2>  %ifidni %4,none
   280                              <2>  %2 %3
   280                              <2>  %elifidni %4,mem
   280                              <2>  mov [0], msrc
   280                              <2>  %2 %3,[0]
   280                              <2>  %elifidni %5,none
   280 0000C5F2 663DAAAA            <2>  %2 %3,%4
   280                              <2>  %else
   280                              <2>  %2 %3,%4,%5
   280                              <2>  %endif
   280 0000C5F6 C3                  <2>  ret
   280                              <2> %%end:
   281                              <1> 	defOp    "3D CMP",cmp,eax,0xAAAAAAAA,none,TYPE_LOGIC1     ;    3D AAAAAAAA
   281                              <2>  %ifidni %3,al
   281                              <2>  %assign size SIZE_BYTE
   281                              <2>  %define msrc dl
   281                              <2>  %elifidni %3,dl
   281                              <2>  %assign size SIZE_BYTE
   281                              <2>  %elifidni %3,ax
   281                              <2>  %assign size SIZE_SHORT
   281                              <2>  %define msrc dx
   281                              <2>  %elifidni %3,dx
   281                              <2>  %assign size SIZE_SHORT
   281                              <2>  %else
   281                              <2>  %assign size SIZE_LONG
   281                              <2>  %define msrc edx
   281                              <2>  %endif
   281 0000C5F7 060402              <2>  db %%end-%%beg,%6,size
   281                              <2> %%name:
   281 0000C5FA 334420434D502000    <2>  db %1,' ',0
   281                              <2> %%beg:
   281                              <2>  %ifidni %4,none
   281                              <2>  %2 %3
   281                              <2>  %elifidni %4,mem
   281                              <2>  mov [0], msrc
   281                              <2>  %2 %3,[0]
   281                              <2>  %elifidni %5,none
   281 0000C602 3DAAAAAAAA          <2>  %2 %3,%4
   281                              <2>  %else
   281                              <2>  %2 %3,%4,%5
   281                              <2>  %endif
   281 0000C607 C3                  <2>  ret
   281                              <2> %%end:
   282                              <1> 	defOp    "83 CMP",cmp,ax,byte 0xAA,none,TYPE_LOGIC1       ; 66 83 F8 AA
   282                              <2>  %ifidni %3,al
   282                              <2>  %assign size SIZE_BYTE
   282                              <2>  %define msrc dl
   282                              <2>  %elifidni %3,dl
   282                              <2>  %assign size SIZE_BYTE
   282                              <2>  %elifidni %3,ax
   282                              <2>  %assign size SIZE_SHORT
   282                              <2>  %define msrc dx
   282                              <2>  %elifidni %3,dx
   282                              <2>  %assign size SIZE_SHORT
   282                              <2>  %else
   282                              <2>  %assign size SIZE_LONG
   282                              <2>  %define msrc edx
   282                              <2>  %endif
   282 0000C608 050401              <2>  db %%end-%%beg,%6,size
   282                              <2> %%name:
   282 0000C60B 383320434D502000    <2>  db %1,' ',0
   282                              <2> %%beg:
   282                              <2>  %ifidni %4,none
   282                              <2>  %2 %3
   282                              <2>  %elifidni %4,mem
   282                              <2>  mov [0], msrc
   282                              <2>  %2 %3,[0]
   282                              <2>  %elifidni %5,none
   282 0000C613 6683F8AA            <2>  %2 %3,%4
   282          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   282                              <2>  %else
   282                              <2>  %2 %3,%4,%5
   282                              <2>  %endif
   282 0000C617 C3                  <2>  ret
   282                              <2> %%end:
   283                              <1> 	defOp    "83 CMP",cmp,eax,byte 0xAA,none,TYPE_LOGIC1      ;    83 F8 AA
   283                              <2>  %ifidni %3,al
   283                              <2>  %assign size SIZE_BYTE
   283                              <2>  %define msrc dl
   283                              <2>  %elifidni %3,dl
   283                              <2>  %assign size SIZE_BYTE
   283                              <2>  %elifidni %3,ax
   283                              <2>  %assign size SIZE_SHORT
   283                              <2>  %define msrc dx
   283                              <2>  %elifidni %3,dx
   283                              <2>  %assign size SIZE_SHORT
   283                              <2>  %else
   283                              <2>  %assign size SIZE_LONG
   283                              <2>  %define msrc edx
   283                              <2>  %endif
   283 0000C618 040402              <2>  db %%end-%%beg,%6,size
   283                              <2> %%name:
   283 0000C61B 383320434D502000    <2>  db %1,' ',0
   283                              <2> %%beg:
   283                              <2>  %ifidni %4,none
   283                              <2>  %2 %3
   283                              <2>  %elifidni %4,mem
   283                              <2>  mov [0], msrc
   283                              <2>  %2 %3,[0]
   283                              <2>  %elifidni %5,none
   283 0000C623 83F8AA              <2>  %2 %3,%4
   283          ******************  <2>  warning: signed byte value exceeds bounds [-w+number-overflow]
   283                              <2>  %else
   283                              <2>  %2 %3,%4,%5
   283                              <2>  %endif
   283 0000C626 C3                  <2>  ret
   283                              <2> %%end:
   284                              <1> 	defOp    "80 CMP",cmp,dl,0xAA,none,TYPE_LOGIC1D           ;    80 FA AA
   284                              <2>  %ifidni %3,al
   284                              <2>  %assign size SIZE_BYTE
   284                              <2>  %define msrc dl
   284                              <2>  %elifidni %3,dl
   284                              <2>  %assign size SIZE_BYTE
   284                              <2>  %elifidni %3,ax
   284                              <2>  %assign size SIZE_SHORT
   284                              <2>  %define msrc dx
   284                              <2>  %elifidni %3,dx
   284                              <2>  %assign size SIZE_SHORT
   284                              <2>  %else
   284                              <2>  %assign size SIZE_LONG
   284                              <2>  %define msrc edx
   284                              <2>  %endif
   284 0000C627 040500              <2>  db %%end-%%beg,%6,size
   284                              <2> %%name:
   284 0000C62A 383020434D502000    <2>  db %1,' ',0
   284                              <2> %%beg:
   284                              <2>  %ifidni %4,none
   284                              <2>  %2 %3
   284                              <2>  %elifidni %4,mem
   284                              <2>  mov [0], msrc
   284                              <2>  %2 %3,[0]
   284                              <2>  %elifidni %5,none
   284 0000C632 80FAAA              <2>  %2 %3,%4
   284                              <2>  %else
   284                              <2>  %2 %3,%4,%5
   284                              <2>  %endif
   284 0000C635 C3                  <2>  ret
   284                              <2> %%end:
   285                              <1> 	defOp    "81 CMP",cmp,dx,0xAAAA,none,TYPE_LOGIC1D         ; 66 81 FA AAAA
   285                              <2>  %ifidni %3,al
   285                              <2>  %assign size SIZE_BYTE
   285                              <2>  %define msrc dl
   285                              <2>  %elifidni %3,dl
   285                              <2>  %assign size SIZE_BYTE
   285                              <2>  %elifidni %3,ax
   285                              <2>  %assign size SIZE_SHORT
   285                              <2>  %define msrc dx
   285                              <2>  %elifidni %3,dx
   285                              <2>  %assign size SIZE_SHORT
   285                              <2>  %else
   285                              <2>  %assign size SIZE_LONG
   285                              <2>  %define msrc edx
   285                              <2>  %endif
   285 0000C636 060501              <2>  db %%end-%%beg,%6,size
   285                              <2> %%name:
   285 0000C639 383120434D502000    <2>  db %1,' ',0
   285                              <2> %%beg:
   285                              <2>  %ifidni %4,none
   285                              <2>  %2 %3
   285                              <2>  %elifidni %4,mem
   285                              <2>  mov [0], msrc
   285                              <2>  %2 %3,[0]
   285                              <2>  %elifidni %5,none
   285 0000C641 6681FAAAAA          <2>  %2 %3,%4
   285                              <2>  %else
   285                              <2>  %2 %3,%4,%5
   285                              <2>  %endif
   285 0000C646 C3                  <2>  ret
   285                              <2> %%end:
   286                              <1> 	defOp    "81 CMP",cmp,edx,0xAAAAAAAA,none,TYPE_LOGIC1D    ;    81 FA AAAAAAAA
   286                              <2>  %ifidni %3,al
   286                              <2>  %assign size SIZE_BYTE
   286                              <2>  %define msrc dl
   286                              <2>  %elifidni %3,dl
   286                              <2>  %assign size SIZE_BYTE
   286                              <2>  %elifidni %3,ax
   286                              <2>  %assign size SIZE_SHORT
   286                              <2>  %define msrc dx
   286                              <2>  %elifidni %3,dx
   286                              <2>  %assign size SIZE_SHORT
   286                              <2>  %else
   286                              <2>  %assign size SIZE_LONG
   286                              <2>  %define msrc edx
   286                              <2>  %endif
   286 0000C647 070502              <2>  db %%end-%%beg,%6,size
   286                              <2> %%name:
   286 0000C64A 383120434D502000    <2>  db %1,' ',0
   286                              <2> %%beg:
   286                              <2>  %ifidni %4,none
   286                              <2>  %2 %3
   286                              <2>  %elifidni %4,mem
   286                              <2>  mov [0], msrc
   286                              <2>  %2 %3,[0]
   286                              <2>  %elifidni %5,none
   286 0000C652 81FAAAAAAAAA        <2>  %2 %3,%4
   286                              <2>  %else
   286                              <2>  %2 %3,%4,%5
   286                              <2>  %endif
   286 0000C658 C3                  <2>  ret
   286                              <2> %%end:
   287                              <1> 	defOp    "3A CMP",cmp,al,mem,none,TYPE_LOGIC              ;    3A 05 00000000
   287                              <2>  %ifidni %3,al
   287                              <2>  %assign size SIZE_BYTE
   287                              <2>  %define msrc dl
   287                              <2>  %elifidni %3,dl
   287                              <2>  %assign size SIZE_BYTE
   287                              <2>  %elifidni %3,ax
   287                              <2>  %assign size SIZE_SHORT
   287                              <2>  %define msrc dx
   287                              <2>  %elifidni %3,dx
   287                              <2>  %assign size SIZE_SHORT
   287                              <2>  %else
   287                              <2>  %assign size SIZE_LONG
   287                              <2>  %define msrc edx
   287                              <2>  %endif
   287 0000C659 0D0300              <2>  db %%end-%%beg,%6,size
   287                              <2> %%name:
   287 0000C65C 334120434D502000    <2>  db %1,' ',0
   287                              <2> %%beg:
   287                              <2>  %ifidni %4,none
   287                              <2>  %2 %3
   287                              <2>  %elifidni %4,mem
   287 0000C664 881500000000        <2>  mov [0], msrc
   287 0000C66A 3A0500000000        <2>  %2 %3,[0]
   287                              <2>  %elifidni %5,none
   287                              <2>  %2 %3,%4
   287                              <2>  %else
   287                              <2>  %2 %3,%4,%5
   287                              <2>  %endif
   287 0000C670 C3                  <2>  ret
   287                              <2> %%end:
   288                              <1> 	defOp    "3B CMP",cmp,ax,mem,none,TYPE_LOGIC              ; 66 3B 05 00000000
   288                              <2>  %ifidni %3,al
   288                              <2>  %assign size SIZE_BYTE
   288                              <2>  %define msrc dl
   288                              <2>  %elifidni %3,dl
   288                              <2>  %assign size SIZE_BYTE
   288                              <2>  %elifidni %3,ax
   288                              <2>  %assign size SIZE_SHORT
   288                              <2>  %define msrc dx
   288                              <2>  %elifidni %3,dx
   288                              <2>  %assign size SIZE_SHORT
   288                              <2>  %else
   288                              <2>  %assign size SIZE_LONG
   288                              <2>  %define msrc edx
   288                              <2>  %endif
   288 0000C671 0F0301              <2>  db %%end-%%beg,%6,size
   288                              <2> %%name:
   288 0000C674 334220434D502000    <2>  db %1,' ',0
   288                              <2> %%beg:
   288                              <2>  %ifidni %4,none
   288                              <2>  %2 %3
   288                              <2>  %elifidni %4,mem
   288 0000C67C 66891500000000      <2>  mov [0], msrc
   288 0000C683 663B0500000000      <2>  %2 %3,[0]
   288                              <2>  %elifidni %5,none
   288                              <2>  %2 %3,%4
   288                              <2>  %else
   288                              <2>  %2 %3,%4,%5
   288                              <2>  %endif
   288 0000C68A C3                  <2>  ret
   288                              <2> %%end:
   289                              <1> 	defOp    "3B CMP",cmp,eax,mem,none,TYPE_LOGIC             ;    3B 05 00000000
   289                              <2>  %ifidni %3,al
   289                              <2>  %assign size SIZE_BYTE
   289                              <2>  %define msrc dl
   289                              <2>  %elifidni %3,dl
   289                              <2>  %assign size SIZE_BYTE
   289                              <2>  %elifidni %3,ax
   289                              <2>  %assign size SIZE_SHORT
   289                              <2>  %define msrc dx
   289                              <2>  %elifidni %3,dx
   289                              <2>  %assign size SIZE_SHORT
   289                              <2>  %else
   289                              <2>  %assign size SIZE_LONG
   289                              <2>  %define msrc edx
   289                              <2>  %endif
   289 0000C68B 0D0302              <2>  db %%end-%%beg,%6,size
   289                              <2> %%name:
   289 0000C68E 334220434D502000    <2>  db %1,' ',0
   289                              <2> %%beg:
   289                              <2>  %ifidni %4,none
   289                              <2>  %2 %3
   289                              <2>  %elifidni %4,mem
   289 0000C696 891500000000        <2>  mov [0], msrc
   289 0000C69C 3B0500000000        <2>  %2 %3,[0]
   289                              <2>  %elifidni %5,none
   289                              <2>  %2 %3,%4
   289                              <2>  %else
   289                              <2>  %2 %3,%4,%5
   289                              <2>  %endif
   289 0000C6A2 C3                  <2>  ret
   289                              <2> %%end:
   290                              <1> 	defOp    "84 TEST",test,al,dl,none,TYPE_LOGIC             ;    84 D0
   290                              <2>  %ifidni %3,al
   290                              <2>  %assign size SIZE_BYTE
   290                              <2>  %define msrc dl
   290                              <2>  %elifidni %3,dl
   290                              <2>  %assign size SIZE_BYTE
   290                              <2>  %elifidni %3,ax
   290                              <2>  %assign size SIZE_SHORT
   290                              <2>  %define msrc dx
   290                              <2>  %elifidni %3,dx
   290                              <2>  %assign size SIZE_SHORT
   290                              <2>  %else
   290                              <2>  %assign size SIZE_LONG
   290                              <2>  %define msrc edx
   290                              <2>  %endif
   290 0000C6A3 030300              <2>  db %%end-%%beg,%6,size
   290                              <2> %%name:
   290 0000C6A6 383420544553542000  <2>  db %1,' ',0
   290                              <2> %%beg:
   290                              <2>  %ifidni %4,none
   290                              <2>  %2 %3
   290                              <2>  %elifidni %4,mem
   290                              <2>  mov [0], msrc
   290                              <2>  %2 %3,[0]
   290                              <2>  %elifidni %5,none
   290 0000C6AF 84D0                <2>  %2 %3,%4
   290                              <2>  %else
   290                              <2>  %2 %3,%4,%5
   290                              <2>  %endif
   290 0000C6B1 C3                  <2>  ret
   290                              <2> %%end:
   291                              <1> 	defOp    "85 TEST",test,ax,dx,none,TYPE_LOGIC             ; 66 85 D0
   291                              <2>  %ifidni %3,al
   291                              <2>  %assign size SIZE_BYTE
   291                              <2>  %define msrc dl
   291                              <2>  %elifidni %3,dl
   291                              <2>  %assign size SIZE_BYTE
   291                              <2>  %elifidni %3,ax
   291                              <2>  %assign size SIZE_SHORT
   291                              <2>  %define msrc dx
   291                              <2>  %elifidni %3,dx
   291                              <2>  %assign size SIZE_SHORT
   291                              <2>  %else
   291                              <2>  %assign size SIZE_LONG
   291                              <2>  %define msrc edx
   291                              <2>  %endif
   291 0000C6B2 040301              <2>  db %%end-%%beg,%6,size
   291                              <2> %%name:
   291 0000C6B5 383520544553542000  <2>  db %1,' ',0
   291                              <2> %%beg:
   291                              <2>  %ifidni %4,none
   291                              <2>  %2 %3
   291                              <2>  %elifidni %4,mem
   291                              <2>  mov [0], msrc
   291                              <2>  %2 %3,[0]
   291                              <2>  %elifidni %5,none
   291 0000C6BE 6685D0              <2>  %2 %3,%4
   291                              <2>  %else
   291                              <2>  %2 %3,%4,%5
   291                              <2>  %endif
   291 0000C6C1 C3                  <2>  ret
   291                              <2> %%end:
   292                              <1> 	defOp    "85 TEST",test,eax,edx,none,TYPE_LOGIC           ;    85 D0
   292                              <2>  %ifidni %3,al
   292                              <2>  %assign size SIZE_BYTE
   292                              <2>  %define msrc dl
   292                              <2>  %elifidni %3,dl
   292                              <2>  %assign size SIZE_BYTE
   292                              <2>  %elifidni %3,ax
   292                              <2>  %assign size SIZE_SHORT
   292                              <2>  %define msrc dx
   292                              <2>  %elifidni %3,dx
   292                              <2>  %assign size SIZE_SHORT
   292                              <2>  %else
   292                              <2>  %assign size SIZE_LONG
   292                              <2>  %define msrc edx
   292                              <2>  %endif
   292 0000C6C2 030302              <2>  db %%end-%%beg,%6,size
   292                              <2> %%name:
   292 0000C6C5 383520544553542000  <2>  db %1,' ',0
   292                              <2> %%beg:
   292                              <2>  %ifidni %4,none
   292                              <2>  %2 %3
   292                              <2>  %elifidni %4,mem
   292                              <2>  mov [0], msrc
   292                              <2>  %2 %3,[0]
   292                              <2>  %elifidni %5,none
   292 0000C6CE 85D0                <2>  %2 %3,%4
   292                              <2>  %else
   292                              <2>  %2 %3,%4,%5
   292                              <2>  %endif
   292 0000C6D0 C3                  <2>  ret
   292                              <2> %%end:
   293                              <1> 	defOp    "A8 TEST",test,al,0xAA,none,TYPE_LOGIC1          ;    A8 AA
   293                              <2>  %ifidni %3,al
   293                              <2>  %assign size SIZE_BYTE
   293                              <2>  %define msrc dl
   293                              <2>  %elifidni %3,dl
   293                              <2>  %assign size SIZE_BYTE
   293                              <2>  %elifidni %3,ax
   293                              <2>  %assign size SIZE_SHORT
   293                              <2>  %define msrc dx
   293                              <2>  %elifidni %3,dx
   293                              <2>  %assign size SIZE_SHORT
   293                              <2>  %else
   293                              <2>  %assign size SIZE_LONG
   293                              <2>  %define msrc edx
   293                              <2>  %endif
   293 0000C6D1 030400              <2>  db %%end-%%beg,%6,size
   293                              <2> %%name:
   293 0000C6D4 413820544553542000  <2>  db %1,' ',0
   293                              <2> %%beg:
   293                              <2>  %ifidni %4,none
   293                              <2>  %2 %3
   293                              <2>  %elifidni %4,mem
   293                              <2>  mov [0], msrc
   293                              <2>  %2 %3,[0]
   293                              <2>  %elifidni %5,none
   293 0000C6DD A8AA                <2>  %2 %3,%4
   293                              <2>  %else
   293                              <2>  %2 %3,%4,%5
   293                              <2>  %endif
   293 0000C6DF C3                  <2>  ret
   293                              <2> %%end:
   294                              <1> 	defOp    "A9 TEST",test,ax,0xAAAA,none,TYPE_LOGIC1        ; 66 A9 AAAA
   294                              <2>  %ifidni %3,al
   294                              <2>  %assign size SIZE_BYTE
   294                              <2>  %define msrc dl
   294                              <2>  %elifidni %3,dl
   294                              <2>  %assign size SIZE_BYTE
   294                              <2>  %elifidni %3,ax
   294                              <2>  %assign size SIZE_SHORT
   294                              <2>  %define msrc dx
   294                              <2>  %elifidni %3,dx
   294                              <2>  %assign size SIZE_SHORT
   294                              <2>  %else
   294                              <2>  %assign size SIZE_LONG
   294                              <2>  %define msrc edx
   294                              <2>  %endif
   294 0000C6E0 050401              <2>  db %%end-%%beg,%6,size
   294                              <2> %%name:
   294 0000C6E3 413920544553542000  <2>  db %1,' ',0
   294                              <2> %%beg:
   294                              <2>  %ifidni %4,none
   294                              <2>  %2 %3
   294                              <2>  %elifidni %4,mem
   294                              <2>  mov [0], msrc
   294                              <2>  %2 %3,[0]
   294                              <2>  %elifidni %5,none
   294 0000C6EC 66A9AAAA            <2>  %2 %3,%4
   294                              <2>  %else
   294                              <2>  %2 %3,%4,%5
   294                              <2>  %endif
   294 0000C6F0 C3                  <2>  ret
   294                              <2> %%end:
   295                              <1> 	defOp    "A9 TEST",test,eax,0xAAAAAAAA,none,TYPE_LOGIC1   ;    A9 AAAAAAAA
   295                              <2>  %ifidni %3,al
   295                              <2>  %assign size SIZE_BYTE
   295                              <2>  %define msrc dl
   295                              <2>  %elifidni %3,dl
   295                              <2>  %assign size SIZE_BYTE
   295                              <2>  %elifidni %3,ax
   295                              <2>  %assign size SIZE_SHORT
   295                              <2>  %define msrc dx
   295                              <2>  %elifidni %3,dx
   295                              <2>  %assign size SIZE_SHORT
   295                              <2>  %else
   295                              <2>  %assign size SIZE_LONG
   295                              <2>  %define msrc edx
   295                              <2>  %endif
   295 0000C6F1 060402              <2>  db %%end-%%beg,%6,size
   295                              <2> %%name:
   295 0000C6F4 413920544553542000  <2>  db %1,' ',0
   295                              <2> %%beg:
   295                              <2>  %ifidni %4,none
   295                              <2>  %2 %3
   295                              <2>  %elifidni %4,mem
   295                              <2>  mov [0], msrc
   295                              <2>  %2 %3,[0]
   295                              <2>  %elifidni %5,none
   295 0000C6FD A9AAAAAAAA          <2>  %2 %3,%4
   295                              <2>  %else
   295                              <2>  %2 %3,%4,%5
   295                              <2>  %endif
   295 0000C702 C3                  <2>  ret
   295                              <2> %%end:
   296                              <1> 	defOp    "F6 TEST",test,dl,0xAA,none,TYPE_LOGIC1D         ;    F6 C2 AA
   296                              <2>  %ifidni %3,al
   296                              <2>  %assign size SIZE_BYTE
   296                              <2>  %define msrc dl
   296                              <2>  %elifidni %3,dl
   296                              <2>  %assign size SIZE_BYTE
   296                              <2>  %elifidni %3,ax
   296                              <2>  %assign size SIZE_SHORT
   296                              <2>  %define msrc dx
   296                              <2>  %elifidni %3,dx
   296                              <2>  %assign size SIZE_SHORT
   296                              <2>  %else
   296                              <2>  %assign size SIZE_LONG
   296                              <2>  %define msrc edx
   296                              <2>  %endif
   296 0000C703 040500              <2>  db %%end-%%beg,%6,size
   296                              <2> %%name:
   296 0000C706 463620544553542000  <2>  db %1,' ',0
   296                              <2> %%beg:
   296                              <2>  %ifidni %4,none
   296                              <2>  %2 %3
   296                              <2>  %elifidni %4,mem
   296                              <2>  mov [0], msrc
   296                              <2>  %2 %3,[0]
   296                              <2>  %elifidni %5,none
   296 0000C70F F6C2AA              <2>  %2 %3,%4
   296                              <2>  %else
   296                              <2>  %2 %3,%4,%5
   296                              <2>  %endif
   296 0000C712 C3                  <2>  ret
   296                              <2> %%end:
   297                              <1> 	defOp    "F7 TEST",test,dx,0xAAAA,none,TYPE_LOGIC1D       ; 66 F7 C2 AAAA
   297                              <2>  %ifidni %3,al
   297                              <2>  %assign size SIZE_BYTE
   297                              <2>  %define msrc dl
   297                              <2>  %elifidni %3,dl
   297                              <2>  %assign size SIZE_BYTE
   297                              <2>  %elifidni %3,ax
   297                              <2>  %assign size SIZE_SHORT
   297                              <2>  %define msrc dx
   297                              <2>  %elifidni %3,dx
   297                              <2>  %assign size SIZE_SHORT
   297                              <2>  %else
   297                              <2>  %assign size SIZE_LONG
   297                              <2>  %define msrc edx
   297                              <2>  %endif
   297 0000C713 060501              <2>  db %%end-%%beg,%6,size
   297                              <2> %%name:
   297 0000C716 463720544553542000  <2>  db %1,' ',0
   297                              <2> %%beg:
   297                              <2>  %ifidni %4,none
   297                              <2>  %2 %3
   297                              <2>  %elifidni %4,mem
   297                              <2>  mov [0], msrc
   297                              <2>  %2 %3,[0]
   297                              <2>  %elifidni %5,none
   297 0000C71F 66F7C2AAAA          <2>  %2 %3,%4
   297                              <2>  %else
   297                              <2>  %2 %3,%4,%5
   297                              <2>  %endif
   297 0000C724 C3                  <2>  ret
   297                              <2> %%end:
   298                              <1> 	defOp    "F7 TEST",test,edx,0xAAAAAAAA,none,TYPE_LOGIC1D  ;    F7 C2 AAAAAAAA
   298                              <2>  %ifidni %3,al
   298                              <2>  %assign size SIZE_BYTE
   298                              <2>  %define msrc dl
   298                              <2>  %elifidni %3,dl
   298                              <2>  %assign size SIZE_BYTE
   298                              <2>  %elifidni %3,ax
   298                              <2>  %assign size SIZE_SHORT
   298                              <2>  %define msrc dx
   298                              <2>  %elifidni %3,dx
   298                              <2>  %assign size SIZE_SHORT
   298                              <2>  %else
   298                              <2>  %assign size SIZE_LONG
   298                              <2>  %define msrc edx
   298                              <2>  %endif
   298 0000C725 070502              <2>  db %%end-%%beg,%6,size
   298                              <2> %%name:
   298 0000C728 463720544553542000  <2>  db %1,' ',0
   298                              <2> %%beg:
   298                              <2>  %ifidni %4,none
   298                              <2>  %2 %3
   298                              <2>  %elifidni %4,mem
   298                              <2>  mov [0], msrc
   298                              <2>  %2 %3,[0]
   298                              <2>  %elifidni %5,none
   298 0000C731 F7C2AAAAAAAA        <2>  %2 %3,%4
   298                              <2>  %else
   298                              <2>  %2 %3,%4,%5
   298                              <2>  %endif
   298 0000C737 C3                  <2>  ret
   298                              <2> %%end:
   299                              <1> 	defOpInc "40 INC",inc,ax,word                             ; 66 40
   299                              <2>  %ifidni %4,byte
   299                              <2>  %assign size SIZE_BYTE
   299                              <2>  %define eAX al
   299                              <2>  %elifidni %4,word
   299                              <2>  %assign size SIZE_SHORT
   299                              <2>  %define eAX ax
   299                              <2>  %else
   299                              <2>  %assign size SIZE_LONG
   299                              <2>  %define eAX eax
   299                              <2>  %endif
   299 0000C738 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   299                              <2> %%name:
   299 0000C73B 343020494E432000    <2>  db %1,' ',0
   299                              <2> %%beg:
   299                              <2>  %ifidni %3,mem
   299                              <2>  mov [0], eAX
   299                              <2>  %2 %4 [0]
   299                              <2>  mov eAX, [0]
   299                              <2>  %else
   299 0000C743 6690                <2>  xchg eAX, %3
   299 0000C745 6640                <2>  %2 %3
   299 0000C747 6690                <2>  xchg eAX, %3
   299                              <2>  %endif
   299 0000C749 C3                  <2>  ret
   299                              <2> %%end:
   300                              <1> 	defOpInc "41 INC",inc,cx,word                             ; 66 41
   300                              <2>  %ifidni %4,byte
   300                              <2>  %assign size SIZE_BYTE
   300                              <2>  %define eAX al
   300                              <2>  %elifidni %4,word
   300                              <2>  %assign size SIZE_SHORT
   300                              <2>  %define eAX ax
   300                              <2>  %else
   300                              <2>  %assign size SIZE_LONG
   300                              <2>  %define eAX eax
   300                              <2>  %endif
   300 0000C74A 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   300                              <2> %%name:
   300 0000C74D 343120494E432000    <2>  db %1,' ',0
   300                              <2> %%beg:
   300                              <2>  %ifidni %3,mem
   300                              <2>  mov [0], eAX
   300                              <2>  %2 %4 [0]
   300                              <2>  mov eAX, [0]
   300                              <2>  %else
   300 0000C755 6691                <2>  xchg eAX, %3
   300 0000C757 6641                <2>  %2 %3
   300 0000C759 6691                <2>  xchg eAX, %3
   300                              <2>  %endif
   300 0000C75B C3                  <2>  ret
   300                              <2> %%end:
   301                              <1> 	defOpInc "42 INC",inc,dx,word                             ; 66 42
   301                              <2>  %ifidni %4,byte
   301                              <2>  %assign size SIZE_BYTE
   301                              <2>  %define eAX al
   301                              <2>  %elifidni %4,word
   301                              <2>  %assign size SIZE_SHORT
   301                              <2>  %define eAX ax
   301                              <2>  %else
   301                              <2>  %assign size SIZE_LONG
   301                              <2>  %define eAX eax
   301                              <2>  %endif
   301 0000C75C 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   301                              <2> %%name:
   301 0000C75F 343220494E432000    <2>  db %1,' ',0
   301                              <2> %%beg:
   301                              <2>  %ifidni %3,mem
   301                              <2>  mov [0], eAX
   301                              <2>  %2 %4 [0]
   301                              <2>  mov eAX, [0]
   301                              <2>  %else
   301 0000C767 6692                <2>  xchg eAX, %3
   301 0000C769 6642                <2>  %2 %3
   301 0000C76B 6692                <2>  xchg eAX, %3
   301                              <2>  %endif
   301 0000C76D C3                  <2>  ret
   301                              <2> %%end:
   302                              <1> 	defOpInc "43 INC",inc,bx,word                             ; 66 43
   302                              <2>  %ifidni %4,byte
   302                              <2>  %assign size SIZE_BYTE
   302                              <2>  %define eAX al
   302                              <2>  %elifidni %4,word
   302                              <2>  %assign size SIZE_SHORT
   302                              <2>  %define eAX ax
   302                              <2>  %else
   302                              <2>  %assign size SIZE_LONG
   302                              <2>  %define eAX eax
   302                              <2>  %endif
   302 0000C76E 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   302                              <2> %%name:
   302 0000C771 343320494E432000    <2>  db %1,' ',0
   302                              <2> %%beg:
   302                              <2>  %ifidni %3,mem
   302                              <2>  mov [0], eAX
   302                              <2>  %2 %4 [0]
   302                              <2>  mov eAX, [0]
   302                              <2>  %else
   302 0000C779 6693                <2>  xchg eAX, %3
   302 0000C77B 6643                <2>  %2 %3
   302 0000C77D 6693                <2>  xchg eAX, %3
   302                              <2>  %endif
   302 0000C77F C3                  <2>  ret
   302                              <2> %%end:
   303                              <1> 	defOpInc "44 INC",inc,sp,word                             ; 66 44
   303                              <2>  %ifidni %4,byte
   303                              <2>  %assign size SIZE_BYTE
   303                              <2>  %define eAX al
   303                              <2>  %elifidni %4,word
   303                              <2>  %assign size SIZE_SHORT
   303                              <2>  %define eAX ax
   303                              <2>  %else
   303                              <2>  %assign size SIZE_LONG
   303                              <2>  %define eAX eax
   303                              <2>  %endif
   303 0000C780 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   303                              <2> %%name:
   303 0000C783 343420494E432000    <2>  db %1,' ',0
   303                              <2> %%beg:
   303                              <2>  %ifidni %3,mem
   303                              <2>  mov [0], eAX
   303                              <2>  %2 %4 [0]
   303                              <2>  mov eAX, [0]
   303                              <2>  %else
   303 0000C78B 6694                <2>  xchg eAX, %3
   303 0000C78D 6644                <2>  %2 %3
   303 0000C78F 6694                <2>  xchg eAX, %3
   303                              <2>  %endif
   303 0000C791 C3                  <2>  ret
   303                              <2> %%end:
   304                              <1> 	defOpInc "45 INC",inc,bp,word                             ; 66 45
   304                              <2>  %ifidni %4,byte
   304                              <2>  %assign size SIZE_BYTE
   304                              <2>  %define eAX al
   304                              <2>  %elifidni %4,word
   304                              <2>  %assign size SIZE_SHORT
   304                              <2>  %define eAX ax
   304                              <2>  %else
   304                              <2>  %assign size SIZE_LONG
   304                              <2>  %define eAX eax
   304                              <2>  %endif
   304 0000C792 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   304                              <2> %%name:
   304 0000C795 343520494E432000    <2>  db %1,' ',0
   304                              <2> %%beg:
   304                              <2>  %ifidni %3,mem
   304                              <2>  mov [0], eAX
   304                              <2>  %2 %4 [0]
   304                              <2>  mov eAX, [0]
   304                              <2>  %else
   304 0000C79D 6695                <2>  xchg eAX, %3
   304 0000C79F 6645                <2>  %2 %3
   304 0000C7A1 6695                <2>  xchg eAX, %3
   304                              <2>  %endif
   304 0000C7A3 C3                  <2>  ret
   304                              <2> %%end:
   305                              <1> 	defOpInc "46 INC",inc,si,word                             ; 66 46
   305                              <2>  %ifidni %4,byte
   305                              <2>  %assign size SIZE_BYTE
   305                              <2>  %define eAX al
   305                              <2>  %elifidni %4,word
   305                              <2>  %assign size SIZE_SHORT
   305                              <2>  %define eAX ax
   305                              <2>  %else
   305                              <2>  %assign size SIZE_LONG
   305                              <2>  %define eAX eax
   305                              <2>  %endif
   305 0000C7A4 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   305                              <2> %%name:
   305 0000C7A7 343620494E432000    <2>  db %1,' ',0
   305                              <2> %%beg:
   305                              <2>  %ifidni %3,mem
   305                              <2>  mov [0], eAX
   305                              <2>  %2 %4 [0]
   305                              <2>  mov eAX, [0]
   305                              <2>  %else
   305 0000C7AF 6696                <2>  xchg eAX, %3
   305 0000C7B1 6646                <2>  %2 %3
   305 0000C7B3 6696                <2>  xchg eAX, %3
   305                              <2>  %endif
   305 0000C7B5 C3                  <2>  ret
   305                              <2> %%end:
   306                              <1> 	defOpInc "47 INC",inc,di,word                             ; 66 47
   306                              <2>  %ifidni %4,byte
   306                              <2>  %assign size SIZE_BYTE
   306                              <2>  %define eAX al
   306                              <2>  %elifidni %4,word
   306                              <2>  %assign size SIZE_SHORT
   306                              <2>  %define eAX ax
   306                              <2>  %else
   306                              <2>  %assign size SIZE_LONG
   306                              <2>  %define eAX eax
   306                              <2>  %endif
   306 0000C7B6 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   306                              <2> %%name:
   306 0000C7B9 343720494E432000    <2>  db %1,' ',0
   306                              <2> %%beg:
   306                              <2>  %ifidni %3,mem
   306                              <2>  mov [0], eAX
   306                              <2>  %2 %4 [0]
   306                              <2>  mov eAX, [0]
   306                              <2>  %else
   306 0000C7C1 6697                <2>  xchg eAX, %3
   306 0000C7C3 6647                <2>  %2 %3
   306 0000C7C5 6697                <2>  xchg eAX, %3
   306                              <2>  %endif
   306 0000C7C7 C3                  <2>  ret
   306                              <2> %%end:
   307                              <1> 	defOpInc "40 INC",inc,eax,dword                           ;    40
   307                              <2>  %ifidni %4,byte
   307                              <2>  %assign size SIZE_BYTE
   307                              <2>  %define eAX al
   307                              <2>  %elifidni %4,word
   307                              <2>  %assign size SIZE_SHORT
   307                              <2>  %define eAX ax
   307                              <2>  %else
   307                              <2>  %assign size SIZE_LONG
   307                              <2>  %define eAX eax
   307                              <2>  %endif
   307 0000C7C8 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   307                              <2> %%name:
   307 0000C7CB 343020494E432000    <2>  db %1,' ',0
   307                              <2> %%beg:
   307                              <2>  %ifidni %3,mem
   307                              <2>  mov [0], eAX
   307                              <2>  %2 %4 [0]
   307                              <2>  mov eAX, [0]
   307                              <2>  %else
   307 0000C7D3 90                  <2>  xchg eAX, %3
   307 0000C7D4 40                  <2>  %2 %3
   307 0000C7D5 90                  <2>  xchg eAX, %3
   307                              <2>  %endif
   307 0000C7D6 C3                  <2>  ret
   307                              <2> %%end:
   308                              <1> 	defOpInc "41 INC",inc,ecx,dword                           ;    41
   308                              <2>  %ifidni %4,byte
   308                              <2>  %assign size SIZE_BYTE
   308                              <2>  %define eAX al
   308                              <2>  %elifidni %4,word
   308                              <2>  %assign size SIZE_SHORT
   308                              <2>  %define eAX ax
   308                              <2>  %else
   308                              <2>  %assign size SIZE_LONG
   308                              <2>  %define eAX eax
   308                              <2>  %endif
   308 0000C7D7 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   308                              <2> %%name:
   308 0000C7DA 343120494E432000    <2>  db %1,' ',0
   308                              <2> %%beg:
   308                              <2>  %ifidni %3,mem
   308                              <2>  mov [0], eAX
   308                              <2>  %2 %4 [0]
   308                              <2>  mov eAX, [0]
   308                              <2>  %else
   308 0000C7E2 91                  <2>  xchg eAX, %3
   308 0000C7E3 41                  <2>  %2 %3
   308 0000C7E4 91                  <2>  xchg eAX, %3
   308                              <2>  %endif
   308 0000C7E5 C3                  <2>  ret
   308                              <2> %%end:
   309                              <1> 	defOpInc "42 INC",inc,edx,dword                           ;    42
   309                              <2>  %ifidni %4,byte
   309                              <2>  %assign size SIZE_BYTE
   309                              <2>  %define eAX al
   309                              <2>  %elifidni %4,word
   309                              <2>  %assign size SIZE_SHORT
   309                              <2>  %define eAX ax
   309                              <2>  %else
   309                              <2>  %assign size SIZE_LONG
   309                              <2>  %define eAX eax
   309                              <2>  %endif
   309 0000C7E6 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   309                              <2> %%name:
   309 0000C7E9 343220494E432000    <2>  db %1,' ',0
   309                              <2> %%beg:
   309                              <2>  %ifidni %3,mem
   309                              <2>  mov [0], eAX
   309                              <2>  %2 %4 [0]
   309                              <2>  mov eAX, [0]
   309                              <2>  %else
   309 0000C7F1 92                  <2>  xchg eAX, %3
   309 0000C7F2 42                  <2>  %2 %3
   309 0000C7F3 92                  <2>  xchg eAX, %3
   309                              <2>  %endif
   309 0000C7F4 C3                  <2>  ret
   309                              <2> %%end:
   310                              <1> 	defOpInc "43 INC",inc,ebx,dword                           ;    43
   310                              <2>  %ifidni %4,byte
   310                              <2>  %assign size SIZE_BYTE
   310                              <2>  %define eAX al
   310                              <2>  %elifidni %4,word
   310                              <2>  %assign size SIZE_SHORT
   310                              <2>  %define eAX ax
   310                              <2>  %else
   310                              <2>  %assign size SIZE_LONG
   310                              <2>  %define eAX eax
   310                              <2>  %endif
   310 0000C7F5 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   310                              <2> %%name:
   310 0000C7F8 343320494E432000    <2>  db %1,' ',0
   310                              <2> %%beg:
   310                              <2>  %ifidni %3,mem
   310                              <2>  mov [0], eAX
   310                              <2>  %2 %4 [0]
   310                              <2>  mov eAX, [0]
   310                              <2>  %else
   310 0000C800 93                  <2>  xchg eAX, %3
   310 0000C801 43                  <2>  %2 %3
   310 0000C802 93                  <2>  xchg eAX, %3
   310                              <2>  %endif
   310 0000C803 C3                  <2>  ret
   310                              <2> %%end:
   311                              <1> 	defOpInc "44 INC",inc,esp,dword                           ;    44
   311                              <2>  %ifidni %4,byte
   311                              <2>  %assign size SIZE_BYTE
   311                              <2>  %define eAX al
   311                              <2>  %elifidni %4,word
   311                              <2>  %assign size SIZE_SHORT
   311                              <2>  %define eAX ax
   311                              <2>  %else
   311                              <2>  %assign size SIZE_LONG
   311                              <2>  %define eAX eax
   311                              <2>  %endif
   311 0000C804 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   311                              <2> %%name:
   311 0000C807 343420494E432000    <2>  db %1,' ',0
   311                              <2> %%beg:
   311                              <2>  %ifidni %3,mem
   311                              <2>  mov [0], eAX
   311                              <2>  %2 %4 [0]
   311                              <2>  mov eAX, [0]
   311                              <2>  %else
   311 0000C80F 94                  <2>  xchg eAX, %3
   311 0000C810 44                  <2>  %2 %3
   311 0000C811 94                  <2>  xchg eAX, %3
   311                              <2>  %endif
   311 0000C812 C3                  <2>  ret
   311                              <2> %%end:
   312                              <1> 	defOpInc "45 INC",inc,ebp,dword                           ;    45
   312                              <2>  %ifidni %4,byte
   312                              <2>  %assign size SIZE_BYTE
   312                              <2>  %define eAX al
   312                              <2>  %elifidni %4,word
   312                              <2>  %assign size SIZE_SHORT
   312                              <2>  %define eAX ax
   312                              <2>  %else
   312                              <2>  %assign size SIZE_LONG
   312                              <2>  %define eAX eax
   312                              <2>  %endif
   312 0000C813 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   312                              <2> %%name:
   312 0000C816 343520494E432000    <2>  db %1,' ',0
   312                              <2> %%beg:
   312                              <2>  %ifidni %3,mem
   312                              <2>  mov [0], eAX
   312                              <2>  %2 %4 [0]
   312                              <2>  mov eAX, [0]
   312                              <2>  %else
   312 0000C81E 95                  <2>  xchg eAX, %3
   312 0000C81F 45                  <2>  %2 %3
   312 0000C820 95                  <2>  xchg eAX, %3
   312                              <2>  %endif
   312 0000C821 C3                  <2>  ret
   312                              <2> %%end:
   313                              <1> 	defOpInc "46 INC",inc,esi,dword                           ;    46
   313                              <2>  %ifidni %4,byte
   313                              <2>  %assign size SIZE_BYTE
   313                              <2>  %define eAX al
   313                              <2>  %elifidni %4,word
   313                              <2>  %assign size SIZE_SHORT
   313                              <2>  %define eAX ax
   313                              <2>  %else
   313                              <2>  %assign size SIZE_LONG
   313                              <2>  %define eAX eax
   313                              <2>  %endif
   313 0000C822 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   313                              <2> %%name:
   313 0000C825 343620494E432000    <2>  db %1,' ',0
   313                              <2> %%beg:
   313                              <2>  %ifidni %3,mem
   313                              <2>  mov [0], eAX
   313                              <2>  %2 %4 [0]
   313                              <2>  mov eAX, [0]
   313                              <2>  %else
   313 0000C82D 96                  <2>  xchg eAX, %3
   313 0000C82E 46                  <2>  %2 %3
   313 0000C82F 96                  <2>  xchg eAX, %3
   313                              <2>  %endif
   313 0000C830 C3                  <2>  ret
   313                              <2> %%end:
   314                              <1> 	defOpInc "47 INC",inc,edi,dword                           ;    47
   314                              <2>  %ifidni %4,byte
   314                              <2>  %assign size SIZE_BYTE
   314                              <2>  %define eAX al
   314                              <2>  %elifidni %4,word
   314                              <2>  %assign size SIZE_SHORT
   314                              <2>  %define eAX ax
   314                              <2>  %else
   314                              <2>  %assign size SIZE_LONG
   314                              <2>  %define eAX eax
   314                              <2>  %endif
   314 0000C831 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   314                              <2> %%name:
   314 0000C834 343720494E432000    <2>  db %1,' ',0
   314                              <2> %%beg:
   314                              <2>  %ifidni %3,mem
   314                              <2>  mov [0], eAX
   314                              <2>  %2 %4 [0]
   314                              <2>  mov eAX, [0]
   314                              <2>  %else
   314 0000C83C 97                  <2>  xchg eAX, %3
   314 0000C83D 47                  <2>  %2 %3
   314 0000C83E 97                  <2>  xchg eAX, %3
   314                              <2>  %endif
   314 0000C83F C3                  <2>  ret
   314                              <2> %%end:
   315                              <1> 	defOpInc "FE INC",inc,mem,byte                            ;    FE 05 00000000
   315                              <2>  %ifidni %4,byte
   315                              <2>  %assign size SIZE_BYTE
   315                              <2>  %define eAX al
   315                              <2>  %elifidni %4,word
   315                              <2>  %assign size SIZE_SHORT
   315                              <2>  %define eAX ax
   315                              <2>  %else
   315                              <2>  %assign size SIZE_LONG
   315                              <2>  %define eAX eax
   315                              <2>  %endif
   315 0000C840 110100              <2>  db %%end-%%beg,TYPE_ARITH1,size
   315                              <2> %%name:
   315 0000C843 464520494E432000    <2>  db %1,' ',0
   315                              <2> %%beg:
   315                              <2>  %ifidni %3,mem
   315 0000C84B A200000000          <2>  mov [0], eAX
   315 0000C850 FE0500000000        <2>  %2 %4 [0]
   315 0000C856 A000000000          <2>  mov eAX, [0]
   315                              <2>  %else
   315                              <2>  xchg eAX, %3
   315                              <2>  %2 %3
   315                              <2>  xchg eAX, %3
   315                              <2>  %endif
   315 0000C85B C3                  <2>  ret
   315                              <2> %%end:
   316                              <1> 	defOpInc "FF INC",inc,mem,word                            ; 66 FF 05 00000000
   316                              <2>  %ifidni %4,byte
   316                              <2>  %assign size SIZE_BYTE
   316                              <2>  %define eAX al
   316                              <2>  %elifidni %4,word
   316                              <2>  %assign size SIZE_SHORT
   316                              <2>  %define eAX ax
   316                              <2>  %else
   316                              <2>  %assign size SIZE_LONG
   316                              <2>  %define eAX eax
   316                              <2>  %endif
   316 0000C85C 140101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   316                              <2> %%name:
   316 0000C85F 464620494E432000    <2>  db %1,' ',0
   316                              <2> %%beg:
   316                              <2>  %ifidni %3,mem
   316 0000C867 66A300000000        <2>  mov [0], eAX
   316 0000C86D 66FF0500000000      <2>  %2 %4 [0]
   316 0000C874 66A100000000        <2>  mov eAX, [0]
   316                              <2>  %else
   316                              <2>  xchg eAX, %3
   316                              <2>  %2 %3
   316                              <2>  xchg eAX, %3
   316                              <2>  %endif
   316 0000C87A C3                  <2>  ret
   316                              <2> %%end:
   317                              <1> 	defOpInc "FF INC",inc,mem,dword                           ;    FF 05 00000000
   317                              <2>  %ifidni %4,byte
   317                              <2>  %assign size SIZE_BYTE
   317                              <2>  %define eAX al
   317                              <2>  %elifidni %4,word
   317                              <2>  %assign size SIZE_SHORT
   317                              <2>  %define eAX ax
   317                              <2>  %else
   317                              <2>  %assign size SIZE_LONG
   317                              <2>  %define eAX eax
   317                              <2>  %endif
   317 0000C87B 110102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   317                              <2> %%name:
   317 0000C87E 464620494E432000    <2>  db %1,' ',0
   317                              <2> %%beg:
   317                              <2>  %ifidni %3,mem
   317 0000C886 A300000000          <2>  mov [0], eAX
   317 0000C88B FF0500000000        <2>  %2 %4 [0]
   317 0000C891 A100000000          <2>  mov eAX, [0]
   317                              <2>  %else
   317                              <2>  xchg eAX, %3
   317                              <2>  %2 %3
   317                              <2>  xchg eAX, %3
   317                              <2>  %endif
   317 0000C896 C3                  <2>  ret
   317                              <2> %%end:
   318                              <1> 	defOpInc "48 DEC",dec,ax,word                             ; 66 48
   318                              <2>  %ifidni %4,byte
   318                              <2>  %assign size SIZE_BYTE
   318                              <2>  %define eAX al
   318                              <2>  %elifidni %4,word
   318                              <2>  %assign size SIZE_SHORT
   318                              <2>  %define eAX ax
   318                              <2>  %else
   318                              <2>  %assign size SIZE_LONG
   318                              <2>  %define eAX eax
   318                              <2>  %endif
   318 0000C897 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   318                              <2> %%name:
   318 0000C89A 3438204445432000    <2>  db %1,' ',0
   318                              <2> %%beg:
   318                              <2>  %ifidni %3,mem
   318                              <2>  mov [0], eAX
   318                              <2>  %2 %4 [0]
   318                              <2>  mov eAX, [0]
   318                              <2>  %else
   318 0000C8A2 6690                <2>  xchg eAX, %3
   318 0000C8A4 6648                <2>  %2 %3
   318 0000C8A6 6690                <2>  xchg eAX, %3
   318                              <2>  %endif
   318 0000C8A8 C3                  <2>  ret
   318                              <2> %%end:
   319                              <1> 	defOpInc "49 DEC",dec,cx,word                             ; 66 49
   319                              <2>  %ifidni %4,byte
   319                              <2>  %assign size SIZE_BYTE
   319                              <2>  %define eAX al
   319                              <2>  %elifidni %4,word
   319                              <2>  %assign size SIZE_SHORT
   319                              <2>  %define eAX ax
   319                              <2>  %else
   319                              <2>  %assign size SIZE_LONG
   319                              <2>  %define eAX eax
   319                              <2>  %endif
   319 0000C8A9 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   319                              <2> %%name:
   319 0000C8AC 3439204445432000    <2>  db %1,' ',0
   319                              <2> %%beg:
   319                              <2>  %ifidni %3,mem
   319                              <2>  mov [0], eAX
   319                              <2>  %2 %4 [0]
   319                              <2>  mov eAX, [0]
   319                              <2>  %else
   319 0000C8B4 6691                <2>  xchg eAX, %3
   319 0000C8B6 6649                <2>  %2 %3
   319 0000C8B8 6691                <2>  xchg eAX, %3
   319                              <2>  %endif
   319 0000C8BA C3                  <2>  ret
   319                              <2> %%end:
   320                              <1> 	defOpInc "4A DEC",dec,dx,word                             ; 66 4A
   320                              <2>  %ifidni %4,byte
   320                              <2>  %assign size SIZE_BYTE
   320                              <2>  %define eAX al
   320                              <2>  %elifidni %4,word
   320                              <2>  %assign size SIZE_SHORT
   320                              <2>  %define eAX ax
   320                              <2>  %else
   320                              <2>  %assign size SIZE_LONG
   320                              <2>  %define eAX eax
   320                              <2>  %endif
   320 0000C8BB 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   320                              <2> %%name:
   320 0000C8BE 3441204445432000    <2>  db %1,' ',0
   320                              <2> %%beg:
   320                              <2>  %ifidni %3,mem
   320                              <2>  mov [0], eAX
   320                              <2>  %2 %4 [0]
   320                              <2>  mov eAX, [0]
   320                              <2>  %else
   320 0000C8C6 6692                <2>  xchg eAX, %3
   320 0000C8C8 664A                <2>  %2 %3
   320 0000C8CA 6692                <2>  xchg eAX, %3
   320                              <2>  %endif
   320 0000C8CC C3                  <2>  ret
   320                              <2> %%end:
   321                              <1> 	defOpInc "4B DEC",dec,bx,word                             ; 66 4B
   321                              <2>  %ifidni %4,byte
   321                              <2>  %assign size SIZE_BYTE
   321                              <2>  %define eAX al
   321                              <2>  %elifidni %4,word
   321                              <2>  %assign size SIZE_SHORT
   321                              <2>  %define eAX ax
   321                              <2>  %else
   321                              <2>  %assign size SIZE_LONG
   321                              <2>  %define eAX eax
   321                              <2>  %endif
   321 0000C8CD 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   321                              <2> %%name:
   321 0000C8D0 3442204445432000    <2>  db %1,' ',0
   321                              <2> %%beg:
   321                              <2>  %ifidni %3,mem
   321                              <2>  mov [0], eAX
   321                              <2>  %2 %4 [0]
   321                              <2>  mov eAX, [0]
   321                              <2>  %else
   321 0000C8D8 6693                <2>  xchg eAX, %3
   321 0000C8DA 664B                <2>  %2 %3
   321 0000C8DC 6693                <2>  xchg eAX, %3
   321                              <2>  %endif
   321 0000C8DE C3                  <2>  ret
   321                              <2> %%end:
   322                              <1> 	defOpInc "4C DEC",dec,sp,word                             ; 66 4C
   322                              <2>  %ifidni %4,byte
   322                              <2>  %assign size SIZE_BYTE
   322                              <2>  %define eAX al
   322                              <2>  %elifidni %4,word
   322                              <2>  %assign size SIZE_SHORT
   322                              <2>  %define eAX ax
   322                              <2>  %else
   322                              <2>  %assign size SIZE_LONG
   322                              <2>  %define eAX eax
   322                              <2>  %endif
   322 0000C8DF 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   322                              <2> %%name:
   322 0000C8E2 3443204445432000    <2>  db %1,' ',0
   322                              <2> %%beg:
   322                              <2>  %ifidni %3,mem
   322                              <2>  mov [0], eAX
   322                              <2>  %2 %4 [0]
   322                              <2>  mov eAX, [0]
   322                              <2>  %else
   322 0000C8EA 6694                <2>  xchg eAX, %3
   322 0000C8EC 664C                <2>  %2 %3
   322 0000C8EE 6694                <2>  xchg eAX, %3
   322                              <2>  %endif
   322 0000C8F0 C3                  <2>  ret
   322                              <2> %%end:
   323                              <1> 	defOpInc "4D DEC",dec,bp,word                             ; 66 4D
   323                              <2>  %ifidni %4,byte
   323                              <2>  %assign size SIZE_BYTE
   323                              <2>  %define eAX al
   323                              <2>  %elifidni %4,word
   323                              <2>  %assign size SIZE_SHORT
   323                              <2>  %define eAX ax
   323                              <2>  %else
   323                              <2>  %assign size SIZE_LONG
   323                              <2>  %define eAX eax
   323                              <2>  %endif
   323 0000C8F1 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   323                              <2> %%name:
   323 0000C8F4 3444204445432000    <2>  db %1,' ',0
   323                              <2> %%beg:
   323                              <2>  %ifidni %3,mem
   323                              <2>  mov [0], eAX
   323                              <2>  %2 %4 [0]
   323                              <2>  mov eAX, [0]
   323                              <2>  %else
   323 0000C8FC 6695                <2>  xchg eAX, %3
   323 0000C8FE 664D                <2>  %2 %3
   323 0000C900 6695                <2>  xchg eAX, %3
   323                              <2>  %endif
   323 0000C902 C3                  <2>  ret
   323                              <2> %%end:
   324                              <1> 	defOpInc "4E DEC",dec,si,word                             ; 66 4E
   324                              <2>  %ifidni %4,byte
   324                              <2>  %assign size SIZE_BYTE
   324                              <2>  %define eAX al
   324                              <2>  %elifidni %4,word
   324                              <2>  %assign size SIZE_SHORT
   324                              <2>  %define eAX ax
   324                              <2>  %else
   324                              <2>  %assign size SIZE_LONG
   324                              <2>  %define eAX eax
   324                              <2>  %endif
   324 0000C903 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   324                              <2> %%name:
   324 0000C906 3445204445432000    <2>  db %1,' ',0
   324                              <2> %%beg:
   324                              <2>  %ifidni %3,mem
   324                              <2>  mov [0], eAX
   324                              <2>  %2 %4 [0]
   324                              <2>  mov eAX, [0]
   324                              <2>  %else
   324 0000C90E 6696                <2>  xchg eAX, %3
   324 0000C910 664E                <2>  %2 %3
   324 0000C912 6696                <2>  xchg eAX, %3
   324                              <2>  %endif
   324 0000C914 C3                  <2>  ret
   324                              <2> %%end:
   325                              <1> 	defOpInc "4F DEC",dec,di,word                             ; 66 4F
   325                              <2>  %ifidni %4,byte
   325                              <2>  %assign size SIZE_BYTE
   325                              <2>  %define eAX al
   325                              <2>  %elifidni %4,word
   325                              <2>  %assign size SIZE_SHORT
   325                              <2>  %define eAX ax
   325                              <2>  %else
   325                              <2>  %assign size SIZE_LONG
   325                              <2>  %define eAX eax
   325                              <2>  %endif
   325 0000C915 070101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   325                              <2> %%name:
   325 0000C918 3446204445432000    <2>  db %1,' ',0
   325                              <2> %%beg:
   325                              <2>  %ifidni %3,mem
   325                              <2>  mov [0], eAX
   325                              <2>  %2 %4 [0]
   325                              <2>  mov eAX, [0]
   325                              <2>  %else
   325 0000C920 6697                <2>  xchg eAX, %3
   325 0000C922 664F                <2>  %2 %3
   325 0000C924 6697                <2>  xchg eAX, %3
   325                              <2>  %endif
   325 0000C926 C3                  <2>  ret
   325                              <2> %%end:
   326                              <1> 	defOpInc "48 DEC",dec,eax,dword                           ;    48
   326                              <2>  %ifidni %4,byte
   326                              <2>  %assign size SIZE_BYTE
   326                              <2>  %define eAX al
   326                              <2>  %elifidni %4,word
   326                              <2>  %assign size SIZE_SHORT
   326                              <2>  %define eAX ax
   326                              <2>  %else
   326                              <2>  %assign size SIZE_LONG
   326                              <2>  %define eAX eax
   326                              <2>  %endif
   326 0000C927 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   326                              <2> %%name:
   326 0000C92A 3438204445432000    <2>  db %1,' ',0
   326                              <2> %%beg:
   326                              <2>  %ifidni %3,mem
   326                              <2>  mov [0], eAX
   326                              <2>  %2 %4 [0]
   326                              <2>  mov eAX, [0]
   326                              <2>  %else
   326 0000C932 90                  <2>  xchg eAX, %3
   326 0000C933 48                  <2>  %2 %3
   326 0000C934 90                  <2>  xchg eAX, %3
   326                              <2>  %endif
   326 0000C935 C3                  <2>  ret
   326                              <2> %%end:
   327                              <1> 	defOpInc "49 DEC",dec,ecx,dword                           ;    49
   327                              <2>  %ifidni %4,byte
   327                              <2>  %assign size SIZE_BYTE
   327                              <2>  %define eAX al
   327                              <2>  %elifidni %4,word
   327                              <2>  %assign size SIZE_SHORT
   327                              <2>  %define eAX ax
   327                              <2>  %else
   327                              <2>  %assign size SIZE_LONG
   327                              <2>  %define eAX eax
   327                              <2>  %endif
   327 0000C936 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   327                              <2> %%name:
   327 0000C939 3439204445432000    <2>  db %1,' ',0
   327                              <2> %%beg:
   327                              <2>  %ifidni %3,mem
   327                              <2>  mov [0], eAX
   327                              <2>  %2 %4 [0]
   327                              <2>  mov eAX, [0]
   327                              <2>  %else
   327 0000C941 91                  <2>  xchg eAX, %3
   327 0000C942 49                  <2>  %2 %3
   327 0000C943 91                  <2>  xchg eAX, %3
   327                              <2>  %endif
   327 0000C944 C3                  <2>  ret
   327                              <2> %%end:
   328                              <1> 	defOpInc "4A DEC",dec,edx,dword                           ;    4A
   328                              <2>  %ifidni %4,byte
   328                              <2>  %assign size SIZE_BYTE
   328                              <2>  %define eAX al
   328                              <2>  %elifidni %4,word
   328                              <2>  %assign size SIZE_SHORT
   328                              <2>  %define eAX ax
   328                              <2>  %else
   328                              <2>  %assign size SIZE_LONG
   328                              <2>  %define eAX eax
   328                              <2>  %endif
   328 0000C945 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   328                              <2> %%name:
   328 0000C948 3441204445432000    <2>  db %1,' ',0
   328                              <2> %%beg:
   328                              <2>  %ifidni %3,mem
   328                              <2>  mov [0], eAX
   328                              <2>  %2 %4 [0]
   328                              <2>  mov eAX, [0]
   328                              <2>  %else
   328 0000C950 92                  <2>  xchg eAX, %3
   328 0000C951 4A                  <2>  %2 %3
   328 0000C952 92                  <2>  xchg eAX, %3
   328                              <2>  %endif
   328 0000C953 C3                  <2>  ret
   328                              <2> %%end:
   329                              <1> 	defOpInc "4B DEC",dec,ebx,dword                           ;    4B
   329                              <2>  %ifidni %4,byte
   329                              <2>  %assign size SIZE_BYTE
   329                              <2>  %define eAX al
   329                              <2>  %elifidni %4,word
   329                              <2>  %assign size SIZE_SHORT
   329                              <2>  %define eAX ax
   329                              <2>  %else
   329                              <2>  %assign size SIZE_LONG
   329                              <2>  %define eAX eax
   329                              <2>  %endif
   329 0000C954 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   329                              <2> %%name:
   329 0000C957 3442204445432000    <2>  db %1,' ',0
   329                              <2> %%beg:
   329                              <2>  %ifidni %3,mem
   329                              <2>  mov [0], eAX
   329                              <2>  %2 %4 [0]
   329                              <2>  mov eAX, [0]
   329                              <2>  %else
   329 0000C95F 93                  <2>  xchg eAX, %3
   329 0000C960 4B                  <2>  %2 %3
   329 0000C961 93                  <2>  xchg eAX, %3
   329                              <2>  %endif
   329 0000C962 C3                  <2>  ret
   329                              <2> %%end:
   330                              <1> 	defOpInc "4C DEC",dec,esp,dword                           ;    4C
   330                              <2>  %ifidni %4,byte
   330                              <2>  %assign size SIZE_BYTE
   330                              <2>  %define eAX al
   330                              <2>  %elifidni %4,word
   330                              <2>  %assign size SIZE_SHORT
   330                              <2>  %define eAX ax
   330                              <2>  %else
   330                              <2>  %assign size SIZE_LONG
   330                              <2>  %define eAX eax
   330                              <2>  %endif
   330 0000C963 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   330                              <2> %%name:
   330 0000C966 3443204445432000    <2>  db %1,' ',0
   330                              <2> %%beg:
   330                              <2>  %ifidni %3,mem
   330                              <2>  mov [0], eAX
   330                              <2>  %2 %4 [0]
   330                              <2>  mov eAX, [0]
   330                              <2>  %else
   330 0000C96E 94                  <2>  xchg eAX, %3
   330 0000C96F 4C                  <2>  %2 %3
   330 0000C970 94                  <2>  xchg eAX, %3
   330                              <2>  %endif
   330 0000C971 C3                  <2>  ret
   330                              <2> %%end:
   331                              <1> 	defOpInc "4D DEC",dec,ebp,dword                           ;    4D
   331                              <2>  %ifidni %4,byte
   331                              <2>  %assign size SIZE_BYTE
   331                              <2>  %define eAX al
   331                              <2>  %elifidni %4,word
   331                              <2>  %assign size SIZE_SHORT
   331                              <2>  %define eAX ax
   331                              <2>  %else
   331                              <2>  %assign size SIZE_LONG
   331                              <2>  %define eAX eax
   331                              <2>  %endif
   331 0000C972 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   331                              <2> %%name:
   331 0000C975 3444204445432000    <2>  db %1,' ',0
   331                              <2> %%beg:
   331                              <2>  %ifidni %3,mem
   331                              <2>  mov [0], eAX
   331                              <2>  %2 %4 [0]
   331                              <2>  mov eAX, [0]
   331                              <2>  %else
   331 0000C97D 95                  <2>  xchg eAX, %3
   331 0000C97E 4D                  <2>  %2 %3
   331 0000C97F 95                  <2>  xchg eAX, %3
   331                              <2>  %endif
   331 0000C980 C3                  <2>  ret
   331                              <2> %%end:
   332                              <1> 	defOpInc "4E DEC",dec,esi,dword                           ;    4E
   332                              <2>  %ifidni %4,byte
   332                              <2>  %assign size SIZE_BYTE
   332                              <2>  %define eAX al
   332                              <2>  %elifidni %4,word
   332                              <2>  %assign size SIZE_SHORT
   332                              <2>  %define eAX ax
   332                              <2>  %else
   332                              <2>  %assign size SIZE_LONG
   332                              <2>  %define eAX eax
   332                              <2>  %endif
   332 0000C981 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   332                              <2> %%name:
   332 0000C984 3445204445432000    <2>  db %1,' ',0
   332                              <2> %%beg:
   332                              <2>  %ifidni %3,mem
   332                              <2>  mov [0], eAX
   332                              <2>  %2 %4 [0]
   332                              <2>  mov eAX, [0]
   332                              <2>  %else
   332 0000C98C 96                  <2>  xchg eAX, %3
   332 0000C98D 4E                  <2>  %2 %3
   332 0000C98E 96                  <2>  xchg eAX, %3
   332                              <2>  %endif
   332 0000C98F C3                  <2>  ret
   332                              <2> %%end:
   333                              <1> 	defOpInc "4F DEC",dec,edi,dword                           ;    4F
   333                              <2>  %ifidni %4,byte
   333                              <2>  %assign size SIZE_BYTE
   333                              <2>  %define eAX al
   333                              <2>  %elifidni %4,word
   333                              <2>  %assign size SIZE_SHORT
   333                              <2>  %define eAX ax
   333                              <2>  %else
   333                              <2>  %assign size SIZE_LONG
   333                              <2>  %define eAX eax
   333                              <2>  %endif
   333 0000C990 040102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   333                              <2> %%name:
   333 0000C993 3446204445432000    <2>  db %1,' ',0
   333                              <2> %%beg:
   333                              <2>  %ifidni %3,mem
   333                              <2>  mov [0], eAX
   333                              <2>  %2 %4 [0]
   333                              <2>  mov eAX, [0]
   333                              <2>  %else
   333 0000C99B 97                  <2>  xchg eAX, %3
   333 0000C99C 4F                  <2>  %2 %3
   333 0000C99D 97                  <2>  xchg eAX, %3
   333                              <2>  %endif
   333 0000C99E C3                  <2>  ret
   333                              <2> %%end:
   334                              <1> 	defOpInc "FE DEC",dec,mem,byte                            ;    FE 0D 00000000
   334                              <2>  %ifidni %4,byte
   334                              <2>  %assign size SIZE_BYTE
   334                              <2>  %define eAX al
   334                              <2>  %elifidni %4,word
   334                              <2>  %assign size SIZE_SHORT
   334                              <2>  %define eAX ax
   334                              <2>  %else
   334                              <2>  %assign size SIZE_LONG
   334                              <2>  %define eAX eax
   334                              <2>  %endif
   334 0000C99F 110100              <2>  db %%end-%%beg,TYPE_ARITH1,size
   334                              <2> %%name:
   334 0000C9A2 4645204445432000    <2>  db %1,' ',0
   334                              <2> %%beg:
   334                              <2>  %ifidni %3,mem
   334 0000C9AA A200000000          <2>  mov [0], eAX
   334 0000C9AF FE0D00000000        <2>  %2 %4 [0]
   334 0000C9B5 A000000000          <2>  mov eAX, [0]
   334                              <2>  %else
   334                              <2>  xchg eAX, %3
   334                              <2>  %2 %3
   334                              <2>  xchg eAX, %3
   334                              <2>  %endif
   334 0000C9BA C3                  <2>  ret
   334                              <2> %%end:
   335                              <1> 	defOpInc "FF DEC",dec,mem,word                            ; 66 FF 0D 00000000
   335                              <2>  %ifidni %4,byte
   335                              <2>  %assign size SIZE_BYTE
   335                              <2>  %define eAX al
   335                              <2>  %elifidni %4,word
   335                              <2>  %assign size SIZE_SHORT
   335                              <2>  %define eAX ax
   335                              <2>  %else
   335                              <2>  %assign size SIZE_LONG
   335                              <2>  %define eAX eax
   335                              <2>  %endif
   335 0000C9BB 140101              <2>  db %%end-%%beg,TYPE_ARITH1,size
   335                              <2> %%name:
   335 0000C9BE 4646204445432000    <2>  db %1,' ',0
   335                              <2> %%beg:
   335                              <2>  %ifidni %3,mem
   335 0000C9C6 66A300000000        <2>  mov [0], eAX
   335 0000C9CC 66FF0D00000000      <2>  %2 %4 [0]
   335 0000C9D3 66A100000000        <2>  mov eAX, [0]
   335                              <2>  %else
   335                              <2>  xchg eAX, %3
   335                              <2>  %2 %3
   335                              <2>  xchg eAX, %3
   335                              <2>  %endif
   335 0000C9D9 C3                  <2>  ret
   335                              <2> %%end:
   336                              <1> 	defOpInc "FF DEC",dec,mem,dword                           ;    FF 0D 00000000
   336                              <2>  %ifidni %4,byte
   336                              <2>  %assign size SIZE_BYTE
   336                              <2>  %define eAX al
   336                              <2>  %elifidni %4,word
   336                              <2>  %assign size SIZE_SHORT
   336                              <2>  %define eAX ax
   336                              <2>  %else
   336                              <2>  %assign size SIZE_LONG
   336                              <2>  %define eAX eax
   336                              <2>  %endif
   336 0000C9DA 110102              <2>  db %%end-%%beg,TYPE_ARITH1,size
   336                              <2> %%name:
   336 0000C9DD 4646204445432000    <2>  db %1,' ',0
   336                              <2> %%beg:
   336                              <2>  %ifidni %3,mem
   336 0000C9E5 A300000000          <2>  mov [0], eAX
   336 0000C9EA FF0D00000000        <2>  %2 %4 [0]
   336 0000C9F0 A100000000          <2>  mov eAX, [0]
   336                              <2>  %else
   336                              <2>  xchg eAX, %3
   336                              <2>  %2 %3
   336                              <2>  xchg eAX, %3
   336                              <2>  %endif
   336 0000C9F5 C3                  <2>  ret
   336                              <2> %%end:
   337                              <1> 	defOp    "F6 NEG",neg,al,none,none,TYPE_ARITH1            ;    F6 D8
   337                              <2>  %ifidni %3,al
   337                              <2>  %assign size SIZE_BYTE
   337                              <2>  %define msrc dl
   337                              <2>  %elifidni %3,dl
   337                              <2>  %assign size SIZE_BYTE
   337                              <2>  %elifidni %3,ax
   337                              <2>  %assign size SIZE_SHORT
   337                              <2>  %define msrc dx
   337                              <2>  %elifidni %3,dx
   337                              <2>  %assign size SIZE_SHORT
   337                              <2>  %else
   337                              <2>  %assign size SIZE_LONG
   337                              <2>  %define msrc edx
   337                              <2>  %endif
   337 0000C9F6 030100              <2>  db %%end-%%beg,%6,size
   337                              <2> %%name:
   337 0000C9F9 4636204E45472000    <2>  db %1,' ',0
   337                              <2> %%beg:
   337                              <2>  %ifidni %4,none
   337 0000CA01 F6D8                <2>  %2 %3
   337                              <2>  %elifidni %4,mem
   337                              <2>  mov [0], msrc
   337                              <2>  %2 %3,[0]
   337                              <2>  %elifidni %5,none
   337                              <2>  %2 %3,%4
   337                              <2>  %else
   337                              <2>  %2 %3,%4,%5
   337                              <2>  %endif
   337 0000CA03 C3                  <2>  ret
   337                              <2> %%end:
   338                              <1> 	defOp    "F7 NEG",neg,ax,none,none,TYPE_ARITH1            ; 66 F7 D8
   338                              <2>  %ifidni %3,al
   338                              <2>  %assign size SIZE_BYTE
   338                              <2>  %define msrc dl
   338                              <2>  %elifidni %3,dl
   338                              <2>  %assign size SIZE_BYTE
   338                              <2>  %elifidni %3,ax
   338                              <2>  %assign size SIZE_SHORT
   338                              <2>  %define msrc dx
   338                              <2>  %elifidni %3,dx
   338                              <2>  %assign size SIZE_SHORT
   338                              <2>  %else
   338                              <2>  %assign size SIZE_LONG
   338                              <2>  %define msrc edx
   338                              <2>  %endif
   338 0000CA04 040101              <2>  db %%end-%%beg,%6,size
   338                              <2> %%name:
   338 0000CA07 4637204E45472000    <2>  db %1,' ',0
   338                              <2> %%beg:
   338                              <2>  %ifidni %4,none
   338 0000CA0F 66F7D8              <2>  %2 %3
   338                              <2>  %elifidni %4,mem
   338                              <2>  mov [0], msrc
   338                              <2>  %2 %3,[0]
   338                              <2>  %elifidni %5,none
   338                              <2>  %2 %3,%4
   338                              <2>  %else
   338                              <2>  %2 %3,%4,%5
   338                              <2>  %endif
   338 0000CA12 C3                  <2>  ret
   338                              <2> %%end:
   339                              <1> 	defOp    "F7 NEG",neg,eax,none,none,TYPE_ARITH1           ;    F7 D8
   339                              <2>  %ifidni %3,al
   339                              <2>  %assign size SIZE_BYTE
   339                              <2>  %define msrc dl
   339                              <2>  %elifidni %3,dl
   339                              <2>  %assign size SIZE_BYTE
   339                              <2>  %elifidni %3,ax
   339                              <2>  %assign size SIZE_SHORT
   339                              <2>  %define msrc dx
   339                              <2>  %elifidni %3,dx
   339                              <2>  %assign size SIZE_SHORT
   339                              <2>  %else
   339                              <2>  %assign size SIZE_LONG
   339                              <2>  %define msrc edx
   339                              <2>  %endif
   339 0000CA13 030102              <2>  db %%end-%%beg,%6,size
   339                              <2> %%name:
   339 0000CA16 4637204E45472000    <2>  db %1,' ',0
   339                              <2> %%beg:
   339                              <2>  %ifidni %4,none
   339 0000CA1E F7D8                <2>  %2 %3
   339                              <2>  %elifidni %4,mem
   339                              <2>  mov [0], msrc
   339                              <2>  %2 %3,[0]
   339                              <2>  %elifidni %5,none
   339                              <2>  %2 %3,%4
   339                              <2>  %else
   339                              <2>  %2 %3,%4,%5
   339                              <2>  %endif
   339 0000CA20 C3                  <2>  ret
   339                              <2> %%end:
   340                              <1> 	defOp    "F6 NOT",not,al,none,none,TYPE_LOGIC1            ;    F6 D0
   340                              <2>  %ifidni %3,al
   340                              <2>  %assign size SIZE_BYTE
   340                              <2>  %define msrc dl
   340                              <2>  %elifidni %3,dl
   340                              <2>  %assign size SIZE_BYTE
   340                              <2>  %elifidni %3,ax
   340                              <2>  %assign size SIZE_SHORT
   340                              <2>  %define msrc dx
   340                              <2>  %elifidni %3,dx
   340                              <2>  %assign size SIZE_SHORT
   340                              <2>  %else
   340                              <2>  %assign size SIZE_LONG
   340                              <2>  %define msrc edx
   340                              <2>  %endif
   340 0000CA21 030400              <2>  db %%end-%%beg,%6,size
   340                              <2> %%name:
   340 0000CA24 4636204E4F542000    <2>  db %1,' ',0
   340                              <2> %%beg:
   340                              <2>  %ifidni %4,none
   340 0000CA2C F6D0                <2>  %2 %3
   340                              <2>  %elifidni %4,mem
   340                              <2>  mov [0], msrc
   340                              <2>  %2 %3,[0]
   340                              <2>  %elifidni %5,none
   340                              <2>  %2 %3,%4
   340                              <2>  %else
   340                              <2>  %2 %3,%4,%5
   340                              <2>  %endif
   340 0000CA2E C3                  <2>  ret
   340                              <2> %%end:
   341                              <1> 	defOp    "F7 NOT",not,ax,none,none,TYPE_LOGIC1            ; 66 F7 D0
   341                              <2>  %ifidni %3,al
   341                              <2>  %assign size SIZE_BYTE
   341                              <2>  %define msrc dl
   341                              <2>  %elifidni %3,dl
   341                              <2>  %assign size SIZE_BYTE
   341                              <2>  %elifidni %3,ax
   341                              <2>  %assign size SIZE_SHORT
   341                              <2>  %define msrc dx
   341                              <2>  %elifidni %3,dx
   341                              <2>  %assign size SIZE_SHORT
   341                              <2>  %else
   341                              <2>  %assign size SIZE_LONG
   341                              <2>  %define msrc edx
   341                              <2>  %endif
   341 0000CA2F 040401              <2>  db %%end-%%beg,%6,size
   341                              <2> %%name:
   341 0000CA32 4637204E4F542000    <2>  db %1,' ',0
   341                              <2> %%beg:
   341                              <2>  %ifidni %4,none
   341 0000CA3A 66F7D0              <2>  %2 %3
   341                              <2>  %elifidni %4,mem
   341                              <2>  mov [0], msrc
   341                              <2>  %2 %3,[0]
   341                              <2>  %elifidni %5,none
   341                              <2>  %2 %3,%4
   341                              <2>  %else
   341                              <2>  %2 %3,%4,%5
   341                              <2>  %endif
   341 0000CA3D C3                  <2>  ret
   341                              <2> %%end:
   342                              <1> 	defOp    "F7 NOT",not,eax,none,none,TYPE_LOGIC1           ;    F7 D0
   342                              <2>  %ifidni %3,al
   342                              <2>  %assign size SIZE_BYTE
   342                              <2>  %define msrc dl
   342                              <2>  %elifidni %3,dl
   342                              <2>  %assign size SIZE_BYTE
   342                              <2>  %elifidni %3,ax
   342                              <2>  %assign size SIZE_SHORT
   342                              <2>  %define msrc dx
   342                              <2>  %elifidni %3,dx
   342                              <2>  %assign size SIZE_SHORT
   342                              <2>  %else
   342                              <2>  %assign size SIZE_LONG
   342                              <2>  %define msrc edx
   342                              <2>  %endif
   342 0000CA3E 030402              <2>  db %%end-%%beg,%6,size
   342                              <2> %%name:
   342 0000CA41 4637204E4F542000    <2>  db %1,' ',0
   342                              <2> %%beg:
   342                              <2>  %ifidni %4,none
   342 0000CA49 F7D0                <2>  %2 %3
   342                              <2>  %elifidni %4,mem
   342                              <2>  mov [0], msrc
   342                              <2>  %2 %3,[0]
   342                              <2>  %elifidni %5,none
   342                              <2>  %2 %3,%4
   342                              <2>  %else
   342                              <2>  %2 %3,%4,%5
   342                              <2>  %endif
   342 0000CA4B C3                  <2>  ret
   342                              <2> %%end:
   343                              <1> 	defOp    "F6 MUL",mul,dl,none,none,TYPE_MULTIPLY          ;    F6 E2
   343                              <2>  %ifidni %3,al
   343                              <2>  %assign size SIZE_BYTE
   343                              <2>  %define msrc dl
   343                              <2>  %elifidni %3,dl
   343                              <2>  %assign size SIZE_BYTE
   343                              <2>  %elifidni %3,ax
   343                              <2>  %assign size SIZE_SHORT
   343                              <2>  %define msrc dx
   343                              <2>  %elifidni %3,dx
   343                              <2>  %assign size SIZE_SHORT
   343                              <2>  %else
   343                              <2>  %assign size SIZE_LONG
   343                              <2>  %define msrc edx
   343                              <2>  %endif
   343 0000CA4C 030600              <2>  db %%end-%%beg,%6,size
   343                              <2> %%name:
   343 0000CA4F 4636204D554C2000    <2>  db %1,' ',0
   343                              <2> %%beg:
   343                              <2>  %ifidni %4,none
   343 0000CA57 F6E2                <2>  %2 %3
   343                              <2>  %elifidni %4,mem
   343                              <2>  mov [0], msrc
   343                              <2>  %2 %3,[0]
   343                              <2>  %elifidni %5,none
   343                              <2>  %2 %3,%4
   343                              <2>  %else
   343                              <2>  %2 %3,%4,%5
   343                              <2>  %endif
   343 0000CA59 C3                  <2>  ret
   343                              <2> %%end:
   344                              <1> 	defOp    "F7 MUL",mul,dx,none,none,TYPE_MULTIPLY          ; 66 F7 E2
   344                              <2>  %ifidni %3,al
   344                              <2>  %assign size SIZE_BYTE
   344                              <2>  %define msrc dl
   344                              <2>  %elifidni %3,dl
   344                              <2>  %assign size SIZE_BYTE
   344                              <2>  %elifidni %3,ax
   344                              <2>  %assign size SIZE_SHORT
   344                              <2>  %define msrc dx
   344                              <2>  %elifidni %3,dx
   344                              <2>  %assign size SIZE_SHORT
   344                              <2>  %else
   344                              <2>  %assign size SIZE_LONG
   344                              <2>  %define msrc edx
   344                              <2>  %endif
   344 0000CA5A 040601              <2>  db %%end-%%beg,%6,size
   344                              <2> %%name:
   344 0000CA5D 4637204D554C2000    <2>  db %1,' ',0
   344                              <2> %%beg:
   344                              <2>  %ifidni %4,none
   344 0000CA65 66F7E2              <2>  %2 %3
   344                              <2>  %elifidni %4,mem
   344                              <2>  mov [0], msrc
   344                              <2>  %2 %3,[0]
   344                              <2>  %elifidni %5,none
   344                              <2>  %2 %3,%4
   344                              <2>  %else
   344                              <2>  %2 %3,%4,%5
   344                              <2>  %endif
   344 0000CA68 C3                  <2>  ret
   344                              <2> %%end:
   345                              <1> 	defOp    "F7 MUL",mul,edx,none,none,TYPE_MULTIPLY         ;    F7 E2
   345                              <2>  %ifidni %3,al
   345                              <2>  %assign size SIZE_BYTE
   345                              <2>  %define msrc dl
   345                              <2>  %elifidni %3,dl
   345                              <2>  %assign size SIZE_BYTE
   345                              <2>  %elifidni %3,ax
   345                              <2>  %assign size SIZE_SHORT
   345                              <2>  %define msrc dx
   345                              <2>  %elifidni %3,dx
   345                              <2>  %assign size SIZE_SHORT
   345                              <2>  %else
   345                              <2>  %assign size SIZE_LONG
   345                              <2>  %define msrc edx
   345                              <2>  %endif
   345 0000CA69 030602              <2>  db %%end-%%beg,%6,size
   345                              <2> %%name:
   345 0000CA6C 4637204D554C2000    <2>  db %1,' ',0
   345                              <2> %%beg:
   345                              <2>  %ifidni %4,none
   345 0000CA74 F7E2                <2>  %2 %3
   345                              <2>  %elifidni %4,mem
   345                              <2>  mov [0], msrc
   345                              <2>  %2 %3,[0]
   345                              <2>  %elifidni %5,none
   345                              <2>  %2 %3,%4
   345                              <2>  %else
   345                              <2>  %2 %3,%4,%5
   345                              <2>  %endif
   345 0000CA76 C3                  <2>  ret
   345                              <2> %%end:
   346                              <1> 	defOp    "F6 IMUL",imul,dl,none,none,TYPE_MULTIPLY        ;    F6 EA
   346                              <2>  %ifidni %3,al
   346                              <2>  %assign size SIZE_BYTE
   346                              <2>  %define msrc dl
   346                              <2>  %elifidni %3,dl
   346                              <2>  %assign size SIZE_BYTE
   346                              <2>  %elifidni %3,ax
   346                              <2>  %assign size SIZE_SHORT
   346                              <2>  %define msrc dx
   346                              <2>  %elifidni %3,dx
   346                              <2>  %assign size SIZE_SHORT
   346                              <2>  %else
   346                              <2>  %assign size SIZE_LONG
   346                              <2>  %define msrc edx
   346                              <2>  %endif
   346 0000CA77 030600              <2>  db %%end-%%beg,%6,size
   346                              <2> %%name:
   346 0000CA7A 463620494D554C2000  <2>  db %1,' ',0
   346                              <2> %%beg:
   346                              <2>  %ifidni %4,none
   346 0000CA83 F6EA                <2>  %2 %3
   346                              <2>  %elifidni %4,mem
   346                              <2>  mov [0], msrc
   346                              <2>  %2 %3,[0]
   346                              <2>  %elifidni %5,none
   346                              <2>  %2 %3,%4
   346                              <2>  %else
   346                              <2>  %2 %3,%4,%5
   346                              <2>  %endif
   346 0000CA85 C3                  <2>  ret
   346                              <2> %%end:
   347                              <1> 	defOp    "F7 IMUL",imul,dx,none,none,TYPE_MULTIPLY        ; 66 F7 EA
   347                              <2>  %ifidni %3,al
   347                              <2>  %assign size SIZE_BYTE
   347                              <2>  %define msrc dl
   347                              <2>  %elifidni %3,dl
   347                              <2>  %assign size SIZE_BYTE
   347                              <2>  %elifidni %3,ax
   347                              <2>  %assign size SIZE_SHORT
   347                              <2>  %define msrc dx
   347                              <2>  %elifidni %3,dx
   347                              <2>  %assign size SIZE_SHORT
   347                              <2>  %else
   347                              <2>  %assign size SIZE_LONG
   347                              <2>  %define msrc edx
   347                              <2>  %endif
   347 0000CA86 040601              <2>  db %%end-%%beg,%6,size
   347                              <2> %%name:
   347 0000CA89 463720494D554C2000  <2>  db %1,' ',0
   347                              <2> %%beg:
   347                              <2>  %ifidni %4,none
   347 0000CA92 66F7EA              <2>  %2 %3
   347                              <2>  %elifidni %4,mem
   347                              <2>  mov [0], msrc
   347                              <2>  %2 %3,[0]
   347                              <2>  %elifidni %5,none
   347                              <2>  %2 %3,%4
   347                              <2>  %else
   347                              <2>  %2 %3,%4,%5
   347                              <2>  %endif
   347 0000CA95 C3                  <2>  ret
   347                              <2> %%end:
   348                              <1> 	defOp    "F7 IMUL",imul,edx,none,none,TYPE_MULTIPLY       ;    F7 EA
   348                              <2>  %ifidni %3,al
   348                              <2>  %assign size SIZE_BYTE
   348                              <2>  %define msrc dl
   348                              <2>  %elifidni %3,dl
   348                              <2>  %assign size SIZE_BYTE
   348                              <2>  %elifidni %3,ax
   348                              <2>  %assign size SIZE_SHORT
   348                              <2>  %define msrc dx
   348                              <2>  %elifidni %3,dx
   348                              <2>  %assign size SIZE_SHORT
   348                              <2>  %else
   348                              <2>  %assign size SIZE_LONG
   348                              <2>  %define msrc edx
   348                              <2>  %endif
   348 0000CA96 030602              <2>  db %%end-%%beg,%6,size
   348                              <2> %%name:
   348 0000CA99 463720494D554C2000  <2>  db %1,' ',0
   348                              <2> %%beg:
   348                              <2>  %ifidni %4,none
   348 0000CAA2 F7EA                <2>  %2 %3
   348                              <2>  %elifidni %4,mem
   348                              <2>  mov [0], msrc
   348                              <2>  %2 %3,[0]
   348                              <2>  %elifidni %5,none
   348                              <2>  %2 %3,%4
   348                              <2>  %else
   348                              <2>  %2 %3,%4,%5
   348                              <2>  %endif
   348 0000CAA4 C3                  <2>  ret
   348                              <2> %%end:
   349                              <1> 	defOp    "0FAF IMUL",imul,ax,dx,none,TYPE_MULTIPLY        ; 66 0FAF C2
   349                              <2>  %ifidni %3,al
   349                              <2>  %assign size SIZE_BYTE
   349                              <2>  %define msrc dl
   349                              <2>  %elifidni %3,dl
   349                              <2>  %assign size SIZE_BYTE
   349                              <2>  %elifidni %3,ax
   349                              <2>  %assign size SIZE_SHORT
   349                              <2>  %define msrc dx
   349                              <2>  %elifidni %3,dx
   349                              <2>  %assign size SIZE_SHORT
   349                              <2>  %else
   349                              <2>  %assign size SIZE_LONG
   349                              <2>  %define msrc edx
   349                              <2>  %endif
   349 0000CAA5 050601              <2>  db %%end-%%beg,%6,size
   349                              <2> %%name:
   349 0000CAA8 3046414620494D554C- <2>  db %1,' ',0
   349 0000CAB1 2000                <2>
   349                              <2> %%beg:
   349                              <2>  %ifidni %4,none
   349                              <2>  %2 %3
   349                              <2>  %elifidni %4,mem
   349                              <2>  mov [0], msrc
   349                              <2>  %2 %3,[0]
   349                              <2>  %elifidni %5,none
   349 0000CAB3 660FAFC2            <2>  %2 %3,%4
   349                              <2>  %else
   349                              <2>  %2 %3,%4,%5
   349                              <2>  %endif
   349 0000CAB7 C3                  <2>  ret
   349                              <2> %%end:
   350                              <1> 	defOp    "0FAF IMUL",imul,eax,edx,none,TYPE_MULTIPLY      ;    0FAF C2
   350                              <2>  %ifidni %3,al
   350                              <2>  %assign size SIZE_BYTE
   350                              <2>  %define msrc dl
   350                              <2>  %elifidni %3,dl
   350                              <2>  %assign size SIZE_BYTE
   350                              <2>  %elifidni %3,ax
   350                              <2>  %assign size SIZE_SHORT
   350                              <2>  %define msrc dx
   350                              <2>  %elifidni %3,dx
   350                              <2>  %assign size SIZE_SHORT
   350                              <2>  %else
   350                              <2>  %assign size SIZE_LONG
   350                              <2>  %define msrc edx
   350                              <2>  %endif
   350 0000CAB8 040602              <2>  db %%end-%%beg,%6,size
   350                              <2> %%name:
   350 0000CABB 3046414620494D554C- <2>  db %1,' ',0
   350 0000CAC4 2000                <2>
   350                              <2> %%beg:
   350                              <2>  %ifidni %4,none
   350                              <2>  %2 %3
   350                              <2>  %elifidni %4,mem
   350                              <2>  mov [0], msrc
   350                              <2>  %2 %3,[0]
   350                              <2>  %elifidni %5,none
   350 0000CAC6 0FAFC2              <2>  %2 %3,%4
   350                              <2>  %else
   350                              <2>  %2 %3,%4,%5
   350                              <2>  %endif
   350 0000CAC9 C3                  <2>  ret
   350                              <2> %%end:
   351                              <1> 	defOp    "6B IMUL",imul,ax,dx,0x77,TYPE_MULTIPLY          ; 66 6B C2 77
   351                              <2>  %ifidni %3,al
   351                              <2>  %assign size SIZE_BYTE
   351                              <2>  %define msrc dl
   351                              <2>  %elifidni %3,dl
   351                              <2>  %assign size SIZE_BYTE
   351                              <2>  %elifidni %3,ax
   351                              <2>  %assign size SIZE_SHORT
   351                              <2>  %define msrc dx
   351                              <2>  %elifidni %3,dx
   351                              <2>  %assign size SIZE_SHORT
   351                              <2>  %else
   351                              <2>  %assign size SIZE_LONG
   351                              <2>  %define msrc edx
   351                              <2>  %endif
   351 0000CACA 050601              <2>  db %%end-%%beg,%6,size
   351                              <2> %%name:
   351 0000CACD 364220494D554C2000  <2>  db %1,' ',0
   351                              <2> %%beg:
   351                              <2>  %ifidni %4,none
   351                              <2>  %2 %3
   351                              <2>  %elifidni %4,mem
   351                              <2>  mov [0], msrc
   351                              <2>  %2 %3,[0]
   351                              <2>  %elifidni %5,none
   351                              <2>  %2 %3,%4
   351                              <2>  %else
   351 0000CAD6 666BC277            <2>  %2 %3,%4,%5
   351                              <2>  %endif
   351 0000CADA C3                  <2>  ret
   351                              <2> %%end:
   352                              <1> 	defOp    "6B IMUL",imul,ax,dx,-0x77,TYPE_MULTIPLY         ; 66 6B C2 89
   352                              <2>  %ifidni %3,al
   352                              <2>  %assign size SIZE_BYTE
   352                              <2>  %define msrc dl
   352                              <2>  %elifidni %3,dl
   352                              <2>  %assign size SIZE_BYTE
   352                              <2>  %elifidni %3,ax
   352                              <2>  %assign size SIZE_SHORT
   352                              <2>  %define msrc dx
   352                              <2>  %elifidni %3,dx
   352                              <2>  %assign size SIZE_SHORT
   352                              <2>  %else
   352                              <2>  %assign size SIZE_LONG
   352                              <2>  %define msrc edx
   352                              <2>  %endif
   352 0000CADB 050601              <2>  db %%end-%%beg,%6,size
   352                              <2> %%name:
   352 0000CADE 364220494D554C2000  <2>  db %1,' ',0
   352                              <2> %%beg:
   352                              <2>  %ifidni %4,none
   352                              <2>  %2 %3
   352                              <2>  %elifidni %4,mem
   352                              <2>  mov [0], msrc
   352                              <2>  %2 %3,[0]
   352                              <2>  %elifidni %5,none
   352                              <2>  %2 %3,%4
   352                              <2>  %else
   352 0000CAE7 666BC289            <2>  %2 %3,%4,%5
   352                              <2>  %endif
   352 0000CAEB C3                  <2>  ret
   352                              <2> %%end:
   353                              <1> 	defOp    "6B IMUL",imul,eax,edx,0x77,TYPE_MULTIPLY        ;    6B C2 77
   353                              <2>  %ifidni %3,al
   353                              <2>  %assign size SIZE_BYTE
   353                              <2>  %define msrc dl
   353                              <2>  %elifidni %3,dl
   353                              <2>  %assign size SIZE_BYTE
   353                              <2>  %elifidni %3,ax
   353                              <2>  %assign size SIZE_SHORT
   353                              <2>  %define msrc dx
   353                              <2>  %elifidni %3,dx
   353                              <2>  %assign size SIZE_SHORT
   353                              <2>  %else
   353                              <2>  %assign size SIZE_LONG
   353                              <2>  %define msrc edx
   353                              <2>  %endif
   353 0000CAEC 040602              <2>  db %%end-%%beg,%6,size
   353                              <2> %%name:
   353 0000CAEF 364220494D554C2000  <2>  db %1,' ',0
   353                              <2> %%beg:
   353                              <2>  %ifidni %4,none
   353                              <2>  %2 %3
   353                              <2>  %elifidni %4,mem
   353                              <2>  mov [0], msrc
   353                              <2>  %2 %3,[0]
   353                              <2>  %elifidni %5,none
   353                              <2>  %2 %3,%4
   353                              <2>  %else
   353 0000CAF8 6BC277              <2>  %2 %3,%4,%5
   353                              <2>  %endif
   353 0000CAFB C3                  <2>  ret
   353                              <2> %%end:
   354                              <1> 	defOp    "6B IMUL",imul,eax,edx,-0x77,TYPE_MULTIPLY       ;    6B C2 89
   354                              <2>  %ifidni %3,al
   354                              <2>  %assign size SIZE_BYTE
   354                              <2>  %define msrc dl
   354                              <2>  %elifidni %3,dl
   354                              <2>  %assign size SIZE_BYTE
   354                              <2>  %elifidni %3,ax
   354                              <2>  %assign size SIZE_SHORT
   354                              <2>  %define msrc dx
   354                              <2>  %elifidni %3,dx
   354                              <2>  %assign size SIZE_SHORT
   354                              <2>  %else
   354                              <2>  %assign size SIZE_LONG
   354                              <2>  %define msrc edx
   354                              <2>  %endif
   354 0000CAFC 040602              <2>  db %%end-%%beg,%6,size
   354                              <2> %%name:
   354 0000CAFF 364220494D554C2000  <2>  db %1,' ',0
   354                              <2> %%beg:
   354                              <2>  %ifidni %4,none
   354                              <2>  %2 %3
   354                              <2>  %elifidni %4,mem
   354                              <2>  mov [0], msrc
   354                              <2>  %2 %3,[0]
   354                              <2>  %elifidni %5,none
   354                              <2>  %2 %3,%4
   354                              <2>  %else
   354 0000CB08 6BC289              <2>  %2 %3,%4,%5
   354                              <2>  %endif
   354 0000CB0B C3                  <2>  ret
   354                              <2> %%end:
   355                              <1> 	defOp    "69 IMUL",imul,ax,0x777,none,TYPE_MULTIPLY       ; 66 69 C0 7707
   355                              <2>  %ifidni %3,al
   355                              <2>  %assign size SIZE_BYTE
   355                              <2>  %define msrc dl
   355                              <2>  %elifidni %3,dl
   355                              <2>  %assign size SIZE_BYTE
   355                              <2>  %elifidni %3,ax
   355                              <2>  %assign size SIZE_SHORT
   355                              <2>  %define msrc dx
   355                              <2>  %elifidni %3,dx
   355                              <2>  %assign size SIZE_SHORT
   355                              <2>  %else
   355                              <2>  %assign size SIZE_LONG
   355                              <2>  %define msrc edx
   355                              <2>  %endif
   355 0000CB0C 060601              <2>  db %%end-%%beg,%6,size
   355                              <2> %%name:
   355 0000CB0F 363920494D554C2000  <2>  db %1,' ',0
   355                              <2> %%beg:
   355                              <2>  %ifidni %4,none
   355                              <2>  %2 %3
   355                              <2>  %elifidni %4,mem
   355                              <2>  mov [0], msrc
   355                              <2>  %2 %3,[0]
   355                              <2>  %elifidni %5,none
   355 0000CB18 6669C07707          <2>  %2 %3,%4
   355                              <2>  %else
   355                              <2>  %2 %3,%4,%5
   355                              <2>  %endif
   355 0000CB1D C3                  <2>  ret
   355                              <2> %%end:
   356                              <1> 	defOp    "69 IMUL",imul,eax,0x777777,none,TYPE_MULTIPLY   ;    69 C0 77777700
   356                              <2>  %ifidni %3,al
   356                              <2>  %assign size SIZE_BYTE
   356                              <2>  %define msrc dl
   356                              <2>  %elifidni %3,dl
   356                              <2>  %assign size SIZE_BYTE
   356                              <2>  %elifidni %3,ax
   356                              <2>  %assign size SIZE_SHORT
   356                              <2>  %define msrc dx
   356                              <2>  %elifidni %3,dx
   356                              <2>  %assign size SIZE_SHORT
   356                              <2>  %else
   356                              <2>  %assign size SIZE_LONG
   356                              <2>  %define msrc edx
   356                              <2>  %endif
   356 0000CB1E 070602              <2>  db %%end-%%beg,%6,size
   356                              <2> %%name:
   356 0000CB21 363920494D554C2000  <2>  db %1,' ',0
   356                              <2> %%beg:
   356                              <2>  %ifidni %4,none
   356                              <2>  %2 %3
   356                              <2>  %elifidni %4,mem
   356                              <2>  mov [0], msrc
   356                              <2>  %2 %3,[0]
   356                              <2>  %elifidni %5,none
   356 0000CB2A 69C077777700        <2>  %2 %3,%4
   356                              <2>  %else
   356                              <2>  %2 %3,%4,%5
   356                              <2>  %endif
   356 0000CB30 C3                  <2>  ret
   356                              <2> %%end:
   357                              <1> 	defOp    "F6 DIV",div,dl,none,none,TYPE_DIVIDE            ;    F6 F2
   357                              <2>  %ifidni %3,al
   357                              <2>  %assign size SIZE_BYTE
   357                              <2>  %define msrc dl
   357                              <2>  %elifidni %3,dl
   357                              <2>  %assign size SIZE_BYTE
   357                              <2>  %elifidni %3,ax
   357                              <2>  %assign size SIZE_SHORT
   357                              <2>  %define msrc dx
   357                              <2>  %elifidni %3,dx
   357                              <2>  %assign size SIZE_SHORT
   357                              <2>  %else
   357                              <2>  %assign size SIZE_LONG
   357                              <2>  %define msrc edx
   357                              <2>  %endif
   357 0000CB31 030700              <2>  db %%end-%%beg,%6,size
   357                              <2> %%name:
   357 0000CB34 4636204449562000    <2>  db %1,' ',0
   357                              <2> %%beg:
   357                              <2>  %ifidni %4,none
   357 0000CB3C F6F2                <2>  %2 %3
   357                              <2>  %elifidni %4,mem
   357                              <2>  mov [0], msrc
   357                              <2>  %2 %3,[0]
   357                              <2>  %elifidni %5,none
   357                              <2>  %2 %3,%4
   357                              <2>  %else
   357                              <2>  %2 %3,%4,%5
   357                              <2>  %endif
   357 0000CB3E C3                  <2>  ret
   357                              <2> %%end:
   358                              <1> 	defOp    "F7 DIV",div,dx,none,none,TYPE_DIVIDE            ; 66 F7 F2
   358                              <2>  %ifidni %3,al
   358                              <2>  %assign size SIZE_BYTE
   358                              <2>  %define msrc dl
   358                              <2>  %elifidni %3,dl
   358                              <2>  %assign size SIZE_BYTE
   358                              <2>  %elifidni %3,ax
   358                              <2>  %assign size SIZE_SHORT
   358                              <2>  %define msrc dx
   358                              <2>  %elifidni %3,dx
   358                              <2>  %assign size SIZE_SHORT
   358                              <2>  %else
   358                              <2>  %assign size SIZE_LONG
   358                              <2>  %define msrc edx
   358                              <2>  %endif
   358 0000CB3F 040701              <2>  db %%end-%%beg,%6,size
   358                              <2> %%name:
   358 0000CB42 4637204449562000    <2>  db %1,' ',0
   358                              <2> %%beg:
   358                              <2>  %ifidni %4,none
   358 0000CB4A 66F7F2              <2>  %2 %3
   358                              <2>  %elifidni %4,mem
   358                              <2>  mov [0], msrc
   358                              <2>  %2 %3,[0]
   358                              <2>  %elifidni %5,none
   358                              <2>  %2 %3,%4
   358                              <2>  %else
   358                              <2>  %2 %3,%4,%5
   358                              <2>  %endif
   358 0000CB4D C3                  <2>  ret
   358                              <2> %%end:
   359                              <1> 	defOp    "F7 DIV",div,edx,none,none,TYPE_DIVIDE           ;    F7 F2
   359                              <2>  %ifidni %3,al
   359                              <2>  %assign size SIZE_BYTE
   359                              <2>  %define msrc dl
   359                              <2>  %elifidni %3,dl
   359                              <2>  %assign size SIZE_BYTE
   359                              <2>  %elifidni %3,ax
   359                              <2>  %assign size SIZE_SHORT
   359                              <2>  %define msrc dx
   359                              <2>  %elifidni %3,dx
   359                              <2>  %assign size SIZE_SHORT
   359                              <2>  %else
   359                              <2>  %assign size SIZE_LONG
   359                              <2>  %define msrc edx
   359                              <2>  %endif
   359 0000CB4E 030702              <2>  db %%end-%%beg,%6,size
   359                              <2> %%name:
   359 0000CB51 4637204449562000    <2>  db %1,' ',0
   359                              <2> %%beg:
   359                              <2>  %ifidni %4,none
   359 0000CB59 F7F2                <2>  %2 %3
   359                              <2>  %elifidni %4,mem
   359                              <2>  mov [0], msrc
   359                              <2>  %2 %3,[0]
   359                              <2>  %elifidni %5,none
   359                              <2>  %2 %3,%4
   359                              <2>  %else
   359                              <2>  %2 %3,%4,%5
   359                              <2>  %endif
   359 0000CB5B C3                  <2>  ret
   359                              <2> %%end:
   360                              <1> 	defOp    "F6 DIV",div,al,none,none,TYPE_DIVIDE            ;    F6 F0
   360                              <2>  %ifidni %3,al
   360                              <2>  %assign size SIZE_BYTE
   360                              <2>  %define msrc dl
   360                              <2>  %elifidni %3,dl
   360                              <2>  %assign size SIZE_BYTE
   360                              <2>  %elifidni %3,ax
   360                              <2>  %assign size SIZE_SHORT
   360                              <2>  %define msrc dx
   360                              <2>  %elifidni %3,dx
   360                              <2>  %assign size SIZE_SHORT
   360                              <2>  %else
   360                              <2>  %assign size SIZE_LONG
   360                              <2>  %define msrc edx
   360                              <2>  %endif
   360 0000CB5C 030700              <2>  db %%end-%%beg,%6,size
   360                              <2> %%name:
   360 0000CB5F 4636204449562000    <2>  db %1,' ',0
   360                              <2> %%beg:
   360                              <2>  %ifidni %4,none
   360 0000CB67 F6F0                <2>  %2 %3
   360                              <2>  %elifidni %4,mem
   360                              <2>  mov [0], msrc
   360                              <2>  %2 %3,[0]
   360                              <2>  %elifidni %5,none
   360                              <2>  %2 %3,%4
   360                              <2>  %else
   360                              <2>  %2 %3,%4,%5
   360                              <2>  %endif
   360 0000CB69 C3                  <2>  ret
   360                              <2> %%end:
   361                              <1> 	defOp    "F7 DIV",div,ax,none,none,TYPE_DIVIDE            ; 66 F7 F0
   361                              <2>  %ifidni %3,al
   361                              <2>  %assign size SIZE_BYTE
   361                              <2>  %define msrc dl
   361                              <2>  %elifidni %3,dl
   361                              <2>  %assign size SIZE_BYTE
   361                              <2>  %elifidni %3,ax
   361                              <2>  %assign size SIZE_SHORT
   361                              <2>  %define msrc dx
   361                              <2>  %elifidni %3,dx
   361                              <2>  %assign size SIZE_SHORT
   361                              <2>  %else
   361                              <2>  %assign size SIZE_LONG
   361                              <2>  %define msrc edx
   361                              <2>  %endif
   361 0000CB6A 040701              <2>  db %%end-%%beg,%6,size
   361                              <2> %%name:
   361 0000CB6D 4637204449562000    <2>  db %1,' ',0
   361                              <2> %%beg:
   361                              <2>  %ifidni %4,none
   361 0000CB75 66F7F0              <2>  %2 %3
   361                              <2>  %elifidni %4,mem
   361                              <2>  mov [0], msrc
   361                              <2>  %2 %3,[0]
   361                              <2>  %elifidni %5,none
   361                              <2>  %2 %3,%4
   361                              <2>  %else
   361                              <2>  %2 %3,%4,%5
   361                              <2>  %endif
   361 0000CB78 C3                  <2>  ret
   361                              <2> %%end:
   362                              <1> 	defOp    "F7 DIV",div,eax,none,none,TYPE_DIVIDE           ;    F7 F0
   362                              <2>  %ifidni %3,al
   362                              <2>  %assign size SIZE_BYTE
   362                              <2>  %define msrc dl
   362                              <2>  %elifidni %3,dl
   362                              <2>  %assign size SIZE_BYTE
   362                              <2>  %elifidni %3,ax
   362                              <2>  %assign size SIZE_SHORT
   362                              <2>  %define msrc dx
   362                              <2>  %elifidni %3,dx
   362                              <2>  %assign size SIZE_SHORT
   362                              <2>  %else
   362                              <2>  %assign size SIZE_LONG
   362                              <2>  %define msrc edx
   362                              <2>  %endif
   362 0000CB79 030702              <2>  db %%end-%%beg,%6,size
   362                              <2> %%name:
   362 0000CB7C 4637204449562000    <2>  db %1,' ',0
   362                              <2> %%beg:
   362                              <2>  %ifidni %4,none
   362 0000CB84 F7F0                <2>  %2 %3
   362                              <2>  %elifidni %4,mem
   362                              <2>  mov [0], msrc
   362                              <2>  %2 %3,[0]
   362                              <2>  %elifidni %5,none
   362                              <2>  %2 %3,%4
   362                              <2>  %else
   362                              <2>  %2 %3,%4,%5
   362                              <2>  %endif
   362 0000CB86 C3                  <2>  ret
   362                              <2> %%end:
   363                              <1> 	defOp    "F6 IDIV",idiv,dl,none,none,TYPE_DIVIDE          ;    F6 FA
   363                              <2>  %ifidni %3,al
   363                              <2>  %assign size SIZE_BYTE
   363                              <2>  %define msrc dl
   363                              <2>  %elifidni %3,dl
   363                              <2>  %assign size SIZE_BYTE
   363                              <2>  %elifidni %3,ax
   363                              <2>  %assign size SIZE_SHORT
   363                              <2>  %define msrc dx
   363                              <2>  %elifidni %3,dx
   363                              <2>  %assign size SIZE_SHORT
   363                              <2>  %else
   363                              <2>  %assign size SIZE_LONG
   363                              <2>  %define msrc edx
   363                              <2>  %endif
   363 0000CB87 030700              <2>  db %%end-%%beg,%6,size
   363                              <2> %%name:
   363 0000CB8A 463620494449562000  <2>  db %1,' ',0
   363                              <2> %%beg:
   363                              <2>  %ifidni %4,none
   363 0000CB93 F6FA                <2>  %2 %3
   363                              <2>  %elifidni %4,mem
   363                              <2>  mov [0], msrc
   363                              <2>  %2 %3,[0]
   363                              <2>  %elifidni %5,none
   363                              <2>  %2 %3,%4
   363                              <2>  %else
   363                              <2>  %2 %3,%4,%5
   363                              <2>  %endif
   363 0000CB95 C3                  <2>  ret
   363                              <2> %%end:
   364                              <1> 	defOp    "F7 IDIV",idiv,dx,none,none,TYPE_DIVIDE          ; 66 F7 FA
   364                              <2>  %ifidni %3,al
   364                              <2>  %assign size SIZE_BYTE
   364                              <2>  %define msrc dl
   364                              <2>  %elifidni %3,dl
   364                              <2>  %assign size SIZE_BYTE
   364                              <2>  %elifidni %3,ax
   364                              <2>  %assign size SIZE_SHORT
   364                              <2>  %define msrc dx
   364                              <2>  %elifidni %3,dx
   364                              <2>  %assign size SIZE_SHORT
   364                              <2>  %else
   364                              <2>  %assign size SIZE_LONG
   364                              <2>  %define msrc edx
   364                              <2>  %endif
   364 0000CB96 040701              <2>  db %%end-%%beg,%6,size
   364                              <2> %%name:
   364 0000CB99 463720494449562000  <2>  db %1,' ',0
   364                              <2> %%beg:
   364                              <2>  %ifidni %4,none
   364 0000CBA2 66F7FA              <2>  %2 %3
   364                              <2>  %elifidni %4,mem
   364                              <2>  mov [0], msrc
   364                              <2>  %2 %3,[0]
   364                              <2>  %elifidni %5,none
   364                              <2>  %2 %3,%4
   364                              <2>  %else
   364                              <2>  %2 %3,%4,%5
   364                              <2>  %endif
   364 0000CBA5 C3                  <2>  ret
   364                              <2> %%end:
   365                              <1> 	defOp    "F7 IDIV",idiv,edx,none,none,TYPE_DIVIDE         ;    F7 FA
   365                              <2>  %ifidni %3,al
   365                              <2>  %assign size SIZE_BYTE
   365                              <2>  %define msrc dl
   365                              <2>  %elifidni %3,dl
   365                              <2>  %assign size SIZE_BYTE
   365                              <2>  %elifidni %3,ax
   365                              <2>  %assign size SIZE_SHORT
   365                              <2>  %define msrc dx
   365                              <2>  %elifidni %3,dx
   365                              <2>  %assign size SIZE_SHORT
   365                              <2>  %else
   365                              <2>  %assign size SIZE_LONG
   365                              <2>  %define msrc edx
   365                              <2>  %endif
   365 0000CBA6 030702              <2>  db %%end-%%beg,%6,size
   365                              <2> %%name:
   365 0000CBA9 463720494449562000  <2>  db %1,' ',0
   365                              <2> %%beg:
   365                              <2>  %ifidni %4,none
   365 0000CBB2 F7FA                <2>  %2 %3
   365                              <2>  %elifidni %4,mem
   365                              <2>  mov [0], msrc
   365                              <2>  %2 %3,[0]
   365                              <2>  %elifidni %5,none
   365                              <2>  %2 %3,%4
   365                              <2>  %else
   365                              <2>  %2 %3,%4,%5
   365                              <2>  %endif
   365 0000CBB4 C3                  <2>  ret
   365                              <2> %%end:
   366                              <1> 	defOp    "F6 IDIV",idiv,al,none,none,TYPE_DIVIDE          ;    F6 F8
   366                              <2>  %ifidni %3,al
   366                              <2>  %assign size SIZE_BYTE
   366                              <2>  %define msrc dl
   366                              <2>  %elifidni %3,dl
   366                              <2>  %assign size SIZE_BYTE
   366                              <2>  %elifidni %3,ax
   366                              <2>  %assign size SIZE_SHORT
   366                              <2>  %define msrc dx
   366                              <2>  %elifidni %3,dx
   366                              <2>  %assign size SIZE_SHORT
   366                              <2>  %else
   366                              <2>  %assign size SIZE_LONG
   366                              <2>  %define msrc edx
   366                              <2>  %endif
   366 0000CBB5 030700              <2>  db %%end-%%beg,%6,size
   366                              <2> %%name:
   366 0000CBB8 463620494449562000  <2>  db %1,' ',0
   366                              <2> %%beg:
   366                              <2>  %ifidni %4,none
   366 0000CBC1 F6F8                <2>  %2 %3
   366                              <2>  %elifidni %4,mem
   366                              <2>  mov [0], msrc
   366                              <2>  %2 %3,[0]
   366                              <2>  %elifidni %5,none
   366                              <2>  %2 %3,%4
   366                              <2>  %else
   366                              <2>  %2 %3,%4,%5
   366                              <2>  %endif
   366 0000CBC3 C3                  <2>  ret
   366                              <2> %%end:
   367                              <1> 	defOp    "F7 IDIV",idiv,ax,none,none,TYPE_DIVIDE          ; 66 F7 F8
   367                              <2>  %ifidni %3,al
   367                              <2>  %assign size SIZE_BYTE
   367                              <2>  %define msrc dl
   367                              <2>  %elifidni %3,dl
   367                              <2>  %assign size SIZE_BYTE
   367                              <2>  %elifidni %3,ax
   367                              <2>  %assign size SIZE_SHORT
   367                              <2>  %define msrc dx
   367                              <2>  %elifidni %3,dx
   367                              <2>  %assign size SIZE_SHORT
   367                              <2>  %else
   367                              <2>  %assign size SIZE_LONG
   367                              <2>  %define msrc edx
   367                              <2>  %endif
   367 0000CBC4 040701              <2>  db %%end-%%beg,%6,size
   367                              <2> %%name:
   367 0000CBC7 463720494449562000  <2>  db %1,' ',0
   367                              <2> %%beg:
   367                              <2>  %ifidni %4,none
   367 0000CBD0 66F7F8              <2>  %2 %3
   367                              <2>  %elifidni %4,mem
   367                              <2>  mov [0], msrc
   367                              <2>  %2 %3,[0]
   367                              <2>  %elifidni %5,none
   367                              <2>  %2 %3,%4
   367                              <2>  %else
   367                              <2>  %2 %3,%4,%5
   367                              <2>  %endif
   367 0000CBD3 C3                  <2>  ret
   367                              <2> %%end:
   368                              <1> 	defOp    "F7 IDIV",idiv,eax,none,none,TYPE_DIVIDE         ;    F7 F8
   368                              <2>  %ifidni %3,al
   368                              <2>  %assign size SIZE_BYTE
   368                              <2>  %define msrc dl
   368                              <2>  %elifidni %3,dl
   368                              <2>  %assign size SIZE_BYTE
   368                              <2>  %elifidni %3,ax
   368                              <2>  %assign size SIZE_SHORT
   368                              <2>  %define msrc dx
   368                              <2>  %elifidni %3,dx
   368                              <2>  %assign size SIZE_SHORT
   368                              <2>  %else
   368                              <2>  %assign size SIZE_LONG
   368                              <2>  %define msrc edx
   368                              <2>  %endif
   368 0000CBD4 030702              <2>  db %%end-%%beg,%6,size
   368                              <2> %%name:
   368 0000CBD7 463720494449562000  <2>  db %1,' ',0
   368                              <2> %%beg:
   368                              <2>  %ifidni %4,none
   368 0000CBE0 F7F8                <2>  %2 %3
   368                              <2>  %elifidni %4,mem
   368                              <2>  mov [0], msrc
   368                              <2>  %2 %3,[0]
   368                              <2>  %elifidni %5,none
   368                              <2>  %2 %3,%4
   368                              <2>  %else
   368                              <2>  %2 %3,%4,%5
   368                              <2>  %endif
   368 0000CBE2 C3                  <2>  ret
   368                              <2> %%end:
   369                              <1> 	defOpSh  "D0 SAL",sal,al,1,TYPE_SHIFTS_1                  ;    D0 E0
   369                              <2>  %ifidni %3,al
   369                              <2>  %assign size SIZE_BYTE
   369                              <2>  %elifidni %3,ax
   369                              <2>  %assign size SIZE_SHORT
   369                              <2>  %else
   369                              <2>  %assign size SIZE_LONG
   369                              <2>  %endif
   369 0000CBE3 040800              <2>  db %%end-%%beg,%5,size
   369                              <2> %%name:
   369 0000CBE6 44302053414C2000    <2>  db %1,' ',0
   369                              <2> %%beg:
   369 0000CBEE F9                  <2>  stc
   369                              <2>  %ifidni %4,cl
   369                              <2>  xchg cl,dl
   369                              <2>  %2 %3,cl
   369                              <2>  xchg cl,dl
   369                              <2>  %else
   369 0000CBEF D0E0                <2>  %2 %3,%4
   369                              <2>  %endif
   369 0000CBF1 C3                  <2>  ret
   369                              <2> %%end:
   370                              <1> 	defOpSh  "D1 SAL",sal,ax,1,TYPE_SHIFTS_1                  ; 66 D1 E0
   370                              <2>  %ifidni %3,al
   370                              <2>  %assign size SIZE_BYTE
   370                              <2>  %elifidni %3,ax
   370                              <2>  %assign size SIZE_SHORT
   370                              <2>  %else
   370                              <2>  %assign size SIZE_LONG
   370                              <2>  %endif
   370 0000CBF2 050801              <2>  db %%end-%%beg,%5,size
   370                              <2> %%name:
   370 0000CBF5 44312053414C2000    <2>  db %1,' ',0
   370                              <2> %%beg:
   370 0000CBFD F9                  <2>  stc
   370                              <2>  %ifidni %4,cl
   370                              <2>  xchg cl,dl
   370                              <2>  %2 %3,cl
   370                              <2>  xchg cl,dl
   370                              <2>  %else
   370 0000CBFE 66D1E0              <2>  %2 %3,%4
   370                              <2>  %endif
   370 0000CC01 C3                  <2>  ret
   370                              <2> %%end:
   371                              <1> 	defOpSh  "D1 SAL",sal,eax,1,TYPE_SHIFTS_1                 ;    D1 E0
   371                              <2>  %ifidni %3,al
   371                              <2>  %assign size SIZE_BYTE
   371                              <2>  %elifidni %3,ax
   371                              <2>  %assign size SIZE_SHORT
   371                              <2>  %else
   371                              <2>  %assign size SIZE_LONG
   371                              <2>  %endif
   371 0000CC02 040802              <2>  db %%end-%%beg,%5,size
   371                              <2> %%name:
   371 0000CC05 44312053414C2000    <2>  db %1,' ',0
   371                              <2> %%beg:
   371 0000CC0D F9                  <2>  stc
   371                              <2>  %ifidni %4,cl
   371                              <2>  xchg cl,dl
   371                              <2>  %2 %3,cl
   371                              <2>  xchg cl,dl
   371                              <2>  %else
   371 0000CC0E D1E0                <2>  %2 %3,%4
   371                              <2>  %endif
   371 0000CC10 C3                  <2>  ret
   371                              <2> %%end:
   372                              <1> 	defOpSh  "C0 SAL",sal,al,7,TYPE_SHIFTS_R                  ;    C0 E007
   372                              <2>  %ifidni %3,al
   372                              <2>  %assign size SIZE_BYTE
   372                              <2>  %elifidni %3,ax
   372                              <2>  %assign size SIZE_SHORT
   372                              <2>  %else
   372                              <2>  %assign size SIZE_LONG
   372                              <2>  %endif
   372 0000CC11 050900              <2>  db %%end-%%beg,%5,size
   372                              <2> %%name:
   372 0000CC14 43302053414C2000    <2>  db %1,' ',0
   372                              <2> %%beg:
   372 0000CC1C F9                  <2>  stc
   372                              <2>  %ifidni %4,cl
   372                              <2>  xchg cl,dl
   372                              <2>  %2 %3,cl
   372                              <2>  xchg cl,dl
   372                              <2>  %else
   372 0000CC1D C0E007              <2>  %2 %3,%4
   372                              <2>  %endif
   372 0000CC20 C3                  <2>  ret
   372                              <2> %%end:
   373                              <1> 	defOpSh  "C1 SAL",sal,ax,7,TYPE_SHIFTS_R                  ; 66 C1 E007
   373                              <2>  %ifidni %3,al
   373                              <2>  %assign size SIZE_BYTE
   373                              <2>  %elifidni %3,ax
   373                              <2>  %assign size SIZE_SHORT
   373                              <2>  %else
   373                              <2>  %assign size SIZE_LONG
   373                              <2>  %endif
   373 0000CC21 060901              <2>  db %%end-%%beg,%5,size
   373                              <2> %%name:
   373 0000CC24 43312053414C2000    <2>  db %1,' ',0
   373                              <2> %%beg:
   373 0000CC2C F9                  <2>  stc
   373                              <2>  %ifidni %4,cl
   373                              <2>  xchg cl,dl
   373                              <2>  %2 %3,cl
   373                              <2>  xchg cl,dl
   373                              <2>  %else
   373 0000CC2D 66C1E007            <2>  %2 %3,%4
   373                              <2>  %endif
   373 0000CC31 C3                  <2>  ret
   373                              <2> %%end:
   374                              <1> 	defOpSh  "C1 SAL",sal,eax,7,TYPE_SHIFTS_R                 ;    C1 E007
   374                              <2>  %ifidni %3,al
   374                              <2>  %assign size SIZE_BYTE
   374                              <2>  %elifidni %3,ax
   374                              <2>  %assign size SIZE_SHORT
   374                              <2>  %else
   374                              <2>  %assign size SIZE_LONG
   374                              <2>  %endif
   374 0000CC32 050902              <2>  db %%end-%%beg,%5,size
   374                              <2> %%name:
   374 0000CC35 43312053414C2000    <2>  db %1,' ',0
   374                              <2> %%beg:
   374 0000CC3D F9                  <2>  stc
   374                              <2>  %ifidni %4,cl
   374                              <2>  xchg cl,dl
   374                              <2>  %2 %3,cl
   374                              <2>  xchg cl,dl
   374                              <2>  %else
   374 0000CC3E C1E007              <2>  %2 %3,%4
   374                              <2>  %endif
   374 0000CC41 C3                  <2>  ret
   374                              <2> %%end:
   375                              <1> 	defOpSh  "D2 SAL",sal,al,cl,TYPE_SHIFTS_R                 ;    D2 E0
   375                              <2>  %ifidni %3,al
   375                              <2>  %assign size SIZE_BYTE
   375                              <2>  %elifidni %3,ax
   375                              <2>  %assign size SIZE_SHORT
   375                              <2>  %else
   375                              <2>  %assign size SIZE_LONG
   375                              <2>  %endif
   375 0000CC42 080900              <2>  db %%end-%%beg,%5,size
   375                              <2> %%name:
   375 0000CC45 44322053414C2000    <2>  db %1,' ',0
   375                              <2> %%beg:
   375 0000CC4D F9                  <2>  stc
   375                              <2>  %ifidni %4,cl
   375 0000CC4E 86CA                <2>  xchg cl,dl
   375 0000CC50 D2E0                <2>  %2 %3,cl
   375 0000CC52 86CA                <2>  xchg cl,dl
   375                              <2>  %else
   375                              <2>  %2 %3,%4
   375                              <2>  %endif
   375 0000CC54 C3                  <2>  ret
   375                              <2> %%end:
   376                              <1> 	defOpSh  "D3 SAL",sal,ax,cl,TYPE_SHIFTS_R                 ; 66 D3 E0
   376                              <2>  %ifidni %3,al
   376                              <2>  %assign size SIZE_BYTE
   376                              <2>  %elifidni %3,ax
   376                              <2>  %assign size SIZE_SHORT
   376                              <2>  %else
   376                              <2>  %assign size SIZE_LONG
   376                              <2>  %endif
   376 0000CC55 090901              <2>  db %%end-%%beg,%5,size
   376                              <2> %%name:
   376 0000CC58 44332053414C2000    <2>  db %1,' ',0
   376                              <2> %%beg:
   376 0000CC60 F9                  <2>  stc
   376                              <2>  %ifidni %4,cl
   376 0000CC61 86CA                <2>  xchg cl,dl
   376 0000CC63 66D3E0              <2>  %2 %3,cl
   376 0000CC66 86CA                <2>  xchg cl,dl
   376                              <2>  %else
   376                              <2>  %2 %3,%4
   376                              <2>  %endif
   376 0000CC68 C3                  <2>  ret
   376                              <2> %%end:
   377                              <1> 	defOpSh  "D3 SAL",sal,eax,cl,TYPE_SHIFTS_R                ;    D3 E0
   377                              <2>  %ifidni %3,al
   377                              <2>  %assign size SIZE_BYTE
   377                              <2>  %elifidni %3,ax
   377                              <2>  %assign size SIZE_SHORT
   377                              <2>  %else
   377                              <2>  %assign size SIZE_LONG
   377                              <2>  %endif
   377 0000CC69 080902              <2>  db %%end-%%beg,%5,size
   377                              <2> %%name:
   377 0000CC6C 44332053414C2000    <2>  db %1,' ',0
   377                              <2> %%beg:
   377 0000CC74 F9                  <2>  stc
   377                              <2>  %ifidni %4,cl
   377 0000CC75 86CA                <2>  xchg cl,dl
   377 0000CC77 D3E0                <2>  %2 %3,cl
   377 0000CC79 86CA                <2>  xchg cl,dl
   377                              <2>  %else
   377                              <2>  %2 %3,%4
   377                              <2>  %endif
   377 0000CC7B C3                  <2>  ret
   377                              <2> %%end:
   378                              <1> 	defOpSh  "D0 SAR",sar,al,1,TYPE_SHIFTS_1                  ;    D0 F8
   378                              <2>  %ifidni %3,al
   378                              <2>  %assign size SIZE_BYTE
   378                              <2>  %elifidni %3,ax
   378                              <2>  %assign size SIZE_SHORT
   378                              <2>  %else
   378                              <2>  %assign size SIZE_LONG
   378                              <2>  %endif
   378 0000CC7C 040800              <2>  db %%end-%%beg,%5,size
   378                              <2> %%name:
   378 0000CC7F 4430205341522000    <2>  db %1,' ',0
   378                              <2> %%beg:
   378 0000CC87 F9                  <2>  stc
   378                              <2>  %ifidni %4,cl
   378                              <2>  xchg cl,dl
   378                              <2>  %2 %3,cl
   378                              <2>  xchg cl,dl
   378                              <2>  %else
   378 0000CC88 D0F8                <2>  %2 %3,%4
   378                              <2>  %endif
   378 0000CC8A C3                  <2>  ret
   378                              <2> %%end:
   379                              <1> 	defOpSh  "D1 SAR",sar,ax,1,TYPE_SHIFTS_1                  ; 66 D1 F8
   379                              <2>  %ifidni %3,al
   379                              <2>  %assign size SIZE_BYTE
   379                              <2>  %elifidni %3,ax
   379                              <2>  %assign size SIZE_SHORT
   379                              <2>  %else
   379                              <2>  %assign size SIZE_LONG
   379                              <2>  %endif
   379 0000CC8B 050801              <2>  db %%end-%%beg,%5,size
   379                              <2> %%name:
   379 0000CC8E 4431205341522000    <2>  db %1,' ',0
   379                              <2> %%beg:
   379 0000CC96 F9                  <2>  stc
   379                              <2>  %ifidni %4,cl
   379                              <2>  xchg cl,dl
   379                              <2>  %2 %3,cl
   379                              <2>  xchg cl,dl
   379                              <2>  %else
   379 0000CC97 66D1F8              <2>  %2 %3,%4
   379                              <2>  %endif
   379 0000CC9A C3                  <2>  ret
   379                              <2> %%end:
   380                              <1> 	defOpSh  "D1 SAR",sar,eax,1,TYPE_SHIFTS_1                 ;    D1 F8
   380                              <2>  %ifidni %3,al
   380                              <2>  %assign size SIZE_BYTE
   380                              <2>  %elifidni %3,ax
   380                              <2>  %assign size SIZE_SHORT
   380                              <2>  %else
   380                              <2>  %assign size SIZE_LONG
   380                              <2>  %endif
   380 0000CC9B 040802              <2>  db %%end-%%beg,%5,size
   380                              <2> %%name:
   380 0000CC9E 4431205341522000    <2>  db %1,' ',0
   380                              <2> %%beg:
   380 0000CCA6 F9                  <2>  stc
   380                              <2>  %ifidni %4,cl
   380                              <2>  xchg cl,dl
   380                              <2>  %2 %3,cl
   380                              <2>  xchg cl,dl
   380                              <2>  %else
   380 0000CCA7 D1F8                <2>  %2 %3,%4
   380                              <2>  %endif
   380 0000CCA9 C3                  <2>  ret
   380                              <2> %%end:
   381                              <1> 	defOpSh  "C0 SAR",sar,al,7,TYPE_SHIFTS_R                  ;    C0 F807
   381                              <2>  %ifidni %3,al
   381                              <2>  %assign size SIZE_BYTE
   381                              <2>  %elifidni %3,ax
   381                              <2>  %assign size SIZE_SHORT
   381                              <2>  %else
   381                              <2>  %assign size SIZE_LONG
   381                              <2>  %endif
   381 0000CCAA 050900              <2>  db %%end-%%beg,%5,size
   381                              <2> %%name:
   381 0000CCAD 4330205341522000    <2>  db %1,' ',0
   381                              <2> %%beg:
   381 0000CCB5 F9                  <2>  stc
   381                              <2>  %ifidni %4,cl
   381                              <2>  xchg cl,dl
   381                              <2>  %2 %3,cl
   381                              <2>  xchg cl,dl
   381                              <2>  %else
   381 0000CCB6 C0F807              <2>  %2 %3,%4
   381                              <2>  %endif
   381 0000CCB9 C3                  <2>  ret
   381                              <2> %%end:
   382                              <1> 	defOpSh  "C1 SAR",sar,ax,7,TYPE_SHIFTS_R                  ; 66 C1 F807
   382                              <2>  %ifidni %3,al
   382                              <2>  %assign size SIZE_BYTE
   382                              <2>  %elifidni %3,ax
   382                              <2>  %assign size SIZE_SHORT
   382                              <2>  %else
   382                              <2>  %assign size SIZE_LONG
   382                              <2>  %endif
   382 0000CCBA 060901              <2>  db %%end-%%beg,%5,size
   382                              <2> %%name:
   382 0000CCBD 4331205341522000    <2>  db %1,' ',0
   382                              <2> %%beg:
   382 0000CCC5 F9                  <2>  stc
   382                              <2>  %ifidni %4,cl
   382                              <2>  xchg cl,dl
   382                              <2>  %2 %3,cl
   382                              <2>  xchg cl,dl
   382                              <2>  %else
   382 0000CCC6 66C1F807            <2>  %2 %3,%4
   382                              <2>  %endif
   382 0000CCCA C3                  <2>  ret
   382                              <2> %%end:
   383                              <1> 	defOpSh  "C1 SAR",sar,eax,7,TYPE_SHIFTS_R                 ;    C1 F807
   383                              <2>  %ifidni %3,al
   383                              <2>  %assign size SIZE_BYTE
   383                              <2>  %elifidni %3,ax
   383                              <2>  %assign size SIZE_SHORT
   383                              <2>  %else
   383                              <2>  %assign size SIZE_LONG
   383                              <2>  %endif
   383 0000CCCB 050902              <2>  db %%end-%%beg,%5,size
   383                              <2> %%name:
   383 0000CCCE 4331205341522000    <2>  db %1,' ',0
   383                              <2> %%beg:
   383 0000CCD6 F9                  <2>  stc
   383                              <2>  %ifidni %4,cl
   383                              <2>  xchg cl,dl
   383                              <2>  %2 %3,cl
   383                              <2>  xchg cl,dl
   383                              <2>  %else
   383 0000CCD7 C1F807              <2>  %2 %3,%4
   383                              <2>  %endif
   383 0000CCDA C3                  <2>  ret
   383                              <2> %%end:
   384                              <1> 	defOpSh  "D2 SAR",sar,al,cl,TYPE_SHIFTS_R                 ;    D2 F8
   384                              <2>  %ifidni %3,al
   384                              <2>  %assign size SIZE_BYTE
   384                              <2>  %elifidni %3,ax
   384                              <2>  %assign size SIZE_SHORT
   384                              <2>  %else
   384                              <2>  %assign size SIZE_LONG
   384                              <2>  %endif
   384 0000CCDB 080900              <2>  db %%end-%%beg,%5,size
   384                              <2> %%name:
   384 0000CCDE 4432205341522000    <2>  db %1,' ',0
   384                              <2> %%beg:
   384 0000CCE6 F9                  <2>  stc
   384                              <2>  %ifidni %4,cl
   384 0000CCE7 86CA                <2>  xchg cl,dl
   384 0000CCE9 D2F8                <2>  %2 %3,cl
   384 0000CCEB 86CA                <2>  xchg cl,dl
   384                              <2>  %else
   384                              <2>  %2 %3,%4
   384                              <2>  %endif
   384 0000CCED C3                  <2>  ret
   384                              <2> %%end:
   385                              <1> 	defOpSh  "D3 SAR",sar,ax,cl,TYPE_SHIFTS_R                 ; 66 D3 F8
   385                              <2>  %ifidni %3,al
   385                              <2>  %assign size SIZE_BYTE
   385                              <2>  %elifidni %3,ax
   385                              <2>  %assign size SIZE_SHORT
   385                              <2>  %else
   385                              <2>  %assign size SIZE_LONG
   385                              <2>  %endif
   385 0000CCEE 090901              <2>  db %%end-%%beg,%5,size
   385                              <2> %%name:
   385 0000CCF1 4433205341522000    <2>  db %1,' ',0
   385                              <2> %%beg:
   385 0000CCF9 F9                  <2>  stc
   385                              <2>  %ifidni %4,cl
   385 0000CCFA 86CA                <2>  xchg cl,dl
   385 0000CCFC 66D3F8              <2>  %2 %3,cl
   385 0000CCFF 86CA                <2>  xchg cl,dl
   385                              <2>  %else
   385                              <2>  %2 %3,%4
   385                              <2>  %endif
   385 0000CD01 C3                  <2>  ret
   385                              <2> %%end:
   386                              <1> 	defOpSh  "D3 SAR",sar,eax,cl,TYPE_SHIFTS_R                ;    D3 F8
   386                              <2>  %ifidni %3,al
   386                              <2>  %assign size SIZE_BYTE
   386                              <2>  %elifidni %3,ax
   386                              <2>  %assign size SIZE_SHORT
   386                              <2>  %else
   386                              <2>  %assign size SIZE_LONG
   386                              <2>  %endif
   386 0000CD02 080902              <2>  db %%end-%%beg,%5,size
   386                              <2> %%name:
   386 0000CD05 4433205341522000    <2>  db %1,' ',0
   386                              <2> %%beg:
   386 0000CD0D F9                  <2>  stc
   386                              <2>  %ifidni %4,cl
   386 0000CD0E 86CA                <2>  xchg cl,dl
   386 0000CD10 D3F8                <2>  %2 %3,cl
   386 0000CD12 86CA                <2>  xchg cl,dl
   386                              <2>  %else
   386                              <2>  %2 %3,%4
   386                              <2>  %endif
   386 0000CD14 C3                  <2>  ret
   386                              <2> %%end:
   387                              <1> 	defOpSh  "D0 SHR",shr,al,1,TYPE_SHIFTS_1                  ;    D0 E8
   387                              <2>  %ifidni %3,al
   387                              <2>  %assign size SIZE_BYTE
   387                              <2>  %elifidni %3,ax
   387                              <2>  %assign size SIZE_SHORT
   387                              <2>  %else
   387                              <2>  %assign size SIZE_LONG
   387                              <2>  %endif
   387 0000CD15 040800              <2>  db %%end-%%beg,%5,size
   387                              <2> %%name:
   387 0000CD18 4430205348522000    <2>  db %1,' ',0
   387                              <2> %%beg:
   387 0000CD20 F9                  <2>  stc
   387                              <2>  %ifidni %4,cl
   387                              <2>  xchg cl,dl
   387                              <2>  %2 %3,cl
   387                              <2>  xchg cl,dl
   387                              <2>  %else
   387 0000CD21 D0E8                <2>  %2 %3,%4
   387                              <2>  %endif
   387 0000CD23 C3                  <2>  ret
   387                              <2> %%end:
   388                              <1> 	defOpSh  "D1 SHR",shr,ax,1,TYPE_SHIFTS_1                  ; 66 D1 E8
   388                              <2>  %ifidni %3,al
   388                              <2>  %assign size SIZE_BYTE
   388                              <2>  %elifidni %3,ax
   388                              <2>  %assign size SIZE_SHORT
   388                              <2>  %else
   388                              <2>  %assign size SIZE_LONG
   388                              <2>  %endif
   388 0000CD24 050801              <2>  db %%end-%%beg,%5,size
   388                              <2> %%name:
   388 0000CD27 4431205348522000    <2>  db %1,' ',0
   388                              <2> %%beg:
   388 0000CD2F F9                  <2>  stc
   388                              <2>  %ifidni %4,cl
   388                              <2>  xchg cl,dl
   388                              <2>  %2 %3,cl
   388                              <2>  xchg cl,dl
   388                              <2>  %else
   388 0000CD30 66D1E8              <2>  %2 %3,%4
   388                              <2>  %endif
   388 0000CD33 C3                  <2>  ret
   388                              <2> %%end:
   389                              <1> 	defOpSh  "D1 SHR",shr,eax,1,TYPE_SHIFTS_1                 ;    D1 E8
   389                              <2>  %ifidni %3,al
   389                              <2>  %assign size SIZE_BYTE
   389                              <2>  %elifidni %3,ax
   389                              <2>  %assign size SIZE_SHORT
   389                              <2>  %else
   389                              <2>  %assign size SIZE_LONG
   389                              <2>  %endif
   389 0000CD34 040802              <2>  db %%end-%%beg,%5,size
   389                              <2> %%name:
   389 0000CD37 4431205348522000    <2>  db %1,' ',0
   389                              <2> %%beg:
   389 0000CD3F F9                  <2>  stc
   389                              <2>  %ifidni %4,cl
   389                              <2>  xchg cl,dl
   389                              <2>  %2 %3,cl
   389                              <2>  xchg cl,dl
   389                              <2>  %else
   389 0000CD40 D1E8                <2>  %2 %3,%4
   389                              <2>  %endif
   389 0000CD42 C3                  <2>  ret
   389                              <2> %%end:
   390                              <1> 	defOpSh  "C0 SHR",shr,al,7,TYPE_SHIFTS_R                  ;    C0 E807
   390                              <2>  %ifidni %3,al
   390                              <2>  %assign size SIZE_BYTE
   390                              <2>  %elifidni %3,ax
   390                              <2>  %assign size SIZE_SHORT
   390                              <2>  %else
   390                              <2>  %assign size SIZE_LONG
   390                              <2>  %endif
   390 0000CD43 050900              <2>  db %%end-%%beg,%5,size
   390                              <2> %%name:
   390 0000CD46 4330205348522000    <2>  db %1,' ',0
   390                              <2> %%beg:
   390 0000CD4E F9                  <2>  stc
   390                              <2>  %ifidni %4,cl
   390                              <2>  xchg cl,dl
   390                              <2>  %2 %3,cl
   390                              <2>  xchg cl,dl
   390                              <2>  %else
   390 0000CD4F C0E807              <2>  %2 %3,%4
   390                              <2>  %endif
   390 0000CD52 C3                  <2>  ret
   390                              <2> %%end:
   391                              <1> 	defOpSh  "C1 SHR",shr,ax,7,TYPE_SHIFTS_R                  ; 66 C1 E807
   391                              <2>  %ifidni %3,al
   391                              <2>  %assign size SIZE_BYTE
   391                              <2>  %elifidni %3,ax
   391                              <2>  %assign size SIZE_SHORT
   391                              <2>  %else
   391                              <2>  %assign size SIZE_LONG
   391                              <2>  %endif
   391 0000CD53 060901              <2>  db %%end-%%beg,%5,size
   391                              <2> %%name:
   391 0000CD56 4331205348522000    <2>  db %1,' ',0
   391                              <2> %%beg:
   391 0000CD5E F9                  <2>  stc
   391                              <2>  %ifidni %4,cl
   391                              <2>  xchg cl,dl
   391                              <2>  %2 %3,cl
   391                              <2>  xchg cl,dl
   391                              <2>  %else
   391 0000CD5F 66C1E807            <2>  %2 %3,%4
   391                              <2>  %endif
   391 0000CD63 C3                  <2>  ret
   391                              <2> %%end:
   392                              <1> 	defOpSh  "C1 SHR",shr,eax,7,TYPE_SHIFTS_R                 ;    C1 E807
   392                              <2>  %ifidni %3,al
   392                              <2>  %assign size SIZE_BYTE
   392                              <2>  %elifidni %3,ax
   392                              <2>  %assign size SIZE_SHORT
   392                              <2>  %else
   392                              <2>  %assign size SIZE_LONG
   392                              <2>  %endif
   392 0000CD64 050902              <2>  db %%end-%%beg,%5,size
   392                              <2> %%name:
   392 0000CD67 4331205348522000    <2>  db %1,' ',0
   392                              <2> %%beg:
   392 0000CD6F F9                  <2>  stc
   392                              <2>  %ifidni %4,cl
   392                              <2>  xchg cl,dl
   392                              <2>  %2 %3,cl
   392                              <2>  xchg cl,dl
   392                              <2>  %else
   392 0000CD70 C1E807              <2>  %2 %3,%4
   392                              <2>  %endif
   392 0000CD73 C3                  <2>  ret
   392                              <2> %%end:
   393                              <1> 	defOpSh  "D2 SHR",shr,al,cl,TYPE_SHIFTS_R                 ;    D2 E8
   393                              <2>  %ifidni %3,al
   393                              <2>  %assign size SIZE_BYTE
   393                              <2>  %elifidni %3,ax
   393                              <2>  %assign size SIZE_SHORT
   393                              <2>  %else
   393                              <2>  %assign size SIZE_LONG
   393                              <2>  %endif
   393 0000CD74 080900              <2>  db %%end-%%beg,%5,size
   393                              <2> %%name:
   393 0000CD77 4432205348522000    <2>  db %1,' ',0
   393                              <2> %%beg:
   393 0000CD7F F9                  <2>  stc
   393                              <2>  %ifidni %4,cl
   393 0000CD80 86CA                <2>  xchg cl,dl
   393 0000CD82 D2E8                <2>  %2 %3,cl
   393 0000CD84 86CA                <2>  xchg cl,dl
   393                              <2>  %else
   393                              <2>  %2 %3,%4
   393                              <2>  %endif
   393 0000CD86 C3                  <2>  ret
   393                              <2> %%end:
   394                              <1> 	defOpSh  "D3 SHR",shr,ax,cl,TYPE_SHIFTS_R                 ; 66 D3 E8
   394                              <2>  %ifidni %3,al
   394                              <2>  %assign size SIZE_BYTE
   394                              <2>  %elifidni %3,ax
   394                              <2>  %assign size SIZE_SHORT
   394                              <2>  %else
   394                              <2>  %assign size SIZE_LONG
   394                              <2>  %endif
   394 0000CD87 090901              <2>  db %%end-%%beg,%5,size
   394                              <2> %%name:
   394 0000CD8A 4433205348522000    <2>  db %1,' ',0
   394                              <2> %%beg:
   394 0000CD92 F9                  <2>  stc
   394                              <2>  %ifidni %4,cl
   394 0000CD93 86CA                <2>  xchg cl,dl
   394 0000CD95 66D3E8              <2>  %2 %3,cl
   394 0000CD98 86CA                <2>  xchg cl,dl
   394                              <2>  %else
   394                              <2>  %2 %3,%4
   394                              <2>  %endif
   394 0000CD9A C3                  <2>  ret
   394                              <2> %%end:
   395                              <1> 	defOpSh  "D3 SHR",shr,eax,cl,TYPE_SHIFTS_R                ;    D3 E8
   395                              <2>  %ifidni %3,al
   395                              <2>  %assign size SIZE_BYTE
   395                              <2>  %elifidni %3,ax
   395                              <2>  %assign size SIZE_SHORT
   395                              <2>  %else
   395                              <2>  %assign size SIZE_LONG
   395                              <2>  %endif
   395 0000CD9B 080902              <2>  db %%end-%%beg,%5,size
   395                              <2> %%name:
   395 0000CD9E 4433205348522000    <2>  db %1,' ',0
   395                              <2> %%beg:
   395 0000CDA6 F9                  <2>  stc
   395                              <2>  %ifidni %4,cl
   395 0000CDA7 86CA                <2>  xchg cl,dl
   395 0000CDA9 D3E8                <2>  %2 %3,cl
   395 0000CDAB 86CA                <2>  xchg cl,dl
   395                              <2>  %else
   395                              <2>  %2 %3,%4
   395                              <2>  %endif
   395 0000CDAD C3                  <2>  ret
   395                              <2> %%end:
   396                              <1> 	defOpSh  "D0 ROL",rol,al,1,TYPE_SHIFTS_1                  ;    D0 C0
   396                              <2>  %ifidni %3,al
   396                              <2>  %assign size SIZE_BYTE
   396                              <2>  %elifidni %3,ax
   396                              <2>  %assign size SIZE_SHORT
   396                              <2>  %else
   396                              <2>  %assign size SIZE_LONG
   396                              <2>  %endif
   396 0000CDAE 040800              <2>  db %%end-%%beg,%5,size
   396                              <2> %%name:
   396 0000CDB1 443020524F4C2000    <2>  db %1,' ',0
   396                              <2> %%beg:
   396 0000CDB9 F9                  <2>  stc
   396                              <2>  %ifidni %4,cl
   396                              <2>  xchg cl,dl
   396                              <2>  %2 %3,cl
   396                              <2>  xchg cl,dl
   396                              <2>  %else
   396 0000CDBA D0C0                <2>  %2 %3,%4
   396                              <2>  %endif
   396 0000CDBC C3                  <2>  ret
   396                              <2> %%end:
   397                              <1> 	defOpSh  "D1 ROL",rol,ax,1,TYPE_SHIFTS_1                  ; 66 D1 C0
   397                              <2>  %ifidni %3,al
   397                              <2>  %assign size SIZE_BYTE
   397                              <2>  %elifidni %3,ax
   397                              <2>  %assign size SIZE_SHORT
   397                              <2>  %else
   397                              <2>  %assign size SIZE_LONG
   397                              <2>  %endif
   397 0000CDBD 050801              <2>  db %%end-%%beg,%5,size
   397                              <2> %%name:
   397 0000CDC0 443120524F4C2000    <2>  db %1,' ',0
   397                              <2> %%beg:
   397 0000CDC8 F9                  <2>  stc
   397                              <2>  %ifidni %4,cl
   397                              <2>  xchg cl,dl
   397                              <2>  %2 %3,cl
   397                              <2>  xchg cl,dl
   397                              <2>  %else
   397 0000CDC9 66D1C0              <2>  %2 %3,%4
   397                              <2>  %endif
   397 0000CDCC C3                  <2>  ret
   397                              <2> %%end:
   398                              <1> 	defOpSh  "D1 ROL",rol,eax,1,TYPE_SHIFTS_1                 ;    D1 C0
   398                              <2>  %ifidni %3,al
   398                              <2>  %assign size SIZE_BYTE
   398                              <2>  %elifidni %3,ax
   398                              <2>  %assign size SIZE_SHORT
   398                              <2>  %else
   398                              <2>  %assign size SIZE_LONG
   398                              <2>  %endif
   398 0000CDCD 040802              <2>  db %%end-%%beg,%5,size
   398                              <2> %%name:
   398 0000CDD0 443120524F4C2000    <2>  db %1,' ',0
   398                              <2> %%beg:
   398 0000CDD8 F9                  <2>  stc
   398                              <2>  %ifidni %4,cl
   398                              <2>  xchg cl,dl
   398                              <2>  %2 %3,cl
   398                              <2>  xchg cl,dl
   398                              <2>  %else
   398 0000CDD9 D1C0                <2>  %2 %3,%4
   398                              <2>  %endif
   398 0000CDDB C3                  <2>  ret
   398                              <2> %%end:
   399                              <1> 	defOpSh  "C0 ROL",rol,al,7,TYPE_SHIFTS_1                  ;    C0 C007
   399                              <2>  %ifidni %3,al
   399                              <2>  %assign size SIZE_BYTE
   399                              <2>  %elifidni %3,ax
   399                              <2>  %assign size SIZE_SHORT
   399                              <2>  %else
   399                              <2>  %assign size SIZE_LONG
   399                              <2>  %endif
   399 0000CDDC 050800              <2>  db %%end-%%beg,%5,size
   399                              <2> %%name:
   399 0000CDDF 433020524F4C2000    <2>  db %1,' ',0
   399                              <2> %%beg:
   399 0000CDE7 F9                  <2>  stc
   399                              <2>  %ifidni %4,cl
   399                              <2>  xchg cl,dl
   399                              <2>  %2 %3,cl
   399                              <2>  xchg cl,dl
   399                              <2>  %else
   399 0000CDE8 C0C007              <2>  %2 %3,%4
   399                              <2>  %endif
   399 0000CDEB C3                  <2>  ret
   399                              <2> %%end:
   400                              <1> 	defOpSh  "C1 ROL",rol,ax,7,TYPE_SHIFTS_1                  ; 66 C1 C007
   400                              <2>  %ifidni %3,al
   400                              <2>  %assign size SIZE_BYTE
   400                              <2>  %elifidni %3,ax
   400                              <2>  %assign size SIZE_SHORT
   400                              <2>  %else
   400                              <2>  %assign size SIZE_LONG
   400                              <2>  %endif
   400 0000CDEC 060801              <2>  db %%end-%%beg,%5,size
   400                              <2> %%name:
   400 0000CDEF 433120524F4C2000    <2>  db %1,' ',0
   400                              <2> %%beg:
   400 0000CDF7 F9                  <2>  stc
   400                              <2>  %ifidni %4,cl
   400                              <2>  xchg cl,dl
   400                              <2>  %2 %3,cl
   400                              <2>  xchg cl,dl
   400                              <2>  %else
   400 0000CDF8 66C1C007            <2>  %2 %3,%4
   400                              <2>  %endif
   400 0000CDFC C3                  <2>  ret
   400                              <2> %%end:
   401                              <1> 	defOpSh  "C1 ROL",rol,eax,7,TYPE_SHIFTS_1                 ;    C1 C007
   401                              <2>  %ifidni %3,al
   401                              <2>  %assign size SIZE_BYTE
   401                              <2>  %elifidni %3,ax
   401                              <2>  %assign size SIZE_SHORT
   401                              <2>  %else
   401                              <2>  %assign size SIZE_LONG
   401                              <2>  %endif
   401 0000CDFD 050802              <2>  db %%end-%%beg,%5,size
   401                              <2> %%name:
   401 0000CE00 433120524F4C2000    <2>  db %1,' ',0
   401                              <2> %%beg:
   401 0000CE08 F9                  <2>  stc
   401                              <2>  %ifidni %4,cl
   401                              <2>  xchg cl,dl
   401                              <2>  %2 %3,cl
   401                              <2>  xchg cl,dl
   401                              <2>  %else
   401 0000CE09 C1C007              <2>  %2 %3,%4
   401                              <2>  %endif
   401 0000CE0C C3                  <2>  ret
   401                              <2> %%end:
   402                              <1> 	defOpSh  "D2 ROL",rol,al,cl,TYPE_SHIFTS_R                 ;    D2 C0
   402                              <2>  %ifidni %3,al
   402                              <2>  %assign size SIZE_BYTE
   402                              <2>  %elifidni %3,ax
   402                              <2>  %assign size SIZE_SHORT
   402                              <2>  %else
   402                              <2>  %assign size SIZE_LONG
   402                              <2>  %endif
   402 0000CE0D 080900              <2>  db %%end-%%beg,%5,size
   402                              <2> %%name:
   402 0000CE10 443220524F4C2000    <2>  db %1,' ',0
   402                              <2> %%beg:
   402 0000CE18 F9                  <2>  stc
   402                              <2>  %ifidni %4,cl
   402 0000CE19 86CA                <2>  xchg cl,dl
   402 0000CE1B D2C0                <2>  %2 %3,cl
   402 0000CE1D 86CA                <2>  xchg cl,dl
   402                              <2>  %else
   402                              <2>  %2 %3,%4
   402                              <2>  %endif
   402 0000CE1F C3                  <2>  ret
   402                              <2> %%end:
   403                              <1> 	defOpSh  "D3 ROL",rol,ax,cl,TYPE_SHIFTS_R                 ; 66 D3 C0
   403                              <2>  %ifidni %3,al
   403                              <2>  %assign size SIZE_BYTE
   403                              <2>  %elifidni %3,ax
   403                              <2>  %assign size SIZE_SHORT
   403                              <2>  %else
   403                              <2>  %assign size SIZE_LONG
   403                              <2>  %endif
   403 0000CE20 090901              <2>  db %%end-%%beg,%5,size
   403                              <2> %%name:
   403 0000CE23 443320524F4C2000    <2>  db %1,' ',0
   403                              <2> %%beg:
   403 0000CE2B F9                  <2>  stc
   403                              <2>  %ifidni %4,cl
   403 0000CE2C 86CA                <2>  xchg cl,dl
   403 0000CE2E 66D3C0              <2>  %2 %3,cl
   403 0000CE31 86CA                <2>  xchg cl,dl
   403                              <2>  %else
   403                              <2>  %2 %3,%4
   403                              <2>  %endif
   403 0000CE33 C3                  <2>  ret
   403                              <2> %%end:
   404                              <1> 	defOpSh  "D3 ROL",rol,eax,cl,TYPE_SHIFTS_R                ;    D3 C0
   404                              <2>  %ifidni %3,al
   404                              <2>  %assign size SIZE_BYTE
   404                              <2>  %elifidni %3,ax
   404                              <2>  %assign size SIZE_SHORT
   404                              <2>  %else
   404                              <2>  %assign size SIZE_LONG
   404                              <2>  %endif
   404 0000CE34 080902              <2>  db %%end-%%beg,%5,size
   404                              <2> %%name:
   404 0000CE37 443320524F4C2000    <2>  db %1,' ',0
   404                              <2> %%beg:
   404 0000CE3F F9                  <2>  stc
   404                              <2>  %ifidni %4,cl
   404 0000CE40 86CA                <2>  xchg cl,dl
   404 0000CE42 D3C0                <2>  %2 %3,cl
   404 0000CE44 86CA                <2>  xchg cl,dl
   404                              <2>  %else
   404                              <2>  %2 %3,%4
   404                              <2>  %endif
   404 0000CE46 C3                  <2>  ret
   404                              <2> %%end:
   405                              <1> 	defOpSh  "D0 ROR",ror,al,1,TYPE_SHIFTS_1                  ;    D0 C8
   405                              <2>  %ifidni %3,al
   405                              <2>  %assign size SIZE_BYTE
   405                              <2>  %elifidni %3,ax
   405                              <2>  %assign size SIZE_SHORT
   405                              <2>  %else
   405                              <2>  %assign size SIZE_LONG
   405                              <2>  %endif
   405 0000CE47 040800              <2>  db %%end-%%beg,%5,size
   405                              <2> %%name:
   405 0000CE4A 443020524F522000    <2>  db %1,' ',0
   405                              <2> %%beg:
   405 0000CE52 F9                  <2>  stc
   405                              <2>  %ifidni %4,cl
   405                              <2>  xchg cl,dl
   405                              <2>  %2 %3,cl
   405                              <2>  xchg cl,dl
   405                              <2>  %else
   405 0000CE53 D0C8                <2>  %2 %3,%4
   405                              <2>  %endif
   405 0000CE55 C3                  <2>  ret
   405                              <2> %%end:
   406                              <1> 	defOpSh  "D1 ROR",ror,ax,1,TYPE_SHIFTS_1                  ; 66 D1 C8
   406                              <2>  %ifidni %3,al
   406                              <2>  %assign size SIZE_BYTE
   406                              <2>  %elifidni %3,ax
   406                              <2>  %assign size SIZE_SHORT
   406                              <2>  %else
   406                              <2>  %assign size SIZE_LONG
   406                              <2>  %endif
   406 0000CE56 050801              <2>  db %%end-%%beg,%5,size
   406                              <2> %%name:
   406 0000CE59 443120524F522000    <2>  db %1,' ',0
   406                              <2> %%beg:
   406 0000CE61 F9                  <2>  stc
   406                              <2>  %ifidni %4,cl
   406                              <2>  xchg cl,dl
   406                              <2>  %2 %3,cl
   406                              <2>  xchg cl,dl
   406                              <2>  %else
   406 0000CE62 66D1C8              <2>  %2 %3,%4
   406                              <2>  %endif
   406 0000CE65 C3                  <2>  ret
   406                              <2> %%end:
   407                              <1> 	defOpSh  "D1 ROR",ror,eax,1,TYPE_SHIFTS_1                 ;    D1 C8
   407                              <2>  %ifidni %3,al
   407                              <2>  %assign size SIZE_BYTE
   407                              <2>  %elifidni %3,ax
   407                              <2>  %assign size SIZE_SHORT
   407                              <2>  %else
   407                              <2>  %assign size SIZE_LONG
   407                              <2>  %endif
   407 0000CE66 040802              <2>  db %%end-%%beg,%5,size
   407                              <2> %%name:
   407 0000CE69 443120524F522000    <2>  db %1,' ',0
   407                              <2> %%beg:
   407 0000CE71 F9                  <2>  stc
   407                              <2>  %ifidni %4,cl
   407                              <2>  xchg cl,dl
   407                              <2>  %2 %3,cl
   407                              <2>  xchg cl,dl
   407                              <2>  %else
   407 0000CE72 D1C8                <2>  %2 %3,%4
   407                              <2>  %endif
   407 0000CE74 C3                  <2>  ret
   407                              <2> %%end:
   408                              <1> 	defOpSh  "C0 ROR",ror,al,7,TYPE_SHIFTS_1                  ;    C0 C807
   408                              <2>  %ifidni %3,al
   408                              <2>  %assign size SIZE_BYTE
   408                              <2>  %elifidni %3,ax
   408                              <2>  %assign size SIZE_SHORT
   408                              <2>  %else
   408                              <2>  %assign size SIZE_LONG
   408                              <2>  %endif
   408 0000CE75 050800              <2>  db %%end-%%beg,%5,size
   408                              <2> %%name:
   408 0000CE78 433020524F522000    <2>  db %1,' ',0
   408                              <2> %%beg:
   408 0000CE80 F9                  <2>  stc
   408                              <2>  %ifidni %4,cl
   408                              <2>  xchg cl,dl
   408                              <2>  %2 %3,cl
   408                              <2>  xchg cl,dl
   408                              <2>  %else
   408 0000CE81 C0C807              <2>  %2 %3,%4
   408                              <2>  %endif
   408 0000CE84 C3                  <2>  ret
   408                              <2> %%end:
   409                              <1> 	defOpSh  "C1 ROR",ror,ax,7,TYPE_SHIFTS_1                  ; 66 C1 C807
   409                              <2>  %ifidni %3,al
   409                              <2>  %assign size SIZE_BYTE
   409                              <2>  %elifidni %3,ax
   409                              <2>  %assign size SIZE_SHORT
   409                              <2>  %else
   409                              <2>  %assign size SIZE_LONG
   409                              <2>  %endif
   409 0000CE85 060801              <2>  db %%end-%%beg,%5,size
   409                              <2> %%name:
   409 0000CE88 433120524F522000    <2>  db %1,' ',0
   409                              <2> %%beg:
   409 0000CE90 F9                  <2>  stc
   409                              <2>  %ifidni %4,cl
   409                              <2>  xchg cl,dl
   409                              <2>  %2 %3,cl
   409                              <2>  xchg cl,dl
   409                              <2>  %else
   409 0000CE91 66C1C807            <2>  %2 %3,%4
   409                              <2>  %endif
   409 0000CE95 C3                  <2>  ret
   409                              <2> %%end:
   410                              <1> 	defOpSh  "C1 ROR",ror,eax,7,TYPE_SHIFTS_1                 ;    C1 C807
   410                              <2>  %ifidni %3,al
   410                              <2>  %assign size SIZE_BYTE
   410                              <2>  %elifidni %3,ax
   410                              <2>  %assign size SIZE_SHORT
   410                              <2>  %else
   410                              <2>  %assign size SIZE_LONG
   410                              <2>  %endif
   410 0000CE96 050802              <2>  db %%end-%%beg,%5,size
   410                              <2> %%name:
   410 0000CE99 433120524F522000    <2>  db %1,' ',0
   410                              <2> %%beg:
   410 0000CEA1 F9                  <2>  stc
   410                              <2>  %ifidni %4,cl
   410                              <2>  xchg cl,dl
   410                              <2>  %2 %3,cl
   410                              <2>  xchg cl,dl
   410                              <2>  %else
   410 0000CEA2 C1C807              <2>  %2 %3,%4
   410                              <2>  %endif
   410 0000CEA5 C3                  <2>  ret
   410                              <2> %%end:
   411                              <1> 	defOpSh  "D2 ROR",ror,al,cl,TYPE_SHIFTS_R                 ;    D2 C8
   411                              <2>  %ifidni %3,al
   411                              <2>  %assign size SIZE_BYTE
   411                              <2>  %elifidni %3,ax
   411                              <2>  %assign size SIZE_SHORT
   411                              <2>  %else
   411                              <2>  %assign size SIZE_LONG
   411                              <2>  %endif
   411 0000CEA6 080900              <2>  db %%end-%%beg,%5,size
   411                              <2> %%name:
   411 0000CEA9 443220524F522000    <2>  db %1,' ',0
   411                              <2> %%beg:
   411 0000CEB1 F9                  <2>  stc
   411                              <2>  %ifidni %4,cl
   411 0000CEB2 86CA                <2>  xchg cl,dl
   411 0000CEB4 D2C8                <2>  %2 %3,cl
   411 0000CEB6 86CA                <2>  xchg cl,dl
   411                              <2>  %else
   411                              <2>  %2 %3,%4
   411                              <2>  %endif
   411 0000CEB8 C3                  <2>  ret
   411                              <2> %%end:
   412                              <1> 	defOpSh  "D3 ROR",ror,ax,cl,TYPE_SHIFTS_R                 ; 66 D3 C8
   412                              <2>  %ifidni %3,al
   412                              <2>  %assign size SIZE_BYTE
   412                              <2>  %elifidni %3,ax
   412                              <2>  %assign size SIZE_SHORT
   412                              <2>  %else
   412                              <2>  %assign size SIZE_LONG
   412                              <2>  %endif
   412 0000CEB9 090901              <2>  db %%end-%%beg,%5,size
   412                              <2> %%name:
   412 0000CEBC 443320524F522000    <2>  db %1,' ',0
   412                              <2> %%beg:
   412 0000CEC4 F9                  <2>  stc
   412                              <2>  %ifidni %4,cl
   412 0000CEC5 86CA                <2>  xchg cl,dl
   412 0000CEC7 66D3C8              <2>  %2 %3,cl
   412 0000CECA 86CA                <2>  xchg cl,dl
   412                              <2>  %else
   412                              <2>  %2 %3,%4
   412                              <2>  %endif
   412 0000CECC C3                  <2>  ret
   412                              <2> %%end:
   413                              <1> 	defOpSh  "D3 ROR",ror,eax,cl,TYPE_SHIFTS_R                ;    D3 C8
   413                              <2>  %ifidni %3,al
   413                              <2>  %assign size SIZE_BYTE
   413                              <2>  %elifidni %3,ax
   413                              <2>  %assign size SIZE_SHORT
   413                              <2>  %else
   413                              <2>  %assign size SIZE_LONG
   413                              <2>  %endif
   413 0000CECD 080902              <2>  db %%end-%%beg,%5,size
   413                              <2> %%name:
   413 0000CED0 443320524F522000    <2>  db %1,' ',0
   413                              <2> %%beg:
   413 0000CED8 F9                  <2>  stc
   413                              <2>  %ifidni %4,cl
   413 0000CED9 86CA                <2>  xchg cl,dl
   413 0000CEDB D3C8                <2>  %2 %3,cl
   413 0000CEDD 86CA                <2>  xchg cl,dl
   413                              <2>  %else
   413                              <2>  %2 %3,%4
   413                              <2>  %endif
   413 0000CEDF C3                  <2>  ret
   413                              <2> %%end:
   414                              <1> 	defOpSh  "D0 RCL",rcl,al,1,TYPE_SHIFTS_1                  ;    D0 D0
   414                              <2>  %ifidni %3,al
   414                              <2>  %assign size SIZE_BYTE
   414                              <2>  %elifidni %3,ax
   414                              <2>  %assign size SIZE_SHORT
   414                              <2>  %else
   414                              <2>  %assign size SIZE_LONG
   414                              <2>  %endif
   414 0000CEE0 040800              <2>  db %%end-%%beg,%5,size
   414                              <2> %%name:
   414 0000CEE3 44302052434C2000    <2>  db %1,' ',0
   414                              <2> %%beg:
   414 0000CEEB F9                  <2>  stc
   414                              <2>  %ifidni %4,cl
   414                              <2>  xchg cl,dl
   414                              <2>  %2 %3,cl
   414                              <2>  xchg cl,dl
   414                              <2>  %else
   414 0000CEEC D0D0                <2>  %2 %3,%4
   414                              <2>  %endif
   414 0000CEEE C3                  <2>  ret
   414                              <2> %%end:
   415                              <1> 	defOpSh  "D1 RCL",rcl,ax,1,TYPE_SHIFTS_1                  ; 66 D1 D0
   415                              <2>  %ifidni %3,al
   415                              <2>  %assign size SIZE_BYTE
   415                              <2>  %elifidni %3,ax
   415                              <2>  %assign size SIZE_SHORT
   415                              <2>  %else
   415                              <2>  %assign size SIZE_LONG
   415                              <2>  %endif
   415 0000CEEF 050801              <2>  db %%end-%%beg,%5,size
   415                              <2> %%name:
   415 0000CEF2 44312052434C2000    <2>  db %1,' ',0
   415                              <2> %%beg:
   415 0000CEFA F9                  <2>  stc
   415                              <2>  %ifidni %4,cl
   415                              <2>  xchg cl,dl
   415                              <2>  %2 %3,cl
   415                              <2>  xchg cl,dl
   415                              <2>  %else
   415 0000CEFB 66D1D0              <2>  %2 %3,%4
   415                              <2>  %endif
   415 0000CEFE C3                  <2>  ret
   415                              <2> %%end:
   416                              <1> 	defOpSh  "D1 RCL",rcl,eax,1,TYPE_SHIFTS_1                 ;    D1 D0
   416                              <2>  %ifidni %3,al
   416                              <2>  %assign size SIZE_BYTE
   416                              <2>  %elifidni %3,ax
   416                              <2>  %assign size SIZE_SHORT
   416                              <2>  %else
   416                              <2>  %assign size SIZE_LONG
   416                              <2>  %endif
   416 0000CEFF 040802              <2>  db %%end-%%beg,%5,size
   416                              <2> %%name:
   416 0000CF02 44312052434C2000    <2>  db %1,' ',0
   416                              <2> %%beg:
   416 0000CF0A F9                  <2>  stc
   416                              <2>  %ifidni %4,cl
   416                              <2>  xchg cl,dl
   416                              <2>  %2 %3,cl
   416                              <2>  xchg cl,dl
   416                              <2>  %else
   416 0000CF0B D1D0                <2>  %2 %3,%4
   416                              <2>  %endif
   416 0000CF0D C3                  <2>  ret
   416                              <2> %%end:
   417                              <1> 	defOpSh  "C0 RCL",rcl,al,7,TYPE_SHIFTS_1                  ;    C0 D007
   417                              <2>  %ifidni %3,al
   417                              <2>  %assign size SIZE_BYTE
   417                              <2>  %elifidni %3,ax
   417                              <2>  %assign size SIZE_SHORT
   417                              <2>  %else
   417                              <2>  %assign size SIZE_LONG
   417                              <2>  %endif
   417 0000CF0E 050800              <2>  db %%end-%%beg,%5,size
   417                              <2> %%name:
   417 0000CF11 43302052434C2000    <2>  db %1,' ',0
   417                              <2> %%beg:
   417 0000CF19 F9                  <2>  stc
   417                              <2>  %ifidni %4,cl
   417                              <2>  xchg cl,dl
   417                              <2>  %2 %3,cl
   417                              <2>  xchg cl,dl
   417                              <2>  %else
   417 0000CF1A C0D007              <2>  %2 %3,%4
   417                              <2>  %endif
   417 0000CF1D C3                  <2>  ret
   417                              <2> %%end:
   418                              <1> 	defOpSh  "C1 RCL",rcl,ax,7,TYPE_SHIFTS_1                  ; 66 C1 D007
   418                              <2>  %ifidni %3,al
   418                              <2>  %assign size SIZE_BYTE
   418                              <2>  %elifidni %3,ax
   418                              <2>  %assign size SIZE_SHORT
   418                              <2>  %else
   418                              <2>  %assign size SIZE_LONG
   418                              <2>  %endif
   418 0000CF1E 060801              <2>  db %%end-%%beg,%5,size
   418                              <2> %%name:
   418 0000CF21 43312052434C2000    <2>  db %1,' ',0
   418                              <2> %%beg:
   418 0000CF29 F9                  <2>  stc
   418                              <2>  %ifidni %4,cl
   418                              <2>  xchg cl,dl
   418                              <2>  %2 %3,cl
   418                              <2>  xchg cl,dl
   418                              <2>  %else
   418 0000CF2A 66C1D007            <2>  %2 %3,%4
   418                              <2>  %endif
   418 0000CF2E C3                  <2>  ret
   418                              <2> %%end:
   419                              <1> 	defOpSh  "C1 RCL",rcl,eax,7,TYPE_SHIFTS_1                 ;    C1 D007
   419                              <2>  %ifidni %3,al
   419                              <2>  %assign size SIZE_BYTE
   419                              <2>  %elifidni %3,ax
   419                              <2>  %assign size SIZE_SHORT
   419                              <2>  %else
   419                              <2>  %assign size SIZE_LONG
   419                              <2>  %endif
   419 0000CF2F 050802              <2>  db %%end-%%beg,%5,size
   419                              <2> %%name:
   419 0000CF32 43312052434C2000    <2>  db %1,' ',0
   419                              <2> %%beg:
   419 0000CF3A F9                  <2>  stc
   419                              <2>  %ifidni %4,cl
   419                              <2>  xchg cl,dl
   419                              <2>  %2 %3,cl
   419                              <2>  xchg cl,dl
   419                              <2>  %else
   419 0000CF3B C1D007              <2>  %2 %3,%4
   419                              <2>  %endif
   419 0000CF3E C3                  <2>  ret
   419                              <2> %%end:
   420                              <1> 	defOpSh  "D2 RCL",rcl,al,cl,TYPE_SHIFTS_R                 ;    D2 D0
   420                              <2>  %ifidni %3,al
   420                              <2>  %assign size SIZE_BYTE
   420                              <2>  %elifidni %3,ax
   420                              <2>  %assign size SIZE_SHORT
   420                              <2>  %else
   420                              <2>  %assign size SIZE_LONG
   420                              <2>  %endif
   420 0000CF3F 080900              <2>  db %%end-%%beg,%5,size
   420                              <2> %%name:
   420 0000CF42 44322052434C2000    <2>  db %1,' ',0
   420                              <2> %%beg:
   420 0000CF4A F9                  <2>  stc
   420                              <2>  %ifidni %4,cl
   420 0000CF4B 86CA                <2>  xchg cl,dl
   420 0000CF4D D2D0                <2>  %2 %3,cl
   420 0000CF4F 86CA                <2>  xchg cl,dl
   420                              <2>  %else
   420                              <2>  %2 %3,%4
   420                              <2>  %endif
   420 0000CF51 C3                  <2>  ret
   420                              <2> %%end:
   421                              <1> 	defOpSh  "D3 RCL",rcl,ax,cl,TYPE_SHIFTS_R                 ; 66 D3 D0
   421                              <2>  %ifidni %3,al
   421                              <2>  %assign size SIZE_BYTE
   421                              <2>  %elifidni %3,ax
   421                              <2>  %assign size SIZE_SHORT
   421                              <2>  %else
   421                              <2>  %assign size SIZE_LONG
   421                              <2>  %endif
   421 0000CF52 090901              <2>  db %%end-%%beg,%5,size
   421                              <2> %%name:
   421 0000CF55 44332052434C2000    <2>  db %1,' ',0
   421                              <2> %%beg:
   421 0000CF5D F9                  <2>  stc
   421                              <2>  %ifidni %4,cl
   421 0000CF5E 86CA                <2>  xchg cl,dl
   421 0000CF60 66D3D0              <2>  %2 %3,cl
   421 0000CF63 86CA                <2>  xchg cl,dl
   421                              <2>  %else
   421                              <2>  %2 %3,%4
   421                              <2>  %endif
   421 0000CF65 C3                  <2>  ret
   421                              <2> %%end:
   422                              <1> 	defOpSh  "D3 RCL",rcl,eax,cl,TYPE_SHIFTS_R                ;    D3 D0
   422                              <2>  %ifidni %3,al
   422                              <2>  %assign size SIZE_BYTE
   422                              <2>  %elifidni %3,ax
   422                              <2>  %assign size SIZE_SHORT
   422                              <2>  %else
   422                              <2>  %assign size SIZE_LONG
   422                              <2>  %endif
   422 0000CF66 080902              <2>  db %%end-%%beg,%5,size
   422                              <2> %%name:
   422 0000CF69 44332052434C2000    <2>  db %1,' ',0
   422                              <2> %%beg:
   422 0000CF71 F9                  <2>  stc
   422                              <2>  %ifidni %4,cl
   422 0000CF72 86CA                <2>  xchg cl,dl
   422 0000CF74 D3D0                <2>  %2 %3,cl
   422 0000CF76 86CA                <2>  xchg cl,dl
   422                              <2>  %else
   422                              <2>  %2 %3,%4
   422                              <2>  %endif
   422 0000CF78 C3                  <2>  ret
   422                              <2> %%end:
   423                              <1> 	defOpSh  "D0 RCR",rol,al,1,TYPE_SHIFTS_1                  ;    D0 C0
   423                              <2>  %ifidni %3,al
   423                              <2>  %assign size SIZE_BYTE
   423                              <2>  %elifidni %3,ax
   423                              <2>  %assign size SIZE_SHORT
   423                              <2>  %else
   423                              <2>  %assign size SIZE_LONG
   423                              <2>  %endif
   423 0000CF79 040800              <2>  db %%end-%%beg,%5,size
   423                              <2> %%name:
   423 0000CF7C 4430205243522000    <2>  db %1,' ',0
   423                              <2> %%beg:
   423 0000CF84 F9                  <2>  stc
   423                              <2>  %ifidni %4,cl
   423                              <2>  xchg cl,dl
   423                              <2>  %2 %3,cl
   423                              <2>  xchg cl,dl
   423                              <2>  %else
   423 0000CF85 D0C0                <2>  %2 %3,%4
   423                              <2>  %endif
   423 0000CF87 C3                  <2>  ret
   423                              <2> %%end:
   424                              <1> 	defOpSh  "D1 RCR",rol,ax,1,TYPE_SHIFTS_1                  ; 66 D1 C0
   424                              <2>  %ifidni %3,al
   424                              <2>  %assign size SIZE_BYTE
   424                              <2>  %elifidni %3,ax
   424                              <2>  %assign size SIZE_SHORT
   424                              <2>  %else
   424                              <2>  %assign size SIZE_LONG
   424                              <2>  %endif
   424 0000CF88 050801              <2>  db %%end-%%beg,%5,size
   424                              <2> %%name:
   424 0000CF8B 4431205243522000    <2>  db %1,' ',0
   424                              <2> %%beg:
   424 0000CF93 F9                  <2>  stc
   424                              <2>  %ifidni %4,cl
   424                              <2>  xchg cl,dl
   424                              <2>  %2 %3,cl
   424                              <2>  xchg cl,dl
   424                              <2>  %else
   424 0000CF94 66D1C0              <2>  %2 %3,%4
   424                              <2>  %endif
   424 0000CF97 C3                  <2>  ret
   424                              <2> %%end:
   425                              <1> 	defOpSh  "D1 RCR",rol,eax,1,TYPE_SHIFTS_1                 ;    D1 C0
   425                              <2>  %ifidni %3,al
   425                              <2>  %assign size SIZE_BYTE
   425                              <2>  %elifidni %3,ax
   425                              <2>  %assign size SIZE_SHORT
   425                              <2>  %else
   425                              <2>  %assign size SIZE_LONG
   425                              <2>  %endif
   425 0000CF98 040802              <2>  db %%end-%%beg,%5,size
   425                              <2> %%name:
   425 0000CF9B 4431205243522000    <2>  db %1,' ',0
   425                              <2> %%beg:
   425 0000CFA3 F9                  <2>  stc
   425                              <2>  %ifidni %4,cl
   425                              <2>  xchg cl,dl
   425                              <2>  %2 %3,cl
   425                              <2>  xchg cl,dl
   425                              <2>  %else
   425 0000CFA4 D1C0                <2>  %2 %3,%4
   425                              <2>  %endif
   425 0000CFA6 C3                  <2>  ret
   425                              <2> %%end:
   426                              <1> 	defOpSh  "C0 RCR",rol,al,7,TYPE_SHIFTS_1                  ;    C0 C007
   426                              <2>  %ifidni %3,al
   426                              <2>  %assign size SIZE_BYTE
   426                              <2>  %elifidni %3,ax
   426                              <2>  %assign size SIZE_SHORT
   426                              <2>  %else
   426                              <2>  %assign size SIZE_LONG
   426                              <2>  %endif
   426 0000CFA7 050800              <2>  db %%end-%%beg,%5,size
   426                              <2> %%name:
   426 0000CFAA 4330205243522000    <2>  db %1,' ',0
   426                              <2> %%beg:
   426 0000CFB2 F9                  <2>  stc
   426                              <2>  %ifidni %4,cl
   426                              <2>  xchg cl,dl
   426                              <2>  %2 %3,cl
   426                              <2>  xchg cl,dl
   426                              <2>  %else
   426 0000CFB3 C0C007              <2>  %2 %3,%4
   426                              <2>  %endif
   426 0000CFB6 C3                  <2>  ret
   426                              <2> %%end:
   427                              <1> 	defOpSh  "C1 RCR",rol,ax,7,TYPE_SHIFTS_1                  ; 66 C1 C007
   427                              <2>  %ifidni %3,al
   427                              <2>  %assign size SIZE_BYTE
   427                              <2>  %elifidni %3,ax
   427                              <2>  %assign size SIZE_SHORT
   427                              <2>  %else
   427                              <2>  %assign size SIZE_LONG
   427                              <2>  %endif
   427 0000CFB7 060801              <2>  db %%end-%%beg,%5,size
   427                              <2> %%name:
   427 0000CFBA 4331205243522000    <2>  db %1,' ',0
   427                              <2> %%beg:
   427 0000CFC2 F9                  <2>  stc
   427                              <2>  %ifidni %4,cl
   427                              <2>  xchg cl,dl
   427                              <2>  %2 %3,cl
   427                              <2>  xchg cl,dl
   427                              <2>  %else
   427 0000CFC3 66C1C007            <2>  %2 %3,%4
   427                              <2>  %endif
   427 0000CFC7 C3                  <2>  ret
   427                              <2> %%end:
   428                              <1> 	defOpSh  "C1 RCR",rol,eax,7,TYPE_SHIFTS_1                 ;    C1 C007
   428                              <2>  %ifidni %3,al
   428                              <2>  %assign size SIZE_BYTE
   428                              <2>  %elifidni %3,ax
   428                              <2>  %assign size SIZE_SHORT
   428                              <2>  %else
   428                              <2>  %assign size SIZE_LONG
   428                              <2>  %endif
   428 0000CFC8 050802              <2>  db %%end-%%beg,%5,size
   428                              <2> %%name:
   428 0000CFCB 4331205243522000    <2>  db %1,' ',0
   428                              <2> %%beg:
   428 0000CFD3 F9                  <2>  stc
   428                              <2>  %ifidni %4,cl
   428                              <2>  xchg cl,dl
   428                              <2>  %2 %3,cl
   428                              <2>  xchg cl,dl
   428                              <2>  %else
   428 0000CFD4 C1C007              <2>  %2 %3,%4
   428                              <2>  %endif
   428 0000CFD7 C3                  <2>  ret
   428                              <2> %%end:
   429                              <1> 	defOpSh  "D2 RCR",rol,al,cl,TYPE_SHIFTS_R                 ;    D2 C0
   429                              <2>  %ifidni %3,al
   429                              <2>  %assign size SIZE_BYTE
   429                              <2>  %elifidni %3,ax
   429                              <2>  %assign size SIZE_SHORT
   429                              <2>  %else
   429                              <2>  %assign size SIZE_LONG
   429                              <2>  %endif
   429 0000CFD8 080900              <2>  db %%end-%%beg,%5,size
   429                              <2> %%name:
   429 0000CFDB 4432205243522000    <2>  db %1,' ',0
   429                              <2> %%beg:
   429 0000CFE3 F9                  <2>  stc
   429                              <2>  %ifidni %4,cl
   429 0000CFE4 86CA                <2>  xchg cl,dl
   429 0000CFE6 D2C0                <2>  %2 %3,cl
   429 0000CFE8 86CA                <2>  xchg cl,dl
   429                              <2>  %else
   429                              <2>  %2 %3,%4
   429                              <2>  %endif
   429 0000CFEA C3                  <2>  ret
   429                              <2> %%end:
   430                              <1> 	defOpSh  "D3 RCR",rol,ax,cl,TYPE_SHIFTS_R                 ; 66 D3 C0
   430                              <2>  %ifidni %3,al
   430                              <2>  %assign size SIZE_BYTE
   430                              <2>  %elifidni %3,ax
   430                              <2>  %assign size SIZE_SHORT
   430                              <2>  %else
   430                              <2>  %assign size SIZE_LONG
   430                              <2>  %endif
   430 0000CFEB 090901              <2>  db %%end-%%beg,%5,size
   430                              <2> %%name:
   430 0000CFEE 4433205243522000    <2>  db %1,' ',0
   430                              <2> %%beg:
   430 0000CFF6 F9                  <2>  stc
   430                              <2>  %ifidni %4,cl
   430 0000CFF7 86CA                <2>  xchg cl,dl
   430 0000CFF9 66D3C0              <2>  %2 %3,cl
   430 0000CFFC 86CA                <2>  xchg cl,dl
   430                              <2>  %else
   430                              <2>  %2 %3,%4
   430                              <2>  %endif
   430 0000CFFE C3                  <2>  ret
   430                              <2> %%end:
   431                              <1> 	defOpSh  "D3 RCR",rol,eax,cl,TYPE_SHIFTS_R                ;    D3 C0
   431                              <2>  %ifidni %3,al
   431                              <2>  %assign size SIZE_BYTE
   431                              <2>  %elifidni %3,ax
   431                              <2>  %assign size SIZE_SHORT
   431                              <2>  %else
   431                              <2>  %assign size SIZE_LONG
   431                              <2>  %endif
   431 0000CFFF 080902              <2>  db %%end-%%beg,%5,size
   431                              <2> %%name:
   431 0000D002 4433205243522000    <2>  db %1,' ',0
   431                              <2> %%beg:
   431 0000D00A F9                  <2>  stc
   431                              <2>  %ifidni %4,cl
   431 0000D00B 86CA                <2>  xchg cl,dl
   431 0000D00D D3C0                <2>  %2 %3,cl
   431 0000D00F 86CA                <2>  xchg cl,dl
   431                              <2>  %else
   431                              <2>  %2 %3,%4
   431                              <2>  %endif
   431 0000D011 C3                  <2>  ret
   431                              <2> %%end:
   432                              <1> 	defOpShD "0FA4 SHLD",shld,ax,dx,8,TYPE_SHIFTS_R           ; 66 0FA4 D0 08
   432                              <2>  %ifidni %3,ax
   432                              <2>  %assign size SIZE_SHORT
   432                              <2>  %else
   432                              <2>  %assign size SIZE_LONG
   432                              <2>  %endif
   432 0000D012 070901              <2>  db %%end-%%beg,%6,size
   432                              <2> %%name:
   432 0000D015 304641342053484C44- <2>  db %1,' ',0
   432 0000D01E 2000                <2>
   432                              <2> %%beg:
   432 0000D020 F9                  <2>  stc
   432                              <2>  %ifidni %5,cl
   432                              <2>  mov [0],cl
   432                              <2>  mov cl,dl
   432                              <2>  %2 %3,%4,cl
   432                              <2>  mov cl,[0]
   432                              <2>  %else
   432 0000D021 660FA4D008          <2>  %2 %3,%4,%5
   432                              <2>  %endif
   432 0000D026 C3                  <2>  ret
   432                              <2> %%end:
   433                              <1> 	defOpShD "0FA4 SHLD",shld,eax,edx,16,TYPE_SHIFTS_R        ;    0FA4 D0 10
   433                              <2>  %ifidni %3,ax
   433                              <2>  %assign size SIZE_SHORT
   433                              <2>  %else
   433                              <2>  %assign size SIZE_LONG
   433                              <2>  %endif
   433 0000D027 060902              <2>  db %%end-%%beg,%6,size
   433                              <2> %%name:
   433 0000D02A 304641342053484C44- <2>  db %1,' ',0
   433 0000D033 2000                <2>
   433                              <2> %%beg:
   433 0000D035 F9                  <2>  stc
   433                              <2>  %ifidni %5,cl
   433                              <2>  mov [0],cl
   433                              <2>  mov cl,dl
   433                              <2>  %2 %3,%4,cl
   433                              <2>  mov cl,[0]
   433                              <2>  %else
   433 0000D036 0FA4D010            <2>  %2 %3,%4,%5
   433                              <2>  %endif
   433 0000D03A C3                  <2>  ret
   433                              <2> %%end:
   434                              <1> 	defOpShD "0FA5 SHLD",shld,ax,dx,cl,TYPE_SHIFTS_R          ; 66 0FA5 D0
   434                              <2>  %ifidni %3,ax
   434                              <2>  %assign size SIZE_SHORT
   434                              <2>  %else
   434                              <2>  %assign size SIZE_LONG
   434                              <2>  %endif
   434 0000D03B 140901              <2>  db %%end-%%beg,%6,size
   434                              <2> %%name:
   434 0000D03E 304641352053484C44- <2>  db %1,' ',0
   434 0000D047 2000                <2>
   434                              <2> %%beg:
   434 0000D049 F9                  <2>  stc
   434                              <2>  %ifidni %5,cl
   434 0000D04A 880D00000000        <2>  mov [0],cl
   434 0000D050 88D1                <2>  mov cl,dl
   434 0000D052 660FA5D0            <2>  %2 %3,%4,cl
   434 0000D056 8A0D00000000        <2>  mov cl,[0]
   434                              <2>  %else
   434                              <2>  %2 %3,%4,%5
   434                              <2>  %endif
   434 0000D05C C3                  <2>  ret
   434                              <2> %%end:
   435                              <1> 	defOpShD "0FA5 SHLD",shld,eax,edx,cl,TYPE_SHIFTS_R        ;    0FA5 D0
   435                              <2>  %ifidni %3,ax
   435                              <2>  %assign size SIZE_SHORT
   435                              <2>  %else
   435                              <2>  %assign size SIZE_LONG
   435                              <2>  %endif
   435 0000D05D 130902              <2>  db %%end-%%beg,%6,size
   435                              <2> %%name:
   435 0000D060 304641352053484C44- <2>  db %1,' ',0
   435 0000D069 2000                <2>
   435                              <2> %%beg:
   435 0000D06B F9                  <2>  stc
   435                              <2>  %ifidni %5,cl
   435 0000D06C 880D00000000        <2>  mov [0],cl
   435 0000D072 88D1                <2>  mov cl,dl
   435 0000D074 0FA5D0              <2>  %2 %3,%4,cl
   435 0000D077 8A0D00000000        <2>  mov cl,[0]
   435                              <2>  %else
   435                              <2>  %2 %3,%4,%5
   435                              <2>  %endif
   435 0000D07D C3                  <2>  ret
   435                              <2> %%end:
   436                              <1> 	defOpShD "0FAC SHRD",shrd,ax,dx,8,TYPE_SHIFTS_R           ; 66 0FAC D0 08
   436                              <2>  %ifidni %3,ax
   436                              <2>  %assign size SIZE_SHORT
   436                              <2>  %else
   436                              <2>  %assign size SIZE_LONG
   436                              <2>  %endif
   436 0000D07E 070901              <2>  db %%end-%%beg,%6,size
   436                              <2> %%name:
   436 0000D081 304641432053485244- <2>  db %1,' ',0
   436 0000D08A 2000                <2>
   436                              <2> %%beg:
   436 0000D08C F9                  <2>  stc
   436                              <2>  %ifidni %5,cl
   436                              <2>  mov [0],cl
   436                              <2>  mov cl,dl
   436                              <2>  %2 %3,%4,cl
   436                              <2>  mov cl,[0]
   436                              <2>  %else
   436 0000D08D 660FACD008          <2>  %2 %3,%4,%5
   436                              <2>  %endif
   436 0000D092 C3                  <2>  ret
   436                              <2> %%end:
   437                              <1> 	defOpShD "0FAC SHRD",shrd,eax,edx,16,TYPE_SHIFTS_R        ;    0FAC D0 10
   437                              <2>  %ifidni %3,ax
   437                              <2>  %assign size SIZE_SHORT
   437                              <2>  %else
   437                              <2>  %assign size SIZE_LONG
   437                              <2>  %endif
   437 0000D093 060902              <2>  db %%end-%%beg,%6,size
   437                              <2> %%name:
   437 0000D096 304641432053485244- <2>  db %1,' ',0
   437 0000D09F 2000                <2>
   437                              <2> %%beg:
   437 0000D0A1 F9                  <2>  stc
   437                              <2>  %ifidni %5,cl
   437                              <2>  mov [0],cl
   437                              <2>  mov cl,dl
   437                              <2>  %2 %3,%4,cl
   437                              <2>  mov cl,[0]
   437                              <2>  %else
   437 0000D0A2 0FACD010            <2>  %2 %3,%4,%5
   437                              <2>  %endif
   437 0000D0A6 C3                  <2>  ret
   437                              <2> %%end:
   438                              <1> 	defOpShD "0FAD SHRD",shrd,ax,dx,cl,TYPE_SHIFTS_R          ; 66 0FAD D0
   438                              <2>  %ifidni %3,ax
   438                              <2>  %assign size SIZE_SHORT
   438                              <2>  %else
   438                              <2>  %assign size SIZE_LONG
   438                              <2>  %endif
   438 0000D0A7 140901              <2>  db %%end-%%beg,%6,size
   438                              <2> %%name:
   438 0000D0AA 304641442053485244- <2>  db %1,' ',0
   438 0000D0B3 2000                <2>
   438                              <2> %%beg:
   438 0000D0B5 F9                  <2>  stc
   438                              <2>  %ifidni %5,cl
   438 0000D0B6 880D00000000        <2>  mov [0],cl
   438 0000D0BC 88D1                <2>  mov cl,dl
   438 0000D0BE 660FADD0            <2>  %2 %3,%4,cl
   438 0000D0C2 8A0D00000000        <2>  mov cl,[0]
   438                              <2>  %else
   438                              <2>  %2 %3,%4,%5
   438                              <2>  %endif
   438 0000D0C8 C3                  <2>  ret
   438                              <2> %%end:
   439                              <1> 	defOpShD "0FAD SHRD",shrd,eax,edx,cl,TYPE_SHIFTS_R        ;    0FAD D0
   439                              <2>  %ifidni %3,ax
   439                              <2>  %assign size SIZE_SHORT
   439                              <2>  %else
   439                              <2>  %assign size SIZE_LONG
   439                              <2>  %endif
   439 0000D0C9 130902              <2>  db %%end-%%beg,%6,size
   439                              <2> %%name:
   439 0000D0CC 304641442053485244- <2>  db %1,' ',0
   439 0000D0D5 2000                <2>
   439                              <2> %%beg:
   439 0000D0D7 F9                  <2>  stc
   439                              <2>  %ifidni %5,cl
   439 0000D0D8 880D00000000        <2>  mov [0],cl
   439 0000D0DE 88D1                <2>  mov cl,dl
   439 0000D0E0 0FADD0              <2>  %2 %3,%4,cl
   439 0000D0E3 8A0D00000000        <2>  mov cl,[0]
   439                              <2>  %else
   439                              <2>  %2 %3,%4,%5
   439                              <2>  %endif
   439 0000D0E9 C3                  <2>  ret
   439                              <2> %%end:
   440                              <1> 
   441 0000D0EA 00                  <1> 	db 0
   442                              <1> 
   443 0000D0EB 90                  <1> 	align	4
   444                              <1> 
   445                              <1> typeMasks:
   446 0000D0EC D5080000            <1> 	dd PS_ARITH
   447 0000D0F0 D5080000            <1> 	dd PS_ARITH
   448 0000D0F4 D5080000            <1> 	dd PS_ARITH
   449 0000D0F8 C5080000            <1> 	dd PS_LOGIC
   450 0000D0FC C5080000            <1> 	dd PS_LOGIC
   451 0000D100 C5080000            <1> 	dd PS_LOGIC
   452 0000D104 01080000            <1> 	dd PS_MULTIPLY
   453 0000D108 00000000            <1> 	dd PS_DIVIDE
   454 0000D10C C5080000            <1> 	dd PS_SHIFTS_1
   455 0000D110 C5000000            <1> 	dd PS_SHIFTS_R
   456                              <1> 
   457                              <1> arithValues:
   458 0000D114 000000000100000002- <1> .bvals:	dd	0x00,0x01,0x02,0x7E,0x7F,0x80,0x81,0xFE,0xFF
   458 0000D11D 0000007E0000007F00- <1>
   458 0000D126 000080000000810000- <1>
   458 0000D12F 00FE000000FF000000  <1>
   459                              <1> 	ARITH_BYTES equ ($-.bvals)/4
   460                              <1> 
   461 0000D138 000000000100000002- <1> .wvals:	dd	0x0000,0x0001,0x0002,0x7FFE,0x7FFF,0x8000,0x8001,0xFFFE,0xFFFF
   461 0000D141 000000FE7F0000FF7F- <1>
   461 0000D14A 000000800000018000- <1>
   461 0000D153 00FEFF0000FFFF0000  <1>
   462                              <1> 	ARITH_WORDS equ ($-.wvals)/4
   463                              <1> 
   464 0000D15C 000000000100000002- <1> .dvals:	dd	0x00000000,0x00000001,0x00000002,0x7FFFFFFE,0x7FFFFFFF,0x80000000,0x80000001,0xFFFFFFFE,0xFFFFFFFF
   464 0000D165 000000FEFFFF7FFFFF- <1>
   464 0000D16E FF7F00000080010000- <1>
   464 0000D177 80FEFFFFFFFFFFFFFF  <1>
   465                              <1> 	ARITH_DWORDS equ ($-.dvals)/4
   466                              <1> 
   467                              <1> logicValues:
   468 0000D180 000000000100000055- <1> .bvals:	dd	0x00,0x01,0x55,0xAA,0x5A,0xA5,0xFF
   468 0000D189 000000AA0000005A00- <1>
   468 0000D192 0000A5000000FF0000- <1>
   468 0000D19B 00                  <1>
   469                              <1> 	LOGIC_BYTES equ ($-.bvals)/4
   470                              <1> 
   471 0000D19C 000000000100000055- <1> .wvals:	dd	0x0000,0x0001,0x5555,0xAAAA,0x5A5A,0xA5A5,0xFFFF
   471 0000D1A5 550000AAAA00005A5A- <1>
   471 0000D1AE 0000A5A50000FFFF00- <1>
   471 0000D1B7 00                  <1>
   472                              <1> 	LOGIC_WORDS equ ($-.wvals)/4
   473                              <1> 
   474 0000D1B8 000000000100000055- <1> .dvals:	dd	0x00000000,0x00000001,0x55555555,0xAAAAAAAA,0x5A5A5A5A,0xA5A5A5A5,0xFFFFFFFF
   474 0000D1C1 555555AAAAAAAA5A5A- <1>
   474 0000D1CA 5A5AA5A5A5A5FFFFFF- <1>
   474 0000D1D3 FF                  <1>
   475                              <1> 	LOGIC_DWORDS equ ($-.dvals)/4
   476                              <1> 
   477                              <1> muldivValues:
   478 0000D1D4 000000000100000002- <1> .bvals:	dd	0x00,0x01,0x02,0x3F,0x40,0x41,0x7E,0x7F,0x80,0x81,0xFE,0xFF
   478 0000D1DD 0000003F0000004000- <1>
   478 0000D1E6 0000410000007E0000- <1>
   478 0000D1EF 007F00000080000000- <1>
   478 0000D1F8 81000000FE000000FF- <1>
   478 0000D201 000000              <1>
   479                              <1> 	MULDIV_BYTES equ ($-.bvals)/4
   480                              <1> 
   481 0000D204 000000000100000002- <1> .wvals:	dd	0x0000,0x0001,0x0002,0x3FFF,0x4000,0x4001,0x7FFE,0x7FFF,0x8000,0x8001,0xFFFE,0xFFFF
   481 0000D20D 000000FF3F00000040- <1>
   481 0000D216 000001400000FE7F00- <1>
   481 0000D21F 00FF7F000000800000- <1>
   481 0000D228 01800000FEFF0000FF- <1>
   481 0000D231 FF0000              <1>
   482                              <1> 	MULDIV_WORDS equ ($-.wvals)/4
   483                              <1> 
   484 0000D234 000000000100000002- <1> .dvals:	dd	0x00000000,0x00000001,0x00000002,0x3FFFFFFF,0x40000000,0x40000001,0x7FFFFFFE,0x7FFFFFFF,0x80000000,0x80000001,0xFFFFFFFE,0xFFFFFFFF
   484 0000D23D 000000FFFFFF3F0000- <1>
   484 0000D246 004001000040FEFFFF- <1>
   484 0000D24F 7FFFFFFF7F00000080- <1>
   484 0000D258 01000080FEFFFFFFFF- <1>
   484 0000D261 FFFFFF              <1>
   485                              <1> 	MULDIV_DWORDS equ ($-.dvals)/4
   486                              <1> 
   487                              <1> shiftsValues:
   488 0000D264 000000000100000002- <1> .bvals:	dd	0x00,0x01,0x02,0x7E,0x7F,0x80,0x81,0xFE,0xFF
   488 0000D26D 0000007E0000007F00- <1>
   488 0000D276 000080000000810000- <1>
   488 0000D27F 00FE000000FF000000  <1>
   489                              <1> 	SHIFTS_BYTES equ ($-.bvals)/4
   490                              <1> 
   491 0000D288 000000000100000081- <1> .wvals:	dd	0x0000,0x0001,0x0181,0x7FFE,0x7FFF,0x8000,0x8001,0xFFFE,0xFFFF
   491 0000D291 010000FE7F0000FF7F- <1>
   491 0000D29A 000000800000018000- <1>
   491 0000D2A3 00FEFF0000FFFF0000  <1>
   492                              <1> 	SHIFTS_WORDS equ ($-.wvals)/4
   493                              <1> 
   494 0000D2AC 000000000100000001- <1> .dvals:	dd	0x00000000,0x00000001,0x00018001,0x7FFFFFFE,0x7FFFFFFF,0x80000000,0x80000001,0xFFFFFFFE,0xFFFFFFFF
   494 0000D2B5 800100FEFFFF7FFFFF- <1>
   494 0000D2BE FF7F00000080010000- <1>
   494 0000D2C7 80FEFFFFFFFFFFFFFF  <1>
   495                              <1> 	SHIFTS_DWORDS equ ($-.dvals)/4
   496                              <1> 
   497                              <1> shiftsValuesR:
   498 0000D2D0 000000000100000002- <1> .bvals:	dd	0x00,0x01,0x02,0x08
   498 0000D2D9 00000008000000      <1>
   499                              <1> 	SHIFTS_BYTES_R equ ($-.bvals)/4
   500                              <1> 
   501 0000D2E0 008000000180000002- <1> .wvals:	dd	0x8000,0x8001,0x8002,0x8010
   501 0000D2E9 80000010800000      <1>
   502                              <1> 	SHIFTS_WORDS_R equ ($-.wvals)/4
   503                              <1> 
   504 0000D2F0 000000800100008002- <1> .dvals:	dd	0x80000000,0x80000001,0x80000002,0x8000001F,0x80000020
   504 0000D2F9 0000801F0000802000- <1>
   504 0000D302 0080                <1>
   505                              <1> 	SHIFTS_DWORDS_R equ ($-.dvals)/4
   506                              <1> 
   507                              <1> 
   508                              <1> typeValues:
   509                              <1> 	;
   510                              <1> 	; Values for TYPE_ARITH
   511                              <1> 	;
   512 0000D304 09000000[14D10000]- <1> 	dd	ARITH_BYTES,arithValues,ARITH_BYTES,arithValues
   512 0000D30C 09000000[14D10000]  <1>
   513 0000D314 12000000[14D10000]- <1> 	dd	ARITH_BYTES+ARITH_WORDS,arithValues,ARITH_BYTES+ARITH_WORDS,arithValues
   513 0000D31C 12000000[14D10000]  <1>
   514 0000D324 1B000000[14D10000]- <1> 	dd	ARITH_BYTES+ARITH_WORDS+ARITH_DWORDS,arithValues,ARITH_BYTES+ARITH_WORDS+ARITH_DWORDS,arithValues
   514 0000D32C 1B000000[14D10000]  <1>
   515 0000D334 000000000000000000- <1> 	dd	0,0,0,0
   515 0000D33D 00000000000000      <1>
   516                              <1> 	;
   517                              <1> 	; Values for TYPE_ARITH1
   518                              <1> 	;
   519 0000D344 09000000[14D10000]- <1> 	dd	ARITH_BYTES,arithValues,1,arithValues
   519 0000D34C 01000000[14D10000]  <1>
   520 0000D354 12000000[14D10000]- <1> 	dd	ARITH_BYTES+ARITH_WORDS,arithValues,1,arithValues
   520 0000D35C 01000000[14D10000]  <1>
   521 0000D364 1B000000[14D10000]- <1> 	dd	ARITH_BYTES+ARITH_WORDS+ARITH_DWORDS,arithValues,1,arithValues
   521 0000D36C 01000000[14D10000]  <1>
   522 0000D374 000000000000000000- <1> 	dd	0,0,0,0
   522 0000D37D 00000000000000      <1>
   523                              <1> 	;
   524                              <1> 	; Values for TYPE_ARITH1D
   525                              <1> 	;
   526 0000D384 01000000[14D10000]- <1> 	dd	1,arithValues,ARITH_BYTES,arithValues
   526 0000D38C 09000000[14D10000]  <1>
   527 0000D394 01000000[14D10000]- <1> 	dd	1,arithValues,ARITH_BYTES+ARITH_WORDS,arithValues
   527 0000D39C 12000000[14D10000]  <1>
   528 0000D3A4 01000000[14D10000]- <1> 	dd	1,arithValues,ARITH_BYTES+ARITH_WORDS+ARITH_DWORDS,arithValues
   528 0000D3AC 1B000000[14D10000]  <1>
   529 0000D3B4 000000000000000000- <1> 	dd	0,0,0,0
   529 0000D3BD 00000000000000      <1>
   530                              <1> 	;
   531                              <1> 	; Values for TYPE_LOGIC
   532                              <1> 	;
   533 0000D3C4 07000000[80D10000]- <1> 	dd	LOGIC_BYTES,logicValues,LOGIC_BYTES,logicValues
   533 0000D3CC 07000000[80D10000]  <1>
   534 0000D3D4 0E000000[80D10000]- <1> 	dd	LOGIC_BYTES+LOGIC_WORDS,logicValues,LOGIC_BYTES+LOGIC_WORDS,logicValues
   534 0000D3DC 0E000000[80D10000]  <1>
   535 0000D3E4 15000000[80D10000]- <1> 	dd	LOGIC_BYTES+LOGIC_WORDS+LOGIC_DWORDS,logicValues,LOGIC_BYTES+LOGIC_WORDS+LOGIC_DWORDS,logicValues
   535 0000D3EC 15000000[80D10000]  <1>
   536 0000D3F4 000000000000000000- <1> 	dd	0,0,0,0
   536 0000D3FD 00000000000000      <1>
   537                              <1> 	;
   538                              <1> 	; Values for TYPE_LOGIC1
   539                              <1> 	;
   540 0000D404 07000000[80D10000]- <1> 	dd	LOGIC_BYTES,logicValues,1,logicValues
   540 0000D40C 01000000[80D10000]  <1>
   541 0000D414 0E000000[80D10000]- <1> 	dd	LOGIC_BYTES+LOGIC_WORDS,logicValues,1,logicValues
   541 0000D41C 01000000[80D10000]  <1>
   542 0000D424 15000000[80D10000]- <1> 	dd	LOGIC_BYTES+LOGIC_WORDS+LOGIC_DWORDS,logicValues,1,logicValues
   542 0000D42C 01000000[80D10000]  <1>
   543 0000D434 000000000000000000- <1> 	dd	0,0,0,0
   543 0000D43D 00000000000000      <1>
   544                              <1> 	;
   545                              <1> 	; Values for TYPE_LOGIC1D
   546                              <1> 	;
   547 0000D444 01000000[80D10000]- <1> 	dd	1,logicValues,LOGIC_BYTES,logicValues
   547 0000D44C 07000000[80D10000]  <1>
   548 0000D454 01000000[80D10000]- <1> 	dd	1,logicValues,LOGIC_BYTES+LOGIC_WORDS,logicValues
   548 0000D45C 0E000000[80D10000]  <1>
   549 0000D464 01000000[80D10000]- <1> 	dd	1,logicValues,LOGIC_BYTES+LOGIC_WORDS+LOGIC_DWORDS,logicValues
   549 0000D46C 15000000[80D10000]  <1>
   550 0000D474 000000000000000000- <1> 	dd	0,0,0,0
   550 0000D47D 00000000000000      <1>
   551                              <1> 	;
   552                              <1> 	; Values for TYPE_MULTIPLY (a superset of ARITH values)
   553                              <1> 	;
   554 0000D484 0C000000[D4D10000]- <1> 	dd	MULDIV_BYTES,muldivValues,MULDIV_BYTES,muldivValues
   554 0000D48C 0C000000[D4D10000]  <1>
   555 0000D494 18000000[D4D10000]- <1> 	dd	MULDIV_BYTES+MULDIV_WORDS,muldivValues,MULDIV_BYTES+MULDIV_WORDS,muldivValues
   555 0000D49C 18000000[D4D10000]  <1>
   556 0000D4A4 24000000[D4D10000]- <1> 	dd	MULDIV_BYTES+MULDIV_WORDS+MULDIV_DWORDS,muldivValues,MULDIV_BYTES+MULDIV_WORDS+MULDIV_DWORDS,muldivValues
   556 0000D4AC 24000000[D4D10000]  <1>
   557 0000D4B4 000000000000000000- <1> 	dd	0,0,0,0
   557 0000D4BD 00000000000000      <1>
   558                              <1> 	;
   559                              <1> 	; Values for TYPE_DIVIDE
   560                              <1> 	;
   561 0000D4C4 0C000000[D4D10000]- <1> 	dd	MULDIV_BYTES,muldivValues,MULDIV_BYTES,muldivValues
   561 0000D4CC 0C000000[D4D10000]  <1>
   562 0000D4D4 18000000[D4D10000]- <1> 	dd	MULDIV_BYTES+MULDIV_WORDS,muldivValues,MULDIV_BYTES+MULDIV_WORDS,muldivValues
   562 0000D4DC 18000000[D4D10000]  <1>
   563 0000D4E4 24000000[D4D10000]- <1> 	dd	MULDIV_BYTES+MULDIV_WORDS+MULDIV_DWORDS,muldivValues,MULDIV_BYTES+MULDIV_WORDS+MULDIV_DWORDS,muldivValues
   563 0000D4EC 24000000[D4D10000]  <1>
   564 0000D4F4 000000000000000000- <1> 	dd	0,0,0,0
   564 0000D4FD 00000000000000      <1>
   565                              <1> 	;
   566                              <1> 	; Values for TYPE_SHIFTS_1
   567                              <1> 	;
   568 0000D504 09000000[64D20000]- <1> 	dd	SHIFTS_BYTES,shiftsValues,1,shiftsValues
   568 0000D50C 01000000[64D20000]  <1>
   569 0000D514 12000000[64D20000]- <1> 	dd	SHIFTS_BYTES+SHIFTS_WORDS,shiftsValues,1,shiftsValues
   569 0000D51C 01000000[64D20000]  <1>
   570 0000D524 1B000000[64D20000]- <1> 	dd	SHIFTS_BYTES+SHIFTS_WORDS+SHIFTS_DWORDS,shiftsValues,1,shiftsValues
   570 0000D52C 01000000[64D20000]  <1>
   571 0000D534 000000000000000000- <1> 	dd	0,0,0,0
   571 0000D53D 00000000000000      <1>
   572                              <1> 	;
   573                              <1> 	; Values for TYPE_SHIFTS_R
   574                              <1> 	;
   575 0000D544 09000000[64D20000]- <1> 	dd	SHIFTS_BYTES,shiftsValues,SHIFTS_BYTES_R,shiftsValuesR
   575 0000D54C 04000000[D0D20000]  <1>
   576 0000D554 12000000[64D20000]- <1> 	dd	SHIFTS_BYTES+SHIFTS_WORDS,shiftsValues,SHIFTS_BYTES_R+SHIFTS_WORDS_R,shiftsValuesR
   576 0000D55C 08000000[D0D20000]  <1>
   577 0000D564 1B000000[64D20000]- <1> 	dd	SHIFTS_BYTES+SHIFTS_WORDS+SHIFTS_DWORDS,shiftsValues,SHIFTS_BYTES_R+SHIFTS_WORDS_R+SHIFTS_DWORDS_R,shiftsValuesR
   577 0000D56C 0D000000[D0D20000]  <1>
   578 0000D574 000000000000000000- <1> 	dd	0,0,0,0
   578 0000D57D 00000000000000      <1>
  1414                                  
  1415                                  ;
  1416                                  ; Testing finished. STOP.
  1417                                  ;
  1418                                  postFF:
  1419                                  	POST FF
  1419 0000D584 B0FF                <1>  mov al, 0x%1
  1419 0000D586 66BA9001            <1>  mov dx, POST_PORT
  1419 0000D58A EE                  <1>  out dx, al
  1420 0000D58B FA                      	cli
  1421 0000D58C F4                      	hlt
  1422 0000D58D EBF5                    	jmp postFF
  1423                                  
  1424                                  ;
  1425                                  ; Default exception handler and error routine
  1426                                  ;
  1427                                  DefaultExcHandler:
  1428                                  error:
  1429                                  	; CLI and HLT are privileged instructions, don't use them in ring3
  1430 0000D58F 668CC8                  	mov ax, cs
  1431                                  	; when in real mode, the jnz will be decoded together with test as
  1432                                  	; "test eax,0xfe750007" (66A9070075FE)
  1433 0000D592 66A90700                	test ax, 7     ; 66 A9 07 00
  1434 0000D596 75FE                    .ring3: jnz .ring3 ; 75 FE
  1435 0000D598 FA                      	cli
  1436 0000D599 F4                      	hlt
  1437 0000D59A EBF3                    	jmp error
  1438                                  
  1439                                  
  1440                                  LPTports:
  1441 0000D59C BC03                    	dw   0x3BC
  1442 0000D59E 7803                    	dw   0x378
  1443 0000D5A0 7802                    	dw   0x278
  1444                                  COMTHRports:
  1445 0000D5A2 F803                    	dw   0x3F8
  1446 0000D5A4 F802                    	dw   0x2F8
  1447                                  COMLSRports:
  1448 0000D5A6 FD03                    	dw   0x3FD
  1449 0000D5A8 FD02                    	dw   0x2FD
  1450                                  signedWord:
  1451 0000D5AA 80                      	db   0x80
  1452                                  signedByte:
  1453 0000D5AB 80                      	db   0x80
  1454                                  
  1455                                  ;
  1456                                  ;   Fill the remaining space with NOPs until we get to target offset 0xFFF0.
  1457                                  ;
  1458 0000D5AC 90<rept>                	times 0xfff0-($-$$) nop
  1459                                  
  1460                                  
  1461                                  bits 16
  1462                                  
  1463                                  resetVector:
  1464 0000FFF0 EA[4500]00F0            	jmp   C_SEG_REAL:cpuTest ; 0000FFF0
  1465                                  
  1466                                  release:
  1467 0000FFF5 3F3F2F3F3F2F313900      	db    RELEASE,0       ; 0000FFF5  release date
  1468 0000FFFE FC                      	db    0xFC            ; 0000FFFE  FC (Model ID byte)
  1469 0000FFFF 00                      	db    0x00            ; 0000FFFF  00 (checksum byte, unused)
